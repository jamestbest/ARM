KMD
00000000:             ; start
00000000: E28F00F4    ;     adr R0, hello 
00000004: EF000003    ;     swi 3
00000008:             ; 
00000008: E28F0E11    ;     adr R0, ask
0000000C: EF000003    ;     swi 3
00000010:             ; 
00000010: EB000030    ;     bl getname
00000014:             ; 
00000014: EB000028    ;     bl sayname
00000018:             ; 
00000018: E28F0083    ;     adrl r0, name
0000001C: E2800C01    ; 
00000020: E28F1022    ;     adrl r1, sudoname
00000024: E2811C01    ; 
00000028: EB00000B    ;     bl rstreq
0000002C:             ; 
0000002C: EB000002    ;     bl outputres
00000030:             ; 
00000030: E28F00D2    ;     adr R0, goodbye
00000034: EF000003    ;     swi 3
00000038:             ; 
00000038: EF000002    ;     swi 2
0000003C:             ; 
0000003C:             ; outputres
0000003C:             ;     ;;now that we have compared the strings we can output if they are the same or not
0000003C:             ;     ;; only input is in r0 and it is 1 for eq and 0 for neq
0000003C: E3500000    ;     cmp r0, #0
00000040: 0A000002    ;     beq outfail
00000044:             ; outsucc
00000044: E28F0F41    ;     adrl r0, success
00000048: EF000003    ;     swi 3
0000004C: EA000001    ;     b outend
00000050:             ; outfail
00000050: E28F0F47    ;     adrl r0, fail
00000054: EF000003    ;     swi 3
00000058:             ; outend
00000058: E1A0F00E    ;     mov r15, r14
0000005C:             ; 
0000005C:             ; rstreq
0000005C:             ;     ;;adr of first string is in R0
0000005C:             ;     ;;adr of second string is in R1
0000005C:             ;     ;;The result (0 for neq and 1 for eq) will be stored in R0
0000005C:             ; 
0000005C:             ;     ;;while not the end of either string
0000005C:             ;     ;;  cmp the string at that position
0000005C:             ;     ;;  if not eq then return 0 else continue
0000005C:             ;     ;;cmp if the strings are of the same length i.e. if one has stopped by the other has not
0000005C: E3A04000    ;     mov r4, #0
00000060:             ; rstreqloop
00000060:             ;     ;r4 stores the index offset
00000060: E7D05004    ;     ldrb r5, [r0, r4]
00000064: E7D16004    ;     ldrb r6, [r1, r4]
00000068:             ; 
00000068: E3550000    ;     cmp r5, #0
0000006C: 0A000007    ;     beq endstra
00000070: E3560000    ;     cmp r6, #0
00000074: 0A00000A    ;     beq endstrb
00000078:             ; 
00000078: E2844001    ;     add r4, r4, #1
0000007C:             ; 
0000007C: E1550006    ;     cmp r5, r6
00000080: 1A000000    ;     bne rstrneq
00000084: EAFFFFF5    ;     b rstreqloop
00000088:             ; 
00000088:             ; rstrneq
00000088: E3A00000    ;     mov r0, #0
0000008C: E1A0F00E    ;     mov r15, r14;;ret
00000090:             ; 
00000090:             ; endstra
00000090:             ;     ;;we have reached the end of string a and should return True if str b is also ended
00000090: E7D06004    ;     ldrb r6, [r0, r4]
00000094: E3A00000    ;     mov r0, #0
00000098: E3560000    ;     cmp r6, #0
0000009C: 03A00001    ;     moveq r0, #1
000000A0: EA000004    ;     b rstreqend
000000A4:             ; 
000000A4:             ; endstrb
000000A4:             ;     ;;we have reached the end of string b and so should return 1 if str a has also ended
000000A4: E7D15004    ;     ldrb r5, [r1, r4]
000000A8: E3A00000    ;     mov r0, #0
000000AC: E3550000    ;     cmp r5, #0
000000B0: 03A00001    ;     moveq r0, #1
000000B4: EAFFFFFF    ;     b rstreqend
000000B8:             ; 
000000B8:             ; rstreqend
000000B8: E1A0F00E    ;     mov r15, r14
000000BC:             ; 
000000BC:             ; sayname
000000BC: E28F0075    ;     adr r0, respond
000000C0: EF000003    ;     swi 3
000000C4: E28F00D7    ;     adr r0, name
000000C8: EF000003    ;     swi 3
000000CC: E28F0074    ;     adr r0, newline
000000D0: EF000003    ;     swi 3
000000D4: E1A0F00E    ;     mov r15, r14
000000D8:             ;     
000000D8:             ; 
000000D8:             ; getname
000000D8: E28F80C3    ;     adr r8, name 
000000DC:             ; getnameloop
000000DC: EF000001    ;     swi 1
000000E0: E3500021    ;     cmp r0, #33 
000000E4: 0A000001    ;     beq getnameend
000000E8:             ; 
000000E8: E4C80001    ;     strb r0, [R8], #1
000000EC:             ; 
000000EC: EAFFFFFA    ;     b getnameloop
000000F0:             ; getnameend
000000F0: E3A00000    ;     mov r0, #0
000000F4: E4C80001    ;     strb r0, [R8], #1
000000F8: E1A0F00E    ;     mov r15, r14
000000FC:             ; 
000000FC: 48 65 6C 6C ; hello defb "Hello world!\n", 0
00000100: 6F 20 77 6F ; 
00000104: 72 6C 64 21 ; 
00000108: 0A 00       ; 
0000010A: 47 6F 6F 64 ; goodbye defb "Goodbye cruel world!\n", 0
0000010E: 62 79 65 20 ; 
00000112: 63 72 75 65 ; 
00000116: 6C 20 77 6F ; 
0000011A: 72 6C 64 21 ; 
0000011E: 0A 00       ; 
00000120: 50 6C 65 61 ; ask defb "Please enter your name:\n", 0
00000124: 73 65 20 65 ; 
00000128: 6E 74 65 72 ; 
0000012C: 20 79 6F 75 ; 
00000130: 72 20 6E 61 ; 
00000134: 6D 65 3A 0A ; 
00000138: 00          ; 
00000139: 59 6F 75 72 ; respond defb "Your name is: ", 0
0000013D: 20 6E 61 6D ; 
00000141: 65 20 69 73 ; 
00000145: 3A 20 00    ; 
00000148: 0A 00       ; newline defb "\n", 0
0000014A: 6A 61 6D 65 ; sudoname defb "james", 0
0000014E: 73 00       ; 
00000150: 43 6F 6E 67 ; success defb "Congrats you are the correct user!\n", 0
00000154: 72 61 74 73 ; 
00000158: 20 79 6F 75 ; 
0000015C: 20 61 72 65 ; 
00000160: 20 74 68 65 ; 
00000164: 20 63 6F 72 ; 
00000168: 72 65 63 74 ; 
0000016C: 20 75 73 65 ; 
00000170: 72 21 0A 00 ; 
00000174: 55 6E 66 6F ; fail defb "Unfortunately you are not the correct user :(\n", 0
00000178: 72 74 75 6E ; 
0000017C: 61 74 65 6C ; 
00000180: 79 20 79 6F ; 
00000184: 75 20 61 72 ; 
00000188: 65 20 6E 6F ; 
0000018C: 74 20 74 68 ; 
00000190: 65 20 63 6F ; 
00000194: 72 72 65 63 ; 
00000198: 74 20 75 73 ; 
0000019C: 65 72 20 3A ; 
000001A0: 28 0A 00    ; 
000001A3:             ; name defs 30

Symbol Table: Labels
: start                             00000000  Local -- ARM
: outputres                         0000003C  Local -- ARM
: outsucc                           00000044  Local -- ARM
: outfail                           00000050  Local -- ARM
: outend                            00000058  Local -- ARM
: rstreq                            0000005C  Local -- ARM
: rstreqloop                        00000060  Local -- ARM
: rstrneq                           00000088  Local -- ARM
: endstra                           00000090  Local -- ARM
: endstrb                           000000A4  Local -- ARM
: rstreqend                         000000B8  Local -- ARM
: sayname                           000000BC  Local -- ARM
: getname                           000000D8  Local -- ARM
: getnameloop                       000000DC  Local -- ARM
: getnameend                        000000F0  Local -- ARM
: hello                             000000FC  Local -- ARM
: goodbye                           0000010A  Local -- ARM
: ask                               00000120  Local -- ARM
: respond                           00000139  Local -- ARM
: newline                           00000148  Local -- ARM
: sudoname                          0000014A  Local -- ARM
: success                           00000150  Local -- ARM
: fail                              00000174  Local -- ARM
: name                              000001A3  Local -- ARM
