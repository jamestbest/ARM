KMD
00000000:             ; ;;  This is my second rendition of JCGOL in ARM assembly for Komodo
00000000:             ; ;;  
00000000:             ; ;;  This will attempt to follow the ARM 32bit calling convention 
00000000:             ; ;;      R0-3 are argument registers, scratch
00000000:             ; ;;      R4-10 are local variable registers and should be saved before use in a function
00000000:             ; ;;      R11 - FP
00000000:             ; ;;      R12 - IPC
00000000:             ; ;;      R13 - SP
00000000:             ; ;;      R14 - LR
00000000:             ; ;;      R15 - PC
00000000:             ; ;;
00000000:             ; ;;  The plan
00000000:             ; ;;  - Create a simple `heap` allocator for the grid and input
00000000:             ; ;;  - Ask the user
00000000:             ; ;;      |-Use default? Y - skip below
00000000:             ; ;;      |-dims of the grid
00000000:             ; ;;      |   `-Will need a way to get a string input and convert to an integer (make sure to cat
                      ; ch -ve)
00000000:             ; ;;      |-slow mode
00000000:             ; ;;      `-erase mode
00000000:             ; ;;  - ask for generation mode
00000000:             ; ;;      |-If random ask for seed
00000000:             ; ;;      |   `-For generation roll the seed to create a pseudorandom value for each `pixel`
00000000:             ; ;;      `-If draw then get them to draw the grid one `pixel` at a time
00000000:             ; ;;  - Allocate two grids, the pointers to which will swap after a frame. One is used to count t
                      ; he neighbours the other for the new cell value.
00000000:             ; ;;  - loop
00000000:             ; ;;      |-count neighbours
00000000:             ; ;;      |-update inactive grid
00000000:             ; ;;      |-swap grids
00000000:             ; ;;      |-draw active grid
00000000:             ; ;;      `-goto loop
00000000:             ; 
00000000:             ; ;;SINGLE STEP mode allows you to save the current state of the board into a list, also give it 
                      ; a name
00000000:             ; ;;At the main menu you can load a saved grid
00000000:             ; 
00000000:             ; ;;Grid info struct
00000000:             ; ;;  - SaveInfoStruct* array
00000000:             ; ;;  - int max size of arr
00000000:             ; ;;  - int current position in arr
00000000:             ; 
00000000:             ; ;;Save info struct
00000000:             ; ;;  -address of grid [4 BYTES]
00000000:             ; ;;  -char* to the name [4 BYTES]
00000000:             ; ;;  -width of grid (1 BYTE)
00000000:             ; ;;  -height of grid (1 BYTE)
00000000:             ; 
00000000:             ; 
00000000:             ; ;;  CURRENT ISSUES/TODOS
00000000:             ; ;;  |-More testing of malloc & free need to be done
00000000:             ; ;;  `-Think about minimising the fragmentation of the heap - find the best free block instead o
                      ; f the first
00000000:             ;   
00000000:             ; max_addr    EQU  0x100000
00000000:             ; stack_size  EQU  0x10000
00000000:             ; nl          EQU  10
00000000:             ; backspace   EQU  8
00000000:             ; minBuffSize EQU  8
00000000:             ; enter       EQU  nl
00000000:             ; minSaveSize EQU  8
00000000:             ; sizeofSaveI EQU  12 ;;10 bytes + 2 bytes of padding to align to 4 byte boundry for arr
00000000:             ; 
00000000: EA000017    ; b _start
00000004:             ; 
00000004:             ; align
00000004:             ; ;;[[note]]
00000004:             ; ;;ldr instructions out of range (for pc-relative offsets?) of ldr (-4096/+4095?) use below
00000004:             ; ;;  adrl Rx, label
00000004:             ; ;;  ldr  Rx, [Rx]
00000004: 00010000    ; heaphead        defw 0x10000 ;;default start changed to addr of heapstart 
00000008:             ; 
00000008:             ; ;;Integer defs
00000008: FFFFFFFF    ; offsets         defw -1,-1,-1,0,-1,1,0,-1,0,1,1,-1,1,0,1,1 ;;[[-1,-1],[-1,0],[-1,1],[0,-1],[0,1
0000000C: FFFFFFFF    ; ],[1,-1],[1,0],[1,1]]
00000010: FFFFFFFF    ; 
00000014: 00000000    ; 
00000018: FFFFFFFF    ; 
0000001C: 00000001    ; 
00000020: 00000000    ; 
00000024: FFFFFFFF    ; 
00000028: 00000000    ; 
0000002C: 00000001    ; 
00000030: 00000001    ; 
00000034: FFFFFFFF    ; 
00000038: 00000001    ; 
0000003C: 00000000    ; 
00000040: 00000001    ; 
00000044: 00000001    ; 
00000048:             ; 
00000048:             ; ;;Grid addresses
00000048: 00000000    ; gridA           defw 0
0000004C: 00000000    ; gridB           defw 0
00000050:             ; 
00000050:             ; ;;options
00000050: 00          ; erase_b         defb 0
00000051: 00          ; slow_b          defb 0
00000052: 00          ; step_b          defb 0
00000053: 12          ; width           defb 18
00000054: 12          ; height          defb 18
00000055: 01          ; range_min       defb 1
00000056: 1E          ; range_max       defb 30
00000057: 19          ; maxitters       defb 25
00000058: 01          ; drawerase       defb 1  ;;Should the draw mode erase previous
00000059:             ; 
00000059: 58          ; alive_c         defb 'X'
0000005A: 2D          ; dead_c          defb '-'
0000005B: 23          ; ptr_c           defb '#'
0000005C:             ; 
0000005C:             ; ;;default options
0000005C: 00          ; erase_b_d       defb 0
0000005D: 00          ; slow_b_d        defb 0
0000005E: 01          ; step_b_d        defb 1
0000005F: 12          ; width_d         defb 18
00000060: 12          ; height_d        defb 18
00000061:             ; 
00000064:             ; align
00000064:             ; 
00000064:             ; _start
00000064:             ;     ;;prepare the stack
00000064: E3A0D601    ;     ldr R13, =max_addr
00000068: E3A0E000    ;     mov R14, #0 ;; allow for `returning` from _start
0000006C: E92D4000    ;     push {R14}
00000070:             ; 
00000070:             ;     ;;[[temp]] clean the heap (zero out)
00000070: EB000294    ;     bl heapclean
00000074:             ; 
00000074:             ;     ;;setup heap
00000074: E28F0FF2    ;     adrl R0, heapstart
00000078: E2800A02    ; 
0000007C: E50F0080    ;     str R0, heaphead    ;;place address of last instruction (heapstart label) into the heaphead
                      ;  variable
00000080: EB0004FD    ;     bl setupHeap
00000084:             ; 
00000084: EB000002    ;     bl main
00000088:             ; 
00000088: E8BD4000    ;     pop {R14}
0000008C: EF000002    ;     swi 2
00000090: E1A0F00E    ;     mov R15, R14
00000094:             ; 
00000094:             ; main
00000094: E92D4FF0    ;     push {fp, R14, R4-R10} ;;8 registers saved
00000098:             ; 
00000098: E28DB01C    ;     add fp, sp, #28 ;;(r - 1) * 4
0000009C: E24DD010    ;     sub sp, sp, #16 ;;reserve 12 bytes (4 bytes to align?) on the stack for the pointer to the 
                      ; list of saved grids + the maxSize of the array
000000A0:             ; 
000000A0:             ;     ;;The gridInfo struct
000000A0:             ;     ;;set the current position of the pointer
000000A0: E3A00000    ;     mov R0, #0
000000A4: E58D0008    ;     str R0, [sp, #8]
000000A8:             ; 
000000A8:             ;     ;;set the number of elements(save info structs) that can be stored in the array at the mome
                      ; nt
000000A8: E3A00008    ;     ldr R0, =minSaveSize
000000AC: E58D0004    ;     str R0, [sp, #4]
000000B0:             ; 
000000B0:             ;     ;;minsize * sizeof(SaveInfo) = number of bytes needed for the array
000000B0: E3A0100C    ;     ldr R1, =sizeofSaveI
000000B4: E0000190    ;     mul R0, R0, R1
000000B8: EB0004FB    ;     bl malloc ;;allocate the array on the heap
000000BC:             ; 
000000BC: E58D0000    ;     str R0, [sp, #0] ;;store the address
000000C0:             ; 
000000C0:             ; mainmenu
000000C0: E28F0E56    ;     adrl R0, welcomemsg
000000C4: E2800A01    ; 
000000C8: EF000003    ;     swi 3
000000CC:             ; 
000000CC: E28F0085    ;     adrl R0, welcome2msg
000000D0: E2800C15    ; 
000000D4: EF000003    ;     swi 3
000000D8:             ; 
000000D8:             ; mainchoice
000000D8: EF000001    ;     swi 1
000000DC: E3800020    ;     orr R0, R0, #32
000000E0: E1A04000    ;     mov R4, R0
000000E4:             ; 
000000E4:             ;     ;;These should really be functions
000000E4:             ; 
000000E4: E354006E    ;     cmp R4, #'n' ;;new board generation
000000E8: 0A00016F    ;     beq newboard
000000EC:             ; 
000000EC: E354006C    ;     cmp R4, #'l' ;;load a saved board
000000F0: E1A0000D    ;     mov R0, sp ;;load the info ptr
000000F4: 0A000176    ;     beq loadboard
000000F8:             ; 
000000F8: E3540068    ;     cmp R4, #'h'
000000FC: 0A000165    ;     beq printhelp
00000100:             ; 
00000100: E3540073    ;     cmp R4, #'s'
00000104: 0A00003D    ;     beq settingsmenu
00000108:             ; 
00000108: E3540071    ;     cmp R4, #'q' ;;quit
0000010C: 0A000035    ;     beq mainEnd
00000110:             ; 
00000110: E28F0D56    ;     adrl R0, mainchoicefail
00000114: EF000003    ;     swi 3
00000118:             ; 
00000118: EAFFFFEE    ;     b mainchoice
0000011C:             ; 
0000011C:             ;     ;;R4 will hold the active grid, R5 will hold the passive grid
0000011C:             ;     ;;Active is used to count neighbours, passive is used to place updated values in 
0000011C:             ;     ;;either can be drawn, just drawn in a different position
0000011C:             ; 
0000011C:             ; 
0000011C:             ; ;;update loop
0000011C:             ; ;;    - loop
0000011C:             ; ;;      |-count neighbours
0000011C:             ; ;;      |-update inactive grid
0000011C:             ; ;;      |-swap grids
0000011C:             ; ;;      |-draw grid
0000011C:             ; ;;      |-[slow?] - slow() - loops for some time to increase waiting time
0000011C:             ; ;;      |-[step?] - step() - waits for input, s and q will have effects
0000011C:             ; ;;      |-[erase?] - erase() - \b until grid is gone
0000011C:             ; ;;      `-goto loop
0000011C:             ; mainloopstart
0000011C:             ;     ;;load the slow, step, and erase booleans
0000011C: E55F60D3    ;     ldrb R6, slow_b
00000120: E55F70D8    ;     ldrb R7, erase_b
00000124: E55F80DA    ;     ldrb R8, step_b
00000128:             ; 
00000128: E51F40E8    ;     ldr R4, gridA
0000012C: E51F50E8    ;     ldr R5, gridB
00000130:             ; 
00000130:             ;     ;;(width * height) * 2 + 1 + height
00000130: E55F00E5    ;     ldrb R0, width
00000134: E55F10E8    ;     ldrb R1, height
00000138: E0000190    ;     mul R0, R0, R1
0000013C: E1A00080    ;     mov R0, R0, lsl #1
00000140: E2800001    ;     add R0, R0, #1
00000144: E0800001    ;     add R0, R0, R1
00000148: E1A09000    ;     mov R9, R0      ;;R9 holds the itterations for erase, so it doesn't have to calc it every t
                      ; ime
0000014C:             ; 
0000014C: E3A0A000    ;     mov R10, #0 ;;This will hold the number of itterations, when it reaches 
00000150:             ; 
00000150:             ; mainloop
00000150: E55F0101    ;     ldrb R0, maxitters ;;run out of registers @-@
00000154: E15A0000    ;     cmp R10, R0
00000158: E28AA001    ;     add R10, R10, #1
0000015C: 1A000004    ;     bne mainloopcont
00000160:             ; 
00000160: E3A0A000    ;     mov R10, #0
00000164:             ; 
00000164: E28F00CA    ;     adrl R0, mainloopittsmsg
00000168: E2800C19    ; 
0000016C: EF000003    ;     swi 3
00000170:             ; 
00000170: EA000006    ;     b mainloopdostep
00000174:             ; 
00000174:             ; mainloopcont
00000174: E1A00004    ;     mov R0, R4
00000178: E1A01005    ;     mov R1, R5
0000017C: EB000462    ;     bl updategrid
00000180:             ; 
00000180: E1A00004    ;     mov R0, R4
00000184: EB000357    ;     bl drawgrid
00000188:             ; 
00000188: E3580001    ;     cmp R8, #1
0000018C: 1A000009    ;     bne mainloopskipstep
00000190:             ; 
00000190:             ; mainloopdostep
00000190: E1A0000D    ;     mov R0, sp
00000194: E1A01004    ;     mov R1, R4 ;;give the active grid
00000198: EB0001A7    ;     bl step
0000019C: E3500000    ;     cmp R0, #0
000001A0: 0A000004    ;     beq mainloopskipstep
000001A4:             ;     
000001A4:             ;     ;;If R0 is #1 then free and go to the main menu
000001A4:             ;     ;;free the current grid
000001A4: E51F0164    ;     ldr R0, gridA
000001A8: EB0004EB    ;     bl free
000001AC: E51F0168    ;     ldr R0, gridB
000001B0: EB0004E9    ;     bl free
000001B4:             ; 
000001B4: EAFFFFC1    ;     b mainmenu
000001B8:             ; 
000001B8:             ; mainloopskipstep
000001B8: E3560001    ;     cmp R6, #1
000001BC: 0B000236    ;     bleq slow
000001C0:             ; 
000001C0: E3570001    ;     cmp R7, #1
000001C4: 01A00009    ;     moveq R0, R9
000001C8: 0B00022B    ;     bleq erase
000001CC:             ; 
000001CC: E1A00004    ;     mov R0, R4
000001D0: E1A04005    ;     mov R4, R5
000001D4: E1A05000    ;     mov R5, R0 ;;SWAP the active and passive
000001D8:             ; 
000001D8: EAFFFFDC    ;     b mainloop
000001DC:             ; 
000001DC:             ; gridFail
000001DC: E28F004B    ;     adrl R0, gridfailmsg
000001E0: E2800C1B    ; 
000001E4: EF000003    ;     swi 3
000001E8:             ; 
000001E8:             ; mainEnd
000001E8:             ;     ;;[[todo]]need to free all of the memory, saved grids (grids + names) + current grids
000001E8:             ; 
000001E8: E28F0076    ;     adrl R0, mainendmsg
000001EC: E2800C16    ; 
000001F0: EF000003    ;     swi 3
000001F4:             ; 
000001F4: E24BD018    ;     sub sp, fp, #24 ;;???
000001F8: E8BD47F0    ;     pop {R14, R4-R10}
000001FC: E1A0F00E    ;     mov R15, R14
00000200:             ; 
00000200:             ; settingsmenu
00000200:             ; ;;https://media.giphy.com/media/jOpLbiGmHR9S0/giphy.gif
00000200:             ; ;;I think there's a limit on the defined string length
00000200: E28F00BD    ;     adrl R0, s_m1
00000204: E2800C1D    ; 
00000208: EF000003    ;     swi 3
0000020C:             ; 
0000020C: E28F0042    ;     adrl R0, s_m2
00000210: E2800C1E    ; 
00000214: EF000003    ;     swi 3
00000218:             ;     
00000218: E28F009A    ;     adrl R0, s_m3
0000021C: E2800C1E    ; 
00000220: EF000003    ;     swi 3
00000224:             ; 
00000224: E28F003F    ;     adrl R0, s_m4
00000228: E2800C1F    ; 
0000022C: EF000003    ;     swi 3
00000230:             ; 
00000230:             ; changesetting
00000230: E28F008E    ;     adrl R0, s_m
00000234: E2800C1F    ; 
00000238: EF000003    ;     swi 3
0000023C:             ; 
0000023C:             ; changesettingget
0000023C: E3A0000A    ;     ldr R0, =enter
00000240: E3A01002    ;     mov R1, #2
00000244: E3A02001    ;     mov R2, #1
00000248: EB00027F    ;     bl getstring
0000024C:             ; 
0000024C: E1A05000    ;     mov R5, R0
00000250:             ; 
00000250: EB000233    ;     bl strtoi
00000254:             ; 
00000254: E1A04000    ;     mov R4, R0
00000258: E1A06001    ;     mov R6, R1
0000025C: E1A00005    ;     mov R0, R5
00000260:             ; 
00000260: EB0004BD    ;     bl free
00000264:             ; 
00000264: EB000171    ;     bl newline
00000268:             ; 
00000268: E3560001    ;     cmp R6, #1
0000026C: 0AFFFF93    ;     beq mainmenu
00000270:             ; 
00000270: E3560000    ;     cmp R6, #0
00000274: 0A000003    ;     beq changesettingscont
00000278:             ; 
00000278:             ; changesettingserr
00000278: E28F00A2    ;     adrl R0, s_m_err
0000027C: E2800C1F    ; 
00000280: EF000003    ;     swi 3
00000284:             ; 
00000284: EAFFFFEC    ;     b changesettingget
00000288:             ; 
00000288:             ; changesettingscont
00000288: E3540007    ;     cmp R4, #7
0000028C: CAFFFFF9    ;     bgt changesettingserr
00000290:             ; 
00000290:             ;     ;;now we have the index we can print the current value and prompt for a new one then loop b
                      ; ack up to the getsetting
00000290: E3540000    ;     cmp R4, #0
00000294: 0A00005C    ;     beq changestep
00000298:             ; 
00000298: E3540001    ;     cmp R4, #1
0000029C: 0A000060    ;     beq changeslow
000002A0:             ; 
000002A0: E3540002    ;     cmp R4, #2
000002A4: 0A000064    ;     beq changeerase
000002A8:             ; 
000002A8: E3540003    ;     cmp R4, #3
000002AC: 0A000090    ;     beq changedims
000002B0:             ; 
000002B0: E3540004    ;     cmp R4, #4
000002B4: 0A000095    ;     beq changerange
000002B8:             ; 
000002B8: E3540005    ;     cmp R4, #5
000002BC: 0A00009A    ;     beq changeicons
000002C0:             ; 
000002C0: E3540006    ;     cmp R4, #6
000002C4: 0A0000C5    ;     beq changeitter
000002C8:             ; 
000002C8: E3540007    ;     cmp R4, #7
000002CC: 0A0000EA    ;     beq changedrawerase
000002D0:             ; 
000002D0:             ; changearr
000002D0:             ; ;;generic for changedims and change range
000002D0:             ; ;;INP in R0 is addr. for x
000002D0:             ; ;;INP in R1 is addr. for y
000002D0:             ; ;;INP in R2 is boolean for require x < y. 1 for require
000002D0: E92D41F0    ;     push {R14, R4-R8}
000002D4:             ; 
000002D4: E1A06000    ;     mov R6, R0
000002D8: E1A07001    ;     mov R7, R1
000002DC: E1A08002    ;     mov R8, R2
000002E0:             ; 
000002E0: EB000034    ;     bl printdims
000002E4:             ; 
000002E4:             ; changearrget
000002E4: E28F0067    ;     adrl R0, currentaskx
000002E8: E2800A02    ; 
000002EC: EF000003    ;     swi 3
000002F0:             ; 
000002F0: EB000017    ;     bl changearrgetvalidint
000002F4: E1A04000    ;     mov R4, R0
000002F8:             ; 
000002F8: EB00014C    ;     bl newline
000002FC:             ; 
000002FC: E28F0063    ;     adrl R0, currentasky
00000300: E2800A02    ; 
00000304: EF000003    ;     swi 3
00000308:             ; 
00000308: EB000011    ;     bl changearrgetvalidint
0000030C: E1A05000    ;     mov R5, R0
00000310:             ; 
00000310: EB000146    ;     bl newline
00000314:             ; 
00000314: E3580001    ;     cmp R8, #1
00000318: 1A000006    ;     bne changearrset
0000031C:             ; 
0000031C: E1540005    ;     cmp R4, R5
00000320: AA000000    ;     bge changearrsizeerr
00000324:             ; 
00000324: EA000003    ;     b changearrset
00000328:             ; 
00000328:             ; changearrsizeerr
00000328: E28F00B2    ;     adrl R0, changearrsizmsg
0000032C: E2800A02    ; 
00000330: EF000003    ;     swi 3
00000334:             ; 
00000334: EAFFFFEA    ;     b changearrget
00000338:             ; 
00000338:             ; changearrset
00000338:             ;     ;;now we have the two valid values so str them back
00000338: E5464000    ;     strb R4, [R6]
0000033C: E5475000    ;     strb R5, [R7] 
00000340:             ; 
00000340: E1A00006    ;     mov R0, R6
00000344: E1A01007    ;     mov R1, R7
00000348:             ; 
00000348: EB00001A    ;     bl printdims
0000034C:             ; 
0000034C:             ; changearrend
0000034C: E8BD41F0    ;     pop {R14, R4-R8}
00000350: E1A0F00E    ;     mov R15, R14
00000354:             ; 
00000354:             ; ;;And you thought the naming couldn't get worse \(*0*)/
00000354:             ; changearrgetvalidint ;;basically an inner function
00000354:             ; ;;INP --
00000354:             ; ;;OUT in R0 is the gotten value
00000354: E92D41F0    ;     push {R14, R4-R8}
00000358:             ; changearrgetvalidintget
00000358: E3A0000A    ;     ldr R0, =enter
0000035C: E3A01003    ;     mov R1, #3
00000360: E3A02001    ;     mov R2, #1
00000364: EB000238    ;     bl getstring
00000368:             ; 
00000368: E1A04000    ;     mov R4, R0 ;;save the string to free
0000036C:             ; 
0000036C: EB0001EC    ;     bl strtoi
00000370:             ; 
00000370: E1A05000    ;     mov R5, R0 ;;save the int value
00000374: E1A06001    ;     mov R6, R1 ;;save err code
00000378:             ; 
00000378: E1A00004    ;     mov R0, R4
0000037C: EB000476    ;     bl free
00000380:             ; 
00000380: E3560000    ;     cmp R6, #0
00000384: 0A000004    ;     beq changearrgetvalidintcont
00000388:             ; 
00000388:             ; changearrgetvalidinterr
00000388: EB000128    ;     bl newline
0000038C:             ; 
0000038C: E28F0FFE    ;     adrl R0, changearrverr_m
00000390: E2800B06    ; 
00000394: EF000003    ;     swi 3
00000398:             ; 
00000398: EAFFFFEE    ;     b changearrgetvalidintget
0000039C:             ; 
0000039C:             ; changearrgetvalidintcont
0000039C:             ;     ;;we now have an int value, need to do bounds checks
0000039C: E3550000    ;     cmp R5, #0
000003A0: DAFFFFF8    ;     ble changearrgetvalidinterr
000003A4:             ; 
000003A4: E35500FF    ;     cmp R5, #255
000003A8: CAFFFFF6    ;     bgt changearrgetvalidinterr
000003AC:             ; 
000003AC:             ; changearrgetvalidintend
000003AC: E1A00005    ;     mov R0, R5
000003B0:             ; 
000003B0: E8BD41F0    ;     pop {R14, R4-R8}
000003B4: E1A0F00E    ;     mov R15, R14
000003B8:             ; 
000003B8:             ; printdims
000003B8:             ; ;;INP in R0 is addr. for x
000003B8:             ; ;;INP in R1 is addr. for y
000003B8:             ; ;;(_, _)
000003B8:             ;     
000003B8: E1A02000    ;     mov R2, R0
000003BC: E1A03001    ;     mov R3, R1
000003C0:             ; 
000003C0: E28F0096    ;     adrl R0, currentDims
000003C4: E2800C1E    ; 
000003C8: EF000003    ;     swi 3
000003CC:             ; 
000003CC: E28F00B7    ;     adrl R0, bracket_open
000003D0: E2800C1E    ; 
000003D4: EF000003    ;     swi 3
000003D8:             ; 
000003D8: E5520000    ;     ldrb R0, [R2]
000003DC: EF000004    ;     swi 4
000003E0:             ; 
000003E0: E28F00A5    ;     adrl R0, comma_space
000003E4: E2800C1E    ; 
000003E8: EF000003    ;     swi 3
000003EC:             ; 
000003EC: E5530000    ;     ldrb R0, [R3]
000003F0: EF000004    ;     swi 4
000003F4:             ; 
000003F4: E28F0FA5    ;     adrl R0, bracket_close
000003F8: E2800B07    ; 
000003FC: EF000003    ;     swi 3
00000400:             ; 
00000400: E3A0000A    ;     ldr R0, =nl
00000404: EF000000    ;     swi 0
00000408:             ; 
00000408: E1A0F00E    ;     mov R15, R14
0000040C:             ; 
0000040C:             ; changestep
0000040C: E24F00B6    ;     adrl R0, step_b_d
00000410: E2400C03    ; 
00000414: E28F1039    ;     adrl R1, currentstep
00000418: E2811C1E    ; 
0000041C:             ; 
0000041C: EB00000B    ;     bl changebool
00000420:             ; 
00000420: EAFFFF82    ;     b changesetting
00000424:             ; 
00000424:             ; changeslow
00000424: E24F00CF    ;     adrl R0, slow_b_d
00000428: E2400C03    ; 
0000042C: E28F100E    ;     adrl R1, currentslow
00000430: E2811C1E    ; 
00000434:             ; 
00000434: EB000005    ;     bl changebool
00000438:             ; 
00000438: EAFFFF7C    ;     b changesetting
0000043C:             ; 
0000043C:             ; changeerase
0000043C: E24F0FFA    ;     adrl R0, erase_b_d
00000440: E28F1003    ;     adrl R1, currenterase
00000444: E2811C1E    ; 
00000448:             ; 
00000448: EB000000    ;     bl changebool
0000044C:             ; 
0000044C: EAFFFF77    ;     b changesetting
00000450:             ; 
00000450:             ; changebool
00000450:             ; ;;INP in R0 is the address of ___b_d
00000450:             ; ;;INP in R1 is the address of the printing name
00000450:             ; ;;OUT --
00000450: E92D41F0    ;     push {R14, R4-R8}
00000454:             ; 
00000454: E1A04000    ;     mov R4, R0
00000458: E1A05001    ;     mov R5, R1
0000045C:             ; 
0000045C: E1A00001    ;     mov R0, R1
00000460: EF000003    ;     swi 3
00000464:             ; 
00000464: E5540000    ;     ldrb R0, [R4]
00000468: E3500001    ;     cmp R0, #1
0000046C: 128F0FF2    ;     adrlne R0, off_msg
00000470: 12800B07    ; 
00000474: 028F00BD    ;     adrleq R0, on_msg
00000478: 02800C1F    ; 
0000047C: EF000003    ;     swi 3
00000480:             ; 
00000480: EB0000EA    ;     bl newline
00000484:             ; 
00000484: E28F0001    ;     adrl R0, currentasknew_B
00000488: E2800C1F    ; 
0000048C: EF000003    ;     swi 3
00000490:             ; 
00000490:             ; changebool_cont
00000490: EF000001    ;     swi 1
00000494:             ; 
00000494: E2400030    ;     sub R0, R0, #48
00000498: E3500001    ;     cmp R0, #1
0000049C: 0A000006    ;     beq changebool_set
000004A0: E3500000    ;     cmp R0, #0
000004A4: 0A000004    ;     beq changebool_set
000004A8:             ; 
000004A8: EB0000E0    ;     bl newline
000004AC:             ; 
000004AC: E28F0FBD    ;     adrl R0, currentasknew_E
000004B0: E2800B07    ; 
000004B4: EF000003    ;     swi 3
000004B8:             ; 
000004B8: EAFFFFF4    ;     b changebool_cont
000004BC:             ; 
000004BC:             ; changebool_set
000004BC: E5440000    ;     strb R0, [R4]
000004C0:             ; 
000004C0: EB0000DA    ;     bl newline
000004C4:             ; 
000004C4: E1A00005    ;     mov R0, R5
000004C8: EF000003    ;     swi 3
000004CC:             ; 
000004CC: E5540000    ;     ldrb R0, [R4]
000004D0: E3500001    ;     cmp R0, #1
000004D4: 128F0EF6    ;     adrlne R0, off_msg
000004D8: 12800A01    ; 
000004DC: 028F0055    ;     adrleq R0, on_msg
000004E0: 02800C1F    ; 
000004E4: EF000003    ;     swi 3
000004E8:             ; 
000004E8: EB0000D0    ;     bl newline
000004EC:             ; 
000004EC:             ; changeboolend
000004EC: E8BD41F0    ;     pop {R14, R4-R8}
000004F0: E1A0F00E    ;     mov R15, R14
000004F4:             ; 
000004F4:             ; changedims
000004F4:             ; ;;INP in R0 is addr. for x
000004F4:             ; ;;INP in R1 is addr. for y
000004F4:             ; ;;INP in R2 is boolean for require x < y. 1 for require
000004F4: E24F009D    ;     adrl R0, width_d
000004F8: E2400B01    ; 
000004FC: E24F10A4    ;     adrl R1, height_d
00000500: E2411B01    ; 
00000504: E3A02000    ;     mov R2, #0
00000508: EBFFFF70    ;     bl changearr
0000050C:             ; 
0000050C: EAFFFF47    ;     b changesetting
00000510:             ; 
00000510:             ; changerange
00000510: E24F00C3    ;     adrl R0, range_min
00000514: E2400B01    ; 
00000518: E24F10CA    ;     adrl R1, range_max
0000051C: E2411B01    ; 
00000520: E3A02001    ;     mov R2, #1
00000524: EBFFFF69    ;     bl changearr
00000528:             ; 
00000528: EAFFFF40    ;     b changesetting
0000052C:             ; 
0000052C:             ; changeicons
0000052C:             ; ;;print the current icons, ask for 3 characters in sequence for alive/dead/ptr
0000052C: EB000015    ;     bl printicons
00000530:             ; 
00000530: E28F006F    ;     adrl R0, currenticons_a
00000534: E2800C1D    ; 
00000538: EF000003    ;     swi 3
0000053C:             ; 
0000053C: E3A00000    ;     mov R0, #0
00000540: E3A01003    ;     mov R1, #3
00000544: E3A02001    ;     mov R2, #1
00000548: EB0001BF    ;     bl getstring
0000054C:             ; 
0000054C: E3500000    ;     cmp R0, #0
00000550: 0A000008    ;     beq changeiconsmallerr
00000554:             ; 
00000554: E5D01000    ;     ldrb R1, [R0, #0]
00000558: E5D02001    ;     ldrb R2, [R0, #1]
0000055C: E5D03002    ;     ldrb R3, [R0, #2]
00000560:             ; 
00000560: E54F150F    ;     strb R1, alive_c
00000564: E54F2512    ;     strb R2, dead_c
00000568: E54F3515    ;     strb R3, ptr_c
0000056C:             ; 
0000056C: EB0000AF    ;     bl newline
00000570:             ; 
00000570: EB000004    ;     bl printicons
00000574:             ; 
00000574: EAFFFF2D    ;     b changesetting
00000578:             ; 
00000578:             ; changeiconsmallerr
00000578: E28F009D    ;     adrl R0, getstringerr_m
0000057C: E2800C1D    ; 
00000580: EF000003    ;     swi 3
00000584:             ; 
00000584: EAFFFF29    ;     b changesetting
00000588:             ; 
00000588:             ; printicons
00000588:             ; ;;INP --
00000588:             ; ;;OUT --
00000588: E28F0002    ;     adrl R0, currenticons_1
0000058C: E2800C1D    ; 
00000590: EF000003    ;     swi 3
00000594:             ; 
00000594: E55F0543    ;     ldrb R0, alive_c
00000598: EF000000    ;     swi 0
0000059C:             ; 
0000059C: E3A0000A    ;     ldr R0, =nl
000005A0: EF000000    ;     swi 0
000005A4:             ; 
000005A4: E28F00EE    ;     adrl R0, currenticons_2
000005A8: E2800B07    ; 
000005AC: EF000003    ;     swi 3
000005B0:             ; 
000005B0: E55F055E    ;     ldrb R0, dead_c
000005B4: EF000000    ;     swi 0
000005B8:             ; 
000005B8: E3A0000A    ;     ldr R0, =nl
000005BC: EF000000    ;     swi 0
000005C0:             ; 
000005C0: E28F00D9    ;     adrl R0, currenticons_3
000005C4: E2800B07    ; 
000005C8: EF000003    ;     swi 3
000005CC:             ; 
000005CC: E55F0579    ;     ldrb R0, ptr_c
000005D0: EF000000    ;     swi 0
000005D4:             ; 
000005D4: E3A0000A    ;     ldr R0, =nl
000005D8: EF000000    ;     swi 0
000005DC:             ; 
000005DC:             ; printiconsend
000005DC: E1A0F00E    ;     mov R15, R14
000005E0:             ; 
000005E0:             ; changeitter
000005E0: E28F0085    ;     adrl R0, currentItters
000005E4: E2800B07    ; 
000005E8: EF000003    ;     swi 3
000005EC:             ; 
000005EC: E55F059D    ;     ldrb R0, maxitters
000005F0: EF000004    ;     swi 4
000005F4:             ; 
000005F4: EB00008D    ;     bl newline
000005F8:             ; 
000005F8: E28F0015    ;     adrl R0, getitters_m
000005FC: E2800C1E    ; 
00000600: EF000003    ;     swi 3
00000604:             ; 
00000604:             ; changeitterget
00000604: E3A0000A    ;     ldr R0, =enter
00000608: E3E01000    ;     mov R1, #-1
0000060C: E3A02001    ;     mov R2, #1
00000610: EB00018D    ;     bl getstring
00000614:             ; 
00000614: E1A04000    ;     mov R4, R0
00000618:             ; 
00000618: EB000141    ;     bl strtoi
0000061C: E1A03000    ;     mov R3, R0
00000620:             ; 
00000620: E1A05000    ;     mov R5, R0
00000624: E1A06001    ;     mov R6, R1
00000628:             ; 
00000628: E1A00004    ;     mov R0, R4
0000062C: EB0003CA    ;     bl free
00000630:             ; 
00000630: EB00007E    ;     bl newline
00000634:             ; 
00000634: E3560000    ;     cmp R6, #0
00000638: 1A000003    ;     bne changeittererr
0000063C:             ; 
0000063C: E24F00ED    ;     adrl R0, maxitters
00000640: E2400C05    ; 
00000644: E5405000    ;     strb R5, [R0]
00000648:             ; 
00000648: EA000004    ;     b changeitterend
0000064C:             ; 
0000064C:             ; changeittererr
0000064C: EB000077    ;     bl newline
00000650:             ; 
00000650: E28F0F67    ;     adrl R0, changeittere_m
00000654: E2800B07    ; 
00000658: EF000003    ;     swi 3
0000065C: EAFFFFE8    ;     b changeitterget
00000660:             ; changeitterend
00000660: E28F0005    ;     adrl R0, currentItters
00000664: E2800B07    ; 
00000668: EF000003    ;     swi 3
0000066C:             ; 
0000066C: E55F061D    ;     ldrb R0, maxitters
00000670: EF000004    ;     swi 4
00000674:             ; 
00000674: EB00006D    ;     bl newline
00000678:             ; 
00000678: EAFFFEEC    ;     b changesetting
0000067C:             ; 
0000067C:             ; changedrawerase
0000067C: E24F0F8B    ;     adrl R0, drawerase
00000680: E2400B01    ; 
00000684: E28F10EA    ;     adrl R1, currentdraweras
00000688: E2811C1B    ; 
0000068C: EBFFFF6F    ;     bl changebool
00000690:             ; 
00000690: EAFFFEE6    ;     b changesetting
00000694:             ; 
00000694:             ; changedraweraseend
00000694: EAFFFEE5    ;     b changesetting
00000698:             ; 
00000698:             ; printhelp
00000698: E28F00DE    ;     adrl R0, helpinfomsg
0000069C: E2800B06    ; 
000006A0: EF000003    ;     swi 3
000006A4:             ; 
000006A4: EF000001    ;     swi 1
000006A8:             ; 
000006A8: EAFFFE84    ;     b mainmenu
000006AC:             ; 
000006AC:             ; newboard
000006AC: E3A00001    ;     mov R0, #1;;should get dims
000006B0: EB000258    ;     bl setupOptions
000006B4:             ; 
000006B4: EB0001A2    ;     bl setupGrid
000006B8:             ;     
000006B8: E51F4678    ;     ldr R4, gridA
000006BC: E51F5678    ;     ldr R5, gridB
000006C0:             ; 
000006C0: E3540000    ;     cmp R4, #0
000006C4: 0AFFFEC4    ;     beq gridFail
000006C8: E3550000    ;     cmp R5, #0
000006CC: 0AFFFEC2    ;     beq gridFail
000006D0:             ; 
000006D0: EAFFFE91    ;     b mainloopstart
000006D4:             ; 
000006D4:             ; loadboard
000006D4:             ; ;;INP in R0 is the ptr to the SaveInfoHeader struct i.e. ptr to arr, current pos, max size
000006D4:             ; ;;RET in R0 0 for success in which case go to main loop, n/0 for err in which case return to ma
                      ; in menu
000006D4:             ; ;;display the saved grids
000006D4:             ; ;;ask for the index
000006D4:             ; ;;load the grids with the saved info
000006D4:             ; ;;ask the user for the settings
000006D4: E1A04000    ;     mov R4, R0 ;;save the struct ptr
000006D8:             ; 
000006D8:             ;     ;;pass ptr to listgrids
000006D8: EB00007A    ;     bl listGrids
000006DC:             ; 
000006DC: E5940008    ;     ldr R0, [R4, #8] ;;get the current position
000006E0: E3500000    ;     cmp R0, #0
000006E4: 0A00004F    ;     beq loadboardempty
000006E8:             ; 
000006E8:             ; loadboardaskindex
000006E8:             ;     ;;The grid has now been printed out we need to get the index to load
000006E8: E28F0E73    ;     adrl R0, loadboardaski
000006EC: E2800A01    ; 
000006F0: EF000003    ;     swi 3
000006F4:             ; 
000006F4: E3A0000A    ;     ldr R0, =enter
000006F8: E3E01000    ;     mov R1, #-1
000006FC: E3A02001    ;     mov R2, #1
00000700: EB000151    ;     bl getstring
00000704: E1A05000    ;     mov R5, R0
00000708:             ; 
00000708: EB000048    ;     bl newline
0000070C:             ; 
0000070C: E1A00005    ;     mov R0, R5
00000710: EB000103    ;     bl strtoi
00000714: E1A06000    ;     mov R6, R0
00000718: E1A07001    ;     mov R7, R1
0000071C:             ;     ;;ERR codes
0000071C:             ;     ;;  0 is success
0000071C:             ;     ;;  1 is attempted -ve
0000071C:             ;     ;;  2 is use of non-numeric characters
0000071C:             ;     ;;  3 is value out of range of integer
0000071C:             ;     ;;  4 is null string given
0000071C:             ; 
0000071C: E1A00005    ;     mov R0, R5
00000720: EB00038D    ;     bl free
00000724:             ; 
00000724: E1A00006    ;     mov R0, R6
00000728: E1A01007    ;     mov R1, R7
0000072C:             ; 
0000072C: E3510001    ;     cmp R1, #1
00000730: 0A000039    ;     beq loadboardret
00000734:             ; 
00000734: E3510000    ;     cmp R1, #0
00000738: 0A000003    ;     beq loadboardindex
0000073C:             ; 
0000073C: E28F0066    ;     adrl R0, loadboardifail
00000740: E2800C17    ; 
00000744: EF000003    ;     swi 3
00000748:             ; 
00000748: EAFFFFE6    ;     b loadboardaskindex
0000074C:             ; 
0000074C:             ; loadboardindex
0000074C:             ; ;;we now have an index lets check if its in range and then load the board
0000074C:             ;     ;;should be +ve so don't need to check < 0
0000074C: E5941008    ;     ldr R1, [R4, #8] ;;get the current position, this is where things get added so index < curr
                      ; entposition
00000750: E1500001    ;     cmp R0, R1
00000754: BA000003    ;     blt loadboardmain
00000758:             ; 
00000758: E28F006D    ;     adrl R0, loadboardirerr
0000075C: E2800C17    ; 
00000760: EF000003    ;     swi 3
00000764: EAFFFFDF    ;     b loadboardaskindex
00000768:             ; 
00000768:             ; loadboardmain
00000768:             ; ;;now we know that the index is valid we can load the grid
00000768:             ; ;;
00000768:             ; ;;need to free current grid
00000768:             ; ;;need to create a copy of the snapshot and set gridA to it 
00000768:             ; ;;return to main menu
00000768: E5941000    ;     ldr R1, [R4, #0] ;;get the array of grids
0000076C: E3A0200C    ;     ldr R2, =sizeofSaveI
00000770: E0201290    ;     mla R0, R0, R2, R1 ;;R0 = index * sizeofSaveI + grid.addr
00000774:             ; 
00000774: E5905000    ;     ldr R5, [R0, #0] ;;get the address of that grid
00000778: E5D06008    ;     ldrb R6, [R0, #8] ;;get the width
0000077C: E5D07009    ;     ldrb R7, [R0, #9] ;;get the height
00000780:             ; 
00000780: E0000796    ;     mul R0, R6, R7 ;;get the required size
00000784: E1A09000    ;     mov R9, R0 ;;save the number of bytes
00000788:             ; 
00000788: EB000347    ;     bl malloc
0000078C:             ; 
0000078C: E3500000    ;     cmp R0, #0
00000790: 0A00001D    ;     beq loadboardmallocfail
00000794:             ; 
00000794: E1A08000    ;     mov R8, R0 ;;save the new grid arr
00000798:             ; 
00000798:             ;     ;;need to copy the saved grid into the new grid
00000798:             ; 
00000798: E1A00005    ;     mov R0, R5  ;;src is the saved grid
0000079C: E1A01008    ;     mov R1, R8  ;;dst is the new grid
000007A0: E1A02009    ;     mov R2, R9  ;;bytes is in R9 already from width and height
000007A4: EB000107    ;     bl memcpy
000007A8:             ; 
000007A8: E51F0768    ;     ldr R0, gridA
000007AC: EB00036A    ;     bl free
000007B0:             ; 
000007B0: E50F8770    ;     str R8, gridA
000007B4:             ; 
000007B4:             ;     ;;also need to check if the old gridB is big enough
000007B4: E55F8769    ;     ldrb R8, width
000007B8: E55FA76C    ;     ldrb R10, height
000007BC: E1560008    ;     cmp R6, R8
000007C0: 1A000002    ;     bne loadboardmallocB
000007C4: E157000A    ;     cmp R7, R10
000007C8: 1A000000    ;     bne loadboardmallocB
000007CC:             ; 
000007CC: EA000006    ;     b loadboardskipB
000007D0:             ; 
000007D0:             ; loadboardmallocB
000007D0: E51F078C    ;     ldr R0, gridB
000007D4: EB000360    ;     bl free
000007D8:             ; 
000007D8: E1A00009    ;     mov R0, R9
000007DC: EB000332    ;     bl malloc
000007E0:             ; 
000007E0: E3500000    ;     cmp R0, #0
000007E4: 0A000008    ;     beq loadboardmallocfail
000007E8:             ; 
000007E8: E50F07A4    ;     str R0, gridB
000007EC:             ; 
000007EC:             ; loadboardskipB
000007EC: E54F67A1    ;     strb R6, width
000007F0: E54F77A4    ;     strb R7, height ;;overwrite the active grid information
000007F4:             ; 
000007F4: E28F002E    ;     adrl R0, loadboardsucmsg
000007F8: E2800C17    ; 
000007FC: EF000003    ;     swi 3
00000800:             ; 
00000800: E3A00000    ;     mov R0, #0 ;;skip asking dims as they've been loaded
00000804: EB000203    ;     bl setupOptions
00000808:             ; 
00000808: EA000007    ;     b loadboardsucc
0000080C:             ; 
0000080C:             ; loadboardmallocfail
0000080C: E28F00D6    ;     adrl R0, loadboardmlcerr
00000810: E2800C16    ; 
00000814: EF000003    ;     swi 3
00000818:             ; 
00000818: EA000002    ;     b loadboarderr
0000081C:             ; 
0000081C:             ; loadboardret
0000081C: E28F006E    ;     adrl R0, loadboardretmsg
00000820: E2800C16    ; 
00000824: EF000003    ;     swi 3
00000828:             ; 
00000828:             ; loadboardempty
00000828:             ; loadboarderr
00000828: EAFFFE24    ;     b mainmenu
0000082C:             ; loadboardsucc
0000082C: EAFFFE3A    ;     b mainloopstart
00000830:             ; 
00000830:             ; newline
00000830: E3A0000A    ;     ldr R0, =nl
00000834: EF000000    ;     swi 0
00000838:             ; 
00000838: E1A0F00E    ;     mov R15, R14
0000083C:             ; 
0000083C:             ; step
0000083C:             ; ;;INP in R0 is the gridHeaderStruct ptr [[todo]]
0000083C:             ; ;;INP in R1 is the active grid ptr
0000083C:             ; ;;OUT in R0 is 1 if should return to main menu, else 0.
0000083C:             ; 
0000083C:             ; ;;get user input
0000083C:             ; ;;if q -> jump to main menu
0000083C:             ; ;;if s -> ask for name, bl saveGrid with name
0000083C: E92D41F0    ;     push {R14, R4-R8}
00000840: E1A04000    ;     mov R4, R0 ;;save the struct 
00000844: E1A05001    ;     mov R5, R1
00000848:             ; 
00000848: EF000001    ;     swi 1
0000084C:             ; 
0000084C: E3500071    ;     cmp R0, #'q'
00000850: 0A000017    ;     beq stependfail ;;bad name, shame I can't change it eh
00000854:             ; 
00000854: E3500073    ;     cmp R0, #'s'
00000858: 1A000017    ;     bne stependsucc
0000085C:             ; 
0000085C: E28F0F47    ;     adrl R0, askname
00000860: E2800A01    ; 
00000864: EF000003    ;     swi 3
00000868:             ; 
00000868: E3A0000A    ;     ldr R0, =enter
0000086C: E3E01000    ;     mov R1, #-1
00000870: E3A02001    ;     mov R2, #1
00000874: EB0000F4    ;     bl getstring
00000878:             ; 
00000878: E1A01000    ;     mov R1, R0 ;;char* name
0000087C: E1A00004    ;     mov R0, R4 ;;gridinfo* 
00000880: E1A02005    ;     mov R2, R5 ;;active grid
00000884: EB000046    ;     bl saveGrid
00000888:             ; 
00000888: EBFFFFE8    ;     bl newline
0000088C:             ; 
0000088C: E28F00C1    ;     adrl R0, savedchoice
00000890: E2800A01    ; 
00000894: EF000003    ;     swi 3
00000898:             ; 
00000898: EF000001    ;     swi 1
0000089C: EF000000    ;     swi 0
000008A0: E3500059    ;     cmp R0, #'Y'
000008A4:             ; 
000008A4: E3A0000A    ;     ldr R0, =nl
000008A8: EF000000    ;     swi 0
000008AC:             ; 
000008AC: 0A000000    ;     beq stependfail
000008B0: EA000001    ;     b stependsucc
000008B4:             ; 
000008B4:             ; stependfail
000008B4: E3A00001    ;     mov R0, #1
000008B8: EA000000    ;     b stepend
000008BC:             ; 
000008BC:             ; stependsucc
000008BC: E3A00000    ;     mov R0, #0
000008C0:             ; 
000008C0:             ; stepend
000008C0: E8BD41F0    ;     pop {R14, R4-R8}
000008C4: E1A0F00E    ;     mov R15, R14
000008C8:             ; 
000008C8:             ; listGrids
000008C8:             ; ;;INP in R0 is the ptr to the gridInfo struct
000008C8:             ; ;;RET --
000008C8:             ; ;;Grid info struct
000008C8:             ; ;;  - SaveInfoStruct* array
000008C8:             ; ;;  - int max size of arr
000008C8:             ; ;;  - int current position in arr
000008C8:             ; 
000008C8:             ; ;;loops through the array of grids (if any) printing their names, and dims, ask to print grid
000008C8: E92D47F0    ;     push {R14, R4-R10}
000008CC:             ; 
000008CC: E5904000    ;     ldr R4, [R0, #0] ;;get the array ptr
000008D0: E5905008    ;     ldr R5, [R0, #8] ;;current position
000008D4:             ; 
000008D4: E3550000    ;     cmp R5, #0
000008D8: 0A00002C    ;     beq listGridsEmpty
000008DC:             ; 
000008DC:             ; ;;if current position == 1: print("There are no saved grids")
000008DC:             ; ;;for i from 0 to current position
000008DC:             ; ;;  getname(4)
000008DC:             ; ;;  getwidth(8)
000008DC:             ; ;;  getheight(9)
000008DC:             ; ;;  print("There is a grid called %s with dims (%d, %d)")
000008DC: E3A01000    ;     mov R1, #0 ;;i
000008E0: E3A0200C    ;     ldr R2, =sizeofSaveI
000008E4:             ; 
000008E4: E28F0F97    ;     adrl R0, listgridmsg
000008E8: E2800B05    ; 
000008EC: EF000003    ;     swi 3
000008F0:             ; 
000008F0: E28F0073    ;     adrl R0, cutoff
000008F4: E2800C16    ; 
000008F8: EF000003    ;     swi 3
000008FC:             ; 
000008FC:             ; listGridsLoop
000008FC: E1510005    ;     cmp R1, R5
00000900: 0A000025    ;     beq listGridsLend
00000904:             ; 
00000904: E0234291    ;     mla R3, R1, R2, R4 ;;R3 = i * sizeof(saveInfo) + array
00000908: E5936004    ;     ldr R6, [R3, #4] ;;load the name ptr
0000090C: E5D37008    ;     ldrb R7, [R3, #8] ;;load the width
00000910: E5D38009    ;     ldrb R8, [R3, #9] ;;load the height
00000914:             ; 
00000914: E28F0E4E    ;     adrl R0, gridloadpindex
00000918: E2800A01    ; 
0000091C: EF000003    ;     swi 3
00000920:             ; 
00000920: E3A0003A    ;     mov R0, #':'
00000924: EF000000    ;     swi 0
00000928:             ; 
00000928: E1A00001    ;     mov R0, R1
0000092C: EF000004    ;     swi 4
00000930:             ; 
00000930: EBFFFFBE    ;     bl newline
00000934:             ; 
00000934: E28F00C9    ;     adrl R0, gridloadpname
00000938: E2800B05    ; 
0000093C: EF000003    ;     swi 3
00000940:             ; 
00000940: E1A00006    ;     mov R0, R6
00000944: EF000003    ;     swi 3
00000948:             ; 
00000948: EBFFFFB8    ;     bl newline
0000094C:             ; 
0000094C: E28F00B9    ;     adrl R0, gridloadpwidth
00000950: E2800B05    ; 
00000954: EF000003    ;     swi 3
00000958:             ; 
00000958: E1A00007    ;     mov R0, R7
0000095C: EF000004    ;     swi 4
00000960:             ; 
00000960: EBFFFFB2    ;     bl newline
00000964:             ; 
00000964: E28F00AA    ;     adrl R0, gridloadpheight
00000968: E2800B05    ; 
0000096C: EF000003    ;     swi 3
00000970:             ; 
00000970: E1A00008    ;     mov R0, R8
00000974: EF000004    ;     swi 4
00000978:             ; 
00000978: EBFFFFAC    ;     bl newline
0000097C:             ; 
0000097C:             ;     ;;[[Prob]  Printing the grid uses the stored width and height, I could change it to use a p
                      ; assed in
0000097C:             ;     ;;             version but do the other areas have enough registers to cope? probably not.
0000097C:             ;     ;;             Would have to swap the width and height with the loaded versions - I really 
                      ; don't like this idea
0000097C:             ; 
0000097C: E2811001    ;     add R1, R1, #1
00000980:             ; 
00000980: E28F00E3    ;     adrl R0, cutoff
00000984: E2800C15    ; 
00000988: EF000003    ;     swi 3
0000098C:             ; 
0000098C: EAFFFFDA    ;     b listGridsLoop
00000990:             ; 
00000990:             ; listGridsEmpty
00000990: E28F0009    ;     adrl R0, gridloadempty
00000994: E2800B05    ; 
00000998: EF000003    ;     swi 3
0000099C:             ; 
0000099C:             ; listGridsLend
0000099C:             ; listGridsEnd
0000099C: E8BD47F0    ;     pop {R14, R4-R10}
000009A0: E1A0F00E    ;     mov R15, R14
000009A4:             ; 
000009A4:             ; saveGrid
000009A4:             ; ;;INP in R0 is the ptr gridInfo struct (in the main's stackframe)
000009A4:             ; ;;INP in R1 is the char* to the name
000009A4:             ; ;;INP in R2 is the active grid
000009A4:             ; ;;RET in R0 is an errcode or 0 for success. 1 for malloc error
000009A4:             ; 
000009A4:             ; ;;if reachedCap -> realloc + inc maxsize
000009A4:             ; ;;copy the current grid to another loc and place info in gridArr
000009A4:             ; ;;inc current index
000009A4: E92D47F0    ;     push {R14, R4-R10}
000009A8:             ; 
000009A8: E1A04000    ;     mov R4, R0
000009AC: E1A05001    ;     mov R5, R1
000009B0: E1A0A002    ;     mov R10, R2
000009B4:             ; 
000009B4: E5942008    ;     ldr R2, [R4, #8] ;;get the current index
000009B8: E5943004    ;     ldr R3, [R4, #4] ;;get the maxsize
000009BC:             ; 
000009BC: E1520003    ;     cmp R2, R3
000009C0: 0A000000    ;     beq saveGridResize
000009C4: EA00000D    ;     b saveGridAdd
000009C8:             ; 
000009C8:             ; saveGridResize
000009C8:             ;     ;;maxsize in R3
000009C8: E1A06083    ;     mov R6, R3, lsl #1 ;;double the capacity
000009CC: E3A0700C    ;     ldr R7, =sizeofSaveI
000009D0: E0070796    ;     mul R7, R6, R7 ;;get the number of bytes
000009D4:             ; 
000009D4: E1A00007    ;     mov R0, R7
000009D8: EB0002B3    ;     bl malloc ;;get the new grid
000009DC:             ; 
000009DC: E3500000    ;     cmp R0, #0 ;;if malloc failed then don't do any saving
000009E0: 0A000020    ;     beq saveGridFailMalloc
000009E4:             ; 
000009E4: E1A01000    ;     mov R1, R0
000009E8: E1A08000    ;     mov R8, R0 ;;save of ptr
000009EC:             ; 
000009EC:             ;     ;;now that we have the new grid we need to memcpy the bytes from the original into the new 
                      ; one
000009EC: E5940000    ;     ldr R0, [R4, #0] ;;get the array ptr
000009F0:             ;     ;;R1 has the malloced address
000009F0: E1A020A7    ;     mov R2, R7, lsr #1 ;;not great, this is the double cap halfed, means no mul again
000009F4: EB000073    ;     bl memcpy
000009F8:             ; 
000009F8:             ;     ;;assume success because I didn't give memcpy an err code :)
000009F8:             ;     ;;need to store the new size and arr ptr in the gridinfo struct
000009F8:             ; 
000009F8: E5848000    ;     str R8, [R4, #0]
000009FC: E5846004    ;     str R6, [R4, #4]
00000A00:             ; 
00000A00:             ; saveGridAdd
00000A00:             ; ;;add the current grid to the array
00000A00: E5946000    ;     ldr R6, [R4, #0] ;;get the arr ptr
00000A04: E5947008    ;     ldr R7, [R4, #8] ;;get current index
00000A08:             ; 
00000A08:             ;     ;;ptr is 4 bytes
00000A08:             ;     ;;we're adding the struct of 
00000A08:             ;     ;;  |-grid*     (ptr)
00000A08:             ;     ;;  |-char*     (ptr)
00000A08:             ;     ;;  |-width     (byte)
00000A08:             ;     ;;  `-height    (byte)
00000A08:             ; 
00000A08:             ;     ;;we need to copy the current array
00000A08: E55F89BD    ;     ldrb R8, width
00000A0C: E55F99C0    ;     ldrb R9, height
00000A10: E0080998    ;     mul R8, R8, R9 ;;get the number of bytes in grid
00000A14:             ; 
00000A14: E1A00008    ;     mov R0, R8
00000A18: EB0002A3    ;     bl malloc ;;allocate a new grid
00000A1C:             ; 
00000A1C: E3500000    ;     cmp R0, #0
00000A20: 0A000010    ;     beq saveGridFailMalloc
00000A24:             ; 
00000A24: E92D0100    ;     push {R8} ;; :(
00000A28:             ; 
00000A28: E3A0800C    ;     ldr R8, =sizeofSaveI
00000A2C: E0266897    ;     mla R6, R7, R8, R6 ;;currentindex * sizeof(Gridinfo) + arrptr
00000A30: E5860000    ;     str R0, [R6, #0] ;;store the grid*
00000A34: E5865004    ;     str R5, [R6, #4] ;;store the char*
00000A38: E55F89ED    ;     ldrb R8, width
00000A3C: E5C68008    ;     strb R8, [R6, #8]
00000A40: E5C69009    ;     strb R9, [R6, #9]
00000A44:             ; 
00000A44: E8BD0100    ;     pop {R8}
00000A48:             ; 
00000A48: E1A01000    ;     mov R1, R0 ;;dst
00000A4C: E1A0000A    ;     mov R0, R10 ;;src
00000A50: E1A02008    ;     mov R2, R8 ;;num bytes
00000A54: EB00005B    ;     bl memcpy ;;copy the grid into the new location
00000A58:             ; 
00000A58:             ;     ;;inc the position
00000A58: E5940008    ;     ldr R0, [R4, #8]
00000A5C: E2800001    ;     add R0, R0, #1
00000A60: E5840008    ;     str R0, [R4, #8]
00000A64:             ; 
00000A64: EA000001    ;     b saveGridSucc
00000A68:             ; 
00000A68:             ; saveGridFailMalloc
00000A68: E3A00001    ;     mov R0, #1
00000A6C: EA000000    ;     b saveGridEnd
00000A70:             ; 
00000A70:             ; saveGridSucc
00000A70: E3A00000    ;     mov R0, #0
00000A74:             ; 
00000A74:             ; saveGridEnd
00000A74: E8BD47F0    ;     pop {R14, R4-R10}
00000A78: E1A0F00E    ;     mov R15, R14
00000A7C:             ; 
00000A7C:             ; erase
00000A7C:             ; ;;INP in R0 is the itters
00000A7C:             ; ;;for (width * height + 1) * 2 + 1
00000A7C:             ; ;;      print('\b')
00000A7C: E1A01000    ;     mov R1, R0
00000A80:             ; 
00000A80:             ; eraseloop
00000A80: E3510000    ;     cmp R1, #0
00000A84: 0A000003    ;     beq eraseend
00000A88:             ; 
00000A88: E3A00008    ;     ldr R0, =backspace
00000A8C: EF000000    ;     swi 0
00000A90:             ; 
00000A90: E2411001    ;     sub R1, R1, #1
00000A94: EAFFFFF9    ;     b eraseloop
00000A98:             ; 
00000A98:             ; eraseend
00000A98: E1A0F00E    ;     mov R15, R14
00000A9C:             ; 
00000A9C:             ; slow
00000A9C: E3A010FF    ;     mov R1, #0xFF
00000AA0: E1A01081    ;     mov R1, R1, lsl #1
00000AA4:             ; 
00000AA4:             ; slowloop
00000AA4: E3510000    ;     cmp R1, #0
00000AA8: 0A000005    ;     beq slowend
00000AAC:             ; 
00000AAC: E3A00020    ;     mov R0, #' '
00000AB0: EF000000    ;     swi 0
00000AB4: E3A00008    ;     ldr R0, =backspace
00000AB8: EF000000    ;     swi 0
00000ABC:             ; 
00000ABC: E2411001    ;     sub R1, R1, #1
00000AC0: EAFFFFF7    ;     b slowloop
00000AC4:             ; 
00000AC4:             ; slowend
00000AC4: E1A0F00E    ;     mov R15, R14
00000AC8:             ; 
00000AC8:             ; heapclean
00000AC8:             ; ;;zero out all memory in the heap (debugging uses)
00000AC8: E28F0F5D    ;     adrl R0, heapstart
00000ACC: E2800B06    ; 
00000AD0: E3A01601    ;     ldr R1, =max_addr ;;stores the end of the heap
00000AD4: E3A02801    ;     ldr R2, =stack_size
00000AD8: E0411002    ;     sub R1, R1, R2 ;; R1 = max_addr - stack_size which should be the heap end
00000ADC: E3C11003    ;     and R1, R1, #-4 ;;align to 4 byte boundry just in case
00000AE0: E3A03000    ;     mov R3, #0
00000AE4:             ; heapcleanloop ;;starting at heapstart
00000AE4: E1500001    ;     cmp R0, R1
00000AE8: 0A000002    ;     beq heapcleanend
00000AEC: E5003000    ;     str R3, [R0] ;;store 0 in loc
00000AF0: E2800004    ;     add R0, R0, #4 ;;inc by a word
00000AF4: EAFFFFFA    ;     b heapcleanloop
00000AF8:             ; heapcleanend
00000AF8: E1A0F00E    ;     mov R15, R14
00000AFC:             ; 
00000AFC:             ; strlen
00000AFC:             ; ;;INP in R0 is the address of the string
00000AFC:             ; ;;OUT in R0 is the length of the null terminated string
00000AFC:             ; 
00000AFC:             ; ;;len = 0
00000AFC:             ; ;;while(inp[len] != \0) {len++;}
00000AFC:             ; ;;return len
00000AFC:             ; 
00000AFC: E3A01000    ;     mov R1, #0 ;;len
00000B00: E3500000    ;     cmp R0, #0
00000B04: 0A000004    ;     beq strlenend
00000B08:             ; 
00000B08:             ; strlenloop
00000B08: E7D02001    ;     ldrb R2, [R0, R1]
00000B0C: E3520000    ;     cmp R2, #0
00000B10: 0A000001    ;     beq strlenend
00000B14: E2811001    ;     add R1, R1, #1
00000B18: EAFFFFFA    ;     b strlenloop
00000B1C:             ; 
00000B1C:             ; strlenend
00000B1C: E1A00001    ;     mov R0, R1
00000B20: E1A0F00E    ;     mov R15, R14
00000B24:             ; 
00000B24:             ; 
00000B24:             ; strtoi
00000B24:             ; ;;INP in R0 is the address of the string
00000B24:             ; ;;OUT in R0 is the value created
00000B24:             ; ;;OUT in R1 is the err code
00000B24:             ; ;;
00000B24:             ; ;;ERR codes
00000B24:             ; ;;  0 is success
00000B24:             ; ;;  1 is attempted -ve
00000B24:             ; ;;  2 is use of non-numeric characters
00000B24:             ; ;;  3 is value out of range of integer
00000B24:             ; ;;  4 is null string given
00000B24:             ; 
00000B24:             ; ;;  example inp
00000B24:             ; ;;  12234       len = 5
00000B24:             ; ;;      ^-find end
00000B24:             ; ;;  tot = 0
00000B24:             ; ;;  for i from end to 0:
00000B24:             ; ;;      tot += inp[i] * (10 ** (len(inp) - i - 1))
00000B24:             ; ;;  +some checks for valid input
00000B24:             ; 
00000B24:             ; ;;This will take in an address to the start of a string and attempt to convert it into an integ
                      ; er
00000B24:             ; ;;String is only valid when all characters are numerical
00000B24:             ; ;;For now it does not accept -ve numbers
00000B24:             ; 
00000B24: E92D41F0    ;     push {R14, R4-R8}
00000B28: E1A04000    ;     mov R4, R0  ;;R4 holds the addr
00000B2C:             ; 
00000B2C: E3500000    ;     cmp R0, #0
00000B30: 03A01004    ;     moveq R1, #4
00000B34: 0A00001E    ;     beq strtoiendfail ;;null given so err code = 4 and end
00000B38:             ; 
00000B38: EBFFFFEF    ;     bl strlen
00000B3C: E1A05000    ;     mov R5, R0  ;;R5 holds the len of the string
00000B40:             ; 
00000B40: E3550000    ;     cmp R5, #0
00000B44: 0A00001C    ;     beq strtoiendsucc ;;if len(string) == 0 then return 0
00000B48:             ; 
00000B48: E5D46000    ;     ldrb R6, [R4, #0]
00000B4C: E356002D    ;     cmp R6, #45
00000B50: 0A000012    ;     beq strtoifailminus
00000B54:             ; 
00000B54: E3A06000    ;     mov R6, #0  ;;R6 holds the total
00000B58: E3A07001    ;     mov R7, #1  ;;R7 holds the **
00000B5C: E2458001    ;     sub R8, R5, #1  ;;R8 is i which starts at end (len - 1)
00000B60: E3A0300A    ;     mov R3, #10 ;;mul to **
00000B64:             ; 
00000B64:             ; strtoiloop
00000B64: E3580000    ;     cmp R8, #0
00000B68: BA00000A    ;     blt strtoilend
00000B6C:             ; 
00000B6C: E7D42008    ;     ldrb R2, [R4, R8]
00000B70: E2422030    ;     sub R2, R2, #48
00000B74:             ; 
00000B74: E3520000    ;     cmp R2, #0
00000B78: BA00000C    ;     blt strtoifailnonnum
00000B7C: E3520009    ;     cmp R2, #9
00000B80: CA00000A    ;     bgt strtoifailnonnum
00000B84:             ; 
00000B84: E0266792    ;     mla R6, R2, R7, R6 ;;total = (inp[i] * (**)) + total -> total += inp[i] * (**)
00000B88: 6A000006    ;     bvs strtoifailoutrange
00000B8C: E0070397    ;     mul R7, R7, R3
00000B90:             ; 
00000B90: E2488001    ;     sub R8, R8, #1
00000B94:             ; 
00000B94: EAFFFFF2    ;     b strtoiloop
00000B98:             ; 
00000B98:             ; 
00000B98:             ; ;;branches are expensive - should this just be rep RET? probably doesn't matter at this scale
00000B98:             ; strtoilend
00000B98: E1A00006    ;     mov R0, R6
00000B9C: EA000006    ;     b strtoiendsucc
00000BA0:             ; 
00000BA0:             ; strtoifailminus
00000BA0: E3A01001    ;     mov R1, #1
00000BA4: EA000002    ;     b strtoiendfail
00000BA8:             ; 
00000BA8:             ; strtoifailoutrange
00000BA8: E3A01003    ;     mov R1, #3
00000BAC: EA000000    ;     b strtoiendfail
00000BB0:             ; 
00000BB0:             ; strtoifailnonnum
00000BB0: E3A01002    ;     mov R1, #2
00000BB4:             ; 
00000BB4:             ; strtoiendfail
00000BB4: E3A00000    ;     mov R0, #0
00000BB8: EA000000    ;     b strtoiend
00000BBC:             ; 
00000BBC:             ; strtoiendsucc
00000BBC: E3A01000    ;     mov R1, #0
00000BC0:             ; 
00000BC0:             ; strtoiend
00000BC0: E8BD41F0    ;     pop {R14, R4-R8}
00000BC4: E1A0F00E    ;     mov R15, R14
00000BC8:             ; 
00000BC8:             ; memcpy
00000BC8:             ; ;;INP in R0 is the addr of src
00000BC8:             ; ;;INP in R1 is the addr of dst
00000BC8:             ; ;;INP in R2 is the number of bytes to copy
00000BC8:             ; 
00000BC8:             ; ;;check if src and dst are alliged
00000BC8:             ; ;;If different then write bytes
00000BC8:             ; ;;If same then go to 4byte boundry
00000BC8:             ; ;;  Write words of bytes2copy / 4
00000BC8:             ; ;;  Write remaining bytes
00000BC8: E92D41F0    ;     push {R14, R4-R8}
00000BCC:             ; 
00000BCC: E2004003    ;     and R4, R0, #0b11
00000BD0: E2015003    ;     and R5, R1, #0b11
00000BD4:             ; 
00000BD4: E1540005    ;     cmp R4, R5
00000BD8: 1A00000E    ;     bne memcpyallbytes
00000BDC:             ; 
00000BDC:             ;     ;;If they are the same then cpy R4 bytes and then do words
00000BDC: E0422004    ;     sub R2, R2, R4;; bytes2cpy -= bytes we are about to write
00000BE0: E1A03004    ;     mov R3, R4
00000BE4: EB00000E    ;     bl memcpybytes
00000BE8:             ; 
00000BE8:             ;     ;;Now find the number of words that can be written i.e. bytes2cpy / 4 (bytes2cpy >> 2)
00000BE8: E3C23003    ;     and R3, R2, #-4 ;;the number of bytes to write that make up the words
00000BEC: E3A04000    ;     mov R4, #0 ;;i
00000BF0:             ; memcpywordsloop
00000BF0: E1540003    ;     cmp R4, R3
00000BF4: 0A000003    ;     beq memcpywordslend
00000BF8:             ; 
00000BF8: E7906004    ;     ldr R6, [R0, R4]
00000BFC: E7816004    ;     str R6, [R1, R4]
00000C00:             ;     
00000C00: E2844004    ;     add R4, R4, #4
00000C04:             ; 
00000C04: EAFFFFF9    ;     b memcpywordsloop
00000C08:             ;     
00000C08:             ; memcpywordslend
00000C08:             ; ;;Now copy the remaining bytes
00000C08: E2022003    ;     and R2, R2, #0b11
00000C0C: E1A03002    ;     mov R3, R2
00000C10: EB000003    ;     bl memcpybytes
00000C14: EA00000A    ;     b memcpyend
00000C18:             ; 
00000C18:             ; memcpyallbytes
00000C18: E1A03002    ;     mov R3, R2
00000C1C: EB000000    ;     bl memcpybytes
00000C20: EA000007    ;     b memcpyend
00000C24:             ; 
00000C24:             ; memcpybytes
00000C24:             ; ;;This is an internal function to memcpy and so doesn't follow the calling convention, it also 
                      ; assumes values are in place from memcpy
00000C24:             ; ;;for (int i = 0; i < byte2cpy; i++) {
00000C24:             ; ;;      *(dst + i) = *(src + i)
00000C24:             ; ;;INP in R3 is the number of bytes to copy
00000C24: E3A05000    ;     mov R5, #0 ;;i
00000C28:             ; memcpybytesloop
00000C28: E1550003    ;     cmp R5, R3
00000C2C: 0A000003    ;     beq memcpybyteslend ;;i < bytes2cpy
00000C30:             ; 
00000C30: E7D04005    ;     ldrb R4, [R0, R5]
00000C34: E7C14005    ;     strb R4, [R1, R5] ;;dst[i] = src[i]
00000C38:             ; 
00000C38: E2855001    ;     add R5, R5, #1 ;;i++
00000C3C:             ; 
00000C3C: EAFFFFF9    ;     b memcpybytesloop
00000C40:             ; 
00000C40:             ; memcpybyteslend
00000C40: E1A0F00E    ;     mov R15, R14
00000C44:             ; 
00000C44:             ; memcpyend
00000C44: E8BD41F0    ;     pop {R14, R4-R8}
00000C48: E1A0F00E    ;     mov R15, R14
00000C4C:             ; 
00000C4C:             ; getstring
00000C4C:             ; ;;INP in R0 the terminator character
00000C4C:             ; ;;INP in R1 the max number of characters or -1 for no max
00000C4C:             ; ;;INP in R2 boolean (non-0/0) for if letters should be printed out as well
00000C4C:             ; ;;RET in R0 a ptr to the memory address
00000C4C:             ; ;;
00000C4C:             ; ;;Dynamically allocate memory to support large string
00000C4C:             ; 
00000C4C:             ; ;;buff = malloc(minBytes)
00000C4C:             ; ;;while (input != terminator && pos < maxchars) 
00000C4C:             ; ;;  buff[pos] = input
00000C4C:             ; ;;  putchar(input)
00000C4C:             ; ;;  if (pos > buffSize)
00000C4C:             ; ;;      nBuff = malloc(buffSize << 1)
00000C4C:             ; ;;      memcpy from buff to nBuff
00000C4C:             ; ;;      free buff
00000C4C:             ; ;;      buff = nBuff
00000C4C:             ; 
00000C4C: E92D47F0    ;     push {R14, R4-R10}
00000C50:             ; 
00000C50: E1A08000    ;     mov R8, R0 ;;now holds terminator
00000C54: E1A09001    ;     mov R9, R1 ;;nax chars
00000C58: E3590000    ;     cmp R9, #0
00000C5C: 0A000031    ;     beq getstringEnd
00000C60:             ;     ;sub R9, R9, #1 ;;reduce by 1 to use later
00000C60: E1A0A002    ;     mov R10, R2 ;;print bool
00000C64:             ; 
00000C64: E3A06008    ;     ldr R6, =minBuffSize ;;R6 will hold the current size of the buffer
00000C68: E1A00006    ;     mov R0, R6
00000C6C: EB00020E    ;     bl malloc
00000C70: E1A04000    ;     mov R4, R0 ;;R4 is the address of the buffer
00000C74:             ; 
00000C74: E3A05000    ;     mov R5, #0 ;;R5 is the loop counter/index into buffer
00000C78:             ; getstringloop
00000C78: E3790001    ;     cmp R9, #-1
00000C7C: 0A000001    ;     beq getstringloopskipsize
00000C80: E1550009    ;     cmp R5, R9 ;;position - maxsize
00000C84:             ;                       ;;pos 2 means 3 characters written
00000C84: AA000019    ;     bge getstringlend ;;if position >= maxsize
00000C88:             ; getstringloopskipsize
00000C88: EF000001    ;     swi 1 ;;get input
00000C8C: E1500008    ;     cmp R0, R8 ;;is input == terminator character
00000C90: 0A000016    ;     beq getstringlend
00000C94:             ; 
00000C94: E3790001    ;     cmp R9, #-1
00000C98: 0AFFFFFF    ;     beq skipMax
00000C9C:             ;     
00000C9C:             ; skipMax
00000C9C: E1550006    ;     cmp R5, R6
00000CA0: E92D0001    ;     push {R0}
00000CA4: AA000005    ;     bge getstringresize
00000CA8:             ; 
00000CA8:             ; getstringlcont
00000CA8: E8BD0001    ;     pop {R0}
00000CAC: E7C40005    ;     strb R0, [R4, R5] ;;buff[pos] = input
00000CB0:             ; 
00000CB0: E35A0000    ;     cmp R10, #0
00000CB4: 1F000000    ;     swine 0 ;;output the character to the screen if R10 is not 0
00000CB8:             ; 
00000CB8: E2855001    ;     add R5, R5, #1
00000CBC:             ; 
00000CBC: EAFFFFED    ;     b getstringloop
00000CC0:             ; 
00000CC0:             ; getstringresize
00000CC0:             ;     ;;r6 will hold new buffer
00000CC0: E1A00086    ;     mov R0, R6, lsl #1
00000CC4: EB0001F8    ;     bl malloc
00000CC8: E1A07000    ;     mov R7, R0
00000CCC:             ; 
00000CCC: E1A00004    ;     mov R0, R4 ;;old buff
00000CD0: E1A01007    ;     mov R1, R7 ;;newBuff
00000CD4: E1A02005    ;     mov R2, R5 ;;bytes to write
00000CD8: EBFFFFBA    ;     bl memcpy
00000CDC:             ; 
00000CDC: E1A00004    ;     mov R0, R4
00000CE0: EB00021D    ;     bl free
00000CE4: E1A04007    ;     mov R4, R7
00000CE8:             ; 
00000CE8: E1A06086    ;     mov R6, R6, lsl #1
00000CEC:             ; 
00000CEC: EAFFFFED    ;     b getstringlcont
00000CF0:             ; 
00000CF0:             ; getstringlend
00000CF0:             ;     ;;need to add a \0
00000CF0:             ;     ;;need to check if the buffer is completely full -> resize buffer to +1? (will be aligned t
                      ; o 8 in malloc!) then copy
00000CF0:             ;     ;;I could have the buffers always leave a space open for the \0? but this is kind of an edg
                      ; e case?
00000CF0: E1550006    ;     cmp R5, R6 ;;position to size of buffer
00000CF4: 0A000000    ;     beq getstringResizeEnd
00000CF8:             ; 
00000CF8: EA00000A    ;     b getstringEnd
00000CFC:             ; 
00000CFC:             ; getstringResizeEnd
00000CFC: E2860001    ;     add R0, R6, #1
00000D00: EB0001E9    ;     bl malloc
00000D04: E1A07000    ;     mov R7, R0
00000D08:             ; 
00000D08: E1A00004    ;     mov R0, R4;;old buff
00000D0C: E1A01007    ;     mov R1, R7;;new buff
00000D10: E1A02005    ;     mov R2, R5;;bytes2write
00000D14: EBFFFFAB    ;     bl memcpy
00000D18:             ; 
00000D18: E1A00004    ;     mov R0, R4
00000D1C: EB00020E    ;     bl free
00000D20: E1A04007    ;     mov R4, R7
00000D24:             ; 
00000D24: E2866001    ;     add R6, R6, #1 ;;not needed
00000D28:             ; 
00000D28:             ; getstringEnd
00000D28: E3A00000    ;     mov R0, #0
00000D2C: E7C40005    ;     strb R0, [R4, R5]
00000D30:             ; 
00000D30: E1A00004    ;     mov R0, R4
00000D34:             ; 
00000D34: E8BD47F0    ;     pop {R14, R4-R10}
00000D38: E1A0F00E    ;     mov R15, R14
00000D3C:             ; 
00000D3C:             ; tolower
00000D3C:             ; ;;INP in R0 is a character
00000D3C:             ; ;;OUT in R0 is the character.lower()
00000D3C: E3800020    ;     orr R0, R0, #32
00000D40: E1A0F00E    ;     mov R15, R14
00000D44:             ; 
00000D44:             ; setupGrid
00000D44:             ; ;;INP --
00000D44:             ; ;;RET --
00000D44:             ; ;;The values addresses of the grids will now be set, can still be 0
00000D44:             ; ;; ask for generation mode
00000D44:             ; ;;      |-If random ask for seed
00000D44:             ; ;;      |   `-For generation roll the seed to create a pseudorandom value for each `pixel`
00000D44:             ; ;;      `-If draw then get them to draw the grid one `pixel` at a time
00000D44: E92D47F0    ;     push {R14, R4-R10}
00000D48:             ; 
00000D48:             ;     ;;generate the main grid
00000D48: E55F6CFD    ;     ldrb R6, width
00000D4C: E55F7D00    ;     ldrb R7, height
00000D50:             ; 
00000D50: E0000796    ;     mul R0, R6, R7 ;;width * height = num of bytes to malloc
00000D54:             ; 
00000D54: E1A05000    ;     mov R5, R0
00000D58: EB0001D3    ;     bl malloc
00000D5C: E1A04000    ;     mov R4, R0
00000D60: E50F4D20    ;     str R4, gridA
00000D64:             ; 
00000D64: E1A00005    ;     mov R0, R5
00000D68: EB0001CF    ;     bl malloc
00000D6C: E50F0D28    ;     str R0, gridB
00000D70:             ; 
00000D70: E3550000    ;     cmp R5, #0
00000D74: 0A000059    ;     beq setupGridFail
00000D78: E3540000    ;     cmp R4, #0
00000D7C: 0A000057    ;     beq setupGridFail
00000D80:             ; 
00000D80:             ;     ;;R4 holds the gridA addr
00000D80:             ;     ;;R6 holds the width
00000D80:             ;     ;;R7 holds the height
00000D80:             ; 
00000D80: E28F004E    ;     adrl R0, askgenoption
00000D84: E2800C0E    ; 
00000D88: EF000003    ;     swi 3
00000D8C:             ; setupGridAsk
00000D8C: EF000001    ;     swi 1
00000D90: E3800020    ;     orr R0, R0, #32
00000D94:             ; 
00000D94: E1A01000    ;     mov R1, R0
00000D98: EBFFFEA4    ;     bl newline
00000D9C:             ; 
00000D9C: E3510064    ;     cmp R1, #'d'
00000DA0: 0A000005    ;     beq setupdrawing
00000DA4:             ; 
00000DA4: E3510072    ;     cmp R1, #'r'
00000DA8: 0A000008    ;     beq setuprandom
00000DAC:             ; 
00000DAC: E28F005B    ;     adrl R0, setupGrdFailmsg
00000DB0: E2800C0E    ; 
00000DB4: EF000003    ;     swi 3
00000DB8: EAFFFFF3    ;     b setupGridAsk
00000DBC:             ; 
00000DBC:             ; setupdrawing
00000DBC: E3A09000    ;     mov R9, #0
00000DC0:             ; 
00000DC0: E28F0FB5    ;     adrl R0, drawinfomsg
00000DC4: E2800B03    ; 
00000DC8: EF000003    ;     swi 3
00000DCC:             ; 
00000DCC: EA000009    ;     b setupstart
00000DD0:             ; 
00000DD0:             ; setuprandom
00000DD0: E28F0FA6    ;     adrl R0, askseed
00000DD4: E2800B03    ; 
00000DD8: EF000003    ;     swi 3
00000DDC:             ; 
00000DDC: E3A00000    ;     mov R0, #0
00000DE0: E3A01004    ;     mov R1, #4
00000DE4: E3A02001    ;     mov R2, #1
00000DE8: EBFFFF97    ;     bl getstring
00000DEC:             ; 
00000DEC: E1A08000    ;     mov R8, R0
00000DF0:             ; 
00000DF0: EBFFFE8E    ;     bl newline
00000DF4:             ; 
00000DF4: E3A09001    ;     mov R9, #1
00000DF8:             ; 
00000DF8:             ; setupstart
00000DF8:             ; ;;This is probably not a good way to do it as there is more branching in the middle of a loop t
                      ; hat is executed alot
00000DF8:             ; ;;I'm doing it this way `not because it is easy, but because I though it would be easy`
00000DF8:             ; ;;Reduces the need for writing another loop :)
00000DF8:             ; ;;R9 holds the mode (1 for random, 0 for draw)
00000DF8:             ; ;;R8 will hold the seed for random
00000DF8:             ; ;;for row from 0 to height - 1
00000DF8:             ; ;;  for col from 0 to width - 1
00000DF8:             ; ;;      if (random)
00000DF8:             ; ;;          grid[row][col] = ((seed rol 1) || row) && 1
00000DF8:             ; ;;      else
00000DF8:             ; ;;          grid[row][col] = input() == 1
00000DF8: E3A05000    ;     mov R5, #0 ;; row
00000DFC:             ; setuprowloop
00000DFC: E1550007    ;     cmp R5, R7
00000E00: 0A000032    ;     beq setuprowlend
00000E04:             ; 
00000E04: E3A0A000    ;     mov R10, #0 ;;col
00000E08:             ; setupcolloop
00000E08: E15A0006    ;     cmp R10, R6
00000E0C: 0A00002D    ;     beq setupcollend
00000E10:             ; 
00000E10: E3590001    ;     cmp R9, #1
00000E14: 0A000000    ;     beq dorandom
00000E18: EA000004    ;     b dodrawstart
00000E1C:             ; 
00000E1C:             ; ;;dorandom and dodraw will get their value for this position and then place it in R2
00000E1C:             ; ;;R3 is free at this point
00000E1C:             ; dorandom
00000E1C:             ;     ;;seed in R8
00000E1C: E1A080E8    ;     mov R8, R8, ror #1
00000E20: E00A3005    ;     and R3, R10, R5
00000E24: E0288003    ;     eor R8, R8, R3
00000E28: E2082001    ;     and R2, R8, #1
00000E2C: EA000021    ;     b setupcollcont
00000E30:             ; 
00000E30:             ; dodrawstart
00000E30: E023A695    ;     mla R3, R5, R6, R10 ;;R3 = row * width + col
00000E34:             ; 
00000E34: E3A00002    ;     mov R0, #2
00000E38: E7C40003    ;     strb R0, [R4, R3]
00000E3C:             ; 
00000E3C: E3590000    ;     cmp R9, #0
00000E40: 01A00004    ;     moveq R0, R4
00000E44: 0B000027    ;     bleq drawgrid ;;print the new state of the grid if this is drawing mode
00000E48:             ; 
00000E48:             ; dodraw
00000E48:             ;     ;;get input, validate 1 or 0
00000E48:             ;     ;;if invalid print error loop back
00000E48:             ;     ;;-_- I've just realised I want to print the grid each time as well R0-R3 are scratch
00000E48: EF000001    ;     swi 1
00000E4C:             ; 
00000E4C: E3500031    ;     cmp R0, #'1'
00000E50: 0A00000D    ;     beq dodrawsucc
00000E54: E3500030    ;     cmp R0, #'0'
00000E58: 0A00000B    ;     beq dodrawsucc
00000E5C:             ; 
00000E5C: E3A0100A    ;     ldr R1, =enter
00000E60: E1500001    ;     cmp R0, R1;;next line
00000E64: 1A000004    ;     bne dodrawfail
00000E68:             ; 
00000E68: E023A695    ;     mla R3, R5, R6, R10 ;;R3 = row * width + col
00000E6C: E3A00000    ;     mov R0, #0
00000E70: E7C40003    ;     strb R0, [R4, R3]
00000E74:             ; 
00000E74: E2855001    ;     add R5, R5, #1
00000E78: EAFFFFDF    ;     b setuprowloop
00000E7C:             ; 
00000E7C:             ; dodrawfail
00000E7C:             ; 
00000E7C: E28F006E    ;     adrl R0, drawfailmsg
00000E80: E2800C0E    ; 
00000E84: EF000003    ;     swi 3
00000E88:             ; 
00000E88: EAFFFFEE    ;     b dodraw
00000E8C:             ; 
00000E8C:             ; dodrawsucc
00000E8C: E92D0001    ;     push {R0}
00000E90: E55F0E40    ;     ldrb R0, drawerase
00000E94: E3500000    ;     cmp R0, #0
00000E98: 0A000004    ;     beq dodrawsuccskiperase
00000E9C:             ; 
00000E9C: E0000796    ;     mul R0, R6, R7      ;;I don't like having to do this every time :(
00000EA0: E1A00080    ;     mov R0, R0, lsl #1
00000EA4: E2800001    ;     add R0, R0, #1
00000EA8: E0800007    ;     add R0, R0, R7
00000EAC: EBFFFEF2    ;     bl erase
00000EB0:             ;     
00000EB0:             ; dodrawsuccskiperase
00000EB0: E8BD0001    ;     pop {R0}
00000EB4:             ; 
00000EB4: E2402030    ;     sub R2, R0, #48 ;;could be xor?
00000EB8:             ; 
00000EB8:             ; setupcollcont
00000EB8:             ;     ;;place the value in R2 into the grid[row][col]
00000EB8:             ;     ;;row * width + col
00000EB8: E023A695    ;     mla R3, R5, R6, R10 ;;R3 = row * width + col ;;I'm doing this twice \-(*v*)-/
00000EBC: E7C42003    ;     strb R2, [R4, R3] ;;grid offset by R3
00000EC0:             ; 
00000EC0: E28AA001    ;     add R10, R10, #1
00000EC4: EAFFFFCF    ;     b setupcolloop
00000EC8:             ; setupcollend
00000EC8: E2855001    ;     add R5, R5, #1
00000ECC: EAFFFFCA    ;     b setuprowloop
00000ED0:             ; setuprowlend
00000ED0:             ;     ;;grid has been setup
00000ED0: E3590001    ;     cmp R9, #1
00000ED4: 1A000001    ;     bne setupGridEnd
00000ED8: E1A00008    ;     mov R0, R8 ;;free the seed
00000EDC: EB00019E    ;     bl free
00000EE0:             ; 
00000EE0:             ; setupGridFail
00000EE0:             ; setupGridEnd
00000EE0: E8BD47F0    ;     pop {R14, R4-R10}
00000EE4: E1A0F00E    ;     mov R15, R14
00000EE8:             ; 
00000EE8:             ; 
00000EE8:             ; ;;[[TODO]] the heap may not be blank (when heapclean is removed) and so need to 0 the mem. Mayb
                      ; e add option to malloc or add calloc (not the same)
00000EE8:             ; drawgrid
00000EE8:             ; ;;INP in R0 is the grid address to draw
00000EE8:             ; 
00000EE8:             ; ;;for row from 0 to height - 1
00000EE8:             ; ;;  for col from 0 to width - 1
00000EE8:             ; ;;      print('X' if grid[row][col] else '_')
00000EE8:             ; ;;  print(newline)
00000EE8:             ; ;;print(newline)
00000EE8: E92D01F0    ;     push {R4-R8}
00000EEC:             ; 
00000EEC: E1A06000    ;     mov R6, R0
00000EF0:             ; 
00000EF0: E55F4EA5    ;     ldrb R4, width
00000EF4: E55F5EA8    ;     ldrb R5, height
00000EF8:             ; 
00000EF8: E3A02000    ;     mov R2, #0 ;;row
00000EFC:             ; drawgridrowloop
00000EFC: E1520005    ;     cmp R2, R5
00000F00: 0A000016    ;     beq drawgridrowlend
00000F04:             ; 
00000F04: E3A01000    ;     mov R1, #0 ;;col
00000F08:             ; drawgridcolloop
00000F08: E1510004    ;     cmp R1, R4
00000F0C: 0A00000E    ;     beq drawgridcollend
00000F10:             ; 
00000F10: E0231492    ;     mla R3, R2, R4, R1 ;;R3 = row * width + col
00000F14: E7D63003    ;     ldrb R3, [R6, R3]
00000F18:             ; 
00000F18: E3530002    ;     cmp R3, #2
00000F1C: 0A000004    ;     beq drawgridprintcurrent
00000F20: E3530001    ;     cmp R3, #1
00000F24: 051F0ED3    ;     ldreq R0, alive_c
00000F28: 151F0ED6    ;     ldrne R0, dead_c
00000F2C:             ; 
00000F2C: EF000000    ;     swi 0
00000F30:             ; 
00000F30: EA000001    ;     b drawgridcollcont
00000F34:             ; 
00000F34:             ; drawgridprintcurrent
00000F34: E51F0EE1    ;     ldr R0, ptr_c
00000F38: EF000000    ;     swi 0
00000F3C:             ; 
00000F3C:             ; drawgridcollcont
00000F3C: E3A00020    ;     mov R0, #' '
00000F40: EF000000    ;     swi 0
00000F44:             ; 
00000F44: E2811001    ;     add R1, R1, #1
00000F48: EAFFFFEE    ;     b drawgridcolloop
00000F4C:             ; 
00000F4C:             ; drawgridcollend
00000F4C: E3A01000    ;     mov R1, #0
00000F50: E2822001    ;     add R2, R2, #1
00000F54: E3A0000A    ;     mov R0, #10
00000F58: EF000000    ;     swi 0
00000F5C: EAFFFFE6    ;     b drawgridrowloop
00000F60:             ; 
00000F60:             ; drawgridrowlend
00000F60: E3A0000A    ;     mov R0, #10
00000F64: EF000000    ;     swi 0
00000F68:             ; drawgridend
00000F68: E8BD01F0    ;     pop {R4-R8}
00000F6C: E1A0F00E    ;     mov R15, R14
00000F70:             ; 
00000F70:             ; 
00000F70:             ; printoptions
00000F70:             ; ;;INP --
00000F70:             ; ;;OUT --
00000F70:             ; ;;optionsp_1-5
00000F70: E28F0D2E    ;     adrl R0, optionsp_1
00000F74: EF000003    ;     swi 3
00000F78:             ; 
00000F78: E55F0F2D    ;     ldrb R0, width
00000F7C: EF000004    ;     swi 4
00000F80:             ; 
00000F80: E28F0FE2    ;     adrl R0, optionsp_2
00000F84: E2800B02    ; 
00000F88: EF000003    ;     swi 3
00000F8C:             ; 
00000F8C: E55F0F40    ;     ldrb R0, height
00000F90: EF000004    ;     swi 4
00000F94:             ; 
00000F94: E28F0077    ;     adrl R0, optionsp_3
00000F98: E2800C0B    ; 
00000F9C: EF000003    ;     swi 3
00000FA0:             ; 
00000FA0: E55F0F57    ;     ldrb R0, slow_b
00000FA4: E3500001    ;     cmp R0, #1
00000FA8: 128F008C    ;     adrlne R0, off_msg
00000FAC: 12800B05    ; 
00000FB0: 028F0081    ;     adrleq R0, on_msg
00000FB4: 02800B05    ; 
00000FB8: EF000003    ;     swi 3
00000FBC:             ; 
00000FBC: E28F005B    ;     adrl R0, optionsp_4
00000FC0: E2800C0B    ; 
00000FC4: EF000003    ;     swi 3
00000FC8:             ; 
00000FC8: E55F0F80    ;     ldrb R0, erase_b
00000FCC: E3500001    ;     cmp R0, #1
00000FD0: 128F0064    ;     adrlne R0, off_msg
00000FD4: 12800B05    ; 
00000FD8: 028F0059    ;     adrleq R0, on_msg
00000FDC: 02800B05    ; 
00000FE0: EF000003    ;     swi 3
00000FE4:             ; 
00000FE4: E28F003F    ;     adrl R0, optionsp_5
00000FE8: E2800C0B    ; 
00000FEC: EF000003    ;     swi 3
00000FF0:             ; 
00000FF0: E55F0FA6    ;     ldrb R0, step_b
00000FF4: E3500001    ;     cmp R0, #1
00000FF8: 128F003C    ;     adrlne R0, off_msg
00000FFC: 12800B05    ; 
00001000: 028F0031    ;     adrleq R0, on_msg
00001004: 02800B05    ; 
00001008: EF000003    ;     swi 3
0000100C:             ; 
0000100C: E3A0000A    ;     ldr R0, =nl
00001010: EF000000    ;     swi 0
00001014:             ; 
00001014: E1A0F00E    ;     mov R15, R14
00001018:             ; 
00001018:             ; setupOptions
00001018:             ; ;;INP in R0 is 1 if should ask for dims 0 for skip
00001018: E92D4010    ;     push {R14, R4}
0000101C: E1A04000    ;     mov R4, R0
00001020:             ; 
00001020: E28F0065    ;     adrl R0, askdefaults ;;ask q
00001024: E2800B02    ; 
00001028: EF000003    ;     swi 3
0000102C: EF000001    ;     swi 1   ;;get character answer
00001030: EF000000    ;     swi 0
00001034: E3500059    ;     cmp R0, #'Y'
00001038: E3A0000A    ;     ldr R0, =nl
0000103C: EF000000    ;     swi 0
00001040:             ; 
00001040: 1A000021    ;     bne setupCustom
00001044:             ; 
00001044: E24F0EFF    ;     adrl R0, erase_b_d
00001048: E5500000    ;     ldrb R0, [R0]
0000104C: E24F1004    ;     adrl R1, erase_b
00001050: E2411A01    ; 
00001054: E5410000    ;     strb R0, [R1]
00001058:             ; 
00001058: E24F0003    ;     adrl R0, slow_b_d
0000105C: E2400A01    ; 
00001060: E5500000    ;     ldrb R0, [R0]
00001064: E24F101B    ;     adrl R1, slow_b
00001068: E2411A01    ; 
0000106C: E5410000    ;     strb R0, [R1]
00001070:             ; 
00001070: E24F001A    ;     adrl R0, step_b_d
00001074: E2400A01    ; 
00001078: E5500000    ;     ldrb R0, [R0]
0000107C: E24F1032    ;     adrl R1, step_b
00001080: E2411A01    ; 
00001084: E5410000    ;     strb R0, [R1]
00001088:             ; 
00001088: E3540000    ;     cmp R4, #0
0000108C: 0A00000B    ;     beq setupOptionsDEnd
00001090:             ; 
00001090: E24F0039    ;     adrl R0, width_d
00001094: E2400A01    ; 
00001098: E5500000    ;     ldrb R0, [R0]
0000109C: E24F1051    ;     adrl R1, width
000010A0: E2411A01    ; 
000010A4: E5410000    ;     strb R0, [R1]
000010A8: E24F0050    ;     adrl R0, height_d
000010AC: E2400A01    ; 
000010B0: E5500000    ;     ldrb R0, [R0]
000010B4: E24F1068    ;     adrl R1, height
000010B8: E2411A01    ; 
000010BC: E5410000    ;     strb R0, [R1]
000010C0:             ; 
000010C0:             ; setupOptionsDEnd
000010C0: EBFFFFAA    ;     bl printoptions
000010C4:             ; 
000010C4: E8BD4010    ;     pop {R14, R4}
000010C8: E1A0F00E    ;     mov R15, R14 ;;RET
000010CC:             ; 
000010CC:             ; setupCustom
000010CC:             ; ;;ask for erase, slow, step, and conditionally dims
000010CC:             ; 
000010CC:             ; ;;ask step
000010CC:             ; ;;ask erase
000010CC:             ; ;;if (!step)
000010CC:             ; ;;  if erase
000010CC:             ; ;;      print(recommend slow)
000010CC:             ; ;;  ask slow
000010CC:             ; 
000010CC: E3A01001    ;     mov R1, #1
000010D0:             ; 
000010D0: E28F0018    ;     adrl R0, askstep
000010D4: E2800B02    ; 
000010D8: EF000003    ;     swi 3
000010DC: EF000001    ;     swi 1
000010E0: EF000000    ;     swi 0 
000010E4: E3500059    ;     cmp R0, #'Y' 
000010E8: E3A0000A    ;     ldr R0, =nl
000010EC: EF000000    ;     swi 0
000010F0: 13A01000    ;     movne R1, #0
000010F4: E24F00AA    ;     adrl R0, step_b
000010F8: E2400A01    ; 
000010FC: E5401000    ;     strb R1, [R0]
00001100:             ; 
00001100: E3A01001    ;     mov R1, #1
00001104:             ; 
00001104: E28F00B3    ;     adrl R0, askerase
00001108: E2800C07    ; 
0000110C: EF000003    ;     swi 3
00001110: EF000001    ;     swi 1
00001114: EF000000    ;     swi 0
00001118: E3500059    ;     cmp R0, #'Y'
0000111C: E3A0000A    ;     ldr R0, =nl
00001120: EF000000    ;     swi 0
00001124: 13A01000    ;     movne R1, #0
00001128: E24F00E0    ;     adrl R0, erase_b
0000112C: E2400A01    ; 
00001130: E5401000    ;     strb R1, [R0]
00001134:             ; 
00001134: E24F00EA    ;     adrl R0, step_b
00001138: E2400A01    ; 
0000113C: E5500000    ;     ldrb R0, [R0]
00001140: E3500001    ;     cmp R0, #1
00001144: 0A000011    ;     beq setupCustomskipslow
00001148:             ; 
00001148: E3510001    ;     cmp R1, #1 ;;if erase is on
0000114C: E28F004F    ;     adrl R0, warneraseslow
00001150: E2800B02    ; 
00001154: 0F000003    ;     swieq 3
00001158:             ; 
00001158: E3A01001    ;     mov R1, #1
0000115C:             ;  
0000115C: E28F0FDD    ;     adrl R0, askslow
00001160: E2800B01    ; 
00001164: EF000003    ;     swi 3
00001168: EF000001    ;     swi 1
0000116C: EF000000    ;     swi 0 
00001170: E3500059    ;     cmp R0, #'Y' 
00001174: E3A0000A    ;     ldr R0, =nl
00001178: EF000000    ;     swi 0
0000117C: 13A01000    ;     movne R1, #0
00001180: E24F0037    ;     adrl R0, slow_b
00001184: E2400C11    ; 
00001188: E5401000    ;     strb R1, [R0] ;;[[maybe]] changed but not checked, go here if error
0000118C:             ; 
0000118C: EA000015    ;     b setupCustomDimsCheck
00001190:             ; 
00001190:             ; setupCustomskipslow
00001190: E3A00000    ;     mov R0, #0
00001194: E24F104B    ;     adrl R1, slow_b
00001198: E2411C11    ; 
0000119C: E5410000    ;     strb R0, [R1]
000011A0:             ; 
000011A0: EA000010    ;     b setupCustomDimsCheck
000011A4:             ; 
000011A4:             ; printrange
000011A4:             ; ;;INP --
000011A4:             ; ;;OUT --
000011A4: E28F00DF    ;     adrl R0, bracket_open
000011A8: E2800A01    ; 
000011AC: EF000003    ;     swi 3
000011B0:             ; 
000011B0: E24F0063    ;     adrl R0, range_min
000011B4: E2400C11    ; 
000011B8: E5500000    ;     ldrb R0, [R0]
000011BC: EF000004    ;     swi 4
000011C0:             ; 
000011C0: E28F0E83    ;     adrl R0, dash
000011C4: EF000003    ;     swi 3
000011C8:             ; 
000011C8: E24F007A    ;     adrl R0, range_max
000011CC: E2400C11    ; 
000011D0: E5500000    ;     ldrb R0, [R0]
000011D4: EF000004    ;     swi 4
000011D8:             ; 
000011D8: E28F001A    ;     adrl R0, b_close_colon
000011DC: E2800B02    ; 
000011E0: EF000003    ;     swi 3
000011E4:             ; 
000011E4: E1A0F00E    ;     mov R15, R14
000011E8:             ; 
000011E8:             ; setupCustomDimsCheck
000011E8: E3540000    ;     cmp R4, #0
000011EC: 0A000043    ;     beq customend
000011F0:             ; 
000011F0: E28F00E9    ;     adrl R0, askwid
000011F4: E2800C07    ; 
000011F8: EF000003    ;     swi 3
000011FC:             ; 
000011FC: EBFFFFE8    ;     bl printrange
00001200:             ; 
00001200:             ; getwid
00001200: E3A0000A    ;     ldr R0, =enter
00001204: E3A01003    ;     mov R1, #3
00001208: E3A02001    ;     mov R2, #1
0000120C: EBFFFE8E    ;     bl getstring
00001210: E1A04000    ;     mov R4, R0
00001214:             ; 
00001214: EBFFFE42    ;     bl strtoi
00001218: E1A05000    ;     mov R5, R0
0000121C:             ;     
0000121C: E1A00004    ;     mov R0, R4
00001220: EB0000CD    ;     bl free ;;free the collected string
00001224:             ; 
00001224: E1A01005    ;     mov R1, R5
00001228:             ; 
00001228: EBFFFD80    ;     bl newline
0000122C:             ; 
0000122C: E24F40DF    ;     adrl R4, range_min
00001230: E2444C11    ; 
00001234: E5544000    ;     ldrb R4, [R4]
00001238: E24F50EA    ;     adrl R5, range_max
0000123C: E2455C11    ; 
00001240: E5555000    ;     ldrb R5, [R5]
00001244:             ; 
00001244: E1510005    ;     cmp R1, R5
00001248: CA000005    ;     bgt getwidFail
0000124C: E1510004    ;     cmp R1, R4
00001250: BA000003    ;     blt getwidFail
00001254:             ; 
00001254: E24F0009    ;     adrl R0, width
00001258: E2400C12    ; 
0000125C: E5401000    ;     strb R1, [R0]
00001260:             ; 
00001260: EA000004    ;     b getheisetup
00001264:             ; 
00001264:             ; getwidFail
00001264: E28F00A9    ;     adrl R0, getwidfailmsg
00001268: E2800C07    ; 
0000126C: EF000003    ;     swi 3
00001270:             ; 
00001270: EBFFFFCB    ;     bl printrange
00001274:             ; 
00001274: EAFFFFE1    ;     b getwid
00001278:             ; 
00001278:             ; getheisetup
00001278: E28F007E    ;     adrl R0, askhei
0000127C: E2800C07    ; 
00001280: EF000003    ;     swi 3
00001284:             ; 
00001284: EBFFFFC6    ;     bl printrange
00001288:             ; 
00001288:             ; gethei
00001288: E3A0000A    ;     ldr R0, =enter
0000128C: E3A01003    ;     mov R1, #3
00001290: E3A02001    ;     mov R2, #1
00001294: EBFFFE6C    ;     bl getstring
00001298: E1A04000    ;     mov R4, R0
0000129C:             ; 
0000129C: EBFFFE20    ;     bl strtoi
000012A0: E1A05000    ;     mov R5, R0
000012A4:             ; 
000012A4: E1A00004    ;     mov R0, R4
000012A8: EB0000AB    ;     bl free
000012AC:             ; 
000012AC: E1A01005    ;     mov R1, R5
000012B0:             ; 
000012B0: EBFFFD5E    ;     bl newline
000012B4:             ; 
000012B4: E24F4067    ;     adrl R4, range_min
000012B8: E2444C12    ; 
000012BC: E5544000    ;     ldrb R4, [R4]
000012C0: E24F5072    ;     adrl R5, range_max
000012C4: E2455C12    ; 
000012C8: E5555000    ;     ldrb R5, [R5]
000012CC:             ; 
000012CC: E1510005    ;     cmp R1, R5
000012D0: CA000005    ;     bgt getheiFail
000012D4: E1510004    ;     cmp R1, R4
000012D8: BA000003    ;     blt getheiFail
000012DC:             ; 
000012DC: E24F2E29    ;     adrl R2, height
000012E0: E2422A01    ; 
000012E4: E5421000    ;     strb R1, [R2]
000012E8:             ; 
000012E8: EA000004    ;     b customend
000012EC:             ; 
000012EC:             ; getheiFail
000012EC: E28F004D    ;     adrl R0, getheifailmsg
000012F0: E2800C07    ; 
000012F4: EF000003    ;     swi 3
000012F8:             ; 
000012F8: EBFFFFA9    ;     bl printrange
000012FC:             ; 
000012FC: EAFFFFE1    ;     b gethei
00001300:             ; 
00001300:             ; customend
00001300: EBFFFF1A    ;     bl printoptions
00001304:             ; 
00001304: E8BD4010    ;     pop {R14, R4}
00001308: E1A0F00E    ;     mov R15, R14 ;;RET
0000130C:             ; 
0000130C:             ; 
0000130C:             ; updategrid
0000130C:             ; ;;INP in R0 is the active grid
0000130C:             ; ;;INP in R1 is the passive grid
0000130C:             ; ;;passive grid is the one being updated based on the value in the activeGrid
0000130C:             ; ;;RET --
0000130C:             ; ;;for row from 0 to height - 1
0000130C:             ; ;;  for col from 0 to width - 1
0000130C:             ; ;;      int n = countNeighbours(activeGrid, row, col)
0000130C:             ; ;;      int s = activeGrid[row][col]
0000130C:             ; ;;      
0000130C:             ; ;;      if (s == alive)
0000130C:             ; ;;          passiveGrid[row][col] = n == 3 or n == 2
0000130C:             ; ;;      else
0000130C:             ; ;;          passiveGrid[row][col] = n == 3
0000130C:             ; 
0000130C:             ; ;;  R4 holds the row
0000130C:             ; ;;  R5 holds the col
0000130C:             ; ;;  R6 holds the width
0000130C:             ; ;;  R7 holds the height
0000130C:             ; ;;  R8 holds the active grid
0000130C:             ; ;;  R9 holds the passive grid
0000130C:             ; 
0000130C: E92D47F0    ;     push {R14, R4-R10}
00001310:             ; 
00001310: E24F60C5    ;     adrl R6, width
00001314: E2466C12    ; 
00001318: E5566000    ;     ldrb R6, [R6]
0000131C: E24F7E2D    ;     adrl R7, height
00001320: E2477A01    ; 
00001324: E5577000    ;     ldrb R7, [R7]
00001328:             ; 
00001328: E1A08000    ;     mov R8, R0
0000132C: E1A09001    ;     mov R9, R1
00001330:             ; 
00001330: E3A04000    ;     mov R4, #0 ;;row
00001334:             ; updategridrowloop
00001334: E1540007    ;     cmp R4, R7
00001338: 0A00001A    ;     beq updategridrowlend
0000133C:             ; 
0000133C: E3A05000    ;     mov R5, #0 ;;col
00001340:             ; updategridcolloop
00001340: E1550006    ;     cmp R5, R6
00001344: 0A000014    ;     beq updategridccollend
00001348:             ; 
00001348: E1A00008    ;     mov R0, R8
0000134C: E1A01004    ;     mov R1, R4
00001350: E1A02005    ;     mov R2, R5
00001354: EB000015    ;     bl countneighbours
00001358:             ; 
00001358: E0215694    ;     mla R1, R4, R6, R5 ;;R1 = row * width + col
0000135C: E7D82001    ;     ldrb R2, [R8, R1] ;;grid[R1]
00001360:             ;     ;;R0 holds the n count
00001360: E3520000    ;     cmp R2, #0
00001364: 0A000006    ;     beq updatedead
00001368:             ; 
00001368:             ; updatealive
00001368: E3A03000    ;     mov R3, #0
0000136C: E3500003    ;     cmp R0, #3
00001370: 03A03001    ;     moveq R3, #1
00001374: E3500002    ;     cmp R0, #2
00001378: 03A03001    ;     moveq R3, #1
0000137C: E7C93001    ;     strb R3, [R9, R1]
00001380: EA000003    ;     b updatelcont
00001384:             ; 
00001384:             ; updatedead
00001384: E3A03001    ;     mov R3, #1
00001388: E3500003    ;     cmp R0, #3
0000138C: 13A03000    ;     movne R3, #0
00001390: E7C93001    ;     strb R3, [R9, R1]
00001394:             ; 
00001394:             ; updatelcont
00001394: E2855001    ;     add R5, R5, #1
00001398: EAFFFFE8    ;     b updategridcolloop
0000139C:             ; 
0000139C:             ; updategridccollend
0000139C: E3A05000    ;     mov R5, #0
000013A0: E2844001    ;     add R4, R4, #1
000013A4: EAFFFFE2    ;     b updategridrowloop
000013A8:             ; 
000013A8:             ; updategridrowlend
000013A8:             ; updategridend
000013A8: E8BD47F0    ;     pop {R14, R4-R10}
000013AC: E1A0F00E    ;     mov R15, R14
000013B0:             ; 
000013B0:             ; 
000013B0:             ; countneighbours
000013B0:             ; ;;INP in R0 is the activeGrid
000013B0:             ; ;;INP in R1 is the row
000013B0:             ; ;;INP in R2 is the col
000013B0:             ; ;;OUT in R0 is the number of neighbours
000013B0:             ; 
000013B0:             ; ;;offsets = [[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]]
000013B0:             ; ;;tot = 0
000013B0:             ; ;;for offset in offsets
000013B0:             ; ;;  if (isinrange(row + offset[0], col + offset[1]))
000013B0:             ; ;;      tot += grid[row + offset[0]][col + offset[1]]
000013B0:             ; ;;return tot
000013B0: E92D4FF0    ;     push {R14, R4-R11} ;;I used the fp before I knew it wasn't a general purpose one, its fine 
                      ; in this context anyway
000013B4:             ; 
000013B4: E24F4FED    ;     adrl R4, offsets ;;holds the offset
000013B8: E2444A01    ; 
000013BC:             ; 
000013BC: E1A07000    ;     mov R7, R0
000013C0: E1A08001    ;     mov R8, R1
000013C4: E1A09002    ;     mov R9, R2
000013C8: E3A0A000    ;     mov R10, #0 ;;R10 holds the total
000013CC: E24FB081    ;     adrl R11, width
000013D0: E24BBC13    ; 
000013D4: E55BB000    ;     ldrb R11, [R11];;R11 holds the width of the grid
000013D8:             ; 
000013D8: E3A03000    ;     mov R3, #0
000013DC:             ; 
000013DC:             ; countneighboursloop
000013DC: E3530008    ;     cmp R3, #8 ;;change this ccheck to be for R4
000013E0: 0A00000F    ;     beq countneighbourslend
000013E4:             ; 
000013E4: E4945004    ;     ldr R5, [R4], #4
000013E8: E4946004    ;     ldr R6, [R4], #4
000013EC:             ; 
000013EC: E0880005    ;     add R0, R8, R5
000013F0: E0891006    ;     add R1, R9, R6
000013F4:             ; 
000013F4: E2833001    ;     add R3, R3, #1
000013F8:             ; 
000013F8: E92D0008    ;     push {R3} ;;I should probably be using a local var on the stack, but I don't yet know how t
                      ; o setup a stack frame properly
000013FC: EB00000B    ;     bl isinrange
00001400: E8BD0008    ;     pop {R3}
00001404:             ; 
00001404: E3500000    ;     cmp R0, #0
00001408: 0A000004    ;     beq countneighboursskipadd
0000140C:             ; 
0000140C: E0880005    ;     add R0, R8, R5 ;;new row
00001410: E0891006    ;     add R1, R9, R6 ;;new col ;;can assume that R0, R1 haven't changed as isinrange doesn't edit
                      ;  them, but I'm going to for now
00001414:             ; 
00001414: E0201B90    ;     mla R0, R0, R11, R1 ;;find offset
00001418: E7D70000    ;     ldrb R0, [R7, R0]
0000141C: E08AA000    ;     add R10, R10, R0 ;;tot += grid[newrow][newcol]
00001420:             ; 
00001420:             ; countneighboursskipadd
00001420: EAFFFFED    ;     b countneighboursloop
00001424:             ; 
00001424:             ; countneighbourslend
00001424:             ; countneighboursend
00001424: E1A0000A    ;     mov R0, R10
00001428: E8BD4FF0    ;     pop {R14, R4-R11}
0000142C: E1A0F00E    ;     mov R15, R14
00001430:             ; 
00001430:             ; 
00001430:             ; isinrange
00001430:             ; ;;INP in R0 is the row
00001430:             ; ;;INP in R1 is the col
00001430:             ; ;;Uses defined width and height
00001430:             ; ;;RET in R0 is 1 if is in range else 0
00001430: E3A02001    ;     mov R2, #1 ;;is valid unless...
00001434:             ; 
00001434: E3500000    ;     cmp R0, #0
00001438: BA00000D    ;     blt isinrangefail
0000143C:             ; 
0000143C: E3510000    ;     cmp R1, #0
00001440: BA00000B    ;     blt isinrangefail
00001444:             ; 
00001444: E24F30F9    ;     adrl R3, width
00001448: E2433C13    ; 
0000144C: E5533000    ;     ldrb R3, [R3]
00001450: E1510003    ;     cmp R1, R3
00001454: AA000006    ;     bge isinrangefail
00001458:             ; 
00001458: E24F300C    ;     adrl R3, height
0000145C: E2433B05    ; 
00001460: E5533000    ;     ldrb R3, [R3]
00001464: E1500003    ;     cmp R0, R3
00001468: AA000001    ;     bge isinrangefail
0000146C:             ; 
0000146C: E3A00001    ;     mov R0, #1
00001470: EA000000    ;     b isinrangeend
00001474:             ; 
00001474:             ; isinrangefail
00001474: E3A00000    ;     mov R0, #0
00001478:             ; 
00001478:             ; isinrangeend
00001478: E1A0F00E    ;     mov R15, R14
0000147C:             ; 
0000147C:             ; 
0000147C:             ; ;; The heap will be a linked list of free blocks - unlike the Comodo version which stores both 
                      ; free & taken blocks 
0000147C:             ; ;; This is an idea I'm stealing from the C programming book
0000147C:             ; ;; Crate structure
0000147C:             ; ;;  |-ptr to next crate (1 word)
0000147C:             ; ;;  |-ptr to prev crate (1 word)
0000147C:             ; ;;  `-Size (bytes)      (1 word)
0000147C:             ; ;; 
0000147C:             ; 
0000147C:             ; ;;  Traversal of the heap
0000147C:             ; ;;  Unlink in my Comodo implimentation the heap is not a linked list of all Crates (free or not
                      ; )
0000147C:             ; ;;  That made traversing the heap for debugging purposes very easy, in this case taken crates d
                      ; o not point to the next
0000147C:             ; ;;  Instead could start at head and then just go to addr + sizeof(Crate) + size. This should ta
                      ; ke us to the next crate, free or not
0000147C:             ; ;;  
0000147C:             ; setupHeap
0000147C:             ; ;;NO INP
0000147C:             ; ;;NO OUT
0000147C:             ;     ;;we have the heapstart
0000147C:             ;     ;;the end of the heap will be 0x100000 (it will overlap with the stack :) )
0000147C: E24F0D52    ;     adrl R0, heaphead
00001480: E5100000    ;     ldr R0, [R0] ;;stores the mem addr of the start of the heap
00001484: E3A01601    ;     ldr R1, =max_addr ;;stores the end of the heap
00001488: E3A02801    ;     ldr R2, =stack_size
0000148C: E0411002    ;     sub R1, R1, R2
00001490:             ; 
00001490: E0411000    ;     sub R1, R1, R0  ;;HEAPEND - HEAPSTART = TOTAL STORAGE (bytes)
00001494: E241100C    ;     sub R1, R1, #12 ;;SIZE -= SIZEOF(CRATE) (12 bytes)
00001498: E5801008    ;     str R1, [R0, #8] ;;set the size of the crate
0000149C: E3A01000    ;     mov R1, #0
000014A0: E5801004    ;     str R1, [R0, #4] ;;set the prev ptr
000014A4: E5801000    ;     str R1, [R0, #0] ;;set the next ptr
000014A8:             ; 
000014A8: E1A0F00E    ;     mov R15, R14
000014AC:             ; 
000014AC:             ; ;; The heap is a linked list of free Crates and so find the header and then go though until one
                      ;  satifies the size requirement
000014AC:             ; ;;  end if next is 0
000014AC:             ; ;;  once found either take over the crate or split it into two new crates
000014AC:             ; ;;  align the bytes amount to 8 byte boundry
000014AC:             ; malloc
000014AC:             ; ;;INP into R0 bytes to allocate
000014AC:             ; ;;OUT into R0 the ptr to the memory or 0 for no memory allocated
000014AC:             ;     ;;step 1 align the bytes
000014AC:             ;     ;;1001010 & 0111 = 0000010 ;2
000014AC:             ;     ;;if 0 goto alignend
000014AC:             ;     ;;1001010 + (8 - 2)
000014AC: E92D0010    ;     push {R4}
000014B0:             ; 
000014B0: E2001007    ;     and R1, R0, #0b0111
000014B4: E3510000    ;     cmp R1, #0
000014B8: 0A000002    ;     beq mallignend
000014BC: E3A03008    ;     mov R3, #0b1000
000014C0: E0432001    ;     sub R2, R3, R1
000014C4: E0800002    ;     add R0, R0, R2
000014C8:             ; 
000014C8:             ; mallignend
000014C8: E24F10CC    ;     adrl R1, heaphead
000014CC: E2411B05    ; 
000014D0: E5111000    ;     ldr R1, [R1] ;;stores a ptr to the first block
000014D4:             ;     
000014D4:             ; checkcrate
000014D4: E5912008    ;     ldr R2, [R1, #8] ;;Size of the crate
000014D8: E1500002    ;     cmp R0, R2 ;;bytes needed - bytes in crate
000014DC: DA000006    ;     ble foundcrate
000014E0: E5912000    ;     ldr R2, [R1, #0] ;;get the next ptr
000014E4: E3520000    ;     cmp R2, #0
000014E8: 0A000001    ;     beq nocrates
000014EC: E1A01002    ;     mov R1, R2 ;;swap the current crate with the next crate
000014F0: EAFFFFF7    ;     b checkcrate
000014F4:             ; nocrates
000014F4: E3A00000    ;     mov R0, #0
000014F8: EA000015    ;     b mallocEnd
000014FC:             ; 
000014FC:             ; foundcrate
000014FC:             ;     ;;Once a crate that we can use has been found we need to either split the crate or use the 
                      ; crate
000014FC:             ;     ;;We should use the whole crate only when its size < bytesneeded + CrateHeader + 8
000014FC:             ;     ;;This would give the edge case crate 8 bytes
000014FC:             ;     
000014FC:             ;     ;;R1 holds the found crate ptr
000014FC:             ;     ;;R0 is the bytes requested and aligned
000014FC: E2802014    ;     add R2, R0, #20 ;;A crate header is 12 bytes + the extra 8 bytes minimum
00001500: E5913008    ;     ldr R3, [R1, #8]
00001504: E1530002    ;     cmp R3, R2
00001508: BA00000C    ;     blt usecrate
0000150C:             ; splitcrate
0000150C:             ;     ;;In this case we have a large crate that should be split up.
0000150C:             ;     ;;ATM the crate will just be split up to where the requested memory is at the end of the fr
                      ; ee Crate.
0000150C:             ; 
0000150C: E5913008    ;     ldr R3, [R1, #8] ;;The size of the toSplit Crate
00001510: E0433000    ;     sub R3, R3, R0 ;; size - bytesRequested
00001514: E243300C    ;     sub R3, R3, #12 ;; size - bytesRequested - sizeof(Crate)
00001518: E5813008    ;     str R3, [R1, #8] ;;toSplit->size = newSize
0000151C:             ; 
0000151C: E0833001    ;     add R3, R3, R1 ;; newSize + toSplit.addr
00001520: E283400C    ;     add R4, R3, #12 ;; newSize + toSplit.addr + sizeof(Crate) = position of new Crate
00001524:             ; 
00001524:             ;     ;;Setup the header for the newCrate
00001524: E3A02000    ;     mov R2, #0
00001528: E5842000    ;     str R2, [R4, #0] ;;next = 0
0000152C: E5842004    ;     str R2, [R4, #4] ;;prev = 0
00001530: E5840008    ;     str R0, [R4, #8] ;;size = requested and aligned
00001534:             ; 
00001534:             ;     ;;MAYBE: can the crates that are taken have a smaller header than those that are free. Take
                      ; n crates need not store the next, prev free nodes
00001534:             ;     ;;This may complicate things as size would need to be moved around and the size from taken 
                      ; to free would be different. 
00001534:             ; 
00001534: E284400C    ;     add R4, R4, #12
00001538:             ; 
00001538: E1A00004    ;     mov R0, R4
0000153C:             ; 
0000153C: EA000004    ;     b mallocEnd
00001540:             ; 
00001540:             ; usecrate
00001540:             ;     ;; Simplest option as we can just remove it from the list
00001540:             ;     ;; c1 <-> c2 <-> c3 ==> c1 <-> c3
00001540: E5912000    ;     ldr R2, [R1, #0] ;;next ptr
00001544: E5913004    ;     ldr R3, [R1, #4] ;;prev ptr
00001548: E5823004    ;     str R3, [R2, #4] ;;Store c1 into c3's previous
0000154C: E5832000    ;     str R2, [R3, #0] ;;Store c3 into c1's next
00001550:             ; 
00001550: E1A00001    ;     mov R0, R1 ;;move the found crate's address into the return register ;;The crate header is 
                      ; no longer needed
00001554:             ; 
00001554:             ; mallocEnd
00001554: E8BD0010    ;     pop {R4}
00001558: E1A0F00E    ;     mov R15, R14
0000155C:             ; 
0000155C:             ; free
0000155C:             ; ;;INP in R0 is the mem addr of the data to be freed
0000155C:             ; ;;OUT in R0 is the success code - 0 for mem freed, ¬0 for error ;;probably won't be currently 
                      ; used `=(- -)=' 
0000155C:             ;     ;;In order to free memory we need to add it back to the linked list
0000155C:             ;     ;;Following K&R's version the linked list will be ordered by address this will make finding
                      ;  consecutive memory locations that should be combined easier
0000155C:             ; 
0000155C:             ;     ;;The inputted address of the crate is the address given in malloc and so the start of the 
                      ; crate is that addr - sizeof(Crate) (#12)
0000155C:             ; 
0000155C:             ;     ;;heapHead = first Crate
0000155C:             ;     ;;current = heapHead
0000155C:             ;     ;;while (toFree.addr > current.addr)
0000155C:             ;     ;;  current = current.next
0000155C:             ;     ;;
0000155C:             ;     ;;//Add the toFree Crate inbetween the current and its previous i.e.  A<->B<->C, toFree = D
                      ;  (addr < C, addr > B) ==> A<->B<->D<->C
0000155C:             ;     ;;current->prev->next = toFree
0000155C:             ;     ;;toFree->prev = current.prev
0000155C:             ;     ;;current->prev = toFree
0000155C:             ;     ;;toFree->next = current
0000155C:             ; 
0000155C:             ;     ;; Crate structure
0000155C:             ;     ;;  |-ptr to next crate (1 word)
0000155C:             ;     ;;  |-ptr to prev crate (1 word)
0000155C:             ;     ;;  `-Size (bytes)      (1 word)
0000155C:             ; 
0000155C: E92D01F0    ;     push {R4-R8}
00001560:             ; 
00001560: E24F1F59    ;     adrl R1, heaphead
00001564: E2411B05    ; 
00001568: E5111000    ;     ldr R1, [R1] ;;R1 will hold the current
0000156C: E240000C    ;     sub R0, R0, #12 ;;subtract sizeof(Crate) to get header pointer
00001570:             ; freeloop
00001570: E5912000    ;     ldr R2, [R1, #0] ;;load the ptr to the next
00001574: E1520000    ;     cmp R2, R0 ;;compare the address of the toFree to the address of current->next
00001578:             ; 
00001578: AA000003    ;     bge freelend ;;current->next.addr >= toFree.addr
0000157C:             ; 
0000157C: E3520000    ;     cmp R2, #0 ;;If there are no more Crates to the right then this could be a new Crate at the
                      ;  end or |F|T| it should merge left 
00001580: 0A000009    ;     beq freelendEnd
00001584:             ; 
00001584: E1A01002    ;     mov R1, R2 ;;current = current.next
00001588:             ; 
00001588: EAFFFFF8    ;     b freeloop
0000158C:             ; 
0000158C:             ; freelend
0000158C:             ;     ;; R1 holds the current (left)
0000158C:             ;     ;; R2 holds the c->next (right)
0000158C: E5912000    ;     ldr R2, [R1, #0]
00001590:             ; 
00001590:             ;     ;;Setup the ptrs for the crates this will help later on   left<->toFree<->right ;;left,righ
                      ; t can be 0
00001590:             ;     ;;We're just adding the new crate to the linked list
00001590:             ;     ;;current->next->prev = toFree
00001590:             ;     ;;toFree->next = current->next
00001590:             ;     ;;current->next = toFree
00001590:             ;     ;;toFree->prev = current
00001590:             ; 
00001590: E5913000    ;     ldr R3, [R1, #0] ;;holds current->next
00001594: E3530000    ;     cmp R3, #0
00001598: 15830004    ;     strne R0, [R3, #4] ;;current->next->prev = toFree
0000159C: E5803000    ;     str R3, [R0, #0] ;;toFree->next = current->next
000015A0: E5810000    ;     str R0, [R1, #0] ;;current->next = toFree
000015A4: E5801004    ;     str R1, [R0, #4] ;;toFree->prev = current
000015A8:             ; 
000015A8: EA000001    ;     b freeMergeCheck
000015AC:             ; 
000015AC:             ; freelendEnd
000015AC:             ; ;;If there are no more Crates to the right then this could be a new Crate at the end or |F|T| i
                      ; t should merge left 
000015AC:             ; ;;Found a crate (current) that is to the left of the crate as we ran out of ->next ptrs
000015AC:             ; ;;Need to set current->next = toFree
000015AC:             ; ;;            toFree->prev = current
000015AC: E5801004    ;     str R1, [R0, #4] ;;toFree->prev = current
000015B0: E5810000    ;     str R0, [R1, #0] ;;current->next = toFree
000015B4:             ; 
000015B4:             ; freeMergeCheck
000015B4:             ;     ;;We have a ptr to current. This should be the closest Crate to the left of toFree
000015B4:             ;     ;;We also have the next Crate (null or not) which is to the right of toFree
000015B4:             ;     ;;Both of these crates MAY need to be merged but could also have taken crates in between
000015B4:             ;     ;;First is to check if the crates are adjacent
000015B4:             ;     ;;  If they are NOT then create a newCrate
000015B4:             ;     ;;  If they are     then merge both
000015B4:             ;     ;;  If only one     then merge either left or right
000015B4:             ; 
000015B4:             ;     ;;R1 will be left
000015B4:             ;     ;;R2 will be right
000015B4:             ; 
000015B4: E3510000    ;     cmp R1, #0
000015B8: 01A01000    ;     moveq R1, R0 ;;If there is no left crate then left=toFree
000015BC: E3520000    ;     cmp R2, #0
000015C0: 01A02000    ;     moveq R2, R0 ;;If there is no right crate (more likely) then right=toFree
000015C4:             ; 
000015C4:             ; verifyLeft
000015C4:             ;     ;;Check if the left is adjacent
000015C4:             ;     ;;It will be if (left.addr + sizeof(Crate) + left.size == toFree.addr)
000015C4:             ; 
000015C4: E5913008    ;     ldr R3, [R1, #8]
000015C8: E283300C    ;     add R3, R3, #12 ;;12 is sizeof(Crate) + toFree.size
000015CC: E0833001    ;     add R3, R3, R1 ;;left.addr + left->size ??
000015D0:             ; 
000015D0: E1530000    ;     cmp R3, R0
000015D4: 11A01000    ;     movne R1, R0
000015D8:             ; 
000015D8:             ; verifyRight
000015D8:             ;     ;;Going from toFree to Right
000015D8: E5903008    ;     ldr R3, [R0, #8] ;;get size of toFree
000015DC: E283300C    ;     add R3, R3, #12 ;;12 is sizeof(Crate) + toFree.size
000015E0: E0833000    ;     add R3, R3, R0 ;; + toFree.addr
000015E4:             ; 
000015E4: E1530002    ;     cmp R3, R2
000015E8: 11A02000    ;     movne R2, R0
000015EC:             ; 
000015EC:             ; merge
000015EC:             ;     ;;Merge the two Crates given in R1 and R2
000015EC:             ;     ;;left can be (left) or (toFree)
000015EC:             ;     ;;right can be (right) or (toFree)
000015EC:             ;     ;;If left == right: don't merge; create new Crate
000015EC:             ;     ;;If left != right: then add to left's size
000015EC:             ; 
000015EC: E1510002    ;     cmp R1, R2
000015F0: 0A00000A    ;     beq mergeNew
000015F4:             ; 
000015F4:             ;     ;;The new size is right.addr - left.addr + right->size    from right.addr - left.addr - siz
                      ; eof(Crate) + sizeof(Crate) + right->size
000015F4:             ;     ;;                                                               |left      |right
000015F4:             ;     ;;                                                               |<12>|size||<12>|size|
000015F4:             ;     ;;
000015F4:             ;     ;;                                                               |left      
000015F4:             ;     ;;                                                               |<12>|size           |
000015F4:             ;     ;;
000015F4:             ;     ;;I'm doing it this way as the left and right may not be contiguous i.e. if toFree has a fr
                      ; ee crate on either side
000015F4:             ; 
000015F4: E0423001    ;     sub R3, R2, R1
000015F8: E5924008    ;     ldr R4, [R2, #8]
000015FC: E0833004    ;     add R3, R3, R4
00001600: E5813008    ;     str R3, [R1, #8]
00001604:             ; 
00001604:             ;     ;;Time to switch some ptrs
00001604:             ;     ;;Current state left.prev<->left<->right<->right.next (with left or right = toFree) or left
                      ; .prev<->left<->toFree<->right<->right.next
00001604:             ;     ;;New state would be left.prev<->left<->right.next (with left or right = toFree) or left.pr
                      ; ev<->left<->right.next
00001604:             ;     ;;Both cases end the same, so get right.next. These could be 0 but it doesn't matter
00001604:             ;     ;;Next need to change the prev and next ptrs for adjacent Crates
00001604:             ;     ;;i.e. right->next->prev = left
00001604:             ; 
00001604: E5924000    ;     ldr R4, [R2, #0] ;;right->next
00001608: E1540001    ;     cmp R4, R1
0000160C: 15814000    ;     strne R4, [R1, #0] ;;left->next = right->next
00001610: 13A04000    ;     movne R4, #0
00001614: 15814000    ;     strne R4, [R1, #0]
00001618:             ; 
00001618: E3540000    ;     cmp R4, #0
0000161C: 15841004    ;     strne R1, [R4, #4] ;;right->next->prev = left
00001620:             ; 
00001620:             ; mergeNew
00001620:             ;     ;;The crate has already been setup with its ptrs and had its size as well so don't need to 
                      ; do anything
00001620:             ; 
00001620:             ; freeEnd
00001620: E8BD01F0    ;     pop {R4-R8}
00001624: E1A0F00E    ;     mov R15, R14
00001628:             ; 
00001628:             ; align
00001628:             ; 
00001628:             ; ;;String defs -- The naming scheme is bad :(
00001628: 2D 2D 2D 2D ; welcomemsg      defb "-----------Welcome to JCGOL in ARM32-----------", nl, 0
0000162C: 2D 2D 2D 2D ; 
00001630: 2D 2D 2D 57 ; 
00001634: 65 6C 63 6F ; 
00001638: 6D 65 20 74 ; 
0000163C: 6F 20 4A 43 ; 
00001640: 47 4F 4C 20 ; 
00001644: 69 6E 20 41 ; 
00001648: 52 4D 33 32 ; 
0000164C: 2D 2D 2D 2D ; 
00001650: 2D 2D 2D 2D ; 
00001654: 2D 2D 2D 0A ; 
00001658: 00          ; 
00001659: 28 4E 29 65 ; welcome2msg     defb "(N)ew board\n(L)oad a saved board\n(H)elp msg\n(S)ettings\n(Q)uit", nl, 0
0000165D: 77 20 62 6F ; 
00001661: 61 72 64 0A ; 
00001665: 28 4C 29 6F ; 
00001669: 61 64 20 61 ; 
0000166D: 20 73 61 76 ; 
00001671: 65 64 20 62 ; 
00001675: 6F 61 72 64 ; 
00001679: 0A 28 48 29 ; 
0000167D: 65 6C 70 20 ; 
00001681: 6D 73 67 0A ; 
00001685: 28 53 29 65 ; 
00001689: 74 74 69 6E ; 
0000168D: 67 73 0A 28 ; 
00001691: 51 29 75 69 ; 
00001695: 74 0A 00    ; 
00001698: 49 6E 76 61 ; mainchoicefail  defb "Invalid choice please enter 'n' for new board, 'l' for load a board, 'h' 
0000169C: 6C 69 64 20 ; to view help message, 's' to view settings, or 'q' to close. Not cases sensative", nl, 0
000016A0: 63 68 6F 69 ; 
000016A4: 63 65 20 70 ; 
000016A8: 6C 65 61 73 ; 
000016AC: 65 20 65 6E ; 
000016B0: 74 65 72 20 ; 
000016B4: 27 6E 27 20 ; 
000016B8: 66 6F 72 20 ; 
000016BC: 6E 65 77 20 ; 
000016C0: 62 6F 61 72 ; 
000016C4: 64 2C 20 27 ; 
000016C8: 6C 27 20 66 ; 
000016CC: 6F 72 20 6C ; 
000016D0: 6F 61 64 20 ; 
000016D4: 61 20 62 6F ; 
000016D8: 61 72 64 2C ; 
000016DC: 20 27 68 27 ; 
000016E0: 20 74 6F 20 ; 
000016E4: 76 69 65 77 ; 
000016E8: 20 68 65 6C ; 
000016EC: 70 20 6D 65 ; 
000016F0: 73 73 61 67 ; 
000016F4: 65 2C 20 27 ; 
000016F8: 73 27 20 74 ; 
000016FC: 6F 20 76 69 ; 
00001700: 65 77 20 73 ; 
00001704: 65 74 74 69 ; 
00001708: 6E 67 73 2C ; 
0000170C: 20 6F 72 20 ; 
00001710: 27 71 27 20 ; 
00001714: 74 6F 20 63 ; 
00001718: 6C 6F 73 65 ; 
0000171C: 2E 20 4E 6F ; 
00001720: 74 20 63 61 ; 
00001724: 73 65 73 20 ; 
00001728: 73 65 6E 73 ; 
0000172C: 61 74 69 76 ; 
00001730: 65 0A 00    ; 
00001733: 53 6C 6F 77 ; helpmsg         defb "Slow mode will create a pause between each grid print to make it more rea
00001737: 20 6D 6F 64 ; dable - can't use with step mode\nErase mode will erase the previous board before printing the 
0000173B: 65 20 77 69 ; next - [is 2x slower]\n", 0
0000173F: 6C 6C 20 63 ; 
00001743: 72 65 61 74 ; 
00001747: 65 20 61 20 ; 
0000174B: 70 61 75 73 ; 
0000174F: 65 20 62 65 ; 
00001753: 74 77 65 65 ; 
00001757: 6E 20 65 61 ; 
0000175B: 63 68 20 67 ; 
0000175F: 72 69 64 20 ; 
00001763: 70 72 69 6E ; 
00001767: 74 20 74 6F ; 
0000176B: 20 6D 61 6B ; 
0000176F: 65 20 69 74 ; 
00001773: 20 6D 6F 72 ; 
00001777: 65 20 72 65 ; 
0000177B: 61 64 61 62 ; 
0000177F: 6C 65 20 2D ; 
00001783: 20 63 61 6E ; 
00001787: 27 74 20 75 ; 
0000178B: 73 65 20 77 ; 
0000178F: 69 74 68 20 ; 
00001793: 73 74 65 70 ; 
00001797: 20 6D 6F 64 ; 
0000179B: 65 0A 45 72 ; 
0000179F: 61 73 65 20 ; 
000017A3: 6D 6F 64 65 ; 
000017A7: 20 77 69 6C ; 
000017AB: 6C 20 65 72 ; 
000017AF: 61 73 65 20 ; 
000017B3: 74 68 65 20 ; 
000017B7: 70 72 65 76 ; 
000017BB: 69 6F 75 73 ; 
000017BF: 20 62 6F 61 ; 
000017C3: 72 64 20 62 ; 
000017C7: 65 66 6F 72 ; 
000017CB: 65 20 70 72 ; 
000017CF: 69 6E 74 69 ; 
000017D3: 6E 67 20 74 ; 
000017D7: 68 65 20 6E ; 
000017DB: 65 78 74 20 ; 
000017DF: 2D 20 5B 69 ; 
000017E3: 73 20 32 78 ; 
000017E7: 20 73 6C 6F ; 
000017EB: 77 65 72 5D ; 
000017EF: 0A 00       ; 
000017F1: 53 69 6E 67 ; help2msg        defb "Single step mode will prompt for input each time a grid is drawn, you can
000017F5: 6C 65 20 73 ;  (s)ave the current state or (q)uit to menu", 0
000017F9: 74 65 70 20 ; 
000017FD: 6D 6F 64 65 ; 
00001801: 20 77 69 6C ; 
00001805: 6C 20 70 72 ; 
00001809: 6F 6D 70 74 ; 
0000180D: 20 66 6F 72 ; 
00001811: 20 69 6E 70 ; 
00001815: 75 74 20 65 ; 
00001819: 61 63 68 20 ; 
0000181D: 74 69 6D 65 ; 
00001821: 20 61 20 67 ; 
00001825: 72 69 64 20 ; 
00001829: 69 73 20 64 ; 
0000182D: 72 61 77 6E ; 
00001831: 2C 20 79 6F ; 
00001835: 75 20 63 61 ; 
00001839: 6E 20 28 73 ; 
0000183D: 29 61 76 65 ; 
00001841: 20 74 68 65 ; 
00001845: 20 63 75 72 ; 
00001849: 72 65 6E 74 ; 
0000184D: 20 73 74 61 ; 
00001851: 74 65 20 6F ; 
00001855: 72 20 28 71 ; 
00001859: 29 75 69 74 ; 
0000185D: 20 74 6F 20 ; 
00001861: 6D 65 6E 75 ; 
00001865: 00          ; 
00001866: 54 68 61 6E ; mainendmsg      defb "Thank you for playing JCGOL for ARM32", nl, 0
0000186A: 6B 20 79 6F ; 
0000186E: 75 20 66 6F ; 
00001872: 72 20 70 6C ; 
00001876: 61 79 69 6E ; 
0000187A: 67 20 4A 43 ; 
0000187E: 47 4F 4C 20 ; 
00001882: 66 6F 72 20 ; 
00001886: 41 52 4D 33 ; 
0000188A: 32 0A 00    ; 
0000188D: 57 6F 75 6C ; askdefaults     defb "Would you like to use the default settings? Y/n: ", 0
00001891: 64 20 79 6F ; 
00001895: 75 20 6C 69 ; 
00001899: 6B 65 20 74 ; 
0000189D: 6F 20 75 73 ; 
000018A1: 65 20 74 68 ; 
000018A5: 65 20 64 65 ; 
000018A9: 66 61 75 6C ; 
000018AD: 74 20 73 65 ; 
000018B1: 74 74 69 6E ; 
000018B5: 67 73 3F 20 ; 
000018B9: 59 2F 6E 3A ; 
000018BD: 20 00       ; 
000018BF: 45 6E 61 62 ; askerase        defb "Enable erase mode? Y/n: ", 0
000018C3: 6C 65 20 65 ; 
000018C7: 72 61 73 65 ; 
000018CB: 20 6D 6F 64 ; 
000018CF: 65 3F 20 59 ; 
000018D3: 2F 6E 3A 20 ; 
000018D7: 00          ; 
000018D8: 45 6E 61 62 ; askslow         defb "Enable slow mode? Y/n: ", 0
000018DC: 6C 65 20 73 ; 
000018E0: 6C 6F 77 20 ; 
000018E4: 6D 6F 64 65 ; 
000018E8: 3F 20 59 2F ; 
000018EC: 6E 3A 20 00 ; 
000018F0: 45 6E 61 62 ; askstep         defb "Enable step mode? Y/n: ", 0
000018F4: 6C 65 20 73 ; 
000018F8: 74 65 70 20 ; 
000018FC: 6D 6F 64 65 ; 
00001900: 3F 20 59 2F ; 
00001904: 6E 3A 20 00 ; 
00001908: 43 61 6E 6E ; stepslowwarning defb "Cannot have slow and step mode active at the same time, disabling slow mo
0000190C: 6F 74 20 68 ; de", nl, 0
00001910: 61 76 65 20 ; 
00001914: 73 6C 6F 77 ; 
00001918: 20 61 6E 64 ; 
0000191C: 20 73 74 65 ; 
00001920: 70 20 6D 6F ; 
00001924: 64 65 20 61 ; 
00001928: 63 74 69 76 ; 
0000192C: 65 20 61 74 ; 
00001930: 20 74 68 65 ; 
00001934: 20 73 61 6D ; 
00001938: 65 20 74 69 ; 
0000193C: 6D 65 2C 20 ; 
00001940: 64 69 73 61 ; 
00001944: 62 6C 69 6E ; 
00001948: 67 20 73 6C ; 
0000194C: 6F 77 20 6D ; 
00001950: 6F 64 65 0A ; 
00001954: 00          ; 
00001955: 52 65 74 75 ; savedchoice     defb "Return to menu? (n for continue sim) Y/n: ", 0
00001959: 72 6E 20 74 ; 
0000195D: 6F 20 6D 65 ; 
00001961: 6E 75 3F 20 ; 
00001965: 28 6E 20 66 ; 
00001969: 6F 72 20 63 ; 
0000196D: 6F 6E 74 69 ; 
00001971: 6E 75 65 20 ; 
00001975: 73 69 6D 29 ; 
00001979: 20 59 2F 6E ; 
0000197D: 3A 20 00    ; 
00001980: 50 6C 65 61 ; askname         defb "Please enter a name for the grid: ", 0
00001984: 73 65 20 65 ; 
00001988: 6E 74 65 72 ; 
0000198C: 20 61 20 6E ; 
00001990: 61 6D 65 20 ; 
00001994: 66 6F 72 20 ; 
00001998: 74 68 65 20 ; 
0000199C: 67 72 69 64 ; 
000019A0: 3A 20 00    ; 
000019A3: 45 72 61 73 ; warneraseslow   defb "Erase mode is active it is recommended to also use slow mode", nl, 0
000019A7: 65 20 6D 6F ; 
000019AB: 64 65 20 69 ; 
000019AF: 73 20 61 63 ; 
000019B3: 74 69 76 65 ; 
000019B7: 20 69 74 20 ; 
000019BB: 69 73 20 72 ; 
000019BF: 65 63 6F 6D ; 
000019C3: 6D 65 6E 64 ; 
000019C7: 65 64 20 74 ; 
000019CB: 6F 20 61 6C ; 
000019CF: 73 6F 20 75 ; 
000019D3: 73 65 20 73 ; 
000019D7: 6C 6F 77 20 ; 
000019DB: 6D 6F 64 65 ; 
000019DF: 0A 00       ; 
000019E1: 50 6C 65 61 ; askwid          defb "Please enter a width (", 0
000019E5: 73 65 20 65 ; 
000019E9: 6E 74 65 72 ; 
000019ED: 20 61 20 77 ; 
000019F1: 69 64 74 68 ; 
000019F5: 20 28 00    ; 
000019F8: 2D 00       ; dash            defb "-", 0
000019FA: 29 3A 20 00 ; b_close_colon   defb "): ",0
000019FE: 50 6C 65 61 ; askhei          defb "Please enter a height ", 0
00001A02: 73 65 20 65 ; 
00001A06: 6E 74 65 72 ; 
00001A0A: 20 61 20 68 ; 
00001A0E: 65 69 67 68 ; 
00001A12: 74 20 00    ; 
00001A15: 49 6E 76 61 ; getwidfailmsg   defb "Invalid width please enter a value between ", 0
00001A19: 6C 69 64 20 ; 
00001A1D: 77 69 64 74 ; 
00001A21: 68 20 70 6C ; 
00001A25: 65 61 73 65 ; 
00001A29: 20 65 6E 74 ; 
00001A2D: 65 72 20 61 ; 
00001A31: 20 76 61 6C ; 
00001A35: 75 65 20 62 ; 
00001A39: 65 74 77 65 ; 
00001A3D: 65 6E 20 00 ; 
00001A41: 49 6E 76 61 ; getheifailmsg   defb "Invalid height please enter a value between ", 0
00001A45: 6C 69 64 20 ; 
00001A49: 68 65 69 67 ; 
00001A4D: 68 74 20 70 ; 
00001A51: 6C 65 61 73 ; 
00001A55: 65 20 65 6E ; 
00001A59: 74 65 72 20 ; 
00001A5D: 61 20 76 61 ; 
00001A61: 6C 75 65 20 ; 
00001A65: 62 65 74 77 ; 
00001A69: 65 65 6E 20 ; 
00001A6D: 00          ; 
00001A6E:             ; 
00001A6E:             ; ;;[[todo]] change to printing the current options
00001A6E: 55 73 69 6E ; usingDefault    defb "Using default values: dims=(18, 18) slowMode=Off eraseMode=Off stepMode=O
00001A72: 67 20 64 65 ; n", nl, 0
00001A76: 66 61 75 6C ; 
00001A7A: 74 20 76 61 ; 
00001A7E: 6C 75 65 73 ; 
00001A82: 3A 20 64 69 ; 
00001A86: 6D 73 3D 28 ; 
00001A8A: 31 38 2C 20 ; 
00001A8E: 31 38 29 20 ; 
00001A92: 73 6C 6F 77 ; 
00001A96: 4D 6F 64 65 ; 
00001A9A: 3D 4F 66 66 ; 
00001A9E: 20 65 72 61 ; 
00001AA2: 73 65 4D 6F ; 
00001AA6: 64 65 3D 4F ; 
00001AAA: 66 66 20 73 ; 
00001AAE: 74 65 70 4D ; 
00001AB2: 6F 64 65 3D ; 
00001AB6: 4F 6E 0A 00 ; 
00001ABA: 55 73 69 6E ; usingDefWODims  defb "Using default values: slowMode=Off eraseMode=Off stepMode=On", nl, 0
00001ABE: 67 20 64 65 ; 
00001AC2: 66 61 75 6C ; 
00001AC6: 74 20 76 61 ; 
00001ACA: 6C 75 65 73 ; 
00001ACE: 3A 20 73 6C ; 
00001AD2: 6F 77 4D 6F ; 
00001AD6: 64 65 3D 4F ; 
00001ADA: 66 66 20 65 ; 
00001ADE: 72 61 73 65 ; 
00001AE2: 4D 6F 64 65 ; 
00001AE6: 3D 4F 66 66 ; 
00001AEA: 20 73 74 65 ; 
00001AEE: 70 4D 6F 64 ; 
00001AF2: 65 3D 4F 6E ; 
00001AF6: 0A 00       ; 
00001AF8:             ; 
00001AF8: 43 75 72 72 ; optionsp_1      defb "Current options: dims=(", 0 ;;width
00001AFC: 65 6E 74 20 ; 
00001B00: 6F 70 74 69 ; 
00001B04: 6F 6E 73 3A ; 
00001B08: 20 64 69 6D ; 
00001B0C: 73 3D 28 00 ; 
00001B10: 2C 20 00    ; optionsp_2      defb ", ", 0 ;;height
00001B13: 29 20 73 6C ; optionsp_3      defb ") slowMode=", 0 ;;OFF/ON
00001B17: 6F 77 4D 6F ; 
00001B1B: 64 65 3D 00 ; 
00001B1F: 20 65 72 61 ; optionsp_4      defb " eraseMode=", 0 ;;^
00001B23: 73 65 4D 6F ; 
00001B27: 64 65 3D 00 ; 
00001B2B: 20 73 74 65 ; optionsp_5      defb " stepMode=", 0  ;;^
00001B2F: 70 4D 6F 64 ; 
00001B33: 65 3D 00    ; 
00001B36:             ; 
00001B36: 59 6F 75 27 ; mainloopittsmsg defb "You've reached the max itterations before waiting for input. You can chan
00001B3A: 76 65 20 72 ; ge this in settings. Press any key to continue, 'q' to quit, and 's' to save the grid", nl, 0
00001B3E: 65 61 63 68 ; 
00001B42: 65 64 20 74 ; 
00001B46: 68 65 20 6D ; 
00001B4A: 61 78 20 69 ; 
00001B4E: 74 74 65 72 ; 
00001B52: 61 74 69 6F ; 
00001B56: 6E 73 20 62 ; 
00001B5A: 65 66 6F 72 ; 
00001B5E: 65 20 77 61 ; 
00001B62: 69 74 69 6E ; 
00001B66: 67 20 66 6F ; 
00001B6A: 72 20 69 6E ; 
00001B6E: 70 75 74 2E ; 
00001B72: 20 59 6F 75 ; 
00001B76: 20 63 61 6E ; 
00001B7A: 20 63 68 61 ; 
00001B7E: 6E 67 65 20 ; 
00001B82: 74 68 69 73 ; 
00001B86: 20 69 6E 20 ; 
00001B8A: 73 65 74 74 ; 
00001B8E: 69 6E 67 73 ; 
00001B92: 2E 20 50 72 ; 
00001B96: 65 73 73 20 ; 
00001B9A: 61 6E 79 20 ; 
00001B9E: 6B 65 79 20 ; 
00001BA2: 74 6F 20 63 ; 
00001BA6: 6F 6E 74 69 ; 
00001BAA: 6E 75 65 2C ; 
00001BAE: 20 27 71 27 ; 
00001BB2: 20 74 6F 20 ; 
00001BB6: 71 75 69 74 ; 
00001BBA: 2C 20 61 6E ; 
00001BBE: 64 20 27 73 ; 
00001BC2: 27 20 74 6F ; 
00001BC6: 20 73 61 76 ; 
00001BCA: 65 20 74 68 ; 
00001BCE: 65 20 67 72 ; 
00001BD2: 69 64 0A 00 ; 
00001BD6:             ; 
00001BD6: 43 68 6F 6F ; askgenoption    defb "Choose between (R)andom generation or (D)rawing the grid", 0
00001BDA: 73 65 20 62 ; 
00001BDE: 65 74 77 65 ; 
00001BE2: 65 6E 20 28 ; 
00001BE6: 52 29 61 6E ; 
00001BEA: 64 6F 6D 20 ; 
00001BEE: 67 65 6E 65 ; 
00001BF2: 72 61 74 69 ; 
00001BF6: 6F 6E 20 6F ; 
00001BFA: 72 20 28 44 ; 
00001BFE: 29 72 61 77 ; 
00001C02: 69 6E 67 20 ; 
00001C06: 74 68 65 20 ; 
00001C0A: 67 72 69 64 ; 
00001C0E: 00          ; 
00001C0F: 49 6E 76 61 ; setupGrdFailmsg defb "Invalid choice, use `R` for random generation and `d` for drawing the gri
00001C13: 6C 69 64 20 ; d. Not case sensative: ", 0
00001C17: 63 68 6F 69 ; 
00001C1B: 63 65 2C 20 ; 
00001C1F: 75 73 65 20 ; 
00001C23: 60 52 60 20 ; 
00001C27: 66 6F 72 20 ; 
00001C2B: 72 61 6E 64 ; 
00001C2F: 6F 6D 20 67 ; 
00001C33: 65 6E 65 72 ; 
00001C37: 61 74 69 6F ; 
00001C3B: 6E 20 61 6E ; 
00001C3F: 64 20 60 64 ; 
00001C43: 60 20 66 6F ; 
00001C47: 72 20 64 72 ; 
00001C4B: 61 77 69 6E ; 
00001C4F: 67 20 74 68 ; 
00001C53: 65 20 67 72 ; 
00001C57: 69 64 2E 20 ; 
00001C5B: 4E 6F 74 20 ; 
00001C5F: 63 61 73 65 ; 
00001C63: 20 73 65 6E ; 
00001C67: 73 61 74 69 ; 
00001C6B: 76 65 3A 20 ; 
00001C6F: 00          ; 
00001C70: 45 6E 74 65 ; askseed         defb "Enter 4 characters to be used as the seed: ", 0
00001C74: 72 20 34 20 ; 
00001C78: 63 68 61 72 ; 
00001C7C: 61 63 74 65 ; 
00001C80: 72 73 20 74 ; 
00001C84: 6F 20 62 65 ; 
00001C88: 20 75 73 65 ; 
00001C8C: 64 20 61 73 ; 
00001C90: 20 74 68 65 ; 
00001C94: 20 73 65 65 ; 
00001C98: 64 3A 20 00 ; 
00001C9C: 55 73 69 6E ; drawinfomsg     defb "Using '1' and '0' choose the value of the current cell. Use enter to go t
00001CA0: 67 20 27 31 ; o next line", nl, 0
00001CA4: 27 20 61 6E ; 
00001CA8: 64 20 27 30 ; 
00001CAC: 27 20 63 68 ; 
00001CB0: 6F 6F 73 65 ; 
00001CB4: 20 74 68 65 ; 
00001CB8: 20 76 61 6C ; 
00001CBC: 75 65 20 6F ; 
00001CC0: 66 20 74 68 ; 
00001CC4: 65 20 63 75 ; 
00001CC8: 72 72 65 6E ; 
00001CCC: 74 20 63 65 ; 
00001CD0: 6C 6C 2E 20 ; 
00001CD4: 55 73 65 20 ; 
00001CD8: 65 6E 74 65 ; 
00001CDC: 72 20 74 6F ; 
00001CE0: 20 67 6F 20 ; 
00001CE4: 74 6F 20 6E ; 
00001CE8: 65 78 74 20 ; 
00001CEC: 6C 69 6E 65 ; 
00001CF0: 0A 00       ; 
00001CF2: 49 6E 76 61 ; drawfailmsg     defb "Invalid input please enter 1 or 0, or enter for next line: ", nl, 0
00001CF6: 6C 69 64 20 ; 
00001CFA: 69 6E 70 75 ; 
00001CFE: 74 20 70 6C ; 
00001D02: 65 61 73 65 ; 
00001D06: 20 65 6E 74 ; 
00001D0A: 65 72 20 31 ; 
00001D0E: 20 6F 72 20 ; 
00001D12: 30 2C 20 6F ; 
00001D16: 72 20 65 6E ; 
00001D1A: 74 65 72 20 ; 
00001D1E: 66 6F 72 20 ; 
00001D22: 6E 65 78 74 ; 
00001D26: 20 6C 69 6E ; 
00001D2A: 65 3A 20 0A ; 
00001D2E: 00          ; 
00001D2F: 47 72 69 64 ; gridfailmsg     defb "Grid was not properly initialised, consider smaller dims", nl, 0
00001D33: 20 77 61 73 ; 
00001D37: 20 6E 6F 74 ; 
00001D3B: 20 70 72 6F ; 
00001D3F: 70 65 72 6C ; 
00001D43: 79 20 69 6E ; 
00001D47: 69 74 69 61 ; 
00001D4B: 6C 69 73 65 ; 
00001D4F: 64 2C 20 63 ; 
00001D53: 6F 6E 73 69 ; 
00001D57: 64 65 72 20 ; 
00001D5B: 73 6D 61 6C ; 
00001D5F: 6C 65 72 20 ; 
00001D63: 64 69 6D 73 ; 
00001D67: 0A 00       ; 
00001D69: 54 68 65 72 ; gridsavefail    defb "There was an error allocating memory for the grid save", nl, 0
00001D6D: 65 20 77 61 ; 
00001D71: 73 20 61 6E ; 
00001D75: 20 65 72 72 ; 
00001D79: 6F 72 20 61 ; 
00001D7D: 6C 6C 6F 63 ; 
00001D81: 61 74 69 6E ; 
00001D85: 67 20 6D 65 ; 
00001D89: 6D 6F 72 79 ; 
00001D8D: 20 66 6F 72 ; 
00001D91: 20 74 68 65 ; 
00001D95: 20 67 72 69 ; 
00001D99: 64 20 73 61 ; 
00001D9D: 76 65 0A 00 ; 
00001DA1: 54 68 65 72 ; gridloadempty   defb "There are no saved grids, start a step mode sim and save the grid, return
00001DA5: 65 20 61 72 ; ing to main menu", nl, 0
00001DA9: 65 20 6E 6F ; 
00001DAD: 20 73 61 76 ; 
00001DB1: 65 64 20 67 ; 
00001DB5: 72 69 64 73 ; 
00001DB9: 2C 20 73 74 ; 
00001DBD: 61 72 74 20 ; 
00001DC1: 61 20 73 74 ; 
00001DC5: 65 70 20 6D ; 
00001DC9: 6F 64 65 20 ; 
00001DCD: 73 69 6D 20 ; 
00001DD1: 61 6E 64 20 ; 
00001DD5: 73 61 76 65 ; 
00001DD9: 20 74 68 65 ; 
00001DDD: 20 67 72 69 ; 
00001DE1: 64 2C 20 72 ; 
00001DE5: 65 74 75 72 ; 
00001DE9: 6E 69 6E 67 ; 
00001DED: 20 74 6F 20 ; 
00001DF1: 6D 61 69 6E ; 
00001DF5: 20 6D 65 6E ; 
00001DF9: 75 0A 00    ; 
00001DFC: 7C 69 6E 64 ; gridloadpindex  defb "|index: ", 0
00001E00: 65 78 3A 20 ; 
00001E04: 00          ; 
00001E05: 7C 6E 61 6D ; gridloadpname   defb "|name: ", 0
00001E09: 65 3A 20 00 ; 
00001E0D: 7C 77 69 64 ; gridloadpwidth  defb "|width: ", 0
00001E11: 74 68 3A 20 ; 
00001E15: 00          ; 
00001E16: 7C 68 65 69 ; gridloadpheight defb "|height: ", 0
00001E1A: 67 68 74 3A ; 
00001E1E: 20 00       ; 
00001E20: 50 6C 65 61 ; loadboardaski   defb "Please enter the index of the grid to load, or enter a negative index to 
00001E24: 73 65 20 65 ; not load a grid. (press enter to input)", nl, 0
00001E28: 6E 74 65 72 ; 
00001E2C: 20 74 68 65 ; 
00001E30: 20 69 6E 64 ; 
00001E34: 65 78 20 6F ; 
00001E38: 66 20 74 68 ; 
00001E3C: 65 20 67 72 ; 
00001E40: 69 64 20 74 ; 
00001E44: 6F 20 6C 6F ; 
00001E48: 61 64 2C 20 ; 
00001E4C: 6F 72 20 65 ; 
00001E50: 6E 74 65 72 ; 
00001E54: 20 61 20 6E ; 
00001E58: 65 67 61 74 ; 
00001E5C: 69 76 65 20 ; 
00001E60: 69 6E 64 65 ; 
00001E64: 78 20 74 6F ; 
00001E68: 20 6E 6F 74 ; 
00001E6C: 20 6C 6F 61 ; 
00001E70: 64 20 61 20 ; 
00001E74: 67 72 69 64 ; 
00001E78: 2E 20 28 70 ; 
00001E7C: 72 65 73 73 ; 
00001E80: 20 65 6E 74 ; 
00001E84: 65 72 20 74 ; 
00001E88: 6F 20 69 6E ; 
00001E8C: 70 75 74 29 ; 
00001E90: 0A 00       ; 
00001E92: 52 65 74 75 ; loadboardretmsg defb "Returning to main menu", nl, 0
00001E96: 72 6E 69 6E ; 
00001E9A: 67 20 74 6F ; 
00001E9E: 20 6D 61 69 ; 
00001EA2: 6E 20 6D 65 ; 
00001EA6: 6E 75 0A 00 ; 
00001EAA: 49 6E 76 61 ; loadboardifail  defb "Invalid input given for the index", nl, 0
00001EAE: 6C 69 64 20 ; 
00001EB2: 69 6E 70 75 ; 
00001EB6: 74 20 67 69 ; 
00001EBA: 76 65 6E 20 ; 
00001EBE: 66 6F 72 20 ; 
00001EC2: 74 68 65 20 ; 
00001EC6: 69 6E 64 65 ; 
00001ECA: 78 0A 00    ; 
00001ECD: 49 6E 76 61 ; loadboardirerr  defb "Invalid index, out of range", nl, 0
00001ED1: 6C 69 64 20 ; 
00001ED5: 69 6E 64 65 ; 
00001ED9: 78 2C 20 6F ; 
00001EDD: 75 74 20 6F ; 
00001EE1: 66 20 72 61 ; 
00001EE5: 6E 67 65 0A ; 
00001EE9: 00          ; 
00001EEA: 45 72 72 6F ; loadboardmlcerr defb "Error allocating memory for loaded grid. Returing to main menu", nl, 0
00001EEE: 72 20 61 6C ; 
00001EF2: 6C 6F 63 61 ; 
00001EF6: 74 69 6E 67 ; 
00001EFA: 20 6D 65 6D ; 
00001EFE: 6F 72 79 20 ; 
00001F02: 66 6F 72 20 ; 
00001F06: 6C 6F 61 64 ; 
00001F0A: 65 64 20 67 ; 
00001F0E: 72 69 64 2E ; 
00001F12: 20 52 65 74 ; 
00001F16: 75 72 69 6E ; 
00001F1A: 67 20 74 6F ; 
00001F1E: 20 6D 61 69 ; 
00001F22: 6E 20 6D 65 ; 
00001F26: 6E 75 0A 00 ; 
00001F2A: 53 75 63 63 ; loadboardsucmsg defb "Successfully loaded the grid", nl, 0
00001F2E: 65 73 73 66 ; 
00001F32: 75 6C 6C 79 ; 
00001F36: 20 6C 6F 61 ; 
00001F3A: 64 65 64 20 ; 
00001F3E: 74 68 65 20 ; 
00001F42: 67 72 69 64 ; 
00001F46: 0A 00       ; 
00001F48: 4C 69 73 74 ; listgridmsg     defb "Listing all availible saved grids", nl, 0
00001F4C: 69 6E 67 20 ; 
00001F50: 61 6C 6C 20 ; 
00001F54: 61 76 61 69 ; 
00001F58: 6C 69 62 6C ; 
00001F5C: 65 20 73 61 ; 
00001F60: 76 65 64 20 ; 
00001F64: 67 72 69 64 ; 
00001F68: 73 0A 00    ; 
00001F6B: 2D 2D 2D 2D ; cutoff          defb "-----------------", nl, 0
00001F6F: 2D 2D 2D 2D ; 
00001F73: 2D 2D 2D 2D ; 
00001F77: 2D 2D 2D 2D ; 
00001F7B: 2D 0A 00    ; 
00001F7E: 5B 5B 61 64 ; helpinfomsg     defb "[[add]]"
00001F82: 64 5D 5D    ; 
00001F85: 5B 5B 61 64 ; settingsmsg     defb "[[add]]"
00001F89: 64 5D 5D    ; 
00001F8C: 45 72 72 6F ; changearrverr_m defb "Error invalid value given (1-255) inclusive. Re-enter: ", nl, 0
00001F90: 72 20 69 6E ; 
00001F94: 76 61 6C 69 ; 
00001F98: 64 20 76 61 ; 
00001F9C: 6C 75 65 20 ; 
00001FA0: 67 69 76 65 ; 
00001FA4: 6E 20 28 31 ; 
00001FA8: 2D 32 35 35 ; 
00001FAC: 29 20 69 6E ; 
00001FB0: 63 6C 75 73 ; 
00001FB4: 69 76 65 2E ; 
00001FB8: 20 52 65 2D ; 
00001FBC: 65 6E 74 65 ; 
00001FC0: 72 3A 20 0A ; 
00001FC4: 00          ; 
00001FC5:             ; 
00001FC5: 53 65 74 74 ; s_m1            defb "Settings", nl, "|-[0] stepMode_d     - The following 4 settings are the d
00001FC9: 69 6E 67 73 ; efault values for the options", nl, "|-[1] slowMode_d", nl, "|-[2] eraseMode_d", nl, "|-[3] Dim
00001FCD: 0A 7C 2D 5B ; s_d", nl, 0
00001FD1: 30 5D 20 73 ; 
00001FD5: 74 65 70 4D ; 
00001FD9: 6F 64 65 5F ; 
00001FDD: 64 20 20 20 ; 
00001FE1: 20 20 2D 20 ; 
00001FE5: 54 68 65 20 ; 
00001FE9: 66 6F 6C 6C ; 
00001FED: 6F 77 69 6E ; 
00001FF1: 67 20 34 20 ; 
00001FF5: 73 65 74 74 ; 
00001FF9: 69 6E 67 73 ; 
00001FFD: 20 61 72 65 ; 
00002001: 20 74 68 65 ; 
00002005: 20 64 65 66 ; 
00002009: 61 75 6C 74 ; 
0000200D: 20 76 61 6C ; 
00002011: 75 65 73 20 ; 
00002015: 66 6F 72 20 ; 
00002019: 74 68 65 20 ; 
0000201D: 6F 70 74 69 ; 
00002021: 6F 6E 73 0A ; 
00002025: 7C 2D 5B 31 ; 
00002029: 5D 20 73 6C ; 
0000202D: 6F 77 4D 6F ; 
00002031: 64 65 5F 64 ; 
00002035: 0A 7C 2D 5B ; 
00002039: 32 5D 20 65 ; 
0000203D: 72 61 73 65 ; 
00002041: 4D 6F 64 65 ; 
00002045: 5F 64 0A 7C ; 
00002049: 2D 5B 33 5D ; 
0000204D: 20 44 69 6D ; 
00002051: 73 5F 64 0A ; 
00002055: 00          ; 
00002056: 7C 2D 5B 34 ; s_m2            defb "|-[4] range          - The range of values that the dims can have (1-255 
0000205A: 5D 20 72 61 ; && range_min < range_max)", nl, 0
0000205E: 6E 67 65 20 ; 
00002062: 20 20 20 20 ; 
00002066: 20 20 20 20 ; 
0000206A: 20 2D 20 54 ; 
0000206E: 68 65 20 72 ; 
00002072: 61 6E 67 65 ; 
00002076: 20 6F 66 20 ; 
0000207A: 76 61 6C 75 ; 
0000207E: 65 73 20 74 ; 
00002082: 68 61 74 20 ; 
00002086: 74 68 65 20 ; 
0000208A: 64 69 6D 73 ; 
0000208E: 20 63 61 6E ; 
00002092: 20 68 61 76 ; 
00002096: 65 20 28 31 ; 
0000209A: 2D 32 35 35 ; 
0000209E: 20 26 26 20 ; 
000020A2: 72 61 6E 67 ; 
000020A6: 65 5F 6D 69 ; 
000020AA: 6E 20 3C 20 ; 
000020AE: 72 61 6E 67 ; 
000020B2: 65 5F 6D 61 ; 
000020B6: 78 29 0A 00 ; 
000020BA: 7C 2D 5B 35 ; s_m3            defb "|-[5] Icons          - The characters printed for an alive/dead/ptr cell"
000020BE: 5D 20 49 63 ; ,nl, "`-[6] itters         - The number of itterations in the non-step version before it will w
000020C2: 6F 6E 73 20 ; ait for input", nl, 0
000020C6: 20 20 20 20 ; 
000020CA: 20 20 20 20 ; 
000020CE: 20 2D 20 54 ; 
000020D2: 68 65 20 63 ; 
000020D6: 68 61 72 61 ; 
000020DA: 63 74 65 72 ; 
000020DE: 73 20 70 72 ; 
000020E2: 69 6E 74 65 ; 
000020E6: 64 20 66 6F ; 
000020EA: 72 20 61 6E ; 
000020EE: 20 61 6C 69 ; 
000020F2: 76 65 2F 64 ; 
000020F6: 65 61 64 2F ; 
000020FA: 70 74 72 20 ; 
000020FE: 63 65 6C 6C ; 
00002102: 0A 60 2D 5B ; 
00002106: 36 5D 20 69 ; 
0000210A: 74 74 65 72 ; 
0000210E: 73 20 20 20 ; 
00002112: 20 20 20 20 ; 
00002116: 20 20 2D 20 ; 
0000211A: 54 68 65 20 ; 
0000211E: 6E 75 6D 62 ; 
00002122: 65 72 20 6F ; 
00002126: 66 20 69 74 ; 
0000212A: 74 65 72 61 ; 
0000212E: 74 69 6F 6E ; 
00002132: 73 20 69 6E ; 
00002136: 20 74 68 65 ; 
0000213A: 20 6E 6F 6E ; 
0000213E: 2D 73 74 65 ; 
00002142: 70 20 76 65 ; 
00002146: 72 73 69 6F ; 
0000214A: 6E 20 62 65 ; 
0000214E: 66 6F 72 65 ; 
00002152: 20 69 74 20 ; 
00002156: 77 69 6C 6C ; 
0000215A: 20 77 61 69 ; 
0000215E: 74 20 66 6F ; 
00002162: 72 20 69 6E ; 
00002166: 70 75 74 0A ; 
0000216A: 00          ; 
0000216B: 7C 2D 5B 37 ; s_m4            defb "|-[7] Drawing erase  - Bool for if when drawing the grid it should erase 
0000216F: 5D 20 44 72 ; the previous one", nl, 0
00002173: 61 77 69 6E ; 
00002177: 67 20 65 72 ; 
0000217B: 61 73 65 20 ; 
0000217F: 20 2D 20 42 ; 
00002183: 6F 6F 6C 20 ; 
00002187: 66 6F 72 20 ; 
0000218B: 69 66 20 77 ; 
0000218F: 68 65 6E 20 ; 
00002193: 64 72 61 77 ; 
00002197: 69 6E 67 20 ; 
0000219B: 74 68 65 20 ; 
0000219F: 67 72 69 64 ; 
000021A3: 20 69 74 20 ; 
000021A7: 73 68 6F 75 ; 
000021AB: 6C 64 20 65 ; 
000021AF: 72 61 73 65 ; 
000021B3: 20 74 68 65 ; 
000021B7: 20 70 72 65 ; 
000021BB: 76 69 6F 75 ; 
000021BF: 73 20 6F 6E ; 
000021C3: 65 0A 00    ; 
000021C6: 45 6E 74 65 ; s_m             defb "Enter the index of the setting to edit or -1 to return to the menu (press
000021CA: 72 20 74 68 ;  enter to input): ", 0
000021CE: 65 20 69 6E ; 
000021D2: 64 65 78 20 ; 
000021D6: 6F 66 20 74 ; 
000021DA: 68 65 20 73 ; 
000021DE: 65 74 74 69 ; 
000021E2: 6E 67 20 74 ; 
000021E6: 6F 20 65 64 ; 
000021EA: 69 74 20 6F ; 
000021EE: 72 20 2D 31 ; 
000021F2: 20 74 6F 20 ; 
000021F6: 72 65 74 75 ; 
000021FA: 72 6E 20 74 ; 
000021FE: 6F 20 74 68 ; 
00002202: 65 20 6D 65 ; 
00002206: 6E 75 20 28 ; 
0000220A: 70 72 65 73 ; 
0000220E: 73 20 65 6E ; 
00002212: 74 65 72 20 ; 
00002216: 74 6F 20 69 ; 
0000221A: 6E 70 75 74 ; 
0000221E: 29 3A 20 00 ; 
00002222: 45 72 72 6F ; s_m_err         defb "Error invalid index. Re-enter: ", 0
00002226: 72 20 69 6E ; 
0000222A: 76 61 6C 69 ; 
0000222E: 64 20 69 6E ; 
00002232: 64 65 78 2E ; 
00002236: 20 52 65 2D ; 
0000223A: 65 6E 74 65 ; 
0000223E: 72 3A 20 00 ; 
00002242:             ; 
00002242: 53 6C 6F 77 ; currentslow     defb "Slow_d: ", 0
00002246: 5F 64 3A 20 ; 
0000224A: 00          ; 
0000224B: 45 72 61 73 ; currenterase    defb "Erase_d: ", 0
0000224F: 65 5F 64 3A ; 
00002253: 20 00       ; 
00002255: 53 74 65 70 ; currentstep     defb "Step_d: ", 0
00002259: 5F 64 3A 20 ; 
0000225D: 00          ; 
0000225E: 44 69 6D 73 ; currentDims     defb "Dims: ", 0
00002262: 3A 20 00    ; 
00002265: 52 61 6E 67 ; currentRange    defb "Range: ", 0
00002269: 65 3A 20 00 ; 
0000226D: 49 74 74 65 ; currentItters   defb "Itters: ", 0
00002271: 72 73 3A 20 ; 
00002275: 00          ; 
00002276: 45 72 61 73 ; currentdraweras defb "Erase when drawing: ", 0
0000227A: 65 20 77 68 ; 
0000227E: 65 6E 20 64 ; 
00002282: 72 61 77 69 ; 
00002286: 6E 67 3A 20 ; 
0000228A: 00          ; 
0000228B: 28 00       ; bracket_open    defb "(", 0
0000228D: 2C 20 00    ; comma_space     defb ", ", 0
00002290: 29 00       ; bracket_close   defb ")", 0
00002292: 41 6C 69 76 ; currenticons_1  defb "Alive: ", 0
00002296: 65 3A 20 00 ; 
0000229A: 44 65 61 64 ; currenticons_2  defb "Dead: ", 0
0000229E: 3A 20 00    ; 
000022A1: 50 74 72 3A ; currenticons_3  defb "Ptr: ", 0
000022A5: 20 00       ; 
000022A7: 45 6E 74 65 ; currenticons_a  defb "Enter 3 character (not seperated) for the values of the alive/dead/ptr ch
000022AB: 72 20 33 20 ; aracters: ", 0
000022AF: 63 68 61 72 ; 
000022B3: 61 63 74 65 ; 
000022B7: 72 20 28 6E ; 
000022BB: 6F 74 20 73 ; 
000022BF: 65 70 65 72 ; 
000022C3: 61 74 65 64 ; 
000022C7: 29 20 66 6F ; 
000022CB: 72 20 74 68 ; 
000022CF: 65 20 76 61 ; 
000022D3: 6C 75 65 73 ; 
000022D7: 20 6F 66 20 ; 
000022DB: 74 68 65 20 ; 
000022DF: 61 6C 69 76 ; 
000022E3: 65 2F 64 65 ; 
000022E7: 61 64 2F 70 ; 
000022EB: 74 72 20 63 ; 
000022EF: 68 61 72 61 ; 
000022F3: 63 74 65 72 ; 
000022F7: 73 3A 20 00 ; 
000022FB: 45 72 72 6F ; mallocerr_m     defb "Error getting memory from malloc", nl, 0
000022FF: 72 20 67 65 ; 
00002303: 74 74 69 6E ; 
00002307: 67 20 6D 65 ; 
0000230B: 6D 6F 72 79 ; 
0000230F: 20 66 72 6F ; 
00002313: 6D 20 6D 61 ; 
00002317: 6C 6C 6F 63 ; 
0000231B: 0A 00       ; 
0000231D: 45 72 72 6F ; getstringerr_m  defb "Error getting string, could be malloc error", nl, 0
00002321: 72 20 67 65 ; 
00002325: 74 74 69 6E ; 
00002329: 67 20 73 74 ; 
0000232D: 72 69 6E 67 ; 
00002331: 2C 20 63 6F ; 
00002335: 75 6C 64 20 ; 
00002339: 62 65 20 6D ; 
0000233D: 61 6C 6C 6F ; 
00002341: 63 20 65 72 ; 
00002345: 72 6F 72 0A ; 
00002349: 00          ; 
0000234A: 49 74 74 65 ; currentitter    defb "Itters: ", 0
0000234E: 72 73 3A 20 ; 
00002352: 00          ; 
00002353: 45 6E 74 65 ; currentaskx     defb "Enter value for x: ", 0
00002357: 72 20 76 61 ; 
0000235B: 6C 75 65 20 ; 
0000235F: 66 6F 72 20 ; 
00002363: 78 3A 20 00 ; 
00002367: 45 6E 74 65 ; currentasky     defb "Enter value for y: ", 0
0000236B: 72 20 76 61 ; 
0000236F: 6C 75 65 20 ; 
00002373: 66 6F 72 20 ; 
00002377: 79 3A 20 00 ; 
0000237B: 45 6E 74 65 ; currentasknew   defb "Enter new value: ", 0
0000237F: 72 20 6E 65 ; 
00002383: 77 20 76 61 ; 
00002387: 6C 75 65 3A ; 
0000238B: 20 00       ; 
0000238D: 45 6E 74 65 ; currentasknew_B defb "Enter new value (0 or 1): ", 0
00002391: 72 20 6E 65 ; 
00002395: 77 20 76 61 ; 
00002399: 6C 75 65 20 ; 
0000239D: 28 30 20 6F ; 
000023A1: 72 20 31 29 ; 
000023A5: 3A 20 00    ; 
000023A8: 45 72 72 6F ; currentasknew_E defb "Error invalid re-enter: ", 0
000023AC: 72 20 69 6E ; 
000023B0: 76 61 6C 69 ; 
000023B4: 64 20 72 65 ; 
000023B8: 2D 65 6E 74 ; 
000023BC: 65 72 3A 20 ; 
000023C0: 00          ; 
000023C1: 49 6E 76 61 ; currentarrerr   defb "Invalid value entered re-enter: ", 0
000023C5: 6C 69 64 20 ; 
000023C9: 76 61 6C 75 ; 
000023CD: 65 20 65 6E ; 
000023D1: 74 65 72 65 ; 
000023D5: 64 20 72 65 ; 
000023D9: 2D 65 6E 74 ; 
000023DD: 65 72 3A 20 ; 
000023E1: 00          ; 
000023E2: 49 6E 76 61 ; changearrsizmsg defb "Invalid, x >= y.", nl, 0
000023E6: 6C 69 64 2C ; 
000023EA: 20 78 20 3E ; 
000023EE: 3D 20 79 2E ; 
000023F2: 0A 00       ; 
000023F4: 49 6E 76 61 ; changeittere_m  defb "Invalid itter value. Re-enter: ", nl, 0
000023F8: 6C 69 64 20 ; 
000023FC: 69 74 74 65 ; 
00002400: 72 20 76 61 ; 
00002404: 6C 75 65 2E ; 
00002408: 20 52 65 2D ; 
0000240C: 65 6E 74 65 ; 
00002410: 72 3A 20 0A ; 
00002414: 00          ; 
00002415: 45 6E 74 65 ; getitters_m     defb "Enter the max itterations (1-255): ", 0
00002419: 72 20 74 68 ; 
0000241D: 65 20 6D 61 ; 
00002421: 78 20 69 74 ; 
00002425: 74 65 72 61 ; 
00002429: 74 69 6F 6E ; 
0000242D: 73 20 28 31 ; 
00002431: 2D 32 35 35 ; 
00002435: 29 3A 20 00 ; 
00002439:             ; 
00002439: 4F 4E 00    ; on_msg          defb "ON", 0
0000243C: 4F 46 46 00 ; off_msg         defb "OFF", 0
00002440: 2C 00       ; comma           defb ",", 0
00002442:             ; 
00002444:             ; align
00002444: 00000000    ; heapstart       defw 0 ;;points to the end of the data this is where the heap can then begin
00002448:             ; Remaining literals

Symbol Table: Labels
: max_addr                          00100000  Value
: stack_size                        00010000  Value
: nl                                0000000A  Value
: backspace                         00000008  Value
: minBuffSize                       00000008  Value
: enter                             0000000A  Value
: minSaveSize                       00000008  Value
: sizeofSaveI                       0000000C  Value
: heaphead                          00000004  Local -- ARM
: offsets                           00000008  Local -- ARM
: gridA                             00000048  Local -- ARM
: gridB                             0000004C  Local -- ARM
: erase_b                           00000050  Local -- ARM
: slow_b                            00000051  Local -- ARM
: step_b                            00000052  Local -- ARM
: width                             00000053  Local -- ARM
: height                            00000054  Local -- ARM
: range_min                         00000055  Local -- ARM
: range_max                         00000056  Local -- ARM
: maxitters                         00000057  Local -- ARM
: drawerase                         00000058  Local -- ARM
: alive_c                           00000059  Local -- ARM
: dead_c                            0000005A  Local -- ARM
: ptr_c                             0000005B  Local -- ARM
: erase_b_d                         0000005C  Local -- ARM
: slow_b_d                          0000005D  Local -- ARM
: step_b_d                          0000005E  Local -- ARM
: width_d                           0000005F  Local -- ARM
: height_d                          00000060  Local -- ARM
: _start                            00000064  Local -- ARM
: main                              00000094  Local -- ARM
: mainmenu                          000000C0  Local -- ARM
: mainchoice                        000000D8  Local -- ARM
: mainloopstart                     0000011C  Local -- ARM
: mainloop                          00000150  Local -- ARM
: mainloopcont                      00000174  Local -- ARM
: mainloopdostep                    00000190  Local -- ARM
: mainloopskipstep                  000001B8  Local -- ARM
: gridFail                          000001DC  Local -- ARM
: mainEnd                           000001E8  Local -- ARM
: settingsmenu                      00000200  Local -- ARM
: changesetting                     00000230  Local -- ARM
: changesettingget                  0000023C  Local -- ARM
: changesettingserr                 00000278  Local -- ARM
: changesettingscont                00000288  Local -- ARM
: changearr                         000002D0  Local -- ARM
: changearrget                      000002E4  Local -- ARM
: changearrsizeerr                  00000328  Local -- ARM
: changearrset                      00000338  Local -- ARM
: changearrend                      0000034C  Local -- ARM
: changearrgetvalidint              00000354  Local -- ARM
: changearrgetvalidintget           00000358  Local -- ARM
: changearrgetvalidinterr           00000388  Local -- ARM
: changearrgetvalidintcont          0000039C  Local -- ARM
: changearrgetvalidintend           000003AC  Local -- ARM
: printdims                         000003B8  Local -- ARM
: changestep                        0000040C  Local -- ARM
: changeslow                        00000424  Local -- ARM
: changeerase                       0000043C  Local -- ARM
: changebool                        00000450  Local -- ARM
: changebool_cont                   00000490  Local -- ARM
: changebool_set                    000004BC  Local -- ARM
: changeboolend                     000004EC  Local -- ARM
: changedims                        000004F4  Local -- ARM
: changerange                       00000510  Local -- ARM
: changeicons                       0000052C  Local -- ARM
: changeiconsmallerr                00000578  Local -- ARM
: printicons                        00000588  Local -- ARM
: printiconsend                     000005DC  Local -- ARM
: changeitter                       000005E0  Local -- ARM
: changeitterget                    00000604  Local -- ARM
: changeittererr                    0000064C  Local -- ARM
: changeitterend                    00000660  Local -- ARM
: changedrawerase                   0000067C  Local -- ARM
: changedraweraseend                00000694  Local -- ARM
: printhelp                         00000698  Local -- ARM
: newboard                          000006AC  Local -- ARM
: loadboard                         000006D4  Local -- ARM
: loadboardaskindex                 000006E8  Local -- ARM
: loadboardindex                    0000074C  Local -- ARM
: loadboardmain                     00000768  Local -- ARM
: loadboardmallocB                  000007D0  Local -- ARM
: loadboardskipB                    000007EC  Local -- ARM
: loadboardmallocfail               0000080C  Local -- ARM
: loadboardret                      0000081C  Local -- ARM
: loadboardempty                    00000828  Local -- ARM
: loadboarderr                      00000828  Local -- ARM
: loadboardsucc                     0000082C  Local -- ARM
: newline                           00000830  Local -- ARM
: step                              0000083C  Local -- ARM
: stependfail                       000008B4  Local -- ARM
: stependsucc                       000008BC  Local -- ARM
: stepend                           000008C0  Local -- ARM
: listGrids                         000008C8  Local -- ARM
: listGridsLoop                     000008FC  Local -- ARM
: listGridsEmpty                    00000990  Local -- ARM
: listGridsLend                     0000099C  Local -- ARM
: listGridsEnd                      0000099C  Local -- ARM
: saveGrid                          000009A4  Local -- ARM
: saveGridResize                    000009C8  Local -- ARM
: saveGridAdd                       00000A00  Local -- ARM
: saveGridFailMalloc                00000A68  Local -- ARM
: saveGridSucc                      00000A70  Local -- ARM
: saveGridEnd                       00000A74  Local -- ARM
: erase                             00000A7C  Local -- ARM
: eraseloop                         00000A80  Local -- ARM
: eraseend                          00000A98  Local -- ARM
: slow                              00000A9C  Local -- ARM
: slowloop                          00000AA4  Local -- ARM
: slowend                           00000AC4  Local -- ARM
: heapclean                         00000AC8  Local -- ARM
: heapcleanloop                     00000AE4  Local -- ARM
: heapcleanend                      00000AF8  Local -- ARM
: strlen                            00000AFC  Local -- ARM
: strlenloop                        00000B08  Local -- ARM
: strlenend                         00000B1C  Local -- ARM
: strtoi                            00000B24  Local -- ARM
: strtoiloop                        00000B64  Local -- ARM
: strtoilend                        00000B98  Local -- ARM
: strtoifailminus                   00000BA0  Local -- ARM
: strtoifailoutrange                00000BA8  Local -- ARM
: strtoifailnonnum                  00000BB0  Local -- ARM
: strtoiendfail                     00000BB4  Local -- ARM
: strtoiendsucc                     00000BBC  Local -- ARM
: strtoiend                         00000BC0  Local -- ARM
: memcpy                            00000BC8  Local -- ARM
: memcpywordsloop                   00000BF0  Local -- ARM
: memcpywordslend                   00000C08  Local -- ARM
: memcpyallbytes                    00000C18  Local -- ARM
: memcpybytes                       00000C24  Local -- ARM
: memcpybytesloop                   00000C28  Local -- ARM
: memcpybyteslend                   00000C40  Local -- ARM
: memcpyend                         00000C44  Local -- ARM
: getstring                         00000C4C  Local -- ARM
: getstringloop                     00000C78  Local -- ARM
: getstringloopskipsize             00000C88  Local -- ARM
: skipMax                           00000C9C  Local -- ARM
: getstringlcont                    00000CA8  Local -- ARM
: getstringresize                   00000CC0  Local -- ARM
: getstringlend                     00000CF0  Local -- ARM
: getstringResizeEnd                00000CFC  Local -- ARM
: getstringEnd                      00000D28  Local -- ARM
: tolower                           00000D3C  Local -- ARM
: setupGrid                         00000D44  Local -- ARM
: setupGridAsk                      00000D8C  Local -- ARM
: setupdrawing                      00000DBC  Local -- ARM
: setuprandom                       00000DD0  Local -- ARM
: setupstart                        00000DF8  Local -- ARM
: setuprowloop                      00000DFC  Local -- ARM
: setupcolloop                      00000E08  Local -- ARM
: dorandom                          00000E1C  Local -- ARM
: dodrawstart                       00000E30  Local -- ARM
: dodraw                            00000E48  Local -- ARM
: dodrawfail                        00000E7C  Local -- ARM
: dodrawsucc                        00000E8C  Local -- ARM
: dodrawsuccskiperase               00000EB0  Local -- ARM
: setupcollcont                     00000EB8  Local -- ARM
: setupcollend                      00000EC8  Local -- ARM
: setuprowlend                      00000ED0  Local -- ARM
: setupGridFail                     00000EE0  Local -- ARM
: setupGridEnd                      00000EE0  Local -- ARM
: drawgrid                          00000EE8  Local -- ARM
: drawgridrowloop                   00000EFC  Local -- ARM
: drawgridcolloop                   00000F08  Local -- ARM
: drawgridprintcurrent              00000F34  Local -- ARM
: drawgridcollcont                  00000F3C  Local -- ARM
: drawgridcollend                   00000F4C  Local -- ARM
: drawgridrowlend                   00000F60  Local -- ARM
: drawgridend                       00000F68  Local -- ARM
: printoptions                      00000F70  Local -- ARM
: setupOptions                      00001018  Local -- ARM
: setupOptionsDEnd                  000010C0  Local -- ARM
: setupCustom                       000010CC  Local -- ARM
: setupCustomskipslow               00001190  Local -- ARM
: printrange                        000011A4  Local -- ARM
: setupCustomDimsCheck              000011E8  Local -- ARM
: getwid                            00001200  Local -- ARM
: getwidFail                        00001264  Local -- ARM
: getheisetup                       00001278  Local -- ARM
: gethei                            00001288  Local -- ARM
: getheiFail                        000012EC  Local -- ARM
: customend                         00001300  Local -- ARM
: updategrid                        0000130C  Local -- ARM
: updategridrowloop                 00001334  Local -- ARM
: updategridcolloop                 00001340  Local -- ARM
: updatealive                       00001368  Local -- ARM
: updatedead                        00001384  Local -- ARM
: updatelcont                       00001394  Local -- ARM
: updategridccollend                0000139C  Local -- ARM
: updategridrowlend                 000013A8  Local -- ARM
: updategridend                     000013A8  Local -- ARM
: countneighbours                   000013B0  Local -- ARM
: countneighboursloop               000013DC  Local -- ARM
: countneighboursskipadd            00001420  Local -- ARM
: countneighbourslend               00001424  Local -- ARM
: countneighboursend                00001424  Local -- ARM
: isinrange                         00001430  Local -- ARM
: isinrangefail                     00001474  Local -- ARM
: isinrangeend                      00001478  Local -- ARM
: setupHeap                         0000147C  Local -- ARM
: malloc                            000014AC  Local -- ARM
: mallignend                        000014C8  Local -- ARM
: checkcrate                        000014D4  Local -- ARM
: nocrates                          000014F4  Local -- ARM
: foundcrate                        000014FC  Local -- ARM
: splitcrate                        0000150C  Local -- ARM
: usecrate                          00001540  Local -- ARM
: mallocEnd                         00001554  Local -- ARM
: free                              0000155C  Local -- ARM
: freeloop                          00001570  Local -- ARM
: freelend                          0000158C  Local -- ARM
: freelendEnd                       000015AC  Local -- ARM
: freeMergeCheck                    000015B4  Local -- ARM
: verifyLeft                        000015C4  Local -- ARM
: verifyRight                       000015D8  Local -- ARM
: merge                             000015EC  Local -- ARM
: mergeNew                          00001620  Local -- ARM
: freeEnd                           00001620  Local -- ARM
: welcomemsg                        00001628  Local -- ARM
: welcome2msg                       00001659  Local -- ARM
: mainchoicefail                    00001698  Local -- ARM
: helpmsg                           00001733  Local -- ARM
: help2msg                          000017F1  Local -- ARM
: mainendmsg                        00001866  Local -- ARM
: askdefaults                       0000188D  Local -- ARM
: askerase                          000018BF  Local -- ARM
: askslow                           000018D8  Local -- ARM
: askstep                           000018F0  Local -- ARM
: stepslowwarning                   00001908  Local -- ARM
: savedchoice                       00001955  Local -- ARM
: askname                           00001980  Local -- ARM
: warneraseslow                     000019A3  Local -- ARM
: askwid                            000019E1  Local -- ARM
: dash                              000019F8  Local -- ARM
: b_close_colon                     000019FA  Local -- ARM
: askhei                            000019FE  Local -- ARM
: getwidfailmsg                     00001A15  Local -- ARM
: getheifailmsg                     00001A41  Local -- ARM
: usingDefault                      00001A6E  Local -- ARM
: usingDefWODims                    00001ABA  Local -- ARM
: optionsp_1                        00001AF8  Local -- ARM
: optionsp_2                        00001B10  Local -- ARM
: optionsp_3                        00001B13  Local -- ARM
: optionsp_4                        00001B1F  Local -- ARM
: optionsp_5                        00001B2B  Local -- ARM
: mainloopittsmsg                   00001B36  Local -- ARM
: askgenoption                      00001BD6  Local -- ARM
: setupGrdFailmsg                   00001C0F  Local -- ARM
: askseed                           00001C70  Local -- ARM
: drawinfomsg                       00001C9C  Local -- ARM
: drawfailmsg                       00001CF2  Local -- ARM
: gridfailmsg                       00001D2F  Local -- ARM
: gridsavefail                      00001D69  Local -- ARM
: gridloadempty                     00001DA1  Local -- ARM
: gridloadpindex                    00001DFC  Local -- ARM
: gridloadpname                     00001E05  Local -- ARM
: gridloadpwidth                    00001E0D  Local -- ARM
: gridloadpheight                   00001E16  Local -- ARM
: loadboardaski                     00001E20  Local -- ARM
: loadboardretmsg                   00001E92  Local -- ARM
: loadboardifail                    00001EAA  Local -- ARM
: loadboardirerr                    00001ECD  Local -- ARM
: loadboardmlcerr                   00001EEA  Local -- ARM
: loadboardsucmsg                   00001F2A  Local -- ARM
: listgridmsg                       00001F48  Local -- ARM
: cutoff                            00001F6B  Local -- ARM
: helpinfomsg                       00001F7E  Local -- ARM
: settingsmsg                       00001F85  Local -- ARM
: changearrverr_m                   00001F8C  Local -- ARM
: s_m1                              00001FC5  Local -- ARM
: s_m2                              00002056  Local -- ARM
: s_m3                              000020BA  Local -- ARM
: s_m4                              0000216B  Local -- ARM
: s_m                               000021C6  Local -- ARM
: s_m_err                           00002222  Local -- ARM
: currentslow                       00002242  Local -- ARM
: currenterase                      0000224B  Local -- ARM
: currentstep                       00002255  Local -- ARM
: currentDims                       0000225E  Local -- ARM
: currentRange                      00002265  Local -- ARM
: currentItters                     0000226D  Local -- ARM
: currentdraweras                   00002276  Local -- ARM
: bracket_open                      0000228B  Local -- ARM
: comma_space                       0000228D  Local -- ARM
: bracket_close                     00002290  Local -- ARM
: currenticons_1                    00002292  Local -- ARM
: currenticons_2                    0000229A  Local -- ARM
: currenticons_3                    000022A1  Local -- ARM
: currenticons_a                    000022A7  Local -- ARM
: mallocerr_m                       000022FB  Local -- ARM
: getstringerr_m                    0000231D  Local -- ARM
: currentitter                      0000234A  Local -- ARM
: currentaskx                       00002353  Local -- ARM
: currentasky                       00002367  Local -- ARM
: currentasknew                     0000237B  Local -- ARM
: currentasknew_B                   0000238D  Local -- ARM
: currentasknew_E                   000023A8  Local -- ARM
: currentarrerr                     000023C1  Local -- ARM
: changearrsizmsg                   000023E2  Local -- ARM
: changeittere_m                    000023F4  Local -- ARM
: getitters_m                       00002415  Local -- ARM
: on_msg                            00002439  Local -- ARM
: off_msg                           0000243C  Local -- ARM
: comma                             00002440  Local -- ARM
: heapstart                         00002444  Local -- ARM
