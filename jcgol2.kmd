KMD
00000000:             ; ;;  This is my second rendition of JCGOL in ARM assembly for Komodo
00000000:             ; ;;  
00000000:             ; ;;  This will attempt to follow the ARM 32bit calling convention 
00000000:             ; ;;      R0-3 are argument registers, scratch
00000000:             ; ;;      R4-10 are local variable registers and should be saved before use in a function
00000000:             ; ;;      R11 - FP
00000000:             ; ;;      R12 - IPC
00000000:             ; ;;      R13 - SP
00000000:             ; ;;      R14 - LR
00000000:             ; ;;      R15 - PC
00000000:             ; ;;
00000000:             ; ;;  The plan
00000000:             ; ;;  - Create a simple `heap` allocator for the grid and input
00000000:             ; ;;  - Ask the user
00000000:             ; ;;      |-Use default? Y - skip below
00000000:             ; ;;      |-dims of the grid
00000000:             ; ;;      |   `-Will need a way to get a string input and convert to an integer (make sure to cat
                      ; ch -ve)
00000000:             ; ;;      |-slow mode
00000000:             ; ;;      `-erase mode
00000000:             ; ;;  - ask for generation mode
00000000:             ; ;;      |-If random ask for seed
00000000:             ; ;;      |   `-For generation roll the seed to create a pseudorandom value for each `pixel`
00000000:             ; ;;      `-If draw then get them to draw the grid one `pixel` at a time
00000000:             ; ;;  - Allocate two grids, the pointers to which will swap after a frame. One is used to count t
                      ; he neighbours the other for the new cell value.
00000000:             ; ;;  - loop
00000000:             ; ;;      |-count neighbours
00000000:             ; ;;      |-update inactive grid
00000000:             ; ;;      |-swap grids
00000000:             ; ;;      |-draw active grid
00000000:             ; ;;      `-goto loop
00000000:             ; 
00000000:             ; ;;SINGLE STEP mode allows you to save the current state of the board into a list, also give it 
                      ; a name
00000000:             ; ;;At the main menu you can load a saved grid
00000000:             ; 
00000000:             ; ;;Grid info struct
00000000:             ; ;;  - SaveInfoStruct* array
00000000:             ; ;;  - int max size of arr
00000000:             ; ;;  - int current position in arr
00000000:             ; 
00000000:             ; ;;Save info struct
00000000:             ; ;;  -address of grid [4 BYTES]
00000000:             ; ;;  -char* to the name [4 BYTES]
00000000:             ; ;;  -width of grid (1 BYTE)
00000000:             ; ;;  -height of grid (1 BYTE)
00000000:             ; 
00000000:             ; 
00000000:             ; ;;  CURRENT ISSUES/TODOS
00000000:             ; ;;  `-Think about minimising the fragmentation of the heap - find the best free block instead o
                      ; f the first
00000000:             ;   
00000000:             ; max_addr    EQU  0x100000
00000000:             ; stack_size  EQU  0x10000
00000000:             ; nl          EQU  10
00000000:             ; backspace   EQU  8
00000000:             ; minBuffSize EQU  8
00000000:             ; enter       EQU  nl
00000000:             ; minSaveSize EQU  8
00000000:             ; sizeofSaveI EQU  12 ;;10 bytes + 2 bytes of padding to align to 4 byte boundry for arr
00000000:             ; 
00000000: EA000017    ; b _start
00000004:             ; 
00000004:             ; align
00000004:             ; ;;[[note]]
00000004:             ; ;;ldr instructions out of range (for pc-relative offsets?) of ldr (-4096/+4095?) use below
00000004:             ; ;;  adrl Rx, label
00000004:             ; ;;  ldr  Rx, [Rx]
00000004: 00010000    ; heaphead        defw 0x10000 ;;default start changed to addr of heapstart 
00000008:             ; 
00000008:             ; ;;Integer defs
00000008: FFFFFFFF    ; offsets         defw -1,-1,-1,0,-1,1,0,-1,0,1,1,-1,1,0,1,1 ;;[[-1,-1],[-1,0],[-1,1],[0,-1],[0,1
0000000C: FFFFFFFF    ; ],[1,-1],[1,0],[1,1]]
00000010: FFFFFFFF    ; 
00000014: 00000000    ; 
00000018: FFFFFFFF    ; 
0000001C: 00000001    ; 
00000020: 00000000    ; 
00000024: FFFFFFFF    ; 
00000028: 00000000    ; 
0000002C: 00000001    ; 
00000030: 00000001    ; 
00000034: FFFFFFFF    ; 
00000038: 00000001    ; 
0000003C: 00000000    ; 
00000040: 00000001    ; 
00000044: 00000001    ; 
00000048:             ; 
00000048:             ; ;;Grid addresses
00000048: 00000000    ; gridA           defw 0
0000004C: 00000000    ; gridB           defw 0
00000050:             ; 
00000050:             ; ;;options
00000050: 00          ; erase_b         defb 0
00000051: 00          ; slow_b          defb 0
00000052: 00          ; step_b          defb 0
00000053: 12          ; width           defb 18
00000054: 12          ; height          defb 18
00000055: 01          ; range_min       defb 1
00000056: 1E          ; range_max       defb 30
00000057: 19          ; maxitters       defb 25
00000058: 01          ; drawerase       defb 1  ;;Should the draw mode erase previous
00000059:             ; 
00000059: 58          ; alive_c         defb 'X'
0000005A: 2D          ; dead_c          defb '-'
0000005B: 23          ; ptr_c           defb '#'
0000005C:             ; 
0000005C:             ; ;;default options
0000005C: 00          ; erase_b_d       defb 0
0000005D: 00          ; slow_b_d        defb 0
0000005E: 01          ; step_b_d        defb 1
0000005F: 12          ; width_d         defb 18
00000060: 12          ; height_d        defb 18
00000061:             ; 
00000064:             ; align
00000064:             ; 
00000064:             ; _start
00000064:             ;     ;;prepare the stack
00000064: E3A0D601    ;     ldr R13, =max_addr
00000068: E3A0E000    ;     mov R14, #0 ;; allow for `returning` from _start
0000006C: E92D4000    ;     push {R14}
00000070:             ; 
00000070:             ;     ;;[[temp]] clean the heap (zero out)
00000070: EB0002F5    ;     bl heapclean
00000074:             ; 
00000074:             ;     ;;setup heap
00000074: E28F008C    ;     adrl R0, heapstart
00000078: E2800B0A    ; 
0000007C: E50F0080    ;     str R0, heaphead    ;;place address of last instruction (heapstart label) into the heaphead
                      ;  variable
00000080: EB00059B    ;     bl setupHeap
00000084:             ; 
00000084: EB000002    ;     bl main
00000088:             ; 
00000088: E8BD4000    ;     pop {R14}
0000008C: EF000002    ;     swi 2
00000090: E1A0F00E    ;     mov R15, R14
00000094:             ; 
00000094:             ; main
00000094: E92D4FF0    ;     push {fp, R14, R4-R10} ;;8 registers saved
00000098:             ; 
00000098: E28DB01C    ;     add fp, sp, #28 ;;(r - 1) * 4
0000009C: E24DD010    ;     sub sp, sp, #16 ;;reserve 12 bytes (4 bytes to align?) on the stack for the pointer to the 
                      ; list of saved grids + the maxSize of the array
000000A0:             ; 
000000A0:             ;     ;;The gridInfo struct
000000A0:             ;     ;;set the current position of the pointer
000000A0: E3A00000    ;     mov R0, #0
000000A4: E58D0008    ;     str R0, [sp, #8]
000000A8:             ; 
000000A8:             ;     ;;set the number of elements(save info structs) that can be stored in the array at the mome
                      ; nt
000000A8: E3A00008    ;     ldr R0, =minSaveSize
000000AC: E58D0004    ;     str R0, [sp, #4]
000000B0:             ; 
000000B0:             ;     ;;minsize * sizeof(SaveInfo) = number of bytes needed for the array
000000B0: E3A0100C    ;     ldr R1, =sizeofSaveI
000000B4: E0000190    ;     mul R0, R0, R1
000000B8: EB00059A    ;     bl malloc ;;allocate the array on the heap
000000BC:             ; 
000000BC: E3500000    ;     cmp R0, #0
000000C0: 0A000051    ;     beq mainMallocFail
000000C4:             ; 
000000C4: E58D0000    ;     str R0, [sp, #0] ;;store the address
000000C8:             ; 
000000C8:             ; mainmenu
000000C8: E28F0F71    ;     adrl R0, welcomemsg
000000CC: E2800B06    ; 
000000D0: EF000003    ;     swi 3
000000D4:             ; 
000000D4: E28F0F7B    ;     adrl R0, welcome2msg
000000D8: E2800B06    ; 
000000DC: EF000003    ;     swi 3
000000E0:             ; 
000000E0:             ; mainchoice
000000E0: EF000001    ;     swi 1
000000E4: E3800020    ;     orr R0, R0, #32
000000E8: E1A04000    ;     mov R4, R0
000000EC:             ; 
000000EC:             ;     ;;These should really be functions
000000EC:             ; 
000000EC: E354006E    ;     cmp R4, #'n' ;;new board generation
000000F0: 0A0001C7    ;     beq newboard
000000F4:             ; 
000000F4: E354006C    ;     cmp R4, #'l' ;;load a saved board
000000F8: E1A0000D    ;     mov R0, sp ;;load the info ptr
000000FC: 0A0001D0    ;     beq loadboard
00000100:             ; 
00000100: E3540073    ;     cmp R4, #'s'
00000104: 0A000069    ;     beq settingsmenu
00000108:             ; 
00000108: E3540070    ;     cmp R4, #'p'
0000010C: 0A000005    ;     beq showHeap
00000110:             ; 
00000110: E3540071    ;     cmp R4, #'q' ;;quit
00000114: 0A000040    ;     beq mainEnd
00000118:             ; 
00000118: E28F00ED    ;     adrl R0, mainchoicefail
0000011C: E2800C19    ; 
00000120: EF000003    ;     swi 3
00000124:             ; 
00000124: EAFFFFED    ;     b mainchoice
00000128:             ; 
00000128:             ;     ;;R4 will hold the active grid, R5 will hold the passive grid
00000128:             ;     ;;Active is used to count neighbours, passive is used to place updated values in 
00000128:             ;     ;;either can be drawn, just drawn in a different position
00000128:             ; 
00000128:             ; 
00000128:             ; showHeap
00000128: EB0005AA    ;     bl printHeap
0000012C:             ; 
0000012C: EAFFFFE5    ;     b mainmenu
00000130:             ; 
00000130:             ; ;;update loop
00000130:             ; ;;    - loop
00000130:             ; ;;      |-count neighbours
00000130:             ; ;;      |-update inactive grid
00000130:             ; ;;      |-swap grids
00000130:             ; ;;      |-draw grid
00000130:             ; ;;      |-[slow?] - slow() - loops for some time to increase waiting time
00000130:             ; ;;      |-[step?] - step() - waits for input, s and q will have effects
00000130:             ; ;;      |-[erase?] - erase() - \b until grid is gone
00000130:             ; ;;      `-goto loop
00000130:             ; mainloopstart
00000130:             ;     ;;load the slow, step, and erase booleans
00000130: E55F60E7    ;     ldrb R6, slow_b
00000134: E55F70EC    ;     ldrb R7, erase_b
00000138: E55F80EE    ;     ldrb R8, step_b
0000013C:             ; 
0000013C: E51F40FC    ;     ldr R4, gridA
00000140: E51F50FC    ;     ldr R5, gridB
00000144:             ; 
00000144:             ;     ;;(width * height) * 2 + 1 + height
00000144: E55F00F9    ;     ldrb R0, width
00000148: E55F10FC    ;     ldrb R1, height
0000014C: E0000190    ;     mul R0, R0, R1
00000150: E1A00080    ;     mov R0, R0, lsl #1
00000154: E2800001    ;     add R0, R0, #1
00000158: E0800001    ;     add R0, R0, R1
0000015C: E1A09000    ;     mov R9, R0      ;;R9 holds the itterations for erase, so it doesn't have to calc it every t
                      ; ime
00000160:             ; 
00000160: E3A0A000    ;     mov R10, #0 ;;This will hold the number of itterations, when it reaches 
00000164:             ; 
00000164:             ; mainloop
00000164: E55F0115    ;     ldrb R0, maxitters ;;run out of registers @-@
00000168: E15A0000    ;     cmp R10, R0
0000016C: E28AA001    ;     add R10, R10, #1
00000170: 1A000004    ;     bne mainloopcont
00000174:             ; 
00000174: E3A0A000    ;     mov R10, #0
00000178:             ; 
00000178: E28F006A    ;     adrl R0, mainloopittsmsg
0000017C: E2800B07    ; 
00000180: EF000003    ;     swi 3
00000184:             ; 
00000184: EA000006    ;     b mainloopdostep
00000188:             ; 
00000188:             ; mainloopcont
00000188: E1A00004    ;     mov R0, R4
0000018C: E1A01005    ;     mov R1, R5
00000190: EB0004F5    ;     bl updategrid
00000194:             ; 
00000194: E1A00004    ;     mov R0, R4
00000198: EB0003CC    ;     bl drawgrid
0000019C:             ; 
0000019C: E3580001    ;     cmp R8, #1
000001A0: 1A00000D    ;     bne mainloopskipstep
000001A4:             ; 
000001A4:             ; mainloopdostep
000001A4: E1A0000D    ;     mov R0, sp
000001A8: E1A01004    ;     mov R1, R4 ;;give the active grid
000001AC: EB0001FD    ;     bl step
000001B0: E3500000    ;     cmp R0, #0
000001B4: 0A000008    ;     beq mainloopskipstep
000001B8:             ;     
000001B8:             ;     ;;If R0 is #1 then free and go to the main menu
000001B8:             ;     ;;free the current grid
000001B8: E51F0178    ;     ldr R0, gridA
000001BC: EB0005EE    ;     bl free
000001C0: E3A01000    ;     mov R1, #0
000001C4: E50F1184    ;     str R1, gridA
000001C8:             ; 
000001C8: E51F0184    ;     ldr R0, gridB
000001CC: EB0005EA    ;     bl free
000001D0: E3A01000    ;     mov R1, #0
000001D4: E50F1190    ;     str R1, gridB
000001D8:             ; 
000001D8: EAFFFFBA    ;     b mainmenu
000001DC:             ; 
000001DC:             ; mainloopskipstep
000001DC: E3560001    ;     cmp R6, #1
000001E0: 0B00028E    ;     bleq slow
000001E4:             ; 
000001E4: E3570001    ;     cmp R7, #1
000001E8: 01A00009    ;     moveq R0, R9
000001EC: 0B000283    ;     bleq erase
000001F0:             ; 
000001F0: E1A00004    ;     mov R0, R4
000001F4: E1A04005    ;     mov R4, R5
000001F8: E1A05000    ;     mov R5, R0 ;;SWAP the active and passive
000001FC:             ; 
000001FC: EAFFFFD8    ;     b mainloop
00000200:             ; 
00000200:             ; gridFail
00000200: E28F00DB    ;     adrl R0, gridfailmsg
00000204: E2800C1D    ; 
00000208: EF000003    ;     swi 3
0000020C:             ; 
0000020C:             ; mainMallocFail
0000020C: E28F0F89    ;     adrl R0, malloc_panic
00000210: E2800B09    ; 
00000214: EF000003    ;     swi 3
00000218:             ; 
00000218: EA000007    ;     b mainEndEnd
0000021C:             ; 
0000021C:             ; mainEnd
0000021C: E28F0D66    ;     adrl R0, mainendmsg
00000220: EF000003    ;     swi 3
00000224:             ; 
00000224: E1A0000D    ;     mov R0, sp
00000228: EB000006    ;     bl mainfree
0000022C:             ; 
0000022C: E28F0F76    ;     adrl R0, printHeap_end_m
00000230: E2800B09    ; 
00000234: EF000003    ;     swi 3
00000238:             ; 
00000238: EB000566    ;     bl printHeap
0000023C:             ; mainEndEnd
0000023C: E24BD018    ;     sub sp, fp, #24 ;;???
00000240: E8BD47F0    ;     pop {R14, R4-R10}
00000244: E1A0F00E    ;     mov R15, R14
00000248:             ; 
00000248:             ; mainfree
00000248:             ; ;;INP in R0 is the saveInfoStruct
00000248:             ; ;;OUT --
00000248:             ; ;;free all of the memory that we used i.e. any saved grids, saved grid names, and the arr of sa
                      ; ved grids
00000248: E92D47F0    ;     push {R14, R4-R10}
0000024C:             ; 
0000024C: E5905008    ;     ldr R5, [R0, #8] ;;get the current index this is the number of elements in the arr
00000250: E5906000    ;     ldr R6, [R0, #0] ;;This is the array address
00000254: E3A0700C    ;     ldr R7, =sizeofSaveI
00000258:             ; 
00000258: E1A0A000    ;     mov R10, R0
0000025C: E3A04000    ;     mov R4, #0
00000260:             ; mainfreeloop
00000260:             ;     ;;loop through the savedGrids
00000260: E1540005    ;     cmp R4, R5
00000264: 0A00000B    ;     beq mainfreelend
00000268:             ; 
00000268: E0286794    ;     mla R8, R4, R7, R6
0000026C: E5980000    ;     ldr R0, [R8, #0] ;;get the address of the grid
00000270: E5989004    ;     ldr R9, [R8, #4] ;;get the address of the char*
00000274:             ; 
00000274: EB0005C0    ;     bl free
00000278: E3A00000    ;     mov R0, #0
0000027C: E5880000    ;     str R0, [R8, #0]
00000280:             ; 
00000280: E1A00009    ;     mov R0, R9
00000284: EB0005BC    ;     bl free
00000288: E3A00000    ;     mov R0, #0
0000028C: E5880004    ;     str R0, [R8, #4]
00000290:             ; 
00000290: E2844001    ;     add R4, R4, #1
00000294: EAFFFFF1    ;     b mainfreeloop
00000298:             ; 
00000298:             ; mainfreelend
00000298:             ;     ;;free the array
00000298: E1A00006    ;     mov R0, R6
0000029C: EB0005B6    ;     bl free
000002A0: E3A00000    ;     mov R0, #0
000002A4: E58A0000    ;     str R0, [R10, #0]
000002A8:             ; 
000002A8:             ; mainfreeend
000002A8: E8BD47F0    ;     pop {R14, R4-R10}
000002AC: E1A0F00E    ;     mov R15, R14
000002B0:             ; 
000002B0:             ;     ;;Save info struct
000002B0:             ; ;;  -address of grid [4 BYTES]
000002B0:             ; ;;  -char* to the name [4 BYTES]
000002B0:             ; ;;  -width of grid (1 BYTE)
000002B0:             ; ;;  -height of grid (1 BYTE)
000002B0:             ; 
000002B0:             ; settingsmenu
000002B0:             ; ;;https://media.giphy.com/media/jOpLbiGmHR9S0/giphy.gif
000002B0:             ; ;;I think there's a limit on the defined string length
000002B0: E28F00B3    ;     adrl R0, s_m1
000002B4: E2800C1F    ; 
000002B8: EF000003    ;     swi 3
000002BC:             ; 
000002BC: E28F0038    ;     adrl R0, s_m2
000002C0: E2800A02    ; 
000002C4: EF000003    ;     swi 3
000002C8:             ;     
000002C8: E28F0090    ;     adrl R0, s_m3
000002CC: E2800A02    ; 
000002D0: EF000003    ;     swi 3
000002D4:             ; 
000002D4: E28F0035    ;     adrl R0, s_m4
000002D8: E2800C21    ; 
000002DC: EF000003    ;     swi 3
000002E0:             ; 
000002E0:             ; changesetting
000002E0: E28F0F61    ;     adrl R0, s_m
000002E4: E2800A02    ; 
000002E8: EF000003    ;     swi 3
000002EC:             ; 
000002EC:             ; changesettingget
000002EC: E3A0000A    ;     ldr R0, =enter
000002F0: E3A01002    ;     mov R1, #2
000002F4: E3A02001    ;     mov R2, #1
000002F8: EB0002B4    ;     bl getstring
000002FC:             ; 
000002FC: E3500000    ;     cmp R0, #0
00000300: 0A00000E    ;     beq changesettingsmallocfail
00000304:             ; 
00000304: E1A05000    ;     mov R5, R0
00000308:             ; 
00000308: EB000266    ;     bl strtoi
0000030C:             ; 
0000030C: E1A04000    ;     mov R4, R0
00000310: E1A06001    ;     mov R6, R1
00000314: E1A00005    ;     mov R0, R5
00000318:             ; 
00000318: EB000597    ;     bl free
0000031C:             ; 
0000031C: EB00019E    ;     bl newline
00000320:             ; 
00000320: E3560001    ;     cmp R6, #1
00000324: 0AFFFF67    ;     beq mainmenu
00000328:             ; 
00000328: E3560000    ;     cmp R6, #0
0000032C: 0A000007    ;     beq changesettingscont
00000330:             ; 
00000330:             ; changesettingserr
00000330: E28F0E19    ;     adrl R0, s_m_err
00000334: E2800A02    ; 
00000338: EF000003    ;     swi 3
0000033C:             ; 
0000033C: EAFFFFEA    ;     b changesettingget
00000340:             ; 
00000340:             ; changesettingsmallocfail
00000340: E28F0E4F    ;     adrl R0, malloc_panic
00000344: E2800A02    ; 
00000348: EF000003    ;     swi 3
0000034C:             ; 
0000034C: EAFFFF5D    ;     b mainmenu
00000350:             ; 
00000350:             ; changesettingscont
00000350: E3540007    ;     cmp R4, #7
00000354: CAFFFFF5    ;     bgt changesettingserr
00000358:             ; 
00000358:             ;     ;;now we have the index we can print the current value and prompt for a new one then loop b
                      ; ack up to the getsetting
00000358: EA000007    ;     b getjump
0000035C:             ; 
0000035C: 0000053C    ;     jumps defw changestep, changeslow, changeerase, changedims, changerange, changeicons, chang
00000360: 00000554    ; eitter, changedrawerase
00000364: 0000056C    ; 
00000368: 00000628    ; 
0000036C: 0000065C    ; 
00000370: 00000690    ; 
00000374: 00000744    ; 
00000378: 000007F8    ; 
0000037C:             ;     align
0000037C:             ; 
0000037C:             ; getjump
0000037C: E1A04104    ;     mov R4, R4, lsl #2
00000380: E24F002C    ;     adr R0, jumps
00000384: E0840000    ;     add R0, R4, R0
00000388: E5104000    ;     ldr R4, [R0]
0000038C: E12FFF14    ;     bx R4 ;[[flag]]
00000390:             ; 
00000390: E3540000    ;     cmp R4, #0
00000394: 0A000068    ;     beq changestep
00000398:             ; 
00000398: E3540001    ;     cmp R4, #1
0000039C: 0A00006C    ;     beq changeslow
000003A0:             ; 
000003A0: E3540002    ;     cmp R4, #2
000003A4: 0A000070    ;     beq changeerase
000003A8:             ; 
000003A8: E3540003    ;     cmp R4, #3
000003AC: 0A00009D    ;     beq changedims
000003B0:             ; 
000003B0: E3540004    ;     cmp R4, #4
000003B4: 0A0000A8    ;     beq changerange
000003B8:             ; 
000003B8: E3540005    ;     cmp R4, #5
000003BC: 0A0000B3    ;     beq changeicons
000003C0:             ; 
000003C0: E3540006    ;     cmp R4, #6
000003C4: 0A0000DE    ;     beq changeitter
000003C8:             ; 
000003C8: E3540007    ;     cmp R4, #7
000003CC: 0A000109    ;     beq changedrawerase
000003D0:             ; 
000003D0:             ; changearr
000003D0:             ; ;;generic for changedims and change range
000003D0:             ; ;;INP in R0 is addr. for x
000003D0:             ; ;;INP in R1 is addr. for y
000003D0:             ; ;;INP in R2 is boolean for require x < y. 1 for require
000003D0:             ; ;;OUT in R0 is err code non-0 for error
000003D0: E92D41F0    ;     push {R14, R4-R8}
000003D4:             ; 
000003D4: E1A06000    ;     mov R6, R0
000003D8: E1A07001    ;     mov R7, R1
000003DC: E1A08002    ;     mov R8, R2
000003E0:             ; 
000003E0: EB000040    ;     bl printdims
000003E4:             ; 
000003E4:             ; changearrget
000003E4: E28F000D    ;     adrl R0, currentaskx
000003E8: E2800C22    ; 
000003EC: EF000003    ;     swi 3
000003F0:             ; 
000003F0: EB00001D    ;     bl changearrgetvalidint
000003F4: E1A04000    ;     mov R4, R0
000003F8: E3510000    ;     cmp R1, #0
000003FC: 1A000015    ;     bne changearrmallocerr
00000400:             ; 
00000400: EB000165    ;     bl newline
00000404:             ; 
00000404: E28F0001    ;     adrl R0, currentasky
00000408: E2800C22    ; 
0000040C: EF000003    ;     swi 3
00000410:             ; 
00000410: EB000015    ;     bl changearrgetvalidint
00000414: E1A05000    ;     mov R5, R0
00000418:             ; 
00000418: EB00015F    ;     bl newline
0000041C:             ; 
0000041C: E3580001    ;     cmp R8, #1
00000420: 1A000006    ;     bne changearrset
00000424:             ; 
00000424: E1540005    ;     cmp R4, R5
00000428: AA000000    ;     bge changearrsizeerr
0000042C:             ; 
0000042C: EA000003    ;     b changearrset
00000430:             ; 
00000430:             ; changearrsizeerr
00000430: E28F0E25    ;     adrl R0, changearrsizmsg
00000434: E2800A02    ; 
00000438: EF000003    ;     swi 3
0000043C:             ; 
0000043C: EAFFFFE8    ;     b changearrget
00000440:             ; 
00000440:             ; changearrset
00000440:             ;     ;;now we have the two valid values so str them back
00000440: E5464000    ;     strb R4, [R6]
00000444: E5475000    ;     strb R5, [R7] 
00000448:             ; 
00000448: E1A00006    ;     mov R0, R6
0000044C: E1A01007    ;     mov R1, R7
00000450:             ; 
00000450: EB000024    ;     bl printdims
00000454:             ; 
00000454: EA000001    ;     b changearrend
00000458:             ; 
00000458:             ; changearrmallocerr
00000458: E3A00001    ;     mov R0, #1
0000045C: EA000000    ;     b changearrendend
00000460:             ; 
00000460:             ; changearrend
00000460: E3A00000    ;     mov R0, #0
00000464:             ; 
00000464:             ; changearrendend
00000464: E8BD41F0    ;     pop {R14, R4-R8}
00000468: E1A0F00E    ;     mov R15, R14
0000046C:             ; 
0000046C:             ; ;;And you thought the naming couldn't get worse \(*0*)/
0000046C:             ; changearrgetvalidint ;;basically an inner function
0000046C:             ; ;;INP --
0000046C:             ; ;;OUT in R0 is the gotten value
0000046C:             ; ;;OUT in R1 is err code non-0 for fail
0000046C: E92D41F0    ;     push {R14, R4-R8}
00000470:             ; changearrgetvalidintget
00000470: E3A0000A    ;     ldr R0, =enter
00000474: E3A01003    ;     mov R1, #3
00000478: E3A02001    ;     mov R2, #1
0000047C: EB000253    ;     bl getstring
00000480:             ; 
00000480: E3500000    ;     cmp R0, #0
00000484: 0A000011    ;     beq changearrgvmallocerr
00000488:             ; 
00000488: E1A04000    ;     mov R4, R0 ;;save the string to free
0000048C:             ; 
0000048C: EB000205    ;     bl strtoi
00000490:             ; 
00000490: E1A05000    ;     mov R5, R0 ;;save the int value
00000494: E1A06001    ;     mov R6, R1 ;;save err code
00000498:             ; 
00000498: E1A00004    ;     mov R0, R4
0000049C: EB000536    ;     bl free
000004A0:             ; 
000004A0: E3560000    ;     cmp R6, #0
000004A4: 0A000004    ;     beq changearrgetvalidintcont
000004A8:             ; 
000004A8:             ; changearrgetvalidinterr
000004A8: EB00013B    ;     bl newline
000004AC:             ; 
000004AC: E28F007E    ;     adrl R0, changearrverr_m
000004B0: E2800C1D    ; 
000004B4: EF000003    ;     swi 3
000004B8:             ; 
000004B8: EAFFFFEC    ;     b changearrgetvalidintget
000004BC:             ; 
000004BC:             ; changearrgetvalidintcont
000004BC:             ;     ;;we now have an int value, need to do bounds checks
000004BC: E3550000    ;     cmp R5, #0
000004C0: DAFFFFF8    ;     ble changearrgetvalidinterr
000004C4:             ; 
000004C4: E35500FF    ;     cmp R5, #255
000004C8: CAFFFFF6    ;     bgt changearrgetvalidinterr
000004CC:             ; 
000004CC: EA000001    ;     b changearrgetvalidintend
000004D0:             ; 
000004D0:             ; changearrgvmallocerr
000004D0: E3A01001    ;     mov R1, #1
000004D4:             ; 
000004D4: EA000001    ;     b changearrgvendend
000004D8:             ; 
000004D8:             ; changearrgetvalidintend
000004D8: E1A00005    ;     mov R0, R5
000004DC: E3A01000    ;     mov R1, #0
000004E0:             ; changearrgvendend
000004E0: E8BD41F0    ;     pop {R14, R4-R8}
000004E4: E1A0F00E    ;     mov R15, R14
000004E8:             ; 
000004E8:             ; printdims
000004E8:             ; ;;INP in R0 is addr. for x
000004E8:             ; ;;INP in R1 is addr. for y
000004E8:             ; ;;(_, _)
000004E8:             ;     
000004E8: E1A02000    ;     mov R2, R0
000004EC: E1A03001    ;     mov R3, R1
000004F0:             ; 
000004F0: E28F000C    ;     adrl R0, currentDims
000004F4: E2800A02    ; 
000004F8: EF000003    ;     swi 3
000004FC:             ; 
000004FC: E28F002D    ;     adrl R0, bracket_open
00000500: E2800A02    ; 
00000504: EF000003    ;     swi 3
00000508:             ; 
00000508: E5520000    ;     ldrb R0, [R2]
0000050C: EF000004    ;     swi 4
00000510:             ; 
00000510: E28F001B    ;     adrl R0, comma_space
00000514: E2800A02    ; 
00000518: EF000003    ;     swi 3
0000051C:             ; 
0000051C: E5530000    ;     ldrb R0, [R3]
00000520: EF000004    ;     swi 4
00000524:             ; 
00000524: E28F000A    ;     adrl R0, bracket_close
00000528: E2800A02    ; 
0000052C: EF000003    ;     swi 3
00000530:             ; 
00000530: E3A0000A    ;     ldr R0, =nl
00000534: EF000000    ;     swi 0
00000538:             ; 
00000538: E1A0F00E    ;     mov R15, R14
0000053C:             ; 
0000053C:             ; changestep
0000053C: E24F00E6    ;     adrl R0, step_b_d
00000540: E2400B01    ; 
00000544: E28F10AF    ;     adrl R1, currentstep
00000548: E2811C1F    ; 
0000054C:             ; 
0000054C: EB00000C    ;     bl changebool
00000550:             ; 
00000550: EAFFFF62    ;     b changesetting
00000554:             ; 
00000554:             ; changeslow
00000554: E24F00FF    ;     adrl R0, slow_b_d
00000558: E2400B01    ; 
0000055C: E28F1FE1    ;     adrl R1, currentslow
00000560: E2811B07    ; 
00000564:             ; 
00000564: EB000006    ;     bl changebool
00000568:             ; 
00000568: EAFFFF5C    ;     b changesetting
0000056C:             ; 
0000056C:             ; changeerase
0000056C: E24F0F46    ;     adrl R0, erase_b_d
00000570: E2400B01    ; 
00000574: E28F1075    ;     adrl R1, currenterase
00000578: E2811C1F    ; 
0000057C:             ; 
0000057C: EB000000    ;     bl changebool
00000580:             ; 
00000580: EAFFFF56    ;     b changesetting
00000584:             ; 
00000584:             ; changebool
00000584:             ; ;;INP in R0 is the address of ___b_d
00000584:             ; ;;INP in R1 is the address of the printing name
00000584:             ; ;;OUT --
00000584: E92D41F0    ;     push {R14, R4-R8}
00000588:             ; 
00000588: E1A04000    ;     mov R4, R0
0000058C: E1A05001    ;     mov R5, R1
00000590:             ; 
00000590: E1A00001    ;     mov R0, R1
00000594: EF000003    ;     swi 3
00000598:             ; 
00000598: E5540000    ;     ldrb R0, [R4]
0000059C: E3500001    ;     cmp R0, #1
000005A0: 128F005A    ;     adrlne R0, off_msg
000005A4: 12800C23    ; 
000005A8: 028F004F    ;     adrleq R0, on_msg
000005AC: 02800C23    ; 
000005B0: EF000003    ;     swi 3
000005B4:             ; 
000005B4: EB0000F8    ;     bl newline
000005B8:             ; 
000005B8: E28F0073    ;     adrl R0, currentasknew_B
000005BC: E2800A02    ; 
000005C0: EF000003    ;     swi 3
000005C4:             ; 
000005C4:             ; changebool_cont
000005C4: EF000001    ;     swi 1
000005C8:             ; 
000005C8: E2400030    ;     sub R0, R0, #48
000005CC: E3500001    ;     cmp R0, #1
000005D0: 0A000006    ;     beq changebool_set
000005D4: E3500000    ;     cmp R0, #0
000005D8: 0A000004    ;     beq changebool_set
000005DC:             ; 
000005DC: EB0000EE    ;     bl newline
000005E0:             ; 
000005E0: E28F0066    ;     adrl R0, currentasknew_E
000005E4: E2800A02    ; 
000005E8: EF000003    ;     swi 3
000005EC:             ; 
000005EC: EAFFFFF4    ;     b changebool_cont
000005F0:             ; 
000005F0:             ; changebool_set
000005F0: E5440000    ;     strb R0, [R4]
000005F4:             ; 
000005F4: EB0000E8    ;     bl newline
000005F8:             ; 
000005F8: E1A00005    ;     mov R0, R5
000005FC: EF000003    ;     swi 3
00000600:             ; 
00000600: E5540000    ;     ldrb R0, [R4]
00000604: E3500001    ;     cmp R0, #1
00000608: 128F00F2    ;     adrlne R0, off_msg
0000060C: 12800C22    ; 
00000610: 028F00E7    ;     adrleq R0, on_msg
00000614: 02800C22    ; 
00000618: EF000003    ;     swi 3
0000061C:             ; 
0000061C: EB0000DE    ;     bl newline
00000620:             ; 
00000620:             ; changeboolend
00000620: E8BD41F0    ;     pop {R14, R4-R8}
00000624: E1A0F00E    ;     mov R15, R14
00000628:             ; 
00000628:             ; changedims
00000628:             ; ;;INP in R0 is addr. for x
00000628:             ; ;;INP in R1 is addr. for y
00000628:             ; ;;INP in R2 is boolean for require x < y. 1 for require
00000628: E24F00D1    ;     adrl R0, width_d
0000062C: E2400C05    ; 
00000630: E24F1F76    ;     adrl R1, height_d
00000634: E2411B01    ; 
00000638: E3A02000    ;     mov R2, #0
0000063C: EBFFFF63    ;     bl changearr
00000640:             ; 
00000640: E3500000    ;     cmp R0, #0
00000644: 0A000003    ;     beq changedimscont
00000648:             ; 
00000648: E28F0F7A    ;     adrl R0, malloc_panic
0000064C: E2800A02    ; 
00000650: EF000003    ;     swi 3
00000654:             ; 
00000654: EAFFFE9B    ;     b mainmenu
00000658:             ; 
00000658:             ; changedimscont
00000658:             ; 
00000658: EAFFFF20    ;     b changesetting
0000065C:             ; 
0000065C:             ; changerange
0000065C: E24F000F    ;     adrl R0, range_min
00000660: E2400C06    ; 
00000664: E24F1016    ;     adrl R1, range_max
00000668: E2411C06    ; 
0000066C: E3A02001    ;     mov R2, #1
00000670: EBFFFF56    ;     bl changearr
00000674:             ; 
00000674: E3500000    ;     cmp R0, #0
00000678: 0A000003    ;     beq changerangecont
0000067C:             ; 
0000067C: E28F0F6D    ;     adrl R0, malloc_panic
00000680: E2800A02    ; 
00000684: EF000003    ;     swi 3
00000688:             ; 
00000688: EAFFFE8E    ;     b mainmenu
0000068C:             ; 
0000068C:             ; changerangecont
0000068C:             ; 
0000068C: EAFFFF13    ;     b changesetting
00000690:             ; 
00000690:             ; changeicons
00000690:             ; ;;print the current icons, ask for 3 characters in sequence for alive/dead/ptr
00000690: EB000015    ;     bl printicons
00000694:             ; 
00000694: E28F00B1    ;     adrl R0, currenticons_a
00000698: E2800C1E    ; 
0000069C: EF000003    ;     swi 3
000006A0:             ; 
000006A0: E3A00000    ;     mov R0, #0
000006A4: E3A01003    ;     mov R1, #3
000006A8: E3A02001    ;     mov R2, #1
000006AC: EB0001C7    ;     bl getstring
000006B0:             ; 
000006B0: E3500000    ;     cmp R0, #0
000006B4: 0A000008    ;     beq changeiconsmallerr
000006B8:             ; 
000006B8: E5D01000    ;     ldrb R1, [R0, #0]
000006BC: E5D02001    ;     ldrb R2, [R0, #1]
000006C0: E5D03002    ;     ldrb R3, [R0, #2]
000006C4:             ; 
000006C4: E54F1673    ;     strb R1, alive_c
000006C8: E54F2676    ;     strb R2, dead_c
000006CC: E54F3679    ;     strb R3, ptr_c
000006D0:             ; 
000006D0: EB0000B1    ;     bl newline
000006D4:             ; 
000006D4: EB000004    ;     bl printicons
000006D8:             ; 
000006D8: EAFFFF00    ;     b changesetting
000006DC:             ; 
000006DC:             ; changeiconsmallerr
000006DC: E28F00DF    ;     adrl R0, getstringerr_m
000006E0: E2800C1E    ; 
000006E4: EF000003    ;     swi 3
000006E8:             ; 
000006E8: EAFFFEFC    ;     b changesetting
000006EC:             ; 
000006EC:             ; printicons
000006EC:             ; ;;INP --
000006EC:             ; ;;OUT --
000006EC: E28F0F91    ;     adrl R0, currenticons_1
000006F0: E2800B07    ; 
000006F4: EF000003    ;     swi 3
000006F8:             ; 
000006F8: E55F06A7    ;     ldrb R0, alive_c
000006FC: EF000000    ;     swi 0
00000700:             ; 
00000700: E3A0000A    ;     ldr R0, =nl
00000704: EF000000    ;     swi 0
00000708:             ; 
00000708: E28F0EE3    ;     adrl R0, currenticons_2
0000070C: E2800A01    ; 
00000710: EF000003    ;     swi 3
00000714:             ; 
00000714: E55F06C2    ;     ldrb R0, dead_c
00000718: EF000000    ;     swi 0
0000071C:             ; 
0000071C: E3A0000A    ;     ldr R0, =nl
00000720: EF000000    ;     swi 0
00000724:             ; 
00000724: E28F001B    ;     adrl R0, currenticons_3
00000728: E2800C1E    ; 
0000072C: EF000003    ;     swi 3
00000730:             ; 
00000730: E55F06DD    ;     ldrb R0, ptr_c
00000734: EF000000    ;     swi 0
00000738:             ; 
00000738: E3A0000A    ;     ldr R0, =nl
0000073C: EF000000    ;     swi 0
00000740:             ; 
00000740:             ; printiconsend
00000740: E1A0F00E    ;     mov R15, R14
00000744:             ; 
00000744:             ; changeitter
00000744: E28F00C7    ;     adrl R0, currentItters
00000748: E2800C1D    ; 
0000074C: EF000003    ;     swi 3
00000750:             ; 
00000750: E55F0701    ;     ldrb R0, maxitters
00000754: EF000004    ;     swi 4
00000758:             ; 
00000758: EB00008F    ;     bl newline
0000075C:             ; 
0000075C: E28F0057    ;     adrl R0, getitters_m
00000760: E2800C1F    ; 
00000764: EF000003    ;     swi 3
00000768:             ; 
00000768:             ; changeitterget
00000768: E3A0000A    ;     ldr R0, =enter
0000076C: E3E01000    ;     mov R1, #-1
00000770: E3A02001    ;     mov R2, #1
00000774: EB000195    ;     bl getstring
00000778:             ; 
00000778: E3500000    ;     cmp R0, #0
0000077C: 1A000003    ;     bne changeittergetcont
00000780:             ; 
00000780: E28F00B0    ;     adrl R0, malloc_panic
00000784: E2800A02    ; 
00000788: EF000003    ;     swi 3
0000078C:             ; 
0000078C: EAFFFE4D    ;     b mainmenu 
00000790:             ; 
00000790:             ; changeittergetcont
00000790:             ; 
00000790: E1A04000    ;     mov R4, R0
00000794:             ; 
00000794: EB000143    ;     bl strtoi
00000798: E1A03000    ;     mov R3, R0
0000079C:             ; 
0000079C: E1A05000    ;     mov R5, R0
000007A0: E1A06001    ;     mov R6, R1
000007A4:             ; 
000007A4: E1A00004    ;     mov R0, R4
000007A8: EB000473    ;     bl free
000007AC:             ; 
000007AC: EB00007A    ;     bl newline
000007B0:             ; 
000007B0: E3560000    ;     cmp R6, #0
000007B4: 1A000003    ;     bne changeittererr
000007B8:             ; 
000007B8: E24F0069    ;     adrl R0, maxitters
000007BC: E2400C07    ; 
000007C0: E5405000    ;     strb R5, [R0]
000007C4:             ; 
000007C4: EA000004    ;     b changeitterend
000007C8:             ; 
000007C8:             ; changeittererr
000007C8: EB000073    ;     bl newline
000007CC:             ; 
000007CC: E28F00C6    ;     adrl R0, changeittere_m
000007D0: E2800C1E    ; 
000007D4: EF000003    ;     swi 3
000007D8: EAFFFFE2    ;     b changeitterget
000007DC:             ; changeitterend
000007DC: E28F002F    ;     adrl R0, currentItters
000007E0: E2800C1D    ; 
000007E4: EF000003    ;     swi 3
000007E8:             ; 
000007E8: E55F0799    ;     ldrb R0, maxitters
000007EC: EF000004    ;     swi 4
000007F0:             ; 
000007F0: EB000069    ;     bl newline
000007F4:             ; 
000007F4: EAFFFEB9    ;     b changesetting
000007F8:             ; 
000007F8:             ; changedrawerase
000007F8: E24F0FEA    ;     adrl R0, drawerase
000007FC: E2400B01    ; 
00000800: E28F1F45    ;     adrl R1, currentdraweras
00000804: E2811B07    ; 
00000808: EBFFFF5D    ;     bl changebool
0000080C:             ; 
0000080C: EAFFFEB3    ;     b changesetting
00000810:             ; 
00000810:             ; changedraweraseend
00000810: EAFFFEB2    ;     b changesetting
00000814:             ; 
00000814:             ; newboard
00000814: E3A00001    ;     mov R0, #1;;should get dims
00000818: EB00028C    ;     bl setupOptions
0000081C:             ; 
0000081C: EB0001B2    ;     bl setupGrid
00000820:             ; 
00000820: E3500000    ;     cmp R0, #0
00000824: 1AFFFE78    ;     bne mainMallocFail
00000828:             ;     
00000828: E51F47E8    ;     ldr R4, gridA
0000082C: E51F57E8    ;     ldr R5, gridB
00000830:             ; 
00000830: E3540000    ;     cmp R4, #0
00000834: 0AFFFE71    ;     beq gridFail
00000838: E3550000    ;     cmp R5, #0
0000083C: 0AFFFE6F    ;     beq gridFail
00000840:             ; 
00000840: EAFFFE3A    ;     b mainloopstart
00000844:             ; 
00000844:             ; loadboard
00000844:             ; ;;INP in R0 is the ptr to the SaveInfoHeader struct i.e. ptr to arr, current pos, max size
00000844:             ; ;;RET in R0 0 for success in which case go to main loop, n/0 for err in which case return to ma
                      ; in menu
00000844:             ; ;;display the saved grids
00000844:             ; ;;ask for the index
00000844:             ; ;;load the grids with the saved info
00000844:             ; ;;ask the user for the settings
00000844: E1A04000    ;     mov R4, R0 ;;save the struct ptr
00000848:             ; 
00000848:             ;     ;;pass ptr to listgrids
00000848: EB00007F    ;     bl listGrids
0000084C:             ; 
0000084C: E5940008    ;     ldr R0, [R4, #8] ;;get the current position
00000850: E3500000    ;     cmp R0, #0
00000854: 0A00004E    ;     beq loadboardempty
00000858:             ; 
00000858:             ; loadboardaskindex
00000858:             ;     ;;The grid has now been printed out we need to get the index to load
00000858: E28F0074    ;     adrl R0, loadboardaski
0000085C: E2800B06    ; 
00000860: EF000003    ;     swi 3
00000864:             ; 
00000864: E3A0000A    ;     ldr R0, =enter
00000868: E3E01000    ;     mov R1, #-1
0000086C: E3A02001    ;     mov R2, #1
00000870: EB000156    ;     bl getstring
00000874:             ; 
00000874: E3500000    ;     cmp R0, #0
00000878: 1A000003    ;     bne loadboardaskindexcont
0000087C:             ; 
0000087C: E28F0FED    ;     adrl R0, malloc_panic
00000880: E2800B07    ; 
00000884: EF000003    ;     swi 3
00000888:             ; 
00000888: EAFFFE0E    ;     b mainmenu 
0000088C:             ; 
0000088C:             ; loadboardaskindexcont
0000088C:             ; 
0000088C: E1A05000    ;     mov R5, R0
00000890:             ; 
00000890: EB000041    ;     bl newline
00000894:             ; 
00000894: E1A00005    ;     mov R0, R5
00000898: EB000102    ;     bl strtoi
0000089C: E1A06000    ;     mov R6, R0
000008A0: E1A07001    ;     mov R7, R1
000008A4:             ;     ;;ERR codes
000008A4:             ;     ;;  0 is success
000008A4:             ;     ;;  1 is attempted -ve
000008A4:             ;     ;;  2 is use of non-numeric characters
000008A4:             ;     ;;  3 is value out of range of integer
000008A4:             ;     ;;  4 is null string given
000008A4:             ; 
000008A4: E1A00005    ;     mov R0, R5
000008A8: EB000433    ;     bl free
000008AC:             ; 
000008AC: E1A00006    ;     mov R0, R6
000008B0: E1A01007    ;     mov R1, R7
000008B4:             ; 
000008B4: E3510001    ;     cmp R1, #1
000008B8: 0A000032    ;     beq loadboardret
000008BC:             ; 
000008BC: E3510000    ;     cmp R1, #0
000008C0: 0A000003    ;     beq loadboardindex
000008C4:             ; 
000008C4: E28F0092    ;     adrl R0, loadboardifail
000008C8: E2800B06    ; 
000008CC: EF000003    ;     swi 3
000008D0:             ; 
000008D0: EAFFFFE0    ;     b loadboardaskindex
000008D4:             ; 
000008D4:             ; loadboardindex
000008D4:             ; ;;we now have an index lets check if its in range and then load the board
000008D4:             ;     ;;should be +ve so don't need to check < 0
000008D4: E5941008    ;     ldr R1, [R4, #8] ;;get the current position, this is where things get added so index < curr
                      ; entposition
000008D8: E1500001    ;     cmp R0, R1
000008DC: BA000003    ;     blt loadboardmain
000008E0:             ; 
000008E0: E28F0099    ;     adrl R0, loadboardirerr
000008E4: E2800B06    ; 
000008E8: EF000003    ;     swi 3
000008EC: EAFFFFD9    ;     b loadboardaskindex
000008F0:             ; 
000008F0:             ; loadboardmain
000008F0:             ; ;;now we know that the index is valid we can load the grid
000008F0:             ; ;;
000008F0:             ; ;;need to free current grid
000008F0:             ; ;;need to create a copy of the snapshot and set gridA to it 
000008F0:             ; ;;return to main menu
000008F0: E5941000    ;     ldr R1, [R4, #0] ;;get the array of grids
000008F4: E3A0200C    ;     ldr R2, =sizeofSaveI
000008F8: E0201290    ;     mla R0, R0, R2, R1 ;;R0 = index * sizeofSaveI + grid.addr
000008FC:             ; 
000008FC: E5905000    ;     ldr R5, [R0, #0] ;;get the address of that grid
00000900: E5D06008    ;     ldrb R6, [R0, #8] ;;get the width
00000904: E5D07009    ;     ldrb R7, [R0, #9] ;;get the height
00000908:             ; 
00000908: E0000796    ;     mul R0, R6, R7 ;;get the required size
0000090C: E1A09000    ;     mov R9, R0 ;;save the number of bytes
00000910:             ; 
00000910: EB000384    ;     bl malloc
00000914:             ; 
00000914: E3500000    ;     cmp R0, #0
00000918: 0A000016    ;     beq loadboardmallocfail
0000091C:             ; 
0000091C: E1A08000    ;     mov R8, R0 ;;save the new grid arr
00000920:             ; 
00000920:             ;     ;;need to copy the saved grid into the new grid
00000920:             ; 
00000920: E1A00005    ;     mov R0, R5  ;;src is the saved grid
00000924: E1A01008    ;     mov R1, R8  ;;dst is the new grid
00000928: E1A02009    ;     mov R2, R9  ;;bytes is in R9 already from width and height
0000092C: EB000106    ;     bl memcpy
00000930:             ; 
00000930: E51F08F0    ;     ldr R0, gridA
00000934: EB000410    ;     bl free
00000938:             ; 
00000938: E50F88F8    ;     str R8, gridA
0000093C:             ; 
0000093C:             ;     ;;also need to check if the old gridB is big enough --NO!
0000093C:             ;     ;;The old grid has been freed when returning to the main menu so we must make a new one
0000093C:             ; loadboardmallocB
0000093C: E51F08F8    ;     ldr R0, gridB
00000940: EB00040D    ;     bl free
00000944:             ; 
00000944: E1A00009    ;     mov R0, R9
00000948: EB000376    ;     bl malloc
0000094C:             ; 
0000094C: E3500000    ;     cmp R0, #0
00000950: 0A000008    ;     beq loadboardmallocfail
00000954:             ; 
00000954: E50F0910    ;     str R0, gridB
00000958:             ; 
00000958:             ; loadboardskipB
00000958: E54F690D    ;     strb R6, width
0000095C: E54F7910    ;     strb R7, height ;;overwrite the active grid information
00000960:             ; 
00000960: E28F0076    ;     adrl R0, loadboardsucmsg
00000964: E2800B06    ; 
00000968: EF000003    ;     swi 3
0000096C:             ; 
0000096C: E3A00000    ;     mov R0, #0 ;;skip asking dims as they've been loaded
00000970: EB000236    ;     bl setupOptions
00000974:             ; 
00000974: EA000007    ;     b loadboardsucc
00000978:             ; 
00000978:             ; loadboardmallocfail
00000978: E28F001E    ;     adrl R0, loadboardmlcerr
0000097C: E2800B06    ; 
00000980: EF000003    ;     swi 3
00000984:             ; 
00000984: EA000002    ;     b loadboarderr
00000988:             ; 
00000988:             ; loadboardret
00000988: E28F00B6    ;     adrl R0, loadboardretmsg
0000098C: E2800C17    ; 
00000990: EF000003    ;     swi 3
00000994:             ; 
00000994:             ; loadboardempty
00000994:             ; loadboarderr
00000994: EAFFFDCB    ;     b mainmenu
00000998:             ; loadboardsucc
00000998: EAFFFDE4    ;     b mainloopstart
0000099C:             ; 
0000099C:             ; newline
0000099C: E3A0000A    ;     ldr R0, =nl
000009A0: EF000000    ;     swi 0
000009A4:             ; 
000009A4: E1A0F00E    ;     mov R15, R14
000009A8:             ; 
000009A8:             ; step
000009A8:             ; ;;INP in R0 is the gridHeaderStruct ptr [[todo]]
000009A8:             ; ;;INP in R1 is the active grid ptr
000009A8:             ; ;;OUT in R0 is 1 if should return to main menu, else 0.
000009A8:             ; 
000009A8:             ; ;;get user input
000009A8:             ; ;;if q -> jump to main menu
000009A8:             ; ;;if s -> ask for name, bl saveGrid with name
000009A8: E92D41F0    ;     push {R14, R4-R8}
000009AC: E1A04000    ;     mov R4, R0 ;;save the struct 
000009B0: E1A05001    ;     mov R5, R1
000009B4:             ; 
000009B4: EF000001    ;     swi 1
000009B8:             ; 
000009B8: E3500071    ;     cmp R0, #'q'
000009BC: 0A00001D    ;     beq stependfail ;;bad name, shame I can't change it eh
000009C0:             ; 
000009C0: E3500073    ;     cmp R0, #'s'
000009C4: 1A00001D    ;     bne stependsucc
000009C8:             ; 
000009C8: E28F00EE    ;     adrl R0, askname
000009CC: E2800C12    ; 
000009D0: EF000003    ;     swi 3
000009D4:             ; 
000009D4: E3A0000A    ;     ldr R0, =enter
000009D8: E3E01000    ;     mov R1, #-1
000009DC: E3A02001    ;     mov R2, #1
000009E0: EB0000FA    ;     bl getstring
000009E4:             ; 
000009E4: E3500000    ;     cmp R0, #0
000009E8: 1A000003    ;     bne stepcont
000009EC:             ; 
000009EC: E28F0F91    ;     adrl R0, malloc_panic
000009F0: E2800B07    ; 
000009F4: EF000003    ;     swi 3
000009F8:             ; 
000009F8: EA00000E    ;     b stependfail
000009FC:             ; 
000009FC:             ; stepcont
000009FC:             ; 
000009FC: E1A01000    ;     mov R1, R0 ;;char* name
00000A00: E1A00004    ;     mov R0, R4 ;;gridinfo* 
00000A04: E1A02005    ;     mov R2, R5 ;;active grid
00000A08: EB000046    ;     bl saveGrid
00000A0C:             ; 
00000A0C: EBFFFFE2    ;     bl newline
00000A10:             ; 
00000A10: E28F007B    ;     adrl R0, savedchoice
00000A14: E2800C12    ; 
00000A18: EF000003    ;     swi 3
00000A1C:             ; 
00000A1C: EF000001    ;     swi 1
00000A20: EF000000    ;     swi 0
00000A24: E3500059    ;     cmp R0, #'Y'
00000A28:             ; 
00000A28: E3A0000A    ;     ldr R0, =nl
00000A2C: EF000000    ;     swi 0
00000A30:             ; 
00000A30: 0A000000    ;     beq stependfail
00000A34: EA000001    ;     b stependsucc
00000A38:             ; 
00000A38:             ; stependfail
00000A38: E3A00001    ;     mov R0, #1
00000A3C: EA000000    ;     b stepend
00000A40:             ; 
00000A40:             ; stependsucc
00000A40: E3A00000    ;     mov R0, #0
00000A44:             ; 
00000A44:             ; stepend
00000A44: E8BD41F0    ;     pop {R14, R4-R8}
00000A48: E1A0F00E    ;     mov R15, R14
00000A4C:             ; 
00000A4C:             ; listGrids
00000A4C:             ; ;;INP in R0 is the ptr to the gridInfo struct
00000A4C:             ; ;;RET --
00000A4C:             ; ;;Grid info struct
00000A4C:             ; ;;  - SaveInfoStruct* array
00000A4C:             ; ;;  - int max size of arr
00000A4C:             ; ;;  - int current position in arr
00000A4C:             ; 
00000A4C:             ; ;;loops through the array of grids (if any) printing their names, and dims, ask to print grid
00000A4C: E92D47F0    ;     push {R14, R4-R10}
00000A50:             ; 
00000A50: E5904000    ;     ldr R4, [R0, #0] ;;get the array ptr
00000A54: E5905008    ;     ldr R5, [R0, #8] ;;current position
00000A58:             ; 
00000A58: E3550000    ;     cmp R5, #0
00000A5C: 0A00002C    ;     beq listGridsEmpty
00000A60:             ; 
00000A60:             ; ;;if current position == 1: print("There are no saved grids")
00000A60:             ; ;;for i from 0 to current position
00000A60:             ; ;;  getname(4)
00000A60:             ; ;;  getwidth(8)
00000A60:             ; ;;  getheight(9)
00000A60:             ; ;;  print("There is a grid called %s with dims (%d, %d)")
00000A60: E3A01000    ;     mov R1, #0 ;;i
00000A64: E3A0200C    ;     ldr R2, =sizeofSaveI
00000A68:             ; 
00000A68: E28F0FE3    ;     adrl R0, listgridmsg
00000A6C: E2800B05    ; 
00000A70: EF000003    ;     swi 3
00000A74:             ; 
00000A74: E28F00A3    ;     adrl R0, cutoff
00000A78: E2800C17    ; 
00000A7C: EF000003    ;     swi 3
00000A80:             ; 
00000A80:             ; listGridsLoop
00000A80: E1510005    ;     cmp R1, R5
00000A84: 0A000025    ;     beq listGridsLend
00000A88:             ; 
00000A88: E0234291    ;     mla R3, R1, R2, R4 ;;R3 = i * sizeof(saveInfo) + array
00000A8C: E5936004    ;     ldr R6, [R3, #4] ;;load the name ptr
00000A90: E5D37008    ;     ldrb R7, [R3, #8] ;;load the width
00000A94: E5D38009    ;     ldrb R8, [R3, #9] ;;load the height
00000A98:             ; 
00000A98: E28F0E61    ;     adrl R0, gridloadpindex
00000A9C: E2800A01    ; 
00000AA0: EF000003    ;     swi 3
00000AA4:             ; 
00000AA4: E3A0003A    ;     mov R0, #':'
00000AA8: EF000000    ;     swi 0
00000AAC:             ; 
00000AAC: E1A00001    ;     mov R0, R1
00000AB0: EF000004    ;     swi 4
00000AB4:             ; 
00000AB4: EBFFFFB8    ;     bl newline
00000AB8:             ; 
00000AB8: E28F00F9    ;     adrl R0, gridloadpname
00000ABC: E2800C15    ; 
00000AC0: EF000003    ;     swi 3
00000AC4:             ; 
00000AC4: E1A00006    ;     mov R0, R6
00000AC8: EF000003    ;     swi 3
00000ACC:             ; 
00000ACC: EBFFFFB2    ;     bl newline
00000AD0:             ; 
00000AD0: E28F00E9    ;     adrl R0, gridloadpwidth
00000AD4: E2800C15    ; 
00000AD8: EF000003    ;     swi 3
00000ADC:             ; 
00000ADC: E1A00007    ;     mov R0, R7
00000AE0: EF000004    ;     swi 4
00000AE4:             ; 
00000AE4: EBFFFFAC    ;     bl newline
00000AE8:             ; 
00000AE8: E28F00DA    ;     adrl R0, gridloadpheight
00000AEC: E2800C15    ; 
00000AF0: EF000003    ;     swi 3
00000AF4:             ; 
00000AF4: E1A00008    ;     mov R0, R8
00000AF8: EF000004    ;     swi 4
00000AFC:             ; 
00000AFC: EBFFFFA6    ;     bl newline
00000B00:             ; 
00000B00:             ;     ;;[[Prob]  Printing the grid uses the stored width and height, I could change it to use a p
                      ; assed in
00000B00:             ;     ;;             version but do the other areas have enough registers to cope? probably not.
00000B00:             ;     ;;             Would have to swap the width and height with the loaded versions - I really 
                      ; don't like this idea
00000B00:             ; 
00000B00: E2811001    ;     add R1, R1, #1
00000B04:             ; 
00000B04: E28F0013    ;     adrl R0, cutoff
00000B08: E2800C17    ; 
00000B0C: EF000003    ;     swi 3
00000B10:             ; 
00000B10: EAFFFFDA    ;     b listGridsLoop
00000B14:             ; 
00000B14:             ; listGridsEmpty
00000B14: E28F0039    ;     adrl R0, gridloadempty
00000B18: E2800C15    ; 
00000B1C: EF000003    ;     swi 3
00000B20:             ; 
00000B20:             ; listGridsLend
00000B20:             ; listGridsEnd
00000B20: E8BD47F0    ;     pop {R14, R4-R10}
00000B24: E1A0F00E    ;     mov R15, R14
00000B28:             ; 
00000B28:             ; saveGrid
00000B28:             ; ;;INP in R0 is the ptr gridInfo struct (in the main's stackframe)
00000B28:             ; ;;INP in R1 is the char* to the name
00000B28:             ; ;;INP in R2 is the active grid
00000B28:             ; ;;RET in R0 is an errcode or 0 for success. 1 for malloc error
00000B28:             ; 
00000B28:             ; ;;if reachedCap -> realloc + inc maxsize
00000B28:             ; ;;copy the current grid to another loc and place info in gridArr
00000B28:             ; ;;inc current index
00000B28: E92D47F0    ;     push {R14, R4-R10}
00000B2C:             ; 
00000B2C: E1A04000    ;     mov R4, R0
00000B30: E1A05001    ;     mov R5, R1
00000B34: E1A0A002    ;     mov R10, R2
00000B38:             ; 
00000B38: E5942008    ;     ldr R2, [R4, #8] ;;get the current index
00000B3C: E5943004    ;     ldr R3, [R4, #4] ;;get the maxsize
00000B40:             ; 
00000B40: E1520003    ;     cmp R2, R3
00000B44: 0A000000    ;     beq saveGridResize
00000B48: EA00000D    ;     b saveGridAdd
00000B4C:             ; 
00000B4C:             ; saveGridResize
00000B4C:             ;     ;;maxsize in R3
00000B4C: E1A06083    ;     mov R6, R3, lsl #1 ;;double the capacity
00000B50: E3A0700C    ;     ldr R7, =sizeofSaveI
00000B54: E0070796    ;     mul R7, R6, R7 ;;get the number of bytes
00000B58:             ; 
00000B58: E1A00007    ;     mov R0, R7
00000B5C: EB0002F1    ;     bl malloc ;;get the new grid
00000B60:             ; 
00000B60: E3500000    ;     cmp R0, #0 ;;if malloc failed then don't do any saving
00000B64: 0A000020    ;     beq saveGridFailMalloc
00000B68:             ; 
00000B68: E1A01000    ;     mov R1, R0
00000B6C: E1A08000    ;     mov R8, R0 ;;save of ptr
00000B70:             ; 
00000B70:             ;     ;;now that we have the new grid we need to memcpy the bytes from the original into the new 
                      ; one
00000B70: E5940000    ;     ldr R0, [R4, #0] ;;get the array ptr
00000B74:             ;     ;;R1 has the malloced address
00000B74: E1A020A7    ;     mov R2, R7, lsr #1 ;;not great, this is the double cap halfed, means no mul again
00000B78: EB000073    ;     bl memcpy
00000B7C:             ; 
00000B7C:             ;     ;;assume success because I didn't give memcpy an err code :)
00000B7C:             ;     ;;need to store the new size and arr ptr in the gridinfo struct
00000B7C:             ; 
00000B7C: E5848000    ;     str R8, [R4, #0]
00000B80: E5846004    ;     str R6, [R4, #4]
00000B84:             ; 
00000B84:             ; saveGridAdd
00000B84:             ; ;;add the current grid to the array
00000B84: E5946000    ;     ldr R6, [R4, #0] ;;get the arr ptr
00000B88: E5947008    ;     ldr R7, [R4, #8] ;;get current index
00000B8C:             ; 
00000B8C:             ;     ;;ptr is 4 bytes
00000B8C:             ;     ;;we're adding the struct of 
00000B8C:             ;     ;;  |-grid*     (ptr)
00000B8C:             ;     ;;  |-char*     (ptr)
00000B8C:             ;     ;;  |-width     (byte)
00000B8C:             ;     ;;  `-height    (byte)
00000B8C:             ; 
00000B8C:             ;     ;;we need to copy the current array
00000B8C: E55F8B41    ;     ldrb R8, width
00000B90: E55F9B44    ;     ldrb R9, height
00000B94: E0080998    ;     mul R8, R8, R9 ;;get the number of bytes in grid
00000B98:             ; 
00000B98: E1A00008    ;     mov R0, R8
00000B9C: EB0002E1    ;     bl malloc ;;allocate a new grid
00000BA0:             ; 
00000BA0: E3500000    ;     cmp R0, #0
00000BA4: 0A000010    ;     beq saveGridFailMalloc
00000BA8:             ; 
00000BA8: E92D0100    ;     push {R8} ;; :(
00000BAC:             ; 
00000BAC: E3A0800C    ;     ldr R8, =sizeofSaveI
00000BB0: E0266897    ;     mla R6, R7, R8, R6 ;;currentindex * sizeof(Gridinfo) + arrptr
00000BB4: E5860000    ;     str R0, [R6, #0] ;;store the grid*
00000BB8: E5865004    ;     str R5, [R6, #4] ;;store the char*
00000BBC: E55F8B71    ;     ldrb R8, width
00000BC0: E5C68008    ;     strb R8, [R6, #8]
00000BC4: E5C69009    ;     strb R9, [R6, #9]
00000BC8:             ; 
00000BC8: E8BD0100    ;     pop {R8}
00000BCC:             ; 
00000BCC: E1A01000    ;     mov R1, R0 ;;dst
00000BD0: E1A0000A    ;     mov R0, R10 ;;src
00000BD4: E1A02008    ;     mov R2, R8 ;;num bytes
00000BD8: EB00005B    ;     bl memcpy ;;copy the grid into the new location
00000BDC:             ; 
00000BDC:             ;     ;;inc the position
00000BDC: E5940008    ;     ldr R0, [R4, #8]
00000BE0: E2800001    ;     add R0, R0, #1
00000BE4: E5840008    ;     str R0, [R4, #8]
00000BE8:             ; 
00000BE8: EA000001    ;     b saveGridSucc
00000BEC:             ; 
00000BEC:             ; saveGridFailMalloc
00000BEC: E3A00001    ;     mov R0, #1
00000BF0: EA000000    ;     b saveGridEnd
00000BF4:             ; 
00000BF4:             ; saveGridSucc
00000BF4: E3A00000    ;     mov R0, #0
00000BF8:             ; 
00000BF8:             ; saveGridEnd
00000BF8: E8BD47F0    ;     pop {R14, R4-R10}
00000BFC: E1A0F00E    ;     mov R15, R14
00000C00:             ; 
00000C00:             ; erase
00000C00:             ; ;;INP in R0 is the itters
00000C00:             ; ;;for (width * height + 1) * 2 + 1
00000C00:             ; ;;      print('\b')
00000C00: E1A01000    ;     mov R1, R0
00000C04:             ; 
00000C04:             ; eraseloop
00000C04: E3510000    ;     cmp R1, #0
00000C08: 0A000003    ;     beq eraseend
00000C0C:             ; 
00000C0C: E3A00008    ;     ldr R0, =backspace
00000C10: EF000000    ;     swi 0
00000C14:             ; 
00000C14: E2411001    ;     sub R1, R1, #1
00000C18: EAFFFFF9    ;     b eraseloop
00000C1C:             ; 
00000C1C:             ; eraseend
00000C1C: E1A0F00E    ;     mov R15, R14
00000C20:             ; 
00000C20:             ; slow
00000C20: E3A010FF    ;     mov R1, #0xFF
00000C24: E1A01081    ;     mov R1, R1, lsl #1
00000C28:             ; 
00000C28:             ; slowloop
00000C28: E3510000    ;     cmp R1, #0
00000C2C: 0A000005    ;     beq slowend
00000C30:             ; 
00000C30: E3A00020    ;     mov R0, #' '
00000C34: EF000000    ;     swi 0
00000C38: E3A00008    ;     ldr R0, =backspace
00000C3C: EF000000    ;     swi 0
00000C40:             ; 
00000C40: E2411001    ;     sub R1, R1, #1
00000C44: EAFFFFF7    ;     b slowloop
00000C48:             ; 
00000C48:             ; slowend
00000C48: E1A0F00E    ;     mov R15, R14
00000C4C:             ; 
00000C4C:             ; heapclean
00000C4C:             ; ;;zero out all memory in the heap (debugging uses)
00000C4C: E28F00B4    ;     adrl R0, heapstart
00000C50: E2800B07    ; 
00000C54: E3A01601    ;     ldr R1, =max_addr ;;stores the end of the heap
00000C58: E3A02801    ;     ldr R2, =stack_size
00000C5C: E0411002    ;     sub R1, R1, R2 ;; R1 = max_addr - stack_size which should be the heap end
00000C60: E3C11003    ;     and R1, R1, #-4 ;;align to 4 byte boundry just in case
00000C64: E3A03000    ;     mov R3, #0
00000C68:             ; heapcleanloop ;;starting at heapstart
00000C68: E1500001    ;     cmp R0, R1
00000C6C: 0A000002    ;     beq heapcleanend
00000C70: E5003000    ;     str R3, [R0] ;;store 0 in loc
00000C74: E2800004    ;     add R0, R0, #4 ;;inc by a word
00000C78: EAFFFFFA    ;     b heapcleanloop
00000C7C:             ; heapcleanend
00000C7C: E1A0F00E    ;     mov R15, R14
00000C80:             ; 
00000C80:             ; strlen
00000C80:             ; ;;INP in R0 is the address of the string
00000C80:             ; ;;OUT in R0 is the length of the null terminated string
00000C80:             ; 
00000C80:             ; ;;len = 0
00000C80:             ; ;;while(inp[len] != \0) {len++;}
00000C80:             ; ;;return len
00000C80:             ; 
00000C80: E3A01000    ;     mov R1, #0 ;;len
00000C84: E3500000    ;     cmp R0, #0
00000C88: 0A000004    ;     beq strlenend
00000C8C:             ; 
00000C8C:             ; strlenloop
00000C8C: E7D02001    ;     ldrb R2, [R0, R1]
00000C90: E3520000    ;     cmp R2, #0
00000C94: 0A000001    ;     beq strlenend
00000C98: E2811001    ;     add R1, R1, #1
00000C9C: EAFFFFFA    ;     b strlenloop
00000CA0:             ; 
00000CA0:             ; strlenend
00000CA0: E1A00001    ;     mov R0, R1
00000CA4: E1A0F00E    ;     mov R15, R14
00000CA8:             ; 
00000CA8:             ; 
00000CA8:             ; strtoi
00000CA8:             ; ;;INP in R0 is the address of the string
00000CA8:             ; ;;OUT in R0 is the value created
00000CA8:             ; ;;OUT in R1 is the err code
00000CA8:             ; ;;
00000CA8:             ; ;;ERR codes
00000CA8:             ; ;;  0 is success
00000CA8:             ; ;;  1 is attempted -ve
00000CA8:             ; ;;  2 is use of non-numeric characters
00000CA8:             ; ;;  3 is value out of range of integer
00000CA8:             ; ;;  4 is null string given
00000CA8:             ; 
00000CA8:             ; ;;  example inp
00000CA8:             ; ;;  12234       len = 5
00000CA8:             ; ;;      ^-find end
00000CA8:             ; ;;  tot = 0
00000CA8:             ; ;;  for i from end to 0:
00000CA8:             ; ;;      tot += inp[i] * (10 ** (len(inp) - i - 1))
00000CA8:             ; ;;  +some checks for valid input
00000CA8:             ; 
00000CA8:             ; ;;This will take in an address to the start of a string and attempt to convert it into an integ
                      ; er
00000CA8:             ; ;;String is only valid when all characters are numerical
00000CA8:             ; ;;For now it does not accept -ve numbers
00000CA8:             ; 
00000CA8: E92D41F0    ;     push {R14, R4-R8}
00000CAC: E1A04000    ;     mov R4, R0  ;;R4 holds the addr
00000CB0:             ; 
00000CB0: E3500000    ;     cmp R0, #0
00000CB4: 03A01004    ;     moveq R1, #4
00000CB8: 0A00001E    ;     beq strtoiendfail ;;null given so err code = 4 and end
00000CBC:             ; 
00000CBC: EBFFFFEF    ;     bl strlen
00000CC0: E1A05000    ;     mov R5, R0  ;;R5 holds the len of the string
00000CC4:             ; 
00000CC4: E3550000    ;     cmp R5, #0
00000CC8: 0A00001C    ;     beq strtoiendsucc ;;if len(string) == 0 then return 0
00000CCC:             ; 
00000CCC: E5D46000    ;     ldrb R6, [R4, #0]
00000CD0: E356002D    ;     cmp R6, #45
00000CD4: 0A000012    ;     beq strtoifailminus
00000CD8:             ; 
00000CD8: E3A06000    ;     mov R6, #0  ;;R6 holds the total
00000CDC: E3A07001    ;     mov R7, #1  ;;R7 holds the **
00000CE0: E2458001    ;     sub R8, R5, #1  ;;R8 is i which starts at end (len - 1)
00000CE4: E3A0300A    ;     mov R3, #10 ;;mul to **
00000CE8:             ; 
00000CE8:             ; strtoiloop
00000CE8: E3580000    ;     cmp R8, #0
00000CEC: BA00000A    ;     blt strtoilend
00000CF0:             ; 
00000CF0: E7D42008    ;     ldrb R2, [R4, R8]
00000CF4: E2422030    ;     sub R2, R2, #48
00000CF8:             ; 
00000CF8: E3520000    ;     cmp R2, #0
00000CFC: BA00000C    ;     blt strtoifailnonnum
00000D00: E3520009    ;     cmp R2, #9
00000D04: CA00000A    ;     bgt strtoifailnonnum
00000D08:             ; 
00000D08: E0266792    ;     mla R6, R2, R7, R6 ;;total = (inp[i] * (**)) + total -> total += inp[i] * (**)
00000D0C: 6A000006    ;     bvs strtoifailoutrange
00000D10: E0070397    ;     mul R7, R7, R3
00000D14:             ; 
00000D14: E2488001    ;     sub R8, R8, #1
00000D18:             ; 
00000D18: EAFFFFF2    ;     b strtoiloop
00000D1C:             ; 
00000D1C:             ; 
00000D1C:             ; ;;branches are expensive - should this just be rep RET? probably doesn't matter at this scale
00000D1C:             ; strtoilend
00000D1C: E1A00006    ;     mov R0, R6
00000D20: EA000006    ;     b strtoiendsucc
00000D24:             ; 
00000D24:             ; strtoifailminus
00000D24: E3A01001    ;     mov R1, #1
00000D28: EA000002    ;     b strtoiendfail
00000D2C:             ; 
00000D2C:             ; strtoifailoutrange
00000D2C: E3A01003    ;     mov R1, #3
00000D30: EA000000    ;     b strtoiendfail
00000D34:             ; 
00000D34:             ; strtoifailnonnum
00000D34: E3A01002    ;     mov R1, #2
00000D38:             ; 
00000D38:             ; strtoiendfail
00000D38: E3A00000    ;     mov R0, #0
00000D3C: EA000000    ;     b strtoiend
00000D40:             ; 
00000D40:             ; strtoiendsucc
00000D40: E3A01000    ;     mov R1, #0
00000D44:             ; 
00000D44:             ; strtoiend
00000D44: E8BD41F0    ;     pop {R14, R4-R8}
00000D48: E1A0F00E    ;     mov R15, R14
00000D4C:             ; 
00000D4C:             ; memcpy
00000D4C:             ; ;;INP in R0 is the addr of src
00000D4C:             ; ;;INP in R1 is the addr of dst
00000D4C:             ; ;;INP in R2 is the number of bytes to copy
00000D4C:             ; 
00000D4C:             ; ;;check if src and dst are alliged
00000D4C:             ; ;;If different then write bytes
00000D4C:             ; ;;If same then go to 4byte boundry
00000D4C:             ; ;;  Write words of bytes2copy / 4
00000D4C:             ; ;;  Write remaining bytes
00000D4C: E92D41F0    ;     push {R14, R4-R8}
00000D50:             ; 
00000D50: E2004003    ;     and R4, R0, #0b11
00000D54: E2015003    ;     and R5, R1, #0b11
00000D58:             ; 
00000D58: E1540005    ;     cmp R4, R5
00000D5C: 1A00000E    ;     bne memcpyallbytes
00000D60:             ; 
00000D60:             ;     ;;If they are the same then cpy R4 bytes and then do words
00000D60: E0422004    ;     sub R2, R2, R4;; bytes2cpy -= bytes we are about to write
00000D64: E1A03004    ;     mov R3, R4
00000D68: EB00000E    ;     bl memcpybytes
00000D6C:             ; 
00000D6C:             ;     ;;Now find the number of words that can be written i.e. bytes2cpy / 4 (bytes2cpy >> 2)
00000D6C: E3C23003    ;     and R3, R2, #-4 ;;the number of bytes to write that make up the words
00000D70: E3A04000    ;     mov R4, #0 ;;i
00000D74:             ; memcpywordsloop
00000D74: E1540003    ;     cmp R4, R3
00000D78: 0A000003    ;     beq memcpywordslend
00000D7C:             ; 
00000D7C: E7906004    ;     ldr R6, [R0, R4]
00000D80: E7816004    ;     str R6, [R1, R4]
00000D84:             ;     
00000D84: E2844004    ;     add R4, R4, #4
00000D88:             ; 
00000D88: EAFFFFF9    ;     b memcpywordsloop
00000D8C:             ;     
00000D8C:             ; memcpywordslend
00000D8C:             ; ;;Now copy the remaining bytes
00000D8C: E2022003    ;     and R2, R2, #0b11
00000D90: E1A03002    ;     mov R3, R2
00000D94: EB000003    ;     bl memcpybytes
00000D98: EA00000A    ;     b memcpyend
00000D9C:             ; 
00000D9C:             ; memcpyallbytes
00000D9C: E1A03002    ;     mov R3, R2
00000DA0: EB000000    ;     bl memcpybytes
00000DA4: EA000007    ;     b memcpyend
00000DA8:             ; 
00000DA8:             ; memcpybytes
00000DA8:             ; ;;This is an internal function to memcpy and so doesn't follow the calling convention, it also 
                      ; assumes values are in place from memcpy
00000DA8:             ; ;;for (int i = 0; i < byte2cpy; i++) {
00000DA8:             ; ;;      *(dst + i) = *(src + i)
00000DA8:             ; ;;INP in R3 is the number of bytes to copy
00000DA8: E3A05000    ;     mov R5, #0 ;;i
00000DAC:             ; memcpybytesloop
00000DAC: E1550003    ;     cmp R5, R3
00000DB0: 0A000003    ;     beq memcpybyteslend ;;i < bytes2cpy
00000DB4:             ; 
00000DB4: E7D04005    ;     ldrb R4, [R0, R5]
00000DB8: E7C14005    ;     strb R4, [R1, R5] ;;dst[i] = src[i]
00000DBC:             ; 
00000DBC: E2855001    ;     add R5, R5, #1 ;;i++
00000DC0:             ; 
00000DC0: EAFFFFF9    ;     b memcpybytesloop
00000DC4:             ; 
00000DC4:             ; memcpybyteslend
00000DC4: E1A0F00E    ;     mov R15, R14
00000DC8:             ; 
00000DC8:             ; memcpyend
00000DC8: E8BD41F0    ;     pop {R14, R4-R8}
00000DCC: E1A0F00E    ;     mov R15, R14
00000DD0:             ; 
00000DD0:             ; getstring
00000DD0:             ; ;;INP in R0 the terminator character
00000DD0:             ; ;;INP in R1 the max number of characters or -1 for no max
00000DD0:             ; ;;INP in R2 boolean (non-0/0) for if letters should be printed out as well
00000DD0:             ; ;;RET in R0 a ptr to the memory address
00000DD0:             ; ;;
00000DD0:             ; ;;Dynamically allocate memory to support large string
00000DD0:             ; 
00000DD0:             ; ;;buff = malloc(minBytes)
00000DD0:             ; ;;while (input != terminator && pos < maxchars) 
00000DD0:             ; ;;  buff[pos] = input
00000DD0:             ; ;;  putchar(input)
00000DD0:             ; ;;  if (pos > buffSize)
00000DD0:             ; ;;      nBuff = malloc(buffSize << 1)
00000DD0:             ; ;;      memcpy from buff to nBuff
00000DD0:             ; ;;      free buff
00000DD0:             ; ;;      buff = nBuff
00000DD0:             ; 
00000DD0: E92D47F0    ;     push {R14, R4-R10}
00000DD4:             ; 
00000DD4: E1A08000    ;     mov R8, R0 ;;now holds terminator
00000DD8: E1A09001    ;     mov R9, R1 ;;nax chars
00000DDC: E3590000    ;     cmp R9, #0
00000DE0: 0A00003A    ;     beq getstringEnd
00000DE4:             ;     ;sub R9, R9, #1 ;;reduce by 1 to use later
00000DE4: E1A0A002    ;     mov R10, R2 ;;print bool
00000DE8:             ; 
00000DE8: E3A06008    ;     ldr R6, =minBuffSize ;;R6 will hold the current size of the buffer
00000DEC: E1A00006    ;     mov R0, R6
00000DF0: EB00024C    ;     bl malloc
00000DF4:             ; 
00000DF4: E3500000    ;     cmp R0, #0
00000DF8: 0A000032    ;     beq getstringErr
00000DFC:             ; 
00000DFC: E1A04000    ;     mov R4, R0 ;;R4 is the address of the buffer
00000E00:             ; 
00000E00: E3A05000    ;     mov R5, #0 ;;R5 is the loop counter/index into buffer
00000E04:             ; getstringloop
00000E04: E3790001    ;     cmp R9, #-1
00000E08: 0A000001    ;     beq getstringloopskipsize
00000E0C: E1550009    ;     cmp R5, R9 ;;position - maxsize
00000E10:             ;                       ;;pos 2 means 3 characters written
00000E10: AA00001B    ;     bge getstringlend ;;if position >= maxsize
00000E14:             ; getstringloopskipsize
00000E14: EF000001    ;     swi 1 ;;get input
00000E18: E1500008    ;     cmp R0, R8 ;;is input == terminator character
00000E1C: 0A000018    ;     beq getstringlend
00000E20:             ; 
00000E20: E3790001    ;     cmp R9, #-1
00000E24: 0AFFFFFF    ;     beq skipMax
00000E28:             ;     
00000E28:             ; skipMax
00000E28: E1550006    ;     cmp R5, R6
00000E2C: E92D0001    ;     push {R0}
00000E30: AA000005    ;     bge getstringresize
00000E34:             ; 
00000E34:             ; getstringlcont
00000E34: E8BD0001    ;     pop {R0}
00000E38: E7C40005    ;     strb R0, [R4, R5] ;;buff[pos] = input
00000E3C:             ; 
00000E3C: E35A0000    ;     cmp R10, #0
00000E40: 1F000000    ;     swine 0 ;;output the character to the screen if R10 is not 0
00000E44:             ; 
00000E44: E2855001    ;     add R5, R5, #1
00000E48:             ; 
00000E48: EAFFFFED    ;     b getstringloop
00000E4C:             ; 
00000E4C:             ; getstringresize
00000E4C:             ;     ;;r6 will hold new buffer
00000E4C: E1A00086    ;     mov R0, R6, lsl #1
00000E50: EB000234    ;     bl malloc
00000E54:             ; 
00000E54: E3500000    ;     cmp R0, #0
00000E58: 0A00001A    ;     beq getstringErr
00000E5C:             ; 
00000E5C: E1A07000    ;     mov R7, R0
00000E60:             ; 
00000E60: E1A00004    ;     mov R0, R4 ;;old buff
00000E64: E1A01007    ;     mov R1, R7 ;;newBuff
00000E68: E1A02005    ;     mov R2, R5 ;;bytes to write
00000E6C: EBFFFFB6    ;     bl memcpy
00000E70:             ; 
00000E70: E1A00004    ;     mov R0, R4
00000E74: EB0002C0    ;     bl free
00000E78: E1A04007    ;     mov R4, R7
00000E7C:             ; 
00000E7C: E1A06086    ;     mov R6, R6, lsl #1
00000E80:             ; 
00000E80: EAFFFFEB    ;     b getstringlcont
00000E84:             ; 
00000E84:             ; getstringlend
00000E84:             ;     ;;need to add a \0
00000E84:             ;     ;;need to check if the buffer is completely full -> resize buffer to +1? (will be aligned t
                      ; o 8 in malloc!) then copy
00000E84:             ;     ;;I could have the buffers always leave a space open for the \0? but this is kind of an edg
                      ; e case?
00000E84: E1550006    ;     cmp R5, R6 ;;position to size of buffer
00000E88: 0A000000    ;     beq getstringResizeEnd
00000E8C:             ; 
00000E8C: EA00000F    ;     b getstringEnd
00000E90:             ; 
00000E90:             ; getstringResizeEnd
00000E90: E2860001    ;     add R0, R6, #1
00000E94: EB000223    ;     bl malloc
00000E98:             ; 
00000E98: E3500000    ;     cmp R0, #0
00000E9C: 0A000009    ;     beq getstringErr
00000EA0:             ; 
00000EA0: E1A07000    ;     mov R7, R0
00000EA4:             ; 
00000EA4: E1A00004    ;     mov R0, R4;;old buff
00000EA8: E1A01007    ;     mov R1, R7;;new buff
00000EAC: E1A02005    ;     mov R2, R5;;bytes2write
00000EB0: EBFFFFA5    ;     bl memcpy
00000EB4:             ; 
00000EB4: E1A00004    ;     mov R0, R4
00000EB8: EB0002AF    ;     bl free
00000EBC: E1A04007    ;     mov R4, R7
00000EC0:             ; 
00000EC0: E2866001    ;     add R6, R6, #1 ;;not needed
00000EC4:             ; 
00000EC4: EA000001    ;     b getstringEnd
00000EC8:             ; 
00000EC8:             ; getstringErr
00000EC8: E3A00000    ;     mov R0, #0
00000ECC: EA000002    ;     b getstringEndEnd
00000ED0:             ; 
00000ED0:             ; getstringEnd
00000ED0: E3A00000    ;     mov R0, #0
00000ED4: E7C40005    ;     strb R0, [R4, R5]
00000ED8:             ; 
00000ED8: E1A00004    ;     mov R0, R4
00000EDC:             ; 
00000EDC:             ; getstringEndEnd
00000EDC: E8BD47F0    ;     pop {R14, R4-R10}
00000EE0: E1A0F00E    ;     mov R15, R14
00000EE4:             ; 
00000EE4:             ; tolower
00000EE4:             ; ;;INP in R0 is a character
00000EE4:             ; ;;OUT in R0 is the character.lower()
00000EE4: E3800020    ;     orr R0, R0, #32
00000EE8: E1A0F00E    ;     mov R15, R14
00000EEC:             ; 
00000EEC:             ; setupGrid
00000EEC:             ; ;;INP --
00000EEC:             ; ;;RET in R0 is err code, non-0 is error
00000EEC:             ; ;;The values addresses of the grids will now be set, can still be 0
00000EEC:             ; ;; ask for generation mode
00000EEC:             ; ;;      |-If random ask for seed
00000EEC:             ; ;;      |   `-For generation roll the seed to create a pseudorandom value for each `pixel`
00000EEC:             ; ;;      `-If draw then get them to draw the grid one `pixel` at a time
00000EEC: E92D47F0    ;     push {R14, R4-R10}
00000EF0:             ; 
00000EF0:             ;     ;;generate the main grid
00000EF0: E55F6EA5    ;     ldrb R6, width
00000EF4: E55F7EA8    ;     ldrb R7, height
00000EF8:             ; 
00000EF8: E0000796    ;     mul R0, R6, R7 ;;width * height = num of bytes to malloc
00000EFC:             ; 
00000EFC: E1A05000    ;     mov R5, R0
00000F00: EB000208    ;     bl malloc
00000F04:             ; 
00000F04: E1A04000    ;     mov R4, R0
00000F08: E50F4EC8    ;     str R4, gridA
00000F0C:             ; 
00000F0C: E1A00005    ;     mov R0, R5
00000F10: EB000204    ;     bl malloc
00000F14: E50F0ED0    ;     str R0, gridB
00000F18:             ; 
00000F18: E3500000    ;     cmp R0, #0      ;;If either grid failed to malloc
00000F1C: 0A000065    ;     beq setupGridFail
00000F20: E3540000    ;     cmp R4, #0
00000F24: 0A000063    ;     beq setupGridFail
00000F28:             ; 
00000F28:             ;     ;;R4 holds the gridA addr
00000F28:             ;     ;;R6 holds the width
00000F28:             ;     ;;R7 holds the height
00000F28:             ; 
00000F28: E28F005A    ;     adrl R0, askgenoption
00000F2C: E2800C0F    ; 
00000F30: EF000003    ;     swi 3
00000F34:             ; setupGridAsk
00000F34: EF000001    ;     swi 1
00000F38: E3800020    ;     orr R0, R0, #32
00000F3C:             ; 
00000F3C: E1A01000    ;     mov R1, R0
00000F40: EBFFFE95    ;     bl newline
00000F44:             ; 
00000F44: E3510064    ;     cmp R1, #'d'
00000F48: 0A000005    ;     beq setupdrawing
00000F4C:             ; 
00000F4C: E3510072    ;     cmp R1, #'r'
00000F50: 0A000007    ;     beq setuprandom
00000F54:             ; 
00000F54: E28F0067    ;     adrl R0, setupGrdFailmsg
00000F58: E2800C0F    ; 
00000F5C: EF000003    ;     swi 3
00000F60: EAFFFFF3    ;     b setupGridAsk
00000F64:             ; 
00000F64:             ; setupdrawing
00000F64: E3A09000    ;     mov R9, #0
00000F68:             ; 
00000F68: E28F0EFE    ;     adrl R0, drawinfomsg
00000F6C: EF000003    ;     swi 3
00000F70:             ; 
00000F70: EA00000C    ;     b setupstart
00000F74:             ; 
00000F74:             ; setuprandom
00000F74: E28F0FEA    ;     adrl R0, askseed
00000F78: E2800B03    ; 
00000F7C: EF000003    ;     swi 3
00000F80:             ; 
00000F80: E3A00000    ;     mov R0, #0
00000F84: E3A01004    ;     mov R1, #4
00000F88: E3A02001    ;     mov R2, #1
00000F8C: EBFFFF8F    ;     bl getstring
00000F90:             ; 
00000F90: E3500000    ;     cmp R0, #0
00000F94: 0A000047    ;     beq setupGridFail
00000F98:             ; 
00000F98: E5108000    ;     ldr R8, [R0]
00000F9C:             ; 
00000F9C: EB000276    ;     bl free
00000FA0:             ; 
00000FA0: EBFFFE7D    ;     bl newline
00000FA4:             ; 
00000FA4: E3A09001    ;     mov R9, #1
00000FA8:             ; 
00000FA8:             ; setupstart
00000FA8:             ; ;;This is probably not a good way to do it as there is more branching in the middle of a loop t
                      ; hat is executed alot
00000FA8:             ; ;;I'm doing it this way `not because it is easy, but because I though it would be easy`
00000FA8:             ; ;;Reduces the need for writing another loop :)
00000FA8:             ; ;;R9 holds the mode (1 for random, 0 for draw)
00000FA8:             ; ;;R8 will hold the seed for random
00000FA8:             ; ;;for row from 0 to height - 1
00000FA8:             ; ;;  for col from 0 to width - 1
00000FA8:             ; ;;      if (random)
00000FA8:             ; ;;          grid[row][col] = ((seed rol 1) || row) && 1
00000FA8:             ; ;;      else
00000FA8:             ; ;;          grid[row][col] = input() == 1
00000FA8: E3A05000    ;     mov R5, #0 ;; row
00000FAC:             ; setuprowloop
00000FAC: E1550007    ;     cmp R5, R7
00000FB0: 0A00003E    ;     beq setuprowlend
00000FB4:             ; 
00000FB4: E3A0A000    ;     mov R10, #0 ;;col
00000FB8:             ; setupcolloop
00000FB8: E15A0006    ;     cmp R10, R6
00000FBC: 0A000039    ;     beq setupcollend
00000FC0:             ; 
00000FC0: E3590001    ;     cmp R9, #1
00000FC4: 0A000000    ;     beq dorandom
00000FC8: EA000004    ;     b dodrawstart
00000FCC:             ; 
00000FCC:             ; ;;dorandom and dodraw will get their value for this position and then place it in R2
00000FCC:             ; ;;R3 is free at this point
00000FCC:             ; dorandom
00000FCC:             ;     ;;seed in R8
00000FCC: E1A080E8    ;     mov R8, R8, ror #1
00000FD0: E00A3005    ;     and R3, R10, R5
00000FD4: E0288003    ;     eor R8, R8, R3
00000FD8: E2082001    ;     and R2, R8, #1
00000FDC: EA00002D    ;     b setupcollcont
00000FE0:             ; 
00000FE0:             ; dodrawstart
00000FE0: E023A695    ;     mla R3, R5, R6, R10 ;;R3 = row * width + col
00000FE4:             ; 
00000FE4: E3A00002    ;     mov R0, #2
00000FE8: E7C40003    ;     strb R0, [R4, R3]
00000FEC:             ; 
00000FEC: E3590000    ;     cmp R9, #0
00000FF0: 01A00004    ;     moveq R0, R4
00000FF4: 0B000035    ;     bleq drawgrid ;;print the new state of the grid if this is drawing mode
00000FF8:             ; 
00000FF8:             ; dodraw
00000FF8:             ;     ;;get input, validate 1 or 0
00000FF8:             ;     ;;if invalid print error loop back
00000FF8:             ;     ;;-_- I've just realised I want to print the grid each time as well R0-R3 are scratch
00000FF8: EF000001    ;     swi 1
00000FFC:             ; 
00000FFC: E3500031    ;     cmp R0, #'1'
00001000: 0A000017    ;     beq dodrawsucc
00001004: E3500030    ;     cmp R0, #'0'
00001008: 0A000015    ;     beq dodrawsucc
0000100C:             ; 
0000100C: E3A0100A    ;     ldr R1, =enter
00001010: E1500001    ;     cmp R0, R1;;next line
00001014: 1A00000E    ;     bne dodrawfail
00001018:             ; 
00001018: E023A695    ;     mla R3, R5, R6, R10 ;;R3 = row * width + col
0000101C: E3A00000    ;     mov R0, #0
00001020: E7C40003    ;     strb R0, [R4, R3]
00001024:             ; 
00001024: E2855001    ;     add R5, R5, #1
00001028:             ; 
00001028: E24F0FF6    ;     adrl R0, drawerase
0000102C: E2400B03    ; 
00001030: E5500000    ;     ldrb R0, [R0]
00001034: E3500000    ;     cmp R0, #0
00001038: 0AFFFFDB    ;     beq setuprowloop
0000103C:             ; 
0000103C: E0000796    ;     mul R0, R6, R7      ;;I don't like having to do this every time :(
00001040: E1A00080    ;     mov R0, R0, lsl #1
00001044: E2800001    ;     add R0, R0, #1
00001048: E0800007    ;     add R0, R0, R7
0000104C: EBFFFEEB    ;     bl erase
00001050:             ; 
00001050: EAFFFFD5    ;     b setuprowloop
00001054:             ; 
00001054:             ; dodrawfail
00001054:             ; 
00001054: E28F004A    ;     adrl R0, drawfailmsg
00001058: E2800C0F    ; 
0000105C: EF000003    ;     swi 3
00001060:             ; 
00001060: EAFFFFE4    ;     b dodraw
00001064:             ; 
00001064:             ; dodrawsucc
00001064: E92D0001    ;     push {R0}
00001068: E24F0018    ;     adrl R0, drawerase
0000106C: E2400A01    ; 
00001070: E5500000    ;     ldrb R0, [R0]
00001074: E3500000    ;     cmp R0, #0
00001078: 0A000004    ;     beq dodrawsuccskiperase
0000107C:             ; 
0000107C: E0000796    ;     mul R0, R6, R7      ;;I don't like having to do this every time :(
00001080: E1A00080    ;     mov R0, R0, lsl #1
00001084: E2800001    ;     add R0, R0, #1
00001088: E0800007    ;     add R0, R0, R7
0000108C: EBFFFEDB    ;     bl erase
00001090:             ;     
00001090:             ; dodrawsuccskiperase
00001090: E8BD0001    ;     pop {R0}
00001094:             ; 
00001094: E2402030    ;     sub R2, R0, #48 ;;could be xor?
00001098:             ; 
00001098:             ; setupcollcont
00001098:             ;     ;;place the value in R2 into the grid[row][col]
00001098:             ;     ;;row * width + col
00001098: E023A695    ;     mla R3, R5, R6, R10 ;;R3 = row * width + col ;;I'm doing this twice \-(*v*)-/
0000109C: E7C42003    ;     strb R2, [R4, R3] ;;grid offset by R3
000010A0:             ; 
000010A0: E28AA001    ;     add R10, R10, #1
000010A4: EAFFFFC3    ;     b setupcolloop
000010A8:             ; setupcollend
000010A8: E2855001    ;     add R5, R5, #1
000010AC: EAFFFFBE    ;     b setuprowloop
000010B0:             ; setuprowlend
000010B0:             ;     ;;grid has been setup
000010B0: E3A00000    ;     mov R0, #0 ;;success
000010B4: EA000003    ;     b setupGridEnd
000010B8:             ; 
000010B8:             ; setupGridFail
000010B8: E28F0FDE    ;     adrl R0, malloc_panic
000010BC: E2800B05    ; 
000010C0: EF000003    ;     swi 3
000010C4:             ; 
000010C4: E3A00001    ;     mov R0, #1 ;;fail!
000010C8:             ; 
000010C8:             ; setupGridEnd
000010C8: E8BD47F0    ;     pop {R14, R4-R10}
000010CC: E1A0F00E    ;     mov R15, R14
000010D0:             ; 
000010D0:             ; 
000010D0:             ; ;;[[TODO]] the heap may not be blank (when heapclean is removed) and so need to 0 the mem. Mayb
                      ; e add option to malloc or add calloc (not the same)
000010D0:             ; drawgrid
000010D0:             ; ;;INP in R0 is the grid address to draw
000010D0:             ; 
000010D0:             ; ;;for row from 0 to height - 1
000010D0:             ; ;;  for col from 0 to width - 1
000010D0:             ; ;;      print('X' if grid[row][col] else '_')
000010D0:             ; ;;  print(newline)
000010D0:             ; ;;print(newline)
000010D0: E92D01F0    ;     push {R4-R8}
000010D4:             ; 
000010D4: E1A06000    ;     mov R6, R0
000010D8:             ; 
000010D8: E24F408D    ;     adrl R4, width
000010DC: E2444A01    ; 
000010E0: E5544000    ;     ldrb R4, [R4]
000010E4: E24F5098    ;     adrl R5, height
000010E8: E2455A01    ; 
000010EC: E5555000    ;     ldrb R5, [R5]
000010F0:             ; 
000010F0: E3A02000    ;     mov R2, #0 ;;row
000010F4:             ; drawgridrowloop
000010F4: E1520005    ;     cmp R2, R5
000010F8: 0A00001C    ;     beq drawgridrowlend
000010FC:             ; 
000010FC: E3A01000    ;     mov R1, #0 ;;col
00001100:             ; drawgridcolloop
00001100: E1510004    ;     cmp R1, R4
00001104: 0A000014    ;     beq drawgridcollend
00001108:             ; 
00001108: E0231492    ;     mla R3, R2, R4, R1 ;;R3 = row * width + col
0000110C: E7D63003    ;     ldrb R3, [R6, R3]
00001110:             ; 
00001110: E3530002    ;     cmp R3, #2
00001114: 0A000008    ;     beq drawgridprintcurrent
00001118: E3530001    ;     cmp R3, #1
0000111C: 024F00CB    ;     adrleq R0, alive_c
00001120: 02400A01    ; 
00001124: 05100000    ;     ldreq R0, [R0]
00001128: 124F00D6    ;     adrlne R0, dead_c
0000112C: 12400A01    ; 
00001130: 15100000    ;     ldrne R0, [R0]
00001134:             ; 
00001134: EF000000    ;     swi 0
00001138:             ; 
00001138: EA000003    ;     b drawgridcollcont
0000113C:             ; 
0000113C:             ; drawgridprintcurrent
0000113C: E24F00E9    ;     adrl R0, ptr_c
00001140: E2400A01    ; 
00001144: E5100000    ;     ldr R0, [R0]
00001148: EF000000    ;     swi 0
0000114C:             ; 
0000114C:             ; drawgridcollcont
0000114C: E3A00020    ;     mov R0, #' '
00001150: EF000000    ;     swi 0
00001154:             ; 
00001154: E2811001    ;     add R1, R1, #1
00001158: EAFFFFE8    ;     b drawgridcolloop
0000115C:             ; 
0000115C:             ; drawgridcollend
0000115C: E3A01000    ;     mov R1, #0
00001160: E2822001    ;     add R2, R2, #1
00001164: E3A0000A    ;     mov R0, #10
00001168: EF000000    ;     swi 0
0000116C: EAFFFFE0    ;     b drawgridrowloop
00001170:             ; 
00001170:             ; drawgridrowlend
00001170: E3A0000A    ;     mov R0, #10
00001174: EF000000    ;     swi 0
00001178:             ; drawgridend
00001178: E8BD01F0    ;     pop {R4-R8}
0000117C: E1A0F00E    ;     mov R15, R14
00001180:             ; 
00001180:             ; 
00001180:             ; printoptions
00001180:             ; ;;INP --
00001180:             ; ;;OUT --
00001180:             ; ;;optionsp_1-5
00001180: E28F0024    ;     adrl R0, optionsp_1
00001184: E2800B03    ; 
00001188: EF000003    ;     swi 3
0000118C:             ; 
0000118C: E24F0041    ;     adrl R0, width
00001190: E2400C11    ; 
00001194: E5500000    ;     ldrb R0, [R0]
00001198: EF000004    ;     swi 4
0000119C:             ; 
0000119C: E28F0EC2    ;     adrl R0, optionsp_2
000011A0: EF000003    ;     swi 3
000011A4:             ; 
000011A4: E24F0F56    ;     adrl R0, height
000011A8: E2400A01    ; 
000011AC: E5500000    ;     ldrb R0, [R0]
000011B0: EF000004    ;     swi 4
000011B4:             ; 
000011B4: E28F000B    ;     adrl R0, optionsp_3
000011B8: E2800B03    ; 
000011BC: EF000003    ;     swi 3
000011C0:             ; 
000011C0: E24F0077    ;     adrl R0, slow_b
000011C4: E2400C11    ; 
000011C8: E5500000    ;     ldrb R0, [R0]
000011CC: E3500001    ;     cmp R0, #1
000011D0: 128F002A    ;     adrlne R0, off_msg
000011D4: 12800C17    ; 
000011D8: 028F001F    ;     adrleq R0, on_msg
000011DC: 02800C17    ; 
000011E0: EF000003    ;     swi 3
000011E4:             ; 
000011E4: E28F00E7    ;     adrl R0, optionsp_4
000011E8: E2800C0B    ; 
000011EC: EF000003    ;     swi 3
000011F0:             ; 
000011F0: E24F0F6A    ;     adrl R0, erase_b
000011F4: E2400A01    ; 
000011F8: E5500000    ;     ldrb R0, [R0]
000011FC: E3500001    ;     cmp R0, #1
00001200: 128F00FA    ;     adrlne R0, off_msg
00001204: 12800C16    ; 
00001208: 028F00EF    ;     adrleq R0, on_msg
0000120C: 02800C16    ; 
00001210: EF000003    ;     swi 3
00001214:             ; 
00001214: E28F00C3    ;     adrl R0, optionsp_5
00001218: E2800C0B    ; 
0000121C: EF000003    ;     swi 3
00001220:             ; 
00001220: E24F00D6    ;     adrl R0, step_b
00001224: E2400C11    ; 
00001228: E5500000    ;     ldrb R0, [R0]
0000122C: E3500001    ;     cmp R0, #1
00001230: 128F00CA    ;     adrlne R0, off_msg
00001234: 12800C16    ; 
00001238: 028F00BF    ;     adrleq R0, on_msg
0000123C: 02800C16    ; 
00001240: EF000003    ;     swi 3
00001244:             ; 
00001244: E3A0000A    ;     ldr R0, =nl
00001248: EF000000    ;     swi 0
0000124C:             ; 
0000124C: E1A0F00E    ;     mov R15, R14
00001250:             ; 
00001250:             ; setupOptions
00001250:             ; ;;INP in R0 is 1 if should ask for dims 0 for skip
00001250: E92D4010    ;     push {R14, R4}
00001254: E1A04000    ;     mov R4, R0
00001258:             ; 
00001258: E28F006B    ;     adrl R0, askdefaults ;;ask q
0000125C: E2800C09    ; 
00001260: EF000003    ;     swi 3
00001264: EF000001    ;     swi 1   ;;get character answer
00001268: EF000000    ;     swi 0
0000126C: E3500059    ;     cmp R0, #'Y'
00001270: E3A0000A    ;     ldr R0, =nl
00001274: EF000000    ;     swi 0
00001278:             ; 
00001278: 1A000021    ;     bne setupCustom
0000127C:             ; 
0000127C: E24F0F8A    ;     adrl R0, erase_b_d
00001280: E2400A01    ; 
00001284: E5500000    ;     ldrb R0, [R0]
00001288: E24F1D49    ;     adrl R1, erase_b
0000128C: E5410000    ;     strb R0, [R1]
00001290:             ; 
00001290: E24F003B    ;     adrl R0, slow_b_d
00001294: E2400C12    ; 
00001298: E5500000    ;     ldrb R0, [R0]
0000129C: E24F1053    ;     adrl R1, slow_b
000012A0: E2411C12    ; 
000012A4: E5410000    ;     strb R0, [R1]
000012A8:             ; 
000012A8: E24F0052    ;     adrl R0, step_b_d
000012AC: E2400C12    ; 
000012B0: E5500000    ;     ldrb R0, [R0]
000012B4: E24F106A    ;     adrl R1, step_b
000012B8: E2411C12    ; 
000012BC: E5410000    ;     strb R0, [R1]
000012C0:             ; 
000012C0: E3540000    ;     cmp R4, #0
000012C4: 0A00000B    ;     beq setupOptionsDEnd
000012C8:             ; 
000012C8: E24F0071    ;     adrl R0, width_d
000012CC: E2400C12    ; 
000012D0: E5500000    ;     ldrb R0, [R0]
000012D4: E24F1089    ;     adrl R1, width
000012D8: E2411C12    ; 
000012DC: E5410000    ;     strb R0, [R1]
000012E0: E24F0FA2    ;     adrl R0, height_d
000012E4: E2400A01    ; 
000012E8: E5500000    ;     ldrb R0, [R0]
000012EC: E24F1E2A    ;     adrl R1, height
000012F0: E2411A01    ; 
000012F4: E5410000    ;     strb R0, [R1]
000012F8:             ; 
000012F8:             ; setupOptionsDEnd
000012F8: EBFFFFA0    ;     bl printoptions
000012FC:             ; 
000012FC: E8BD4010    ;     pop {R14, R4}
00001300: E1A0F00E    ;     mov R15, R14 ;;RET
00001304:             ; 
00001304:             ; setupCustom
00001304:             ; ;;ask for erase, slow, step, and conditionally dims
00001304:             ; 
00001304:             ; ;;ask step
00001304:             ; ;;ask erase
00001304:             ; ;;if (!step)
00001304:             ; ;;  if erase
00001304:             ; ;;      print(recommend slow)
00001304:             ; ;;  ask slow
00001304:             ; 
00001304: E3A01001    ;     mov R1, #1
00001308:             ; 
00001308: E28F001E    ;     adrl R0, askstep
0000130C: E2800C09    ; 
00001310: EF000003    ;     swi 3
00001314: EF000001    ;     swi 1
00001318: EF000000    ;     swi 0 
0000131C: E3500059    ;     cmp R0, #'Y' 
00001320: E3A0000A    ;     ldr R0, =nl
00001324: EF000000    ;     swi 0
00001328: 13A01000    ;     movne R1, #0
0000132C: E24F00E2    ;     adrl R0, step_b
00001330: E2400C12    ; 
00001334: E5401000    ;     strb R1, [R0]
00001338:             ; 
00001338: E3A01001    ;     mov R1, #1
0000133C:             ; 
0000133C: E28F00B9    ;     adrl R0, askerase
00001340: E2800B02    ; 
00001344: EF000003    ;     swi 3
00001348: EF000001    ;     swi 1
0000134C: EF000000    ;     swi 0
00001350: E3500059    ;     cmp R0, #'Y'
00001354: E3A0000A    ;     ldr R0, =nl
00001358: EF000000    ;     swi 0
0000135C: 13A01000    ;     movne R1, #0
00001360: E24F0FC6    ;     adrl R0, erase_b
00001364: E2400A01    ; 
00001368: E5401000    ;     strb R1, [R0]
0000136C:             ; 
0000136C: E24F0022    ;     adrl R0, step_b
00001370: E2400C13    ; 
00001374: E5500000    ;     ldrb R0, [R0]
00001378: E3500001    ;     cmp R0, #1
0000137C: 0A000011    ;     beq setupCustomskipslow
00001380:             ; 
00001380: E3510001    ;     cmp R1, #1 ;;if erase is on
00001384: E28F0055    ;     adrl R0, warneraseslow
00001388: E2800C09    ; 
0000138C: 0F000003    ;     swieq 3
00001390:             ; 
00001390: E3A01001    ;     mov R1, #1
00001394:             ;  
00001394: E28F007A    ;     adrl R0, askslow
00001398: E2800B02    ; 
0000139C: EF000003    ;     swi 3
000013A0: EF000001    ;     swi 1
000013A4: EF000000    ;     swi 0 
000013A8: E3500059    ;     cmp R0, #'Y' 
000013AC: E3A0000A    ;     ldr R0, =nl
000013B0: EF000000    ;     swi 0
000013B4: 13A01000    ;     movne R1, #0
000013B8: E24F006F    ;     adrl R0, slow_b
000013BC: E2400C13    ; 
000013C0: E5401000    ;     strb R1, [R0] ;;[[maybe]] changed but not checked, go here if error
000013C4:             ; 
000013C4: EA000016    ;     b setupCustomDimsCheck
000013C8:             ; 
000013C8:             ; setupCustomskipslow
000013C8: E3A00000    ;     mov R0, #0
000013CC: E24F1083    ;     adrl R1, slow_b
000013D0: E2411C13    ; 
000013D4: E5410000    ;     strb R0, [R1]
000013D8:             ; 
000013D8: EA000011    ;     b setupCustomDimsCheck
000013DC:             ; 
000013DC:             ; printrange
000013DC:             ; ;;INP --
000013DC:             ; ;;OUT --
000013DC: E28F004D    ;     adrl R0, bracket_open
000013E0: E2800C11    ; 
000013E4: EF000003    ;     swi 3
000013E8:             ; 
000013E8: E24F009B    ;     adrl R0, range_min
000013EC: E2400C13    ; 
000013F0: E5500000    ;     ldrb R0, [R0]
000013F4: EF000004    ;     swi 4
000013F8:             ; 
000013F8: E28F0036    ;     adrl R0, dash
000013FC: E2800C09    ; 
00001400: EF000003    ;     swi 3
00001404:             ; 
00001404: E24F00B6    ;     adrl R0, range_max
00001408: E2400C13    ; 
0000140C: E5500000    ;     ldrb R0, [R0]
00001410: EF000004    ;     swi 4
00001414:             ; 
00001414: E28F0F47    ;     adrl R0, b_close_colon
00001418: E2800B02    ; 
0000141C: EF000003    ;     swi 3
00001420:             ; 
00001420: E1A0F00E    ;     mov R15, R14
00001424:             ; 
00001424:             ; setupCustomDimsCheck
00001424: E3540000    ;     cmp R4, #0
00001428: 0A00004C    ;     beq customend
0000142C:             ; 
0000142C: E28F00EB    ;     adrl R0, askwid
00001430: E2800B02    ; 
00001434: EF000003    ;     swi 3
00001438:             ; 
00001438: EBFFFFE7    ;     bl printrange
0000143C:             ; 
0000143C:             ; getwid
0000143C: E3A0000A    ;     ldr R0, =enter
00001440: E3A01003    ;     mov R1, #3
00001444: E3A02001    ;     mov R2, #1
00001448: EBFFFE60    ;     bl getstring
0000144C:             ; 
0000144C: E3500000    ;     cmp R0, #0
00001450: 0A00003E    ;     beq customfail
00001454:             ; 
00001454: E1A04000    ;     mov R4, R0
00001458:             ; 
00001458: EBFFFE12    ;     bl strtoi
0000145C: E1A05000    ;     mov R5, R0
00001460:             ;     
00001460: E1A00004    ;     mov R0, R4
00001464: EB000144    ;     bl free ;;free the collected string
00001468:             ; 
00001468: E1A01005    ;     mov R1, R5
0000146C:             ; 
0000146C: EBFFFD4A    ;     bl newline
00001470:             ; 
00001470: E24F4023    ;     adrl R4, range_min
00001474: E2444B05    ; 
00001478: E5544000    ;     ldrb R4, [R4]
0000147C: E24F502E    ;     adrl R5, range_max
00001480: E2455B05    ; 
00001484: E5555000    ;     ldrb R5, [R5]
00001488:             ; 
00001488: E1510005    ;     cmp R1, R5
0000148C: CA000005    ;     bgt getwidFail
00001490: E1510004    ;     cmp R1, R4
00001494: BA000003    ;     blt getwidFail
00001498:             ; 
00001498: E24F004D    ;     adrl R0, width
0000149C: E2400B05    ; 
000014A0: E5401000    ;     strb R1, [R0]
000014A4:             ; 
000014A4: EA000004    ;     b getheisetup
000014A8:             ; 
000014A8:             ; getwidFail
000014A8: E28F00A3    ;     adrl R0, getwidfailmsg
000014AC: E2800B02    ; 
000014B0: EF000003    ;     swi 3
000014B4:             ; 
000014B4: EBFFFFC8    ;     bl printrange
000014B8:             ; 
000014B8: EAFFFFDF    ;     b getwid
000014BC:             ; 
000014BC:             ; getheisetup
000014BC: E28F0078    ;     adrl R0, askhei
000014C0: E2800B02    ; 
000014C4: EF000003    ;     swi 3
000014C8:             ; 
000014C8: EBFFFFC3    ;     bl printrange
000014CC:             ; 
000014CC:             ; gethei
000014CC: E3A0000A    ;     ldr R0, =enter
000014D0: E3A01003    ;     mov R1, #3
000014D4: E3A02001    ;     mov R2, #1
000014D8: EBFFFE3C    ;     bl getstring
000014DC:             ; 
000014DC: E3500000    ;     cmp R0, #0
000014E0: 0A00001A    ;     beq customfail
000014E4:             ; 
000014E4: E1A04000    ;     mov R4, R0
000014E8:             ; 
000014E8: EBFFFDEE    ;     bl strtoi
000014EC: E1A05000    ;     mov R5, R0
000014F0:             ; 
000014F0: E1A00004    ;     mov R0, R4
000014F4: EB000120    ;     bl free
000014F8:             ; 
000014F8: E1A01005    ;     mov R1, R5
000014FC:             ; 
000014FC: EBFFFD26    ;     bl newline
00001500:             ; 
00001500: E24F40B3    ;     adrl R4, range_min
00001504: E2444B05    ; 
00001508: E5544000    ;     ldrb R4, [R4]
0000150C: E24F50BE    ;     adrl R5, range_max
00001510: E2455B05    ; 
00001514: E5555000    ;     ldrb R5, [R5]
00001518:             ; 
00001518: E1510005    ;     cmp R1, R5
0000151C: CA000005    ;     bgt getheiFail
00001520: E1510004    ;     cmp R1, R4
00001524: BA000003    ;     blt getheiFail
00001528:             ; 
00001528: E24F20DC    ;     adrl R2, height
0000152C: E2422B05    ; 
00001530: E5421000    ;     strb R1, [R2]
00001534:             ; 
00001534: EA000009    ;     b customend
00001538:             ; 
00001538:             ; getheiFail
00001538: E28F003F    ;     adrl R0, getheifailmsg
0000153C: E2800B02    ; 
00001540: EF000003    ;     swi 3
00001544:             ; 
00001544: EBFFFFA4    ;     bl printrange
00001548:             ; 
00001548: EAFFFFDF    ;     b gethei
0000154C:             ; 
0000154C: EA000003    ;     b customend
00001550:             ; 
00001550:             ; customfail
00001550: E28F0E2E    ;     adrl R0, malloc_panic
00001554: E2800A01    ; 
00001558: EF000003    ;     swi 3
0000155C:             ; 
0000155C: EA000000    ;     b customret
00001560:             ; 
00001560:             ; customend
00001560: EBFFFF06    ;     bl printoptions
00001564:             ; 
00001564:             ; customret
00001564: E8BD4010    ;     pop {R14, R4}
00001568: E1A0F00E    ;     mov R15, R14 ;;RET
0000156C:             ; 
0000156C:             ; 
0000156C:             ; updategrid
0000156C:             ; ;;INP in R0 is the active grid
0000156C:             ; ;;INP in R1 is the passive grid
0000156C:             ; ;;passive grid is the one being updated based on the value in the activeGrid
0000156C:             ; ;;RET --
0000156C:             ; ;;for row from 0 to height - 1
0000156C:             ; ;;  for col from 0 to width - 1
0000156C:             ; ;;      int n = countNeighbours(activeGrid, row, col)
0000156C:             ; ;;      int s = activeGrid[row][col]
0000156C:             ; ;;      
0000156C:             ; ;;      if (s == alive)
0000156C:             ; ;;          passiveGrid[row][col] = n == 3 or n == 2
0000156C:             ; ;;      else
0000156C:             ; ;;          passiveGrid[row][col] = n == 3
0000156C:             ; 
0000156C:             ; ;;  R4 holds the row
0000156C:             ; ;;  R5 holds the col
0000156C:             ; ;;  R6 holds the width
0000156C:             ; ;;  R7 holds the height
0000156C:             ; ;;  R8 holds the active grid
0000156C:             ; ;;  R9 holds the passive grid
0000156C:             ; 
0000156C: E92D47F0    ;     push {R14, R4-R10}
00001570:             ; 
00001570: E3500000    ;     cmp R0, #0
00001574: 0A000026    ;     beq updategridfail
00001578: E3510000    ;     cmp R1, #0
0000157C: 0A000024    ;     beq updategridfail
00001580:             ; 
00001580: E24F6035    ;     adrl R6, width
00001584: E2466C15    ; 
00001588: E5566000    ;     ldrb R6, [R6]
0000158C: E24F7D55    ;     adrl R7, height
00001590: E5577000    ;     ldrb R7, [R7]
00001594:             ; 
00001594: E1A08000    ;     mov R8, R0
00001598: E1A09001    ;     mov R9, R1
0000159C:             ; 
0000159C: E3A04000    ;     mov R4, #0 ;;row
000015A0:             ; updategridrowloop
000015A0: E1540007    ;     cmp R4, R7
000015A4: 0A00001D    ;     beq updategridrowlend
000015A8:             ; 
000015A8: E3A05000    ;     mov R5, #0 ;;col
000015AC:             ; updategridcolloop
000015AC: E1550006    ;     cmp R5, R6
000015B0: 0A000014    ;     beq updategridccollend
000015B4:             ; 
000015B4: E1A00008    ;     mov R0, R8
000015B8: E1A01004    ;     mov R1, R4
000015BC: E1A02005    ;     mov R2, R5
000015C0: EB000018    ;     bl countneighbours
000015C4:             ; 
000015C4: E0215694    ;     mla R1, R4, R6, R5 ;;R1 = row * width + col
000015C8: E7D82001    ;     ldrb R2, [R8, R1] ;;grid[R1]
000015CC:             ;     ;;R0 holds the n count
000015CC: E3520000    ;     cmp R2, #0
000015D0: 0A000006    ;     beq updatedead
000015D4:             ; 
000015D4:             ; updatealive
000015D4: E3A03000    ;     mov R3, #0
000015D8: E3500003    ;     cmp R0, #3
000015DC: 03A03001    ;     moveq R3, #1
000015E0: E3500002    ;     cmp R0, #2
000015E4: 03A03001    ;     moveq R3, #1
000015E8: E7C93001    ;     strb R3, [R9, R1]
000015EC: EA000003    ;     b updatelcont
000015F0:             ; 
000015F0:             ; updatedead
000015F0: E3A03001    ;     mov R3, #1
000015F4: E3500003    ;     cmp R0, #3
000015F8: 13A03000    ;     movne R3, #0
000015FC: E7C93001    ;     strb R3, [R9, R1]
00001600:             ; 
00001600:             ; updatelcont
00001600: E2855001    ;     add R5, R5, #1
00001604: EAFFFFE8    ;     b updategridcolloop
00001608:             ; 
00001608:             ; updategridccollend
00001608: E3A05000    ;     mov R5, #0
0000160C: E2844001    ;     add R4, R4, #1
00001610: EAFFFFE2    ;     b updategridrowloop
00001614:             ; 
00001614:             ; updategridfail
00001614: E28F00B5    ;     adrl R0, updatergrid_m_f
00001618: E2800C12    ; 
0000161C: EF000003    ;     swi 3
00001620:             ; 
00001620:             ; updategridrowlend
00001620:             ; updategridend
00001620: E8BD47F0    ;     pop {R14, R4-R10}
00001624: E1A0F00E    ;     mov R15, R14
00001628:             ; 
00001628:             ; 
00001628:             ; countneighbours
00001628:             ; ;;INP in R0 is the activeGrid
00001628:             ; ;;INP in R1 is the row
00001628:             ; ;;INP in R2 is the col
00001628:             ; ;;OUT in R0 is the number of neighbours
00001628:             ; 
00001628:             ; ;;offsets = [[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]]
00001628:             ; ;;tot = 0
00001628:             ; ;;for offset in offsets
00001628:             ; ;;  if (isinrange(row + offset[0], col + offset[1]))
00001628:             ; ;;      tot += grid[row + offset[0]][col + offset[1]]
00001628:             ; ;;return tot
00001628: E92D4FF0    ;     push {R14, R4-R11} ;;I used the fp before I knew it wasn't a general purpose one, its fine 
                      ; in this context anyway
0000162C:             ; 
0000162C: E24F4F8B    ;     adrl R4, offsets ;;holds the offset
00001630: E2444B05    ; 
00001634:             ; 
00001634: E1A07000    ;     mov R7, R0
00001638: E1A08001    ;     mov R8, R1
0000163C: E1A09002    ;     mov R9, R2
00001640: E3A0A000    ;     mov R10, #0 ;;R10 holds the total
00001644: E24FB0F9    ;     adrl R11, width
00001648: E24BBC15    ; 
0000164C: E55BB000    ;     ldrb R11, [R11];;R11 holds the width of the grid
00001650:             ; 
00001650: E3A03000    ;     mov R3, #0
00001654:             ; 
00001654:             ; countneighboursloop
00001654: E3530008    ;     cmp R3, #8 ;;change this ccheck to be for R4
00001658: 0A00000F    ;     beq countneighbourslend
0000165C:             ; 
0000165C: E4945004    ;     ldr R5, [R4], #4
00001660: E4946004    ;     ldr R6, [R4], #4
00001664:             ; 
00001664: E0880005    ;     add R0, R8, R5
00001668: E0891006    ;     add R1, R9, R6
0000166C:             ; 
0000166C: E2833001    ;     add R3, R3, #1
00001670:             ; 
00001670: E92D0008    ;     push {R3} ;;I should probably be using a local var on the stack, but I don't yet know how t
                      ; o setup a stack frame properly
00001674: EB00000B    ;     bl isinrange
00001678: E8BD0008    ;     pop {R3}
0000167C:             ; 
0000167C: E3500000    ;     cmp R0, #0
00001680: 0A000004    ;     beq countneighboursskipadd
00001684:             ; 
00001684: E0880005    ;     add R0, R8, R5 ;;new row
00001688: E0891006    ;     add R1, R9, R6 ;;new col ;;can assume that R0, R1 haven't changed as isinrange doesn't edit
                      ;  them, but I'm going to for now
0000168C:             ; 
0000168C: E0201B90    ;     mla R0, R0, R11, R1 ;;find offset
00001690: E7D70000    ;     ldrb R0, [R7, R0]
00001694: E08AA000    ;     add R10, R10, R0 ;;tot += grid[newrow][newcol]
00001698:             ; 
00001698:             ; countneighboursskipadd
00001698: EAFFFFED    ;     b countneighboursloop
0000169C:             ; 
0000169C:             ; countneighbourslend
0000169C:             ; countneighboursend
0000169C: E1A0000A    ;     mov R0, R10
000016A0: E8BD4FF0    ;     pop {R14, R4-R11}
000016A4: E1A0F00E    ;     mov R15, R14
000016A8:             ; 
000016A8:             ; 
000016A8:             ; isinrange
000016A8:             ; ;;INP in R0 is the row
000016A8:             ; ;;INP in R1 is the col
000016A8:             ; ;;Uses defined width and height
000016A8:             ; ;;RET in R0 is 1 if is in range else 0
000016A8: E3A02001    ;     mov R2, #1 ;;is valid unless...
000016AC:             ; 
000016AC: E3500000    ;     cmp R0, #0
000016B0: BA00000D    ;     blt isinrangefail
000016B4:             ; 
000016B4: E3510000    ;     cmp R1, #0
000016B8: BA00000B    ;     blt isinrangefail
000016BC:             ; 
000016BC: E24F3071    ;     adrl R3, width
000016C0: E2433C16    ; 
000016C4: E5533000    ;     ldrb R3, [R3]
000016C8: E1510003    ;     cmp R1, R3
000016CC: AA000006    ;     bge isinrangefail
000016D0:             ; 
000016D0: E24F3FA1    ;     adrl R3, height
000016D4: E2433B05    ; 
000016D8: E5533000    ;     ldrb R3, [R3]
000016DC: E1500003    ;     cmp R0, R3
000016E0: AA000001    ;     bge isinrangefail
000016E4:             ; 
000016E4: E3A00001    ;     mov R0, #1
000016E8: EA000000    ;     b isinrangeend
000016EC:             ; 
000016EC:             ; isinrangefail
000016EC: E3A00000    ;     mov R0, #0
000016F0:             ; 
000016F0:             ; isinrangeend
000016F0: E1A0F00E    ;     mov R15, R14
000016F4:             ; 
000016F4:             ; 
000016F4:             ; ;; The heap will be a linked list of free blocks - unlike the Comodo version which stores both 
                      ; free & taken blocks 
000016F4:             ; ;; This is an idea I'm stealing from the C programming book
000016F4:             ; ;; Crate structure
000016F4:             ; ;;  |-ptr to next crate (1 word)
000016F4:             ; ;;  |-ptr to prev crate (1 word)
000016F4:             ; ;;  `-Size (bytes)      (1 word)
000016F4:             ; ;; 
000016F4:             ; 
000016F4:             ; ;;  Traversal of the heap
000016F4:             ; ;;  Unlink in my Comodo implimentation the heap is not a linked list of all Crates (free or not
                      ; )
000016F4:             ; ;;  That made traversing the heap for debugging purposes very easy, in this case taken crates d
                      ; o not point to the next
000016F4:             ; ;;  Instead could start at head and then just go to addr + sizeof(Crate) + size. This should ta
                      ; ke us to the next crate, free or not
000016F4:             ; ;;  
000016F4:             ; setupHeap
000016F4:             ; ;;NO INP
000016F4:             ; ;;NO OUT
000016F4:             ;     ;;we have the heapstart
000016F4:             ;     ;;the end of the heap will be 0x100000 (it will overlap with the stack :) )
000016F4: E24F0FBE    ;     adrl R0, heaphead
000016F8: E2400B05    ; 
000016FC: E5100000    ;     ldr R0, [R0] ;;stores the mem addr of the start of the heap
00001700: E3A01601    ;     ldr R1, =max_addr ;;stores the end of the heap
00001704: E3A02801    ;     ldr R2, =stack_size
00001708: E0411002    ;     sub R1, R1, R2
0000170C:             ; 
0000170C: E0411000    ;     sub R1, R1, R0  ;;HEAPEND - HEAPSTART = TOTAL STORAGE (bytes)
00001710: E241100C    ;     sub R1, R1, #12 ;;SIZE -= SIZEOF(CRATE) (12 bytes)
00001714: E5801008    ;     str R1, [R0, #8] ;;set the size of the crate
00001718: E3A01000    ;     mov R1, #0
0000171C: E5801004    ;     str R1, [R0, #4] ;;set the prev ptr
00001720: E5801000    ;     str R1, [R0, #0] ;;set the next ptr
00001724:             ; 
00001724: E1A0F00E    ;     mov R15, R14
00001728:             ; 
00001728:             ; ;; The heap is a linked list of free Crates and so find the header and then go though until one
                      ;  satifies the size requirement
00001728:             ; ;;  end if next is 0
00001728:             ; ;;  once found either take over the crate or split it into two new crates
00001728:             ; ;;  align the bytes amount to 8 byte boundry
00001728:             ; malloc
00001728:             ; ;;INP into R0 bytes to allocate
00001728:             ; ;;OUT into R0 the ptr to the memory or 0 for no memory allocated
00001728:             ;     ;;step 1 align the bytes
00001728:             ;     ;;1001010 & 0111 = 0000010 ;2
00001728:             ;     ;;if 0 goto alignend
00001728:             ;     ;;1001010 + (8 - 2)
00001728: E92D0010    ;     push {R4}
0000172C:             ; 
0000172C: E2001007    ;     and R1, R0, #0b0111
00001730: E3510000    ;     cmp R1, #0
00001734: 0A000002    ;     beq mallignend
00001738: E3A03008    ;     mov R3, #0b1000
0000173C: E0432001    ;     sub R2, R3, R1
00001740: E0800002    ;     add R0, R0, R2
00001744:             ; 
00001744:             ; mallignend
00001744: E24F1FD2    ;     adrl R1, heaphead
00001748: E2411B05    ; 
0000174C: E5111000    ;     ldr R1, [R1] ;;stores a ptr to the first block
00001750:             ;     
00001750:             ; checkcrate
00001750: E5912008    ;     ldr R2, [R1, #8] ;;Size of the crate
00001754: E1500002    ;     cmp R0, R2 ;;bytes needed - bytes in crate
00001758: DA000006    ;     ble foundcrate
0000175C: E5912000    ;     ldr R2, [R1, #0] ;;get the next ptr
00001760: E3520000    ;     cmp R2, #0
00001764: 0A000001    ;     beq nocrates
00001768: E1A01002    ;     mov R1, R2 ;;swap the current crate with the next crate
0000176C: EAFFFFF7    ;     b checkcrate
00001770:             ; nocrates
00001770: E3A00000    ;     mov R0, #0
00001774: EA000015    ;     b mallocEnd
00001778:             ; 
00001778:             ; foundcrate
00001778:             ;     ;;Once a crate that we can use has been found we need to either split the crate or use the 
                      ; crate
00001778:             ;     ;;We should use the whole crate only when its size < bytesneeded + CrateHeader + 8
00001778:             ;     ;;This would give the edge case crate 8 bytes
00001778:             ;     
00001778:             ;     ;;R1 holds the found crate ptr
00001778:             ;     ;;R0 is the bytes requested and aligned
00001778: E2802014    ;     add R2, R0, #20 ;;A crate header is 12 bytes + the extra 8 bytes minimum
0000177C: E5913008    ;     ldr R3, [R1, #8]
00001780: E1530002    ;     cmp R3, R2
00001784: BA00000C    ;     blt usecrate
00001788:             ; splitcrate
00001788:             ;     ;;In this case we have a large crate that should be split up.
00001788:             ;     ;;ATM the crate will just be split up to where the requested memory is at the end of the fr
                      ; ee Crate.
00001788:             ; 
00001788: E5913008    ;     ldr R3, [R1, #8] ;;The size of the toSplit Crate
0000178C: E0433000    ;     sub R3, R3, R0 ;; size - bytesRequested
00001790: E243300C    ;     sub R3, R3, #12 ;; size - bytesRequested - sizeof(Crate)
00001794: E5813008    ;     str R3, [R1, #8] ;;toSplit->size = newSize
00001798:             ; 
00001798: E0833001    ;     add R3, R3, R1 ;; newSize + toSplit.addr
0000179C: E283400C    ;     add R4, R3, #12 ;; newSize + toSplit.addr + sizeof(Crate) = position of new Crate
000017A0:             ; 
000017A0:             ;     ;;Setup the header for the newCrate
000017A0: E3A02000    ;     mov R2, #0
000017A4: E5842000    ;     str R2, [R4, #0] ;;next = 0
000017A8: E5842004    ;     str R2, [R4, #4] ;;prev = 0
000017AC: E5840008    ;     str R0, [R4, #8] ;;size = requested and aligned
000017B0:             ; 
000017B0:             ;     ;;MAYBE: can the crates that are taken have a smaller header than those that are free. Take
                      ; n crates need not store the next, prev free nodes
000017B0:             ;     ;;This may complicate things as size would need to be moved around and the size from taken 
                      ; to free would be different. 
000017B0:             ;     ;;This would have been easier if the size of the Crate was stored at the start but it's not
                      ; , I'm probably not going to add this its not worth it.
000017B0:             ; 
000017B0: E284400C    ;     add R4, R4, #12
000017B4:             ; 
000017B4: E1A00004    ;     mov R0, R4
000017B8:             ; 
000017B8: EA000004    ;     b mallocEnd
000017BC:             ; 
000017BC:             ; usecrate
000017BC:             ;     ;; Simplest option as we can just remove it from the list
000017BC:             ;     ;; c1 <-> c2 <-> c3 ==> c1 <-> c3
000017BC: E5912000    ;     ldr R2, [R1, #0] ;;next ptr
000017C0: E5913004    ;     ldr R3, [R1, #4] ;;prev ptr
000017C4: E5823004    ;     str R3, [R2, #4] ;;Store c1 into c3's previous
000017C8: E5832000    ;     str R2, [R3, #0] ;;Store c3 into c1's next
000017CC:             ; 
000017CC: E1A00001    ;     mov R0, R1 ;;move the found crate's address into the return register ;;The crate header is 
                      ; no longer needed
000017D0:             ; 
000017D0:             ; mallocEnd
000017D0: E8BD0010    ;     pop {R4}
000017D4: E1A0F00E    ;     mov R15, R14
000017D8:             ; 
000017D8:             ; 
000017D8:             ; printHeap
000017D8:             ; ;;This is a debugging function that will print the free and taken list
000017D8:             ; ;;,-----------------------------------------------------------------,
000017D8:             ; ;;|   large free block  |tkn1   |tkn2       | freed1    | tkn3      |
000017D8:             ; ;;|                     |       |           |           |           |
000017D8:             ; ;;|                     |       |           |           |           |
000017D8:             ; ;;`-----------------------------------------------------------------'
000017D8:             ; 
000017D8:             ; ;;  PrintFree() - follow the free list ptrs print addr + size
000017D8:             ; ;;  PrintAll()  - start at head and go addr + size + 12 to get next, continue to end
000017D8: E92D47F0    ;     push {R14, R4-R10}
000017DC:             ; 
000017DC: EB000025    ;     bl printFree
000017E0:             ; 
000017E0: EB000001    ;     bl printAll
000017E4:             ; 
000017E4:             ; printHeapend
000017E4: E8BD47F0    ;     pop {R14, R4-R10}
000017E8: E1A0F00E    ;     mov R15, R14
000017EC:             ; 
000017EC:             ; printAll
000017EC: E92D41F0    ;     push {R14, R4-R8}
000017F0:             ; 
000017F0: E28F0075    ;     adrl R0, printAll_m
000017F4: E2800C0F    ; 
000017F8: EF000003    ;     swi 3
000017FC:             ;     
000017FC: E28F0F41    ;     adrl R0, heapstart
00001800: E2800A01    ; 
00001804: E1A04000    ;     mov R4, R0
00001808:             ; 
00001808: E1A05000    ;     mov R5, R0 ;;stores the next expected free node
0000180C:             ; 
0000180C:             ; printAllLoop
0000180C: E5941000    ;     ldr R1, [R4, #0] ;;next ptr
00001810: E5942004    ;     ldr R2, [R4, #4] ;;prev ptr
00001814: E5943008    ;     ldr R3, [R4, #8] ;;size
00001818:             ; 
00001818: E1540001    ;     cmp R4, R1
0000181C: 1A000003    ;     bne printAllLoopSkipWarning
00001820:             ; 
00001820: E28F0095    ;     adrl R0, printAll_m_e
00001824: E2800C0F    ; 
00001828: EF000003    ;     swi 3
0000182C:             ; 
0000182C: E3A05000    ;     mov R5, #0
00001830:             ; 
00001830:             ; printAllLoopSkipWarning
00001830:             ; 
00001830:             ;     ;;check if this is a free node
00001830: E1550004    ;     cmp R5, R4
00001834:             ; 
00001834: 028F0FD5    ;     adrleq R0, printAll_m_f
00001838: 02800B03    ; 
0000183C: 128F0062    ;     adrlne R0, printAll_m_t
00001840: 12800C0F    ; 
00001844: EF000003    ;     swi 3
00001848:             ; 
00001848: 1A000000    ;     bne printAllLoopCont
0000184C:             ; 
0000184C: E1A05001    ;     mov R5, R1
00001850:             ; 
00001850:             ; printAllLoopCont
00001850: E1A00004    ;     mov R0, R4
00001854: EB000022    ;     bl printblock
00001858:             ; 
00001858:             ;     ;;calculate the next block
00001858:             ;     ;;addr + 12 + size
00001858:             ; 
00001858: E284000C    ;     add R0, R4, #12
0000185C: E0800003    ;     add R0, R0, R3
00001860:             ; 
00001860: E1A04000    ;     mov R4, R0
00001864:             ; 
00001864: E354080F    ;     cmp R4, #0xF0000
00001868: AA000000    ;     bge printAllLend
0000186C:             ;     
0000186C: EAFFFFE6    ;     b printAllLoop
00001870:             ; 
00001870:             ; printAllLend
00001870:             ; printAllEnd
00001870: E8BD41F0    ;     pop {R14, R4-R8}
00001874: E1A0F00E    ;     mov R15, R14
00001878:             ; 
00001878:             ; printFree
00001878: E92D41F0    ;     push {R14, R4-R8}
0000187C:             ; 
0000187C: E28F005B    ;     adrl R0, printFree_m
00001880: E2800C0E    ; 
00001884: EF000003    ;     swi 3
00001888:             ; 
00001888: E28F0078    ;     adrl R0, heapstart
0000188C: E2800A01    ; 
00001890: E1A04000    ;     mov R4, R0
00001894:             ; 
00001894:             ; printFreeloop
00001894: E5941000    ;     ldr R1, [R4, #0] ;;next ptr
00001898: E5942004    ;     ldr R2, [R4, #4] ;;prev ptr
0000189C: E5943008    ;     ldr R3, [R4, #8] ;;size
000018A0:             ; 
000018A0: E28F004A    ;     adrl R0, printfree_f_m
000018A4: E2800C0E    ; 
000018A8: EF000003    ;     swi 3
000018AC:             ; 
000018AC: E1A00004    ;     mov R0, R4
000018B0: EB00000B    ;     bl printblock
000018B4:             ; 
000018B4: E3510000    ;     cmp R1, #0
000018B8: 0A000003    ;     beq printFreelend
000018BC:             ; 
000018BC: E1510004    ;     cmp R1, R4
000018C0: 0A000002    ;     beq printFreeErr
000018C4:             ; 
000018C4: E1A04001    ;     mov R4, R1
000018C8: EAFFFFF1    ;     b printFreeloop
000018CC:             ; 
000018CC:             ; printFreelend
000018CC: EA000002    ;     b printFreeEnd
000018D0:             ; 
000018D0:             ; printFreeErr
000018D0: E28F0059    ;     adrl R0, printFree_m_e
000018D4: E2800C0E    ; 
000018D8: EF000003    ;     swi 3
000018DC:             ; 
000018DC:             ; printFreeEnd
000018DC: E8BD41F0    ;     pop {R14, R4-R8}
000018E0: E1A0F00E    ;     mov R15, R14
000018E4:             ; 
000018E4:             ; printblock
000018E4:             ; ;;INP in R0 is the addr
000018E4:             ; ;;INP in R1 is the next
000018E4:             ; ;;INP in R2 is the prev
000018E4:             ; ;;INP in R3 is the size
000018E4:             ; ;;RET --
000018E4: E92D0010    ;     push {R4}
000018E8: E1A04000    ;     mov R4, R0
000018EC:             ; 
000018EC: E28F002B    ;     adrl R0, cutoff
000018F0: E2800C09    ; 
000018F4: EF000003    ;     swi 3
000018F8:             ; 
000018F8: E28F0009    ;     adrl R0, printfree_f_mad
000018FC: E2800C0E    ; 
00001900: EF000003    ;     swi 3
00001904:             ; 
00001904: E1A00004    ;     mov R0, R4
00001908: EF000004    ;     swi 4
0000190C:             ; 
0000190C: E3A0000A    ;     ldr R0, =nl
00001910: EF000000    ;     swi 0
00001914:             ; 
00001914: E28F00F7    ;     adrl R0, printfree_f_mnx
00001918: E2800C0D    ; 
0000191C: EF000003    ;     swi 3
00001920:             ; 
00001920: E1A00001    ;     mov R0, R1
00001924: EF000004    ;     swi 4
00001928:             ; 
00001928: E3A0000A    ;     ldr R0, =nl
0000192C: EF000000    ;     swi 0
00001930:             ; 
00001930: E28F00E5    ;     adrl R0, printfree_f_mpr
00001934: E2800C0D    ; 
00001938: EF000003    ;     swi 3
0000193C:             ; 
0000193C: E1A00002    ;     mov R0, R2
00001940: EF000004    ;     swi 4
00001944:             ; 
00001944: E3A0000A    ;     ldr R0, =nl
00001948: EF000000    ;     swi 0
0000194C:             ; 
0000194C: E28F00D3    ;     adrl R0, printfree_f_msz
00001950: E2800C0D    ; 
00001954: EF000003    ;     swi 3
00001958:             ; 
00001958: E1A00003    ;     mov R0, R3
0000195C: EF000004    ;     swi 4
00001960:             ; 
00001960: E3A0000A    ;     ldr R0, =nl
00001964: EF000000    ;     swi 0
00001968:             ; 
00001968: E28F00AF    ;     adrl R0, cutoff
0000196C: E2800B02    ; 
00001970: EF000003    ;     swi 3
00001974:             ; 
00001974: E8BD0010    ;     pop {R4}
00001978: E1A0F00E    ;     mov R15, R14
0000197C:             ; 
0000197C:             ; 
0000197C:             ; free
0000197C:             ; ;;INP in R0 is the mem addr of the data to be freed
0000197C:             ; ;;OUT in R0 is the success code - 0 for mem freed, ¬0 for error ;;probably won't be currently 
                      ; used `=(- -)=' 
0000197C:             ;     ;;In order to free memory we need to add it back to the linked list
0000197C:             ;     ;;Following K&R's version the linked list will be ordered by address this will make finding
                      ;  consecutive memory locations that should be combined easier
0000197C:             ; 
0000197C:             ;     ;;The inputted address of the crate is the address given in malloc and so the start of the 
                      ; crate is that addr - sizeof(Crate) (#12)
0000197C:             ; 
0000197C:             ;     ;;heapHead = first Crate
0000197C:             ;     ;;current = heapHead
0000197C:             ;     ;;while (toFree.addr > current.addr)
0000197C:             ;     ;;  current = current.next
0000197C:             ;     ;;
0000197C:             ;     ;;//Add the toFree Crate inbetween the current and its previous i.e.  A<->B<->C, toFree = D
                      ;  (addr < C, addr > B) ==> A<->B<->D<->C
0000197C:             ;     ;;current->prev->next = toFree
0000197C:             ;     ;;toFree->prev = current.prev
0000197C:             ;     ;;current->prev = toFree
0000197C:             ;     ;;toFree->next = current
0000197C:             ; 
0000197C:             ;     ;; Crate structure
0000197C:             ;     ;;  |-ptr to next crate (1 word)
0000197C:             ;     ;;  |-ptr to prev crate (1 word)
0000197C:             ;     ;;  `-Size (bytes)      (1 word)
0000197C:             ; 
0000197C: E92D41F0    ;     push {R14, R4-R8}
00001980:             ; 
00001980: E1A04000    ;     mov R4, R0
00001984:             ;     align
00001984: E92D0001    ;     push {R0}
00001988: E28F0FBF    ;     adrl R0, free_m_addr
0000198C: E2800B03    ; 
00001990: EF000003    ;     swi 3
00001994:             ; 
00001994: E1A00004    ;     mov R0, R4
00001998: EF000004    ;     swi 4
0000199C:             ; 
0000199C: EBFFFBFE    ;     bl newline
000019A0:             ; 
000019A0: EBFFFF8C    ;     bl printHeap ;;[[DEBUG]]
000019A4: E8BD0001    ;     pop {R0}
000019A8:             ;     align
000019A8:             ; 
000019A8: E3500000    ;     cmp R0, #0
000019AC: 0A000030    ;     beq freeEndZero
000019B0:             ; 
000019B0: E24F1F6D    ;     adrl R1, heaphead
000019B4: E2411B06    ; 
000019B8: E5111000    ;     ldr R1, [R1] ;;R1 will hold the current
000019BC: E240000C    ;     sub R0, R0, #12 ;;subtract sizeof(Crate) to get header pointer
000019C0:             ; freeloop
000019C0: E5912000    ;     ldr R2, [R1, #0] ;;load the ptr to the next
000019C4: E1520000    ;     cmp R2, R0 ;;compare the address of the toFree to the address of current->next
000019C8:             ; 
000019C8: AA000003    ;     bge freelend ;;current->next.addr >= toFree.addr
000019CC:             ; 
000019CC: E3520000    ;     cmp R2, #0 ;;If there are no more Crates to the right then this could be a new Crate at the
                      ;  end or |F|T| it should merge left 
000019D0: 0A000009    ;     beq freelendEnd
000019D4:             ; 
000019D4: E1A01002    ;     mov R1, R2 ;;current = current.next
000019D8:             ; 
000019D8: EAFFFFF8    ;     b freeloop
000019DC:             ; 
000019DC:             ; freelend
000019DC:             ;     ;; R1 holds the current (left)
000019DC:             ;     ;; R2 holds the c->next (right)
000019DC: E5912000    ;     ldr R2, [R1, #0]
000019E0:             ; 
000019E0:             ;     ;;Setup the ptrs for the crates this will help later on   left<->toFree<->right ;;left,righ
                      ; t can be 0
000019E0:             ;     ;;We're just adding the new crate to the linked list
000019E0:             ;     ;;current->next->prev = toFree
000019E0:             ;     ;;toFree->next = current->next
000019E0:             ;     ;;current->next = toFree
000019E0:             ;     ;;toFree->prev = current
000019E0:             ; 
000019E0: E5913000    ;     ldr R3, [R1, #0] ;;holds current->next
000019E4: E3530000    ;     cmp R3, #0
000019E8: 15830004    ;     strne R0, [R3, #4] ;;current->next->prev = toFree
000019EC: E5803000    ;     str R3, [R0, #0] ;;toFree->next = current->next
000019F0: E5810000    ;     str R0, [R1, #0] ;;current->next = toFree
000019F4: E5801004    ;     str R1, [R0, #4] ;;toFree->prev = current
000019F8:             ; 
000019F8: EA000001    ;     b freeMergeCheck
000019FC:             ; 
000019FC:             ; freelendEnd
000019FC:             ; ;;If there are no more Crates to the right then this could be a new Crate at the end or |F|T| i
                      ; t should merge left 
000019FC:             ; ;;Found a crate (current) that is to the left of the crate as we ran out of ->next ptrs
000019FC:             ; ;;Need to set current->next = toFree
000019FC:             ; ;;            toFree->prev = current
000019FC: E5801004    ;     str R1, [R0, #4] ;;toFree->prev = current
00001A00: E5810000    ;     str R0, [R1, #0] ;;current->next = toFree
00001A04:             ; 
00001A04:             ; freeMergeCheck
00001A04:             ;     ;;We have a ptr to current. This should be the closest Crate to the left of toFree
00001A04:             ;     ;;We also have the next Crate (null or not) which is to the right of toFree
00001A04:             ;     ;;Both of these crates MAY need to be merged but could also have taken crates in between
00001A04:             ;     ;;First is to check if the crates are adjacent
00001A04:             ;     ;;  If they are NOT then create a newCrate
00001A04:             ;     ;;  If they are     then merge both
00001A04:             ;     ;;  If only one     then merge either left or right
00001A04:             ; 
00001A04:             ;     ;;R1 will be left
00001A04:             ;     ;;R2 will be right
00001A04:             ; 
00001A04: E3510000    ;     cmp R1, #0
00001A08: 01A01000    ;     moveq R1, R0 ;;If there is no left crate then left=toFree
00001A0C: E3520000    ;     cmp R2, #0
00001A10: 01A02000    ;     moveq R2, R0 ;;If there is no right crate (more likely) then right=toFree
00001A14:             ; 
00001A14:             ; verifyLeft
00001A14:             ;     ;;Check if the left is adjacent
00001A14:             ;     ;;It will be if (left.addr + sizeof(Crate) + left.size == toFree.addr)
00001A14:             ; 
00001A14: E5913008    ;     ldr R3, [R1, #8]
00001A18: E283300C    ;     add R3, R3, #12 ;;12 is sizeof(Crate) + toFree.size
00001A1C: E0833001    ;     add R3, R3, R1 ;;left.addr + left->size ??
00001A20:             ; 
00001A20: E1530000    ;     cmp R3, R0
00001A24: 11A01000    ;     movne R1, R0
00001A28:             ; 
00001A28:             ; verifyRight
00001A28:             ;     ;;Going from toFree to Right
00001A28: E5903008    ;     ldr R3, [R0, #8] ;;get size of toFree
00001A2C: E283300C    ;     add R3, R3, #12 ;;12 is sizeof(Crate) + toFree.size
00001A30: E0833000    ;     add R3, R3, R0 ;; + toFree.addr
00001A34:             ; 
00001A34: E1530002    ;     cmp R3, R2
00001A38: 11A02000    ;     movne R2, R0
00001A3C:             ; 
00001A3C:             ; merge
00001A3C:             ;     ;;Merge the two Crates given in R1 and R2
00001A3C:             ;     ;;left can be (left) or (toFree)
00001A3C:             ;     ;;right can be (right) or (toFree)
00001A3C:             ;     ;;If left == right: don't merge; create new Crate
00001A3C:             ;     ;;If left != right: then add to left's size
00001A3C:             ; 
00001A3C: E1510002    ;     cmp R1, R2
00001A40: 0A00000A    ;     beq mergeNew
00001A44:             ; 
00001A44:             ;     ;;The new size is right.addr - left.addr + right->size    from right.addr - left.addr - siz
                      ; eof(Crate) + sizeof(Crate) + right->size
00001A44:             ;     ;;                                                               |left      |right
00001A44:             ;     ;;                                                               |<12>|size||<12>|size|
00001A44:             ;     ;;
00001A44:             ;     ;;                                                               |left      
00001A44:             ;     ;;                                                               |<12>|size           |
00001A44:             ;     ;;
00001A44:             ;     ;;I'm doing it this way as the left and right may not be contiguous i.e. if toFree has a fr
                      ; ee crate on either side
00001A44:             ; 
00001A44: E0423001    ;     sub R3, R2, R1
00001A48: E5924008    ;     ldr R4, [R2, #8]
00001A4C: E0833004    ;     add R3, R3, R4
00001A50: E5813008    ;     str R3, [R1, #8]
00001A54:             ; 
00001A54:             ;     ;;Time to switch some ptrs
00001A54:             ;     ;;Current state left.prev<->left<->right<->right.next (with left or right = toFree) or left
                      ; .prev<->left<->toFree<->right<->right.next
00001A54:             ;     ;;New state would be left.prev<->left<->right.next (with left or right = toFree) or left.pr
                      ; ev<->left<->right.next
00001A54:             ;     ;;Both cases end the same, so get right.next. These could be 0 but it doesn't matter
00001A54:             ;     ;;Next need to change the prev and next ptrs for adjacent Crates
00001A54:             ;     ;;i.e. right->next->prev = left
00001A54:             ; 
00001A54: E5924000    ;     ldr R4, [R2, #0] ;;right->next
00001A58: E1540001    ;     cmp R4, R1      ;;If right->next == current {left->next = 0} else {left->next = right->next
                      ; }
00001A5C: 15814000    ;     strne R4, [R1, #0] ;;left->next = right->next
00001A60: 03A04000    ;     moveq R4, #0       ;;This shouldn't ever be true? how could rnext point to left? left<->mid
                      ; ?<->right<->rnext
00001A64: 05814000    ;     streq R4, [R1, #0] ;;left->next = 0
00001A68:             ; 
00001A68: E3540000    ;     cmp R4, #0
00001A6C: 15841004    ;     strne R1, [R4, #4] ;;right->next->prev = left
00001A70:             ; 
00001A70:             ; mergeNew
00001A70:             ;     ;;The crate has already been setup with its ptrs and had its size as well so don't need to 
                      ; do anything
00001A70: EA000002    ;     b freeEnd
00001A74:             ; 
00001A74:             ; freeEndZero
00001A74: E28F002D    ;     adrl R0, free_m_zero
00001A78: E2800C0E    ; 
00001A7C: EF000003    ;     swi 3
00001A80:             ; 
00001A80:             ; freeEnd
00001A80:             ;     align
00001A80: E92D0001    ;     push {R0}
00001A84: EBFFFF53    ;     bl printHeap ;;[[DEBUG]]
00001A88: E8BD0001    ;     pop {R0}
00001A8C:             ;     align
00001A8C:             ; 
00001A8C: E8BD41F0    ;     pop {R14, R4-R8}
00001A90: E1A0F00E    ;     mov R15, R14
00001A94:             ; 
00001A94:             ; align
00001A94:             ; 
00001A94:             ; ;;String defs -- The naming scheme is bad :(
00001A94: 2D 2D 2D 2D ; welcomemsg      defb "-----------Welcome to JCGOL in ARM32-----------", nl, 0
00001A98: 2D 2D 2D 2D ; 
00001A9C: 2D 2D 2D 57 ; 
00001AA0: 65 6C 63 6F ; 
00001AA4: 6D 65 20 74 ; 
00001AA8: 6F 20 4A 43 ; 
00001AAC: 47 4F 4C 20 ; 
00001AB0: 69 6E 20 41 ; 
00001AB4: 52 4D 33 32 ; 
00001AB8: 2D 2D 2D 2D ; 
00001ABC: 2D 2D 2D 2D ; 
00001AC0: 2D 2D 2D 0A ; 
00001AC4: 00          ; 
00001AC8:             ; align ;;WHY WHY?!?!??!?!
00001AC8: 28 4E 29 65 ; welcome2msg     defb "(N)ew board\n(L)oad a saved board\n(S)ettings\n(P)rint the heap\n(Q)uit",
00001ACC: 77 20 62 6F ;  nl, 0
00001AD0: 61 72 64 0A ; 
00001AD4: 28 4C 29 6F ; 
00001AD8: 61 64 20 61 ; 
00001ADC: 20 73 61 76 ; 
00001AE0: 65 64 20 62 ; 
00001AE4: 6F 61 72 64 ; 
00001AE8: 0A 28 53 29 ; 
00001AEC: 65 74 74 69 ; 
00001AF0: 6E 67 73 0A ; 
00001AF4: 28 50 29 72 ; 
00001AF8: 69 6E 74 20 ; 
00001AFC: 74 68 65 20 ; 
00001B00: 68 65 61 70 ; 
00001B04: 0A 28 51 29 ; 
00001B08: 75 69 74 0A ; 
00001B0C: 00          ; 
00001B0D: 49 6E 76 61 ; mainchoicefail  defb "Invalid choice please enter 'n' for new board, 'l' for load a board, 's' 
00001B11: 6C 69 64 20 ; to view settings, 'p' to view the heap, or 'q' to close. Not cases sensative", nl, 0
00001B15: 63 68 6F 69 ; 
00001B19: 63 65 20 70 ; 
00001B1D: 6C 65 61 73 ; 
00001B21: 65 20 65 6E ; 
00001B25: 74 65 72 20 ; 
00001B29: 27 6E 27 20 ; 
00001B2D: 66 6F 72 20 ; 
00001B31: 6E 65 77 20 ; 
00001B35: 62 6F 61 72 ; 
00001B39: 64 2C 20 27 ; 
00001B3D: 6C 27 20 66 ; 
00001B41: 6F 72 20 6C ; 
00001B45: 6F 61 64 20 ; 
00001B49: 61 20 62 6F ; 
00001B4D: 61 72 64 2C ; 
00001B51: 20 27 73 27 ; 
00001B55: 20 74 6F 20 ; 
00001B59: 76 69 65 77 ; 
00001B5D: 20 73 65 74 ; 
00001B61: 74 69 6E 67 ; 
00001B65: 73 2C 20 27 ; 
00001B69: 70 27 20 74 ; 
00001B6D: 6F 20 76 69 ; 
00001B71: 65 77 20 74 ; 
00001B75: 68 65 20 68 ; 
00001B79: 65 61 70 2C ; 
00001B7D: 20 6F 72 20 ; 
00001B81: 27 71 27 20 ; 
00001B85: 74 6F 20 63 ; 
00001B89: 6C 6F 73 65 ; 
00001B8D: 2E 20 4E 6F ; 
00001B91: 74 20 63 61 ; 
00001B95: 73 65 73 20 ; 
00001B99: 73 65 6E 73 ; 
00001B9D: 61 74 69 76 ; 
00001BA1: 65 0A 00    ; 
00001BA4: 54 68 61 6E ; mainendmsg      defb "Thank you for playing JCGOL for ARM32", nl, 0
00001BA8: 6B 20 79 6F ; 
00001BAC: 75 20 66 6F ; 
00001BB0: 72 20 70 6C ; 
00001BB4: 61 79 69 6E ; 
00001BB8: 67 20 4A 43 ; 
00001BBC: 47 4F 4C 20 ; 
00001BC0: 66 6F 72 20 ; 
00001BC4: 41 52 4D 33 ; 
00001BC8: 32 0A 00    ; 
00001BCB: 57 6F 75 6C ; askdefaults     defb "Would you like to use the default settings? Y/n: ", 0
00001BCF: 64 20 79 6F ; 
00001BD3: 75 20 6C 69 ; 
00001BD7: 6B 65 20 74 ; 
00001BDB: 6F 20 75 73 ; 
00001BDF: 65 20 74 68 ; 
00001BE3: 65 20 64 65 ; 
00001BE7: 66 61 75 6C ; 
00001BEB: 74 20 73 65 ; 
00001BEF: 74 74 69 6E ; 
00001BF3: 67 73 3F 20 ; 
00001BF7: 59 2F 6E 3A ; 
00001BFB: 20 00       ; 
00001BFD: 45 6E 61 62 ; askerase        defb "Enable erase mode? Y/n: ", 0
00001C01: 6C 65 20 65 ; 
00001C05: 72 61 73 65 ; 
00001C09: 20 6D 6F 64 ; 
00001C0D: 65 3F 20 59 ; 
00001C11: 2F 6E 3A 20 ; 
00001C15: 00          ; 
00001C16: 45 6E 61 62 ; askslow         defb "Enable slow mode? Y/n: ", 0
00001C1A: 6C 65 20 73 ; 
00001C1E: 6C 6F 77 20 ; 
00001C22: 6D 6F 64 65 ; 
00001C26: 3F 20 59 2F ; 
00001C2A: 6E 3A 20 00 ; 
00001C2E: 45 6E 61 62 ; askstep         defb "Enable step mode? Y/n: ", 0
00001C32: 6C 65 20 73 ; 
00001C36: 74 65 70 20 ; 
00001C3A: 6D 6F 64 65 ; 
00001C3E: 3F 20 59 2F ; 
00001C42: 6E 3A 20 00 ; 
00001C46: 43 61 6E 6E ; stepslowwarning defb "Cannot have slow and step mode active at the same time, disabling slow mo
00001C4A: 6F 74 20 68 ; de", nl, 0
00001C4E: 61 76 65 20 ; 
00001C52: 73 6C 6F 77 ; 
00001C56: 20 61 6E 64 ; 
00001C5A: 20 73 74 65 ; 
00001C5E: 70 20 6D 6F ; 
00001C62: 64 65 20 61 ; 
00001C66: 63 74 69 76 ; 
00001C6A: 65 20 61 74 ; 
00001C6E: 20 74 68 65 ; 
00001C72: 20 73 61 6D ; 
00001C76: 65 20 74 69 ; 
00001C7A: 6D 65 2C 20 ; 
00001C7E: 64 69 73 61 ; 
00001C82: 62 6C 69 6E ; 
00001C86: 67 20 73 6C ; 
00001C8A: 6F 77 20 6D ; 
00001C8E: 6F 64 65 0A ; 
00001C92: 00          ; 
00001C93: 52 65 74 75 ; savedchoice     defb "Return to menu? (n for continue sim) Y/n: ", 0
00001C97: 72 6E 20 74 ; 
00001C9B: 6F 20 6D 65 ; 
00001C9F: 6E 75 3F 20 ; 
00001CA3: 28 6E 20 66 ; 
00001CA7: 6F 72 20 63 ; 
00001CAB: 6F 6E 74 69 ; 
00001CAF: 6E 75 65 20 ; 
00001CB3: 73 69 6D 29 ; 
00001CB7: 20 59 2F 6E ; 
00001CBB: 3A 20 00    ; 
00001CBE: 50 6C 65 61 ; askname         defb "Please enter a name for the grid: ", 0
00001CC2: 73 65 20 65 ; 
00001CC6: 6E 74 65 72 ; 
00001CCA: 20 61 20 6E ; 
00001CCE: 61 6D 65 20 ; 
00001CD2: 66 6F 72 20 ; 
00001CD6: 74 68 65 20 ; 
00001CDA: 67 72 69 64 ; 
00001CDE: 3A 20 00    ; 
00001CE1: 45 72 61 73 ; warneraseslow   defb "Erase mode is active it is recommended to also use slow mode", nl, 0
00001CE5: 65 20 6D 6F ; 
00001CE9: 64 65 20 69 ; 
00001CED: 73 20 61 63 ; 
00001CF1: 74 69 76 65 ; 
00001CF5: 20 69 74 20 ; 
00001CF9: 69 73 20 72 ; 
00001CFD: 65 63 6F 6D ; 
00001D01: 6D 65 6E 64 ; 
00001D05: 65 64 20 74 ; 
00001D09: 6F 20 61 6C ; 
00001D0D: 73 6F 20 75 ; 
00001D11: 73 65 20 73 ; 
00001D15: 6C 6F 77 20 ; 
00001D19: 6D 6F 64 65 ; 
00001D1D: 0A 00       ; 
00001D1F: 50 6C 65 61 ; askwid          defb "Please enter a width (", 0
00001D23: 73 65 20 65 ; 
00001D27: 6E 74 65 72 ; 
00001D2B: 20 61 20 77 ; 
00001D2F: 69 64 74 68 ; 
00001D33: 20 28 00    ; 
00001D36: 2D 00       ; dash            defb "-", 0
00001D38: 29 3A 20 00 ; b_close_colon   defb "): ",0
00001D3C: 50 6C 65 61 ; askhei          defb "Please enter a height ", 0
00001D40: 73 65 20 65 ; 
00001D44: 6E 74 65 72 ; 
00001D48: 20 61 20 68 ; 
00001D4C: 65 69 67 68 ; 
00001D50: 74 20 00    ; 
00001D53: 49 6E 76 61 ; getwidfailmsg   defb "Invalid width please enter a value between ", 0
00001D57: 6C 69 64 20 ; 
00001D5B: 77 69 64 74 ; 
00001D5F: 68 20 70 6C ; 
00001D63: 65 61 73 65 ; 
00001D67: 20 65 6E 74 ; 
00001D6B: 65 72 20 61 ; 
00001D6F: 20 76 61 6C ; 
00001D73: 75 65 20 62 ; 
00001D77: 65 74 77 65 ; 
00001D7B: 65 6E 20 00 ; 
00001D7F: 49 6E 76 61 ; getheifailmsg   defb "Invalid height please enter a value between ", 0
00001D83: 6C 69 64 20 ; 
00001D87: 68 65 69 67 ; 
00001D8B: 68 74 20 70 ; 
00001D8F: 6C 65 61 73 ; 
00001D93: 65 20 65 6E ; 
00001D97: 74 65 72 20 ; 
00001D9B: 61 20 76 61 ; 
00001D9F: 6C 75 65 20 ; 
00001DA3: 62 65 74 77 ; 
00001DA7: 65 65 6E 20 ; 
00001DAB: 00          ; 
00001DAC:             ; 
00001DAC: 43 75 72 72 ; optionsp_1      defb "Current options: dims=(", 0 ;;width
00001DB0: 65 6E 74 20 ; 
00001DB4: 6F 70 74 69 ; 
00001DB8: 6F 6E 73 3A ; 
00001DBC: 20 64 69 6D ; 
00001DC0: 73 3D 28 00 ; 
00001DC4: 2C 20 00    ; optionsp_2      defb ", ", 0 ;;height
00001DC7: 29 20 73 6C ; optionsp_3      defb ") slowMode=", 0 ;;OFF/ON
00001DCB: 6F 77 4D 6F ; 
00001DCF: 64 65 3D 00 ; 
00001DD3: 20 65 72 61 ; optionsp_4      defb " eraseMode=", 0 ;;^
00001DD7: 73 65 4D 6F ; 
00001DDB: 64 65 3D 00 ; 
00001DDF: 20 73 74 65 ; optionsp_5      defb " stepMode=", 0  ;;^
00001DE3: 70 4D 6F 64 ; 
00001DE7: 65 3D 00    ; 
00001DEA:             ; 
00001DEA: 59 6F 75 27 ; mainloopittsmsg defb "You've reached the max itterations before waiting for input. You can chan
00001DEE: 76 65 20 72 ; ge this in settings. Press any key to continue, 'q' to quit, and 's' to save the grid", nl, 0
00001DF2: 65 61 63 68 ; 
00001DF6: 65 64 20 74 ; 
00001DFA: 68 65 20 6D ; 
00001DFE: 61 78 20 69 ; 
00001E02: 74 74 65 72 ; 
00001E06: 61 74 69 6F ; 
00001E0A: 6E 73 20 62 ; 
00001E0E: 65 66 6F 72 ; 
00001E12: 65 20 77 61 ; 
00001E16: 69 74 69 6E ; 
00001E1A: 67 20 66 6F ; 
00001E1E: 72 20 69 6E ; 
00001E22: 70 75 74 2E ; 
00001E26: 20 59 6F 75 ; 
00001E2A: 20 63 61 6E ; 
00001E2E: 20 63 68 61 ; 
00001E32: 6E 67 65 20 ; 
00001E36: 74 68 69 73 ; 
00001E3A: 20 69 6E 20 ; 
00001E3E: 73 65 74 74 ; 
00001E42: 69 6E 67 73 ; 
00001E46: 2E 20 50 72 ; 
00001E4A: 65 73 73 20 ; 
00001E4E: 61 6E 79 20 ; 
00001E52: 6B 65 79 20 ; 
00001E56: 74 6F 20 63 ; 
00001E5A: 6F 6E 74 69 ; 
00001E5E: 6E 75 65 2C ; 
00001E62: 20 27 71 27 ; 
00001E66: 20 74 6F 20 ; 
00001E6A: 71 75 69 74 ; 
00001E6E: 2C 20 61 6E ; 
00001E72: 64 20 27 73 ; 
00001E76: 27 20 74 6F ; 
00001E7A: 20 73 61 76 ; 
00001E7E: 65 20 74 68 ; 
00001E82: 65 20 67 72 ; 
00001E86: 69 64 0A 00 ; 
00001E8A:             ; 
00001E8A: 43 68 6F 6F ; askgenoption    defb "Choose between (R)andom generation or (D)rawing the grid", 0
00001E8E: 73 65 20 62 ; 
00001E92: 65 74 77 65 ; 
00001E96: 65 6E 20 28 ; 
00001E9A: 52 29 61 6E ; 
00001E9E: 64 6F 6D 20 ; 
00001EA2: 67 65 6E 65 ; 
00001EA6: 72 61 74 69 ; 
00001EAA: 6F 6E 20 6F ; 
00001EAE: 72 20 28 44 ; 
00001EB2: 29 72 61 77 ; 
00001EB6: 69 6E 67 20 ; 
00001EBA: 74 68 65 20 ; 
00001EBE: 67 72 69 64 ; 
00001EC2: 00          ; 
00001EC3: 49 6E 76 61 ; setupGrdFailmsg defb "Invalid choice, use `R` for random generation and `d` for drawing the gri
00001EC7: 6C 69 64 20 ; d. Not case sensative: ", 0
00001ECB: 63 68 6F 69 ; 
00001ECF: 63 65 2C 20 ; 
00001ED3: 75 73 65 20 ; 
00001ED7: 60 52 60 20 ; 
00001EDB: 66 6F 72 20 ; 
00001EDF: 72 61 6E 64 ; 
00001EE3: 6F 6D 20 67 ; 
00001EE7: 65 6E 65 72 ; 
00001EEB: 61 74 69 6F ; 
00001EEF: 6E 20 61 6E ; 
00001EF3: 64 20 60 64 ; 
00001EF7: 60 20 66 6F ; 
00001EFB: 72 20 64 72 ; 
00001EFF: 61 77 69 6E ; 
00001F03: 67 20 74 68 ; 
00001F07: 65 20 67 72 ; 
00001F0B: 69 64 2E 20 ; 
00001F0F: 4E 6F 74 20 ; 
00001F13: 63 61 73 65 ; 
00001F17: 20 73 65 6E ; 
00001F1B: 73 61 74 69 ; 
00001F1F: 76 65 3A 20 ; 
00001F23: 00          ; 
00001F24: 45 6E 74 65 ; askseed         defb "Enter 4 characters to be used as the seed: ", 0
00001F28: 72 20 34 20 ; 
00001F2C: 63 68 61 72 ; 
00001F30: 61 63 74 65 ; 
00001F34: 72 73 20 74 ; 
00001F38: 6F 20 62 65 ; 
00001F3C: 20 75 73 65 ; 
00001F40: 64 20 61 73 ; 
00001F44: 20 74 68 65 ; 
00001F48: 20 73 65 65 ; 
00001F4C: 64 3A 20 00 ; 
00001F50: 55 73 69 6E ; drawinfomsg     defb "Using '1' and '0' choose the value of the current cell. Use enter to go t
00001F54: 67 20 27 31 ; o next line", nl, 0
00001F58: 27 20 61 6E ; 
00001F5C: 64 20 27 30 ; 
00001F60: 27 20 63 68 ; 
00001F64: 6F 6F 73 65 ; 
00001F68: 20 74 68 65 ; 
00001F6C: 20 76 61 6C ; 
00001F70: 75 65 20 6F ; 
00001F74: 66 20 74 68 ; 
00001F78: 65 20 63 75 ; 
00001F7C: 72 72 65 6E ; 
00001F80: 74 20 63 65 ; 
00001F84: 6C 6C 2E 20 ; 
00001F88: 55 73 65 20 ; 
00001F8C: 65 6E 74 65 ; 
00001F90: 72 20 74 6F ; 
00001F94: 20 67 6F 20 ; 
00001F98: 74 6F 20 6E ; 
00001F9C: 65 78 74 20 ; 
00001FA0: 6C 69 6E 65 ; 
00001FA4: 0A 00       ; 
00001FA6: 49 6E 76 61 ; drawfailmsg     defb "Invalid input please enter 1 or 0, or enter for next line: ", nl, 0
00001FAA: 6C 69 64 20 ; 
00001FAE: 69 6E 70 75 ; 
00001FB2: 74 20 70 6C ; 
00001FB6: 65 61 73 65 ; 
00001FBA: 20 65 6E 74 ; 
00001FBE: 65 72 20 31 ; 
00001FC2: 20 6F 72 20 ; 
00001FC6: 30 2C 20 6F ; 
00001FCA: 72 20 65 6E ; 
00001FCE: 74 65 72 20 ; 
00001FD2: 66 6F 72 20 ; 
00001FD6: 6E 65 78 74 ; 
00001FDA: 20 6C 69 6E ; 
00001FDE: 65 3A 20 0A ; 
00001FE2: 00          ; 
00001FE3: 47 72 69 64 ; gridfailmsg     defb "Grid was not properly initialised, consider smaller dims", nl, 0
00001FE7: 20 77 61 73 ; 
00001FEB: 20 6E 6F 74 ; 
00001FEF: 20 70 72 6F ; 
00001FF3: 70 65 72 6C ; 
00001FF7: 79 20 69 6E ; 
00001FFB: 69 74 69 61 ; 
00001FFF: 6C 69 73 65 ; 
00002003: 64 2C 20 63 ; 
00002007: 6F 6E 73 69 ; 
0000200B: 64 65 72 20 ; 
0000200F: 73 6D 61 6C ; 
00002013: 6C 65 72 20 ; 
00002017: 64 69 6D 73 ; 
0000201B: 0A 00       ; 
0000201D: 54 68 65 72 ; gridsavefail    defb "There was an error allocating memory for the grid save", nl, 0
00002021: 65 20 77 61 ; 
00002025: 73 20 61 6E ; 
00002029: 20 65 72 72 ; 
0000202D: 6F 72 20 61 ; 
00002031: 6C 6C 6F 63 ; 
00002035: 61 74 69 6E ; 
00002039: 67 20 6D 65 ; 
0000203D: 6D 6F 72 79 ; 
00002041: 20 66 6F 72 ; 
00002045: 20 74 68 65 ; 
00002049: 20 67 72 69 ; 
0000204D: 64 20 73 61 ; 
00002051: 76 65 0A 00 ; 
00002055: 54 68 65 72 ; gridloadempty   defb "There are no saved grids, start a step mode sim and save the grid, return
00002059: 65 20 61 72 ; ing to main menu", nl, 0
0000205D: 65 20 6E 6F ; 
00002061: 20 73 61 76 ; 
00002065: 65 64 20 67 ; 
00002069: 72 69 64 73 ; 
0000206D: 2C 20 73 74 ; 
00002071: 61 72 74 20 ; 
00002075: 61 20 73 74 ; 
00002079: 65 70 20 6D ; 
0000207D: 6F 64 65 20 ; 
00002081: 73 69 6D 20 ; 
00002085: 61 6E 64 20 ; 
00002089: 73 61 76 65 ; 
0000208D: 20 74 68 65 ; 
00002091: 20 67 72 69 ; 
00002095: 64 2C 20 72 ; 
00002099: 65 74 75 72 ; 
0000209D: 6E 69 6E 67 ; 
000020A1: 20 74 6F 20 ; 
000020A5: 6D 61 69 6E ; 
000020A9: 20 6D 65 6E ; 
000020AD: 75 0A 00    ; 
000020B0: 7C 69 6E 64 ; gridloadpindex  defb "|index: ", 0
000020B4: 65 78 3A 20 ; 
000020B8: 00          ; 
000020B9: 7C 6E 61 6D ; gridloadpname   defb "|name: ", 0
000020BD: 65 3A 20 00 ; 
000020C1: 7C 77 69 64 ; gridloadpwidth  defb "|width: ", 0
000020C5: 74 68 3A 20 ; 
000020C9: 00          ; 
000020CA: 7C 68 65 69 ; gridloadpheight defb "|height: ", 0
000020CE: 67 68 74 3A ; 
000020D2: 20 00       ; 
000020D4: 50 6C 65 61 ; loadboardaski   defb "Please enter the index of the grid to load, or enter a negative index to 
000020D8: 73 65 20 65 ; not load a grid. (press enter to input)", nl, 0
000020DC: 6E 74 65 72 ; 
000020E0: 20 74 68 65 ; 
000020E4: 20 69 6E 64 ; 
000020E8: 65 78 20 6F ; 
000020EC: 66 20 74 68 ; 
000020F0: 65 20 67 72 ; 
000020F4: 69 64 20 74 ; 
000020F8: 6F 20 6C 6F ; 
000020FC: 61 64 2C 20 ; 
00002100: 6F 72 20 65 ; 
00002104: 6E 74 65 72 ; 
00002108: 20 61 20 6E ; 
0000210C: 65 67 61 74 ; 
00002110: 69 76 65 20 ; 
00002114: 69 6E 64 65 ; 
00002118: 78 20 74 6F ; 
0000211C: 20 6E 6F 74 ; 
00002120: 20 6C 6F 61 ; 
00002124: 64 20 61 20 ; 
00002128: 67 72 69 64 ; 
0000212C: 2E 20 28 70 ; 
00002130: 72 65 73 73 ; 
00002134: 20 65 6E 74 ; 
00002138: 65 72 20 74 ; 
0000213C: 6F 20 69 6E ; 
00002140: 70 75 74 29 ; 
00002144: 0A 00       ; 
00002146: 52 65 74 75 ; loadboardretmsg defb "Returning to main menu", nl, 0
0000214A: 72 6E 69 6E ; 
0000214E: 67 20 74 6F ; 
00002152: 20 6D 61 69 ; 
00002156: 6E 20 6D 65 ; 
0000215A: 6E 75 0A 00 ; 
0000215E: 49 6E 76 61 ; loadboardifail  defb "Invalid input given for the index", nl, 0
00002162: 6C 69 64 20 ; 
00002166: 69 6E 70 75 ; 
0000216A: 74 20 67 69 ; 
0000216E: 76 65 6E 20 ; 
00002172: 66 6F 72 20 ; 
00002176: 74 68 65 20 ; 
0000217A: 69 6E 64 65 ; 
0000217E: 78 0A 00    ; 
00002181: 49 6E 76 61 ; loadboardirerr  defb "Invalid index, out of range", nl, 0
00002185: 6C 69 64 20 ; 
00002189: 69 6E 64 65 ; 
0000218D: 78 2C 20 6F ; 
00002191: 75 74 20 6F ; 
00002195: 66 20 72 61 ; 
00002199: 6E 67 65 0A ; 
0000219D: 00          ; 
0000219E: 45 72 72 6F ; loadboardmlcerr defb "Error allocating memory for loaded grid. Returing to main menu", nl, 0
000021A2: 72 20 61 6C ; 
000021A6: 6C 6F 63 61 ; 
000021AA: 74 69 6E 67 ; 
000021AE: 20 6D 65 6D ; 
000021B2: 6F 72 79 20 ; 
000021B6: 66 6F 72 20 ; 
000021BA: 6C 6F 61 64 ; 
000021BE: 65 64 20 67 ; 
000021C2: 72 69 64 2E ; 
000021C6: 20 52 65 74 ; 
000021CA: 75 72 69 6E ; 
000021CE: 67 20 74 6F ; 
000021D2: 20 6D 61 69 ; 
000021D6: 6E 20 6D 65 ; 
000021DA: 6E 75 0A 00 ; 
000021DE: 53 75 63 63 ; loadboardsucmsg defb "Successfully loaded the grid", nl, 0
000021E2: 65 73 73 66 ; 
000021E6: 75 6C 6C 79 ; 
000021EA: 20 6C 6F 61 ; 
000021EE: 64 65 64 20 ; 
000021F2: 74 68 65 20 ; 
000021F6: 67 72 69 64 ; 
000021FA: 0A 00       ; 
000021FC: 4C 69 73 74 ; listgridmsg     defb "Listing all availible saved grids", nl, 0
00002200: 69 6E 67 20 ; 
00002204: 61 6C 6C 20 ; 
00002208: 61 76 61 69 ; 
0000220C: 6C 69 62 6C ; 
00002210: 65 20 73 61 ; 
00002214: 76 65 64 20 ; 
00002218: 67 72 69 64 ; 
0000221C: 73 0A 00    ; 
0000221F: 2D 2D 2D 2D ; cutoff          defb "-----------------", nl, 0
00002223: 2D 2D 2D 2D ; 
00002227: 2D 2D 2D 2D ; 
0000222B: 2D 2D 2D 2D ; 
0000222F: 2D 0A 00    ; 
00002232: 45 72 72 6F ; changearrverr_m defb "Error invalid value given (1-255) inclusive. Re-enter: ", nl, 0
00002236: 72 20 69 6E ; 
0000223A: 76 61 6C 69 ; 
0000223E: 64 20 76 61 ; 
00002242: 6C 75 65 20 ; 
00002246: 67 69 76 65 ; 
0000224A: 6E 20 28 31 ; 
0000224E: 2D 32 35 35 ; 
00002252: 29 20 69 6E ; 
00002256: 63 6C 75 73 ; 
0000225A: 69 76 65 2E ; 
0000225E: 20 52 65 2D ; 
00002262: 65 6E 74 65 ; 
00002266: 72 3A 20 0A ; 
0000226A: 00          ; 
0000226B:             ; 
0000226B: 53 65 74 74 ; s_m1            defb "Settings", nl, "|-[0] stepMode_d     - The following 4 settings are the d
0000226F: 69 6E 67 73 ; efault values for the options", nl, "|-[1] slowMode_d", nl, "|-[2] eraseMode_d", nl, "|-[3] Dim
00002273: 0A 7C 2D 5B ; s_d", nl, 0
00002277: 30 5D 20 73 ; 
0000227B: 74 65 70 4D ; 
0000227F: 6F 64 65 5F ; 
00002283: 64 20 20 20 ; 
00002287: 20 20 2D 20 ; 
0000228B: 54 68 65 20 ; 
0000228F: 66 6F 6C 6C ; 
00002293: 6F 77 69 6E ; 
00002297: 67 20 34 20 ; 
0000229B: 73 65 74 74 ; 
0000229F: 69 6E 67 73 ; 
000022A3: 20 61 72 65 ; 
000022A7: 20 74 68 65 ; 
000022AB: 20 64 65 66 ; 
000022AF: 61 75 6C 74 ; 
000022B3: 20 76 61 6C ; 
000022B7: 75 65 73 20 ; 
000022BB: 66 6F 72 20 ; 
000022BF: 74 68 65 20 ; 
000022C3: 6F 70 74 69 ; 
000022C7: 6F 6E 73 0A ; 
000022CB: 7C 2D 5B 31 ; 
000022CF: 5D 20 73 6C ; 
000022D3: 6F 77 4D 6F ; 
000022D7: 64 65 5F 64 ; 
000022DB: 0A 7C 2D 5B ; 
000022DF: 32 5D 20 65 ; 
000022E3: 72 61 73 65 ; 
000022E7: 4D 6F 64 65 ; 
000022EB: 5F 64 0A 7C ; 
000022EF: 2D 5B 33 5D ; 
000022F3: 20 44 69 6D ; 
000022F7: 73 5F 64 0A ; 
000022FB: 00          ; 
000022FC: 7C 2D 5B 34 ; s_m2            defb "|-[4] range          - The range of values that the dims can have (1-255 
00002300: 5D 20 72 61 ; && range_min < range_max)", nl, 0
00002304: 6E 67 65 20 ; 
00002308: 20 20 20 20 ; 
0000230C: 20 20 20 20 ; 
00002310: 20 2D 20 54 ; 
00002314: 68 65 20 72 ; 
00002318: 61 6E 67 65 ; 
0000231C: 20 6F 66 20 ; 
00002320: 76 61 6C 75 ; 
00002324: 65 73 20 74 ; 
00002328: 68 61 74 20 ; 
0000232C: 74 68 65 20 ; 
00002330: 64 69 6D 73 ; 
00002334: 20 63 61 6E ; 
00002338: 20 68 61 76 ; 
0000233C: 65 20 28 31 ; 
00002340: 2D 32 35 35 ; 
00002344: 20 26 26 20 ; 
00002348: 72 61 6E 67 ; 
0000234C: 65 5F 6D 69 ; 
00002350: 6E 20 3C 20 ; 
00002354: 72 61 6E 67 ; 
00002358: 65 5F 6D 61 ; 
0000235C: 78 29 0A 00 ; 
00002360: 7C 2D 5B 35 ; s_m3            defb "|-[5] Icons          - The characters printed for an alive/dead/ptr cell"
00002364: 5D 20 49 63 ; ,nl, "`-[6] itters         - The number of itterations in the non-step version before it will w
00002368: 6F 6E 73 20 ; ait for input", nl, 0
0000236C: 20 20 20 20 ; 
00002370: 20 20 20 20 ; 
00002374: 20 2D 20 54 ; 
00002378: 68 65 20 63 ; 
0000237C: 68 61 72 61 ; 
00002380: 63 74 65 72 ; 
00002384: 73 20 70 72 ; 
00002388: 69 6E 74 65 ; 
0000238C: 64 20 66 6F ; 
00002390: 72 20 61 6E ; 
00002394: 20 61 6C 69 ; 
00002398: 76 65 2F 64 ; 
0000239C: 65 61 64 2F ; 
000023A0: 70 74 72 20 ; 
000023A4: 63 65 6C 6C ; 
000023A8: 0A 60 2D 5B ; 
000023AC: 36 5D 20 69 ; 
000023B0: 74 74 65 72 ; 
000023B4: 73 20 20 20 ; 
000023B8: 20 20 20 20 ; 
000023BC: 20 20 2D 20 ; 
000023C0: 54 68 65 20 ; 
000023C4: 6E 75 6D 62 ; 
000023C8: 65 72 20 6F ; 
000023CC: 66 20 69 74 ; 
000023D0: 74 65 72 61 ; 
000023D4: 74 69 6F 6E ; 
000023D8: 73 20 69 6E ; 
000023DC: 20 74 68 65 ; 
000023E0: 20 6E 6F 6E ; 
000023E4: 2D 73 74 65 ; 
000023E8: 70 20 76 65 ; 
000023EC: 72 73 69 6F ; 
000023F0: 6E 20 62 65 ; 
000023F4: 66 6F 72 65 ; 
000023F8: 20 69 74 20 ; 
000023FC: 77 69 6C 6C ; 
00002400: 20 77 61 69 ; 
00002404: 74 20 66 6F ; 
00002408: 72 20 69 6E ; 
0000240C: 70 75 74 0A ; 
00002410: 00          ; 
00002411: 7C 2D 5B 37 ; s_m4            defb "|-[7] Drawing erase  - Bool for if when drawing the grid it should erase 
00002415: 5D 20 44 72 ; the previous one", nl, 0
00002419: 61 77 69 6E ; 
0000241D: 67 20 65 72 ; 
00002421: 61 73 65 20 ; 
00002425: 20 2D 20 42 ; 
00002429: 6F 6F 6C 20 ; 
0000242D: 66 6F 72 20 ; 
00002431: 69 66 20 77 ; 
00002435: 68 65 6E 20 ; 
00002439: 64 72 61 77 ; 
0000243D: 69 6E 67 20 ; 
00002441: 74 68 65 20 ; 
00002445: 67 72 69 64 ; 
00002449: 20 69 74 20 ; 
0000244D: 73 68 6F 75 ; 
00002451: 6C 64 20 65 ; 
00002455: 72 61 73 65 ; 
00002459: 20 74 68 65 ; 
0000245D: 20 70 72 65 ; 
00002461: 76 69 6F 75 ; 
00002465: 73 20 6F 6E ; 
00002469: 65 0A 00    ; 
0000246C: 45 6E 74 65 ; s_m             defb "Enter the index of the setting to edit or -1 to return to the menu (press
00002470: 72 20 74 68 ;  enter to input): ", 0
00002474: 65 20 69 6E ; 
00002478: 64 65 78 20 ; 
0000247C: 6F 66 20 74 ; 
00002480: 68 65 20 73 ; 
00002484: 65 74 74 69 ; 
00002488: 6E 67 20 74 ; 
0000248C: 6F 20 65 64 ; 
00002490: 69 74 20 6F ; 
00002494: 72 20 2D 31 ; 
00002498: 20 74 6F 20 ; 
0000249C: 72 65 74 75 ; 
000024A0: 72 6E 20 74 ; 
000024A4: 6F 20 74 68 ; 
000024A8: 65 20 6D 65 ; 
000024AC: 6E 75 20 28 ; 
000024B0: 70 72 65 73 ; 
000024B4: 73 20 65 6E ; 
000024B8: 74 65 72 20 ; 
000024BC: 74 6F 20 69 ; 
000024C0: 6E 70 75 74 ; 
000024C4: 29 3A 20 00 ; 
000024C8: 45 72 72 6F ; s_m_err         defb "Error invalid index. Re-enter: ", 0
000024CC: 72 20 69 6E ; 
000024D0: 76 61 6C 69 ; 
000024D4: 64 20 69 6E ; 
000024D8: 64 65 78 2E ; 
000024DC: 20 52 65 2D ; 
000024E0: 65 6E 74 65 ; 
000024E4: 72 3A 20 00 ; 
000024E8:             ; 
000024E8: 53 6C 6F 77 ; currentslow     defb "Slow_d: ", 0
000024EC: 5F 64 3A 20 ; 
000024F0: 00          ; 
000024F1: 45 72 61 73 ; currenterase    defb "Erase_d: ", 0
000024F5: 65 5F 64 3A ; 
000024F9: 20 00       ; 
000024FB: 53 74 65 70 ; currentstep     defb "Step_d: ", 0
000024FF: 5F 64 3A 20 ; 
00002503: 00          ; 
00002504: 44 69 6D 73 ; currentDims     defb "Dims: ", 0
00002508: 3A 20 00    ; 
0000250B: 52 61 6E 67 ; currentRange    defb "Range: ", 0
0000250F: 65 3A 20 00 ; 
00002513: 49 74 74 65 ; currentItters   defb "Itters: ", 0
00002517: 72 73 3A 20 ; 
0000251B: 00          ; 
0000251C: 45 72 61 73 ; currentdraweras defb "Erase when drawing: ", 0
00002520: 65 20 77 68 ; 
00002524: 65 6E 20 64 ; 
00002528: 72 61 77 69 ; 
0000252C: 6E 67 3A 20 ; 
00002530: 00          ; 
00002531: 28 00       ; bracket_open    defb "(", 0
00002533: 2C 20 00    ; comma_space     defb ", ", 0
00002536: 29 00       ; bracket_close   defb ")", 0
00002538: 41 6C 69 76 ; currenticons_1  defb "Alive: ", 0
0000253C: 65 3A 20 00 ; 
00002540: 44 65 61 64 ; currenticons_2  defb "Dead: ", 0
00002544: 3A 20 00    ; 
00002547: 50 74 72 3A ; currenticons_3  defb "Ptr: ", 0
0000254B: 20 00       ; 
0000254D: 45 6E 74 65 ; currenticons_a  defb "Enter 3 character (not seperated) for the values of the alive/dead/ptr ch
00002551: 72 20 33 20 ; aracters: ", 0
00002555: 63 68 61 72 ; 
00002559: 61 63 74 65 ; 
0000255D: 72 20 28 6E ; 
00002561: 6F 74 20 73 ; 
00002565: 65 70 65 72 ; 
00002569: 61 74 65 64 ; 
0000256D: 29 20 66 6F ; 
00002571: 72 20 74 68 ; 
00002575: 65 20 76 61 ; 
00002579: 6C 75 65 73 ; 
0000257D: 20 6F 66 20 ; 
00002581: 74 68 65 20 ; 
00002585: 61 6C 69 76 ; 
00002589: 65 2F 64 65 ; 
0000258D: 61 64 2F 70 ; 
00002591: 74 72 20 63 ; 
00002595: 68 61 72 61 ; 
00002599: 63 74 65 72 ; 
0000259D: 73 3A 20 00 ; 
000025A1: 45 72 72 6F ; mallocerr_m     defb "Error getting memory from malloc", nl, 0
000025A5: 72 20 67 65 ; 
000025A9: 74 74 69 6E ; 
000025AD: 67 20 6D 65 ; 
000025B1: 6D 6F 72 79 ; 
000025B5: 20 66 72 6F ; 
000025B9: 6D 20 6D 61 ; 
000025BD: 6C 6C 6F 63 ; 
000025C1: 0A 00       ; 
000025C3: 45 72 72 6F ; getstringerr_m  defb "Error getting string, could be malloc error", nl, 0
000025C7: 72 20 67 65 ; 
000025CB: 74 74 69 6E ; 
000025CF: 67 20 73 74 ; 
000025D3: 72 69 6E 67 ; 
000025D7: 2C 20 63 6F ; 
000025DB: 75 6C 64 20 ; 
000025DF: 62 65 20 6D ; 
000025E3: 61 6C 6C 6F ; 
000025E7: 63 20 65 72 ; 
000025EB: 72 6F 72 0A ; 
000025EF: 00          ; 
000025F0: 49 74 74 65 ; currentitter    defb "Itters: ", 0
000025F4: 72 73 3A 20 ; 
000025F8: 00          ; 
000025F9: 45 6E 74 65 ; currentaskx     defb "Enter value for x: ", 0
000025FD: 72 20 76 61 ; 
00002601: 6C 75 65 20 ; 
00002605: 66 6F 72 20 ; 
00002609: 78 3A 20 00 ; 
0000260D: 45 6E 74 65 ; currentasky     defb "Enter value for y: ", 0
00002611: 72 20 76 61 ; 
00002615: 6C 75 65 20 ; 
00002619: 66 6F 72 20 ; 
0000261D: 79 3A 20 00 ; 
00002621: 45 6E 74 65 ; currentasknew   defb "Enter new value: ", 0
00002625: 72 20 6E 65 ; 
00002629: 77 20 76 61 ; 
0000262D: 6C 75 65 3A ; 
00002631: 20 00       ; 
00002633: 45 6E 74 65 ; currentasknew_B defb "Enter new value (0 or 1): ", 0
00002637: 72 20 6E 65 ; 
0000263B: 77 20 76 61 ; 
0000263F: 6C 75 65 20 ; 
00002643: 28 30 20 6F ; 
00002647: 72 20 31 29 ; 
0000264B: 3A 20 00    ; 
0000264E: 45 72 72 6F ; currentasknew_E defb "Error invalid re-enter: ", 0
00002652: 72 20 69 6E ; 
00002656: 76 61 6C 69 ; 
0000265A: 64 20 72 65 ; 
0000265E: 2D 65 6E 74 ; 
00002662: 65 72 3A 20 ; 
00002666: 00          ; 
00002667: 49 6E 76 61 ; currentarrerr   defb "Invalid value entered re-enter: ", 0
0000266B: 6C 69 64 20 ; 
0000266F: 76 61 6C 75 ; 
00002673: 65 20 65 6E ; 
00002677: 74 65 72 65 ; 
0000267B: 64 20 72 65 ; 
0000267F: 2D 65 6E 74 ; 
00002683: 65 72 3A 20 ; 
00002687: 00          ; 
00002688: 49 6E 76 61 ; changearrsizmsg defb "Invalid, x >= y.", nl, 0
0000268C: 6C 69 64 2C ; 
00002690: 20 78 20 3E ; 
00002694: 3D 20 79 2E ; 
00002698: 0A 00       ; 
0000269A: 49 6E 76 61 ; changeittere_m  defb "Invalid itter value. Re-enter: ", nl, 0
0000269E: 6C 69 64 20 ; 
000026A2: 69 74 74 65 ; 
000026A6: 72 20 76 61 ; 
000026AA: 6C 75 65 2E ; 
000026AE: 20 52 65 2D ; 
000026B2: 65 6E 74 65 ; 
000026B6: 72 3A 20 0A ; 
000026BA: 00          ; 
000026BB: 45 6E 74 65 ; getitters_m     defb "Enter the max itterations (1-255): ", 0
000026BF: 72 20 74 68 ; 
000026C3: 65 20 6D 61 ; 
000026C7: 78 20 69 74 ; 
000026CB: 74 65 72 61 ; 
000026CF: 74 69 6F 6E ; 
000026D3: 73 20 28 31 ; 
000026D7: 2D 32 35 35 ; 
000026DB: 29 3A 20 00 ; 
000026DF:             ; 
000026DF:             ; ;;debug for heap
000026DF: 50 72 69 6E ; printFree_m     defb "Printing free list", nl
000026E3: 74 69 6E 67 ; 
000026E7: 20 66 72 65 ; 
000026EB: 65 20 6C 69 ; 
000026EF: 73 74 0A    ; 
000026F2: 46 6F 75 6E ; printfree_f_m   defb "Found a new free item", nl, 0
000026F6: 64 20 61 20 ; 
000026FA: 6E 65 77 20 ; 
000026FE: 66 72 65 65 ; 
00002702: 20 69 74 65 ; 
00002706: 6D 0A 00    ; 
00002709: 41 64 64 72 ; printfree_f_mad defb "Address: ", 0
0000270D: 65 73 73 3A ; 
00002711: 20 00       ; 
00002713: 4E 65 78 74 ; printfree_f_mnx defb "Next   : ", 0
00002717: 20 20 20 3A ; 
0000271B: 20 00       ; 
0000271D: 50 72 65 76 ; printfree_f_mpr defb "Prev   : ", 0
00002721: 20 20 20 3A ; 
00002725: 20 00       ; 
00002727: 53 69 7A 65 ; printfree_f_msz defb "Size   : ", 0
0000272B: 20 20 20 3A ; 
0000272F: 20 00       ; 
00002731: 5B 5B 21 21 ; printFree_m_e   defb "[[!!]] Error circular Crate found. Ending printFree [[!!]]", nl, 0
00002735: 5D 5D 20 45 ; 
00002739: 72 72 6F 72 ; 
0000273D: 20 63 69 72 ; 
00002741: 63 75 6C 61 ; 
00002745: 72 20 43 72 ; 
00002749: 61 74 65 20 ; 
0000274D: 66 6F 75 6E ; 
00002751: 64 2E 20 45 ; 
00002755: 6E 64 69 6E ; 
00002759: 67 20 70 72 ; 
0000275D: 69 6E 74 46 ; 
00002761: 72 65 65 20 ; 
00002765: 5B 5B 21 21 ; 
00002769: 5D 5D 0A 00 ; 
0000276D:             ; 
0000276D: 50 72 69 6E ; printAll_m      defb "Printing all elements in the heap", nl, 0
00002771: 74 69 6E 67 ; 
00002775: 20 61 6C 6C ; 
00002779: 20 65 6C 65 ; 
0000277D: 6D 65 6E 74 ; 
00002781: 73 20 69 6E ; 
00002785: 20 74 68 65 ; 
00002789: 20 68 65 61 ; 
0000278D: 70 0A 00    ; 
00002790: 54 68 69 73 ; printAll_m_f    defb "This is a Free block", nl, 0
00002794: 20 69 73 20 ; 
00002798: 61 20 46 72 ; 
0000279C: 65 65 20 62 ; 
000027A0: 6C 6F 63 6B ; 
000027A4: 0A 00       ; 
000027A6: 54 68 69 73 ; printAll_m_t    defb "This is a Taken block", nl, 0
000027AA: 20 69 73 20 ; 
000027AE: 61 20 54 61 ; 
000027B2: 6B 65 6E 20 ; 
000027B6: 62 6C 6F 63 ; 
000027BA: 6B 0A 00    ; 
000027BD: 5B 5B 21 21 ; printAll_m_e    defb "[[!!]] Error circular crate found, NO LONGER PRINTING FREE CLASSIFIERS [[
000027C1: 5D 5D 20 45 ; !!]]", nl, 0
000027C5: 72 72 6F 72 ; 
000027C9: 20 63 69 72 ; 
000027CD: 63 75 6C 61 ; 
000027D1: 72 20 63 72 ; 
000027D5: 61 74 65 20 ; 
000027D9: 66 6F 75 6E ; 
000027DD: 64 2C 20 4E ; 
000027E1: 4F 20 4C 4F ; 
000027E5: 4E 47 45 52 ; 
000027E9: 20 50 52 49 ; 
000027ED: 4E 54 49 4E ; 
000027F1: 47 20 46 52 ; 
000027F5: 45 45 20 43 ; 
000027F9: 4C 41 53 53 ; 
000027FD: 49 46 49 45 ; 
00002801: 52 53 20 5B ; 
00002805: 5B 21 21 5D ; 
00002809: 5D 0A 00    ; 
0000280C:             ; 
0000280C: 48 65 72 65 ; printHeap_end_m defb "Here's the heap at the end of the program!", nl, 0
00002810: 27 73 20 74 ; 
00002814: 68 65 20 68 ; 
00002818: 65 61 70 20 ; 
0000281C: 61 74 20 74 ; 
00002820: 68 65 20 65 ; 
00002824: 6E 64 20 6F ; 
00002828: 66 20 74 68 ; 
0000282C: 65 20 70 72 ; 
00002830: 6F 67 72 61 ; 
00002834: 6D 21 0A 00 ; 
00002838:             ; 
00002838: 4D 61 6C 6C ; malloc_panic    defb "Malloc failed, cannot recover. Please consider reporting this to your nea
0000283C: 6F 63 20 66 ; rest duck", nl, 0
00002840: 61 69 6C 65 ; 
00002844: 64 2C 20 63 ; 
00002848: 61 6E 6E 6F ; 
0000284C: 74 20 72 65 ; 
00002850: 63 6F 76 65 ; 
00002854: 72 2E 20 50 ; 
00002858: 6C 65 61 73 ; 
0000285C: 65 20 63 6F ; 
00002860: 6E 73 69 64 ; 
00002864: 65 72 20 72 ; 
00002868: 65 70 6F 72 ; 
0000286C: 74 69 6E 67 ; 
00002870: 20 74 68 69 ; 
00002874: 73 20 74 6F ; 
00002878: 20 79 6F 75 ; 
0000287C: 72 20 6E 65 ; 
00002880: 61 72 65 73 ; 
00002884: 74 20 64 75 ; 
00002888: 63 6B 0A 00 ; 
0000288C: 41 74 74 65 ; free_m_addr     defb "Attempting to free address: ", 0
00002890: 6D 70 74 69 ; 
00002894: 6E 67 20 74 ; 
00002898: 6F 20 66 72 ; 
0000289C: 65 65 20 61 ; 
000028A0: 64 64 72 65 ; 
000028A4: 73 73 3A 20 ; 
000028A8: 00          ; 
000028A9: 5B 5B 21 21 ; free_m_zero     defb "[[!!]] Info: Free was given a null ptr", nl, 0
000028AD: 5D 5D 20 49 ; 
000028B1: 6E 66 6F 3A ; 
000028B5: 20 46 72 65 ; 
000028B9: 65 20 77 61 ; 
000028BD: 73 20 67 69 ; 
000028C1: 76 65 6E 20 ; 
000028C5: 61 20 6E 75 ; 
000028C9: 6C 6C 20 70 ; 
000028CD: 74 72 0A 00 ; 
000028D1:             ; 
000028D1: 46 61 69 6C ; updatergrid_m_f defb "Failed to update grids, one or more are null", nl, 0
000028D5: 65 64 20 74 ; 
000028D9: 6F 20 75 70 ; 
000028DD: 64 61 74 65 ; 
000028E1: 20 67 72 69 ; 
000028E5: 64 73 2C 20 ; 
000028E9: 6F 6E 65 20 ; 
000028ED: 6F 72 20 6D ; 
000028F1: 6F 72 65 20 ; 
000028F5: 61 72 65 20 ; 
000028F9: 6E 75 6C 6C ; 
000028FD: 0A 00       ; 
000028FF:             ; 
000028FF: 4F 4E 00    ; on_msg          defb "ON", 0
00002902: 4F 46 46 00 ; off_msg         defb "OFF", 0
00002906: 2C 00       ; comma           defb ",", 0
00002908:             ; 
00002908:             ; align
00002908: 00000000    ; heapstart       defw 0 ;;points to the end of the data this is where the heap can then begin
0000290C:             ; Remaining literals

Symbol Table: Labels
: max_addr                          00100000  Value
: stack_size                        00010000  Value
: nl                                0000000A  Value
: backspace                         00000008  Value
: minBuffSize                       00000008  Value
: enter                             0000000A  Value
: minSaveSize                       00000008  Value
: sizeofSaveI                       0000000C  Value
: heaphead                          00000004  Local -- ARM
: offsets                           00000008  Local -- ARM
: gridA                             00000048  Local -- ARM
: gridB                             0000004C  Local -- ARM
: erase_b                           00000050  Local -- ARM
: slow_b                            00000051  Local -- ARM
: step_b                            00000052  Local -- ARM
: width                             00000053  Local -- ARM
: height                            00000054  Local -- ARM
: range_min                         00000055  Local -- ARM
: range_max                         00000056  Local -- ARM
: maxitters                         00000057  Local -- ARM
: drawerase                         00000058  Local -- ARM
: alive_c                           00000059  Local -- ARM
: dead_c                            0000005A  Local -- ARM
: ptr_c                             0000005B  Local -- ARM
: erase_b_d                         0000005C  Local -- ARM
: slow_b_d                          0000005D  Local -- ARM
: step_b_d                          0000005E  Local -- ARM
: width_d                           0000005F  Local -- ARM
: height_d                          00000060  Local -- ARM
: _start                            00000064  Local -- ARM
: main                              00000094  Local -- ARM
: mainmenu                          000000C8  Local -- ARM
: mainchoice                        000000E0  Local -- ARM
: showHeap                          00000128  Local -- ARM
: mainloopstart                     00000130  Local -- ARM
: mainloop                          00000164  Local -- ARM
: mainloopcont                      00000188  Local -- ARM
: mainloopdostep                    000001A4  Local -- ARM
: mainloopskipstep                  000001DC  Local -- ARM
: gridFail                          00000200  Local -- ARM
: mainMallocFail                    0000020C  Local -- ARM
: mainEnd                           0000021C  Local -- ARM
: mainEndEnd                        0000023C  Local -- ARM
: mainfree                          00000248  Local -- ARM
: mainfreeloop                      00000260  Local -- ARM
: mainfreelend                      00000298  Local -- ARM
: mainfreeend                       000002A8  Local -- ARM
: settingsmenu                      000002B0  Local -- ARM
: changesetting                     000002E0  Local -- ARM
: changesettingget                  000002EC  Local -- ARM
: changesettingserr                 00000330  Local -- ARM
: changesettingsmallocfail          00000340  Local -- ARM
: changesettingscont                00000350  Local -- ARM
: jumps                             0000035C  Local -- ARM
: getjump                           0000037C  Local -- ARM
: changearr                         000003D0  Local -- ARM
: changearrget                      000003E4  Local -- ARM
: changearrsizeerr                  00000430  Local -- ARM
: changearrset                      00000440  Local -- ARM
: changearrmallocerr                00000458  Local -- ARM
: changearrend                      00000460  Local -- ARM
: changearrendend                   00000464  Local -- ARM
: changearrgetvalidint              0000046C  Local -- ARM
: changearrgetvalidintget           00000470  Local -- ARM
: changearrgetvalidinterr           000004A8  Local -- ARM
: changearrgetvalidintcont          000004BC  Local -- ARM
: changearrgvmallocerr              000004D0  Local -- ARM
: changearrgetvalidintend           000004D8  Local -- ARM
: changearrgvendend                 000004E0  Local -- ARM
: printdims                         000004E8  Local -- ARM
: changestep                        0000053C  Local -- ARM
: changeslow                        00000554  Local -- ARM
: changeerase                       0000056C  Local -- ARM
: changebool                        00000584  Local -- ARM
: changebool_cont                   000005C4  Local -- ARM
: changebool_set                    000005F0  Local -- ARM
: changeboolend                     00000620  Local -- ARM
: changedims                        00000628  Local -- ARM
: changedimscont                    00000658  Local -- ARM
: changerange                       0000065C  Local -- ARM
: changerangecont                   0000068C  Local -- ARM
: changeicons                       00000690  Local -- ARM
: changeiconsmallerr                000006DC  Local -- ARM
: printicons                        000006EC  Local -- ARM
: printiconsend                     00000740  Local -- ARM
: changeitter                       00000744  Local -- ARM
: changeitterget                    00000768  Local -- ARM
: changeittergetcont                00000790  Local -- ARM
: changeittererr                    000007C8  Local -- ARM
: changeitterend                    000007DC  Local -- ARM
: changedrawerase                   000007F8  Local -- ARM
: changedraweraseend                00000810  Local -- ARM
: newboard                          00000814  Local -- ARM
: loadboard                         00000844  Local -- ARM
: loadboardaskindex                 00000858  Local -- ARM
: loadboardaskindexcont             0000088C  Local -- ARM
: loadboardindex                    000008D4  Local -- ARM
: loadboardmain                     000008F0  Local -- ARM
: loadboardmallocB                  0000093C  Local -- ARM
: loadboardskipB                    00000958  Local -- ARM
: loadboardmallocfail               00000978  Local -- ARM
: loadboardret                      00000988  Local -- ARM
: loadboardempty                    00000994  Local -- ARM
: loadboarderr                      00000994  Local -- ARM
: loadboardsucc                     00000998  Local -- ARM
: newline                           0000099C  Local -- ARM
: step                              000009A8  Local -- ARM
: stepcont                          000009FC  Local -- ARM
: stependfail                       00000A38  Local -- ARM
: stependsucc                       00000A40  Local -- ARM
: stepend                           00000A44  Local -- ARM
: listGrids                         00000A4C  Local -- ARM
: listGridsLoop                     00000A80  Local -- ARM
: listGridsEmpty                    00000B14  Local -- ARM
: listGridsLend                     00000B20  Local -- ARM
: listGridsEnd                      00000B20  Local -- ARM
: saveGrid                          00000B28  Local -- ARM
: saveGridResize                    00000B4C  Local -- ARM
: saveGridAdd                       00000B84  Local -- ARM
: saveGridFailMalloc                00000BEC  Local -- ARM
: saveGridSucc                      00000BF4  Local -- ARM
: saveGridEnd                       00000BF8  Local -- ARM
: erase                             00000C00  Local -- ARM
: eraseloop                         00000C04  Local -- ARM
: eraseend                          00000C1C  Local -- ARM
: slow                              00000C20  Local -- ARM
: slowloop                          00000C28  Local -- ARM
: slowend                           00000C48  Local -- ARM
: heapclean                         00000C4C  Local -- ARM
: heapcleanloop                     00000C68  Local -- ARM
: heapcleanend                      00000C7C  Local -- ARM
: strlen                            00000C80  Local -- ARM
: strlenloop                        00000C8C  Local -- ARM
: strlenend                         00000CA0  Local -- ARM
: strtoi                            00000CA8  Local -- ARM
: strtoiloop                        00000CE8  Local -- ARM
: strtoilend                        00000D1C  Local -- ARM
: strtoifailminus                   00000D24  Local -- ARM
: strtoifailoutrange                00000D2C  Local -- ARM
: strtoifailnonnum                  00000D34  Local -- ARM
: strtoiendfail                     00000D38  Local -- ARM
: strtoiendsucc                     00000D40  Local -- ARM
: strtoiend                         00000D44  Local -- ARM
: memcpy                            00000D4C  Local -- ARM
: memcpywordsloop                   00000D74  Local -- ARM
: memcpywordslend                   00000D8C  Local -- ARM
: memcpyallbytes                    00000D9C  Local -- ARM
: memcpybytes                       00000DA8  Local -- ARM
: memcpybytesloop                   00000DAC  Local -- ARM
: memcpybyteslend                   00000DC4  Local -- ARM
: memcpyend                         00000DC8  Local -- ARM
: getstring                         00000DD0  Local -- ARM
: getstringloop                     00000E04  Local -- ARM
: getstringloopskipsize             00000E14  Local -- ARM
: skipMax                           00000E28  Local -- ARM
: getstringlcont                    00000E34  Local -- ARM
: getstringresize                   00000E4C  Local -- ARM
: getstringlend                     00000E84  Local -- ARM
: getstringResizeEnd                00000E90  Local -- ARM
: getstringErr                      00000EC8  Local -- ARM
: getstringEnd                      00000ED0  Local -- ARM
: getstringEndEnd                   00000EDC  Local -- ARM
: tolower                           00000EE4  Local -- ARM
: setupGrid                         00000EEC  Local -- ARM
: setupGridAsk                      00000F34  Local -- ARM
: setupdrawing                      00000F64  Local -- ARM
: setuprandom                       00000F74  Local -- ARM
: setupstart                        00000FA8  Local -- ARM
: setuprowloop                      00000FAC  Local -- ARM
: setupcolloop                      00000FB8  Local -- ARM
: dorandom                          00000FCC  Local -- ARM
: dodrawstart                       00000FE0  Local -- ARM
: dodraw                            00000FF8  Local -- ARM
: dodrawfail                        00001054  Local -- ARM
: dodrawsucc                        00001064  Local -- ARM
: dodrawsuccskiperase               00001090  Local -- ARM
: setupcollcont                     00001098  Local -- ARM
: setupcollend                      000010A8  Local -- ARM
: setuprowlend                      000010B0  Local -- ARM
: setupGridFail                     000010B8  Local -- ARM
: setupGridEnd                      000010C8  Local -- ARM
: drawgrid                          000010D0  Local -- ARM
: drawgridrowloop                   000010F4  Local -- ARM
: drawgridcolloop                   00001100  Local -- ARM
: drawgridprintcurrent              0000113C  Local -- ARM
: drawgridcollcont                  0000114C  Local -- ARM
: drawgridcollend                   0000115C  Local -- ARM
: drawgridrowlend                   00001170  Local -- ARM
: drawgridend                       00001178  Local -- ARM
: printoptions                      00001180  Local -- ARM
: setupOptions                      00001250  Local -- ARM
: setupOptionsDEnd                  000012F8  Local -- ARM
: setupCustom                       00001304  Local -- ARM
: setupCustomskipslow               000013C8  Local -- ARM
: printrange                        000013DC  Local -- ARM
: setupCustomDimsCheck              00001424  Local -- ARM
: getwid                            0000143C  Local -- ARM
: getwidFail                        000014A8  Local -- ARM
: getheisetup                       000014BC  Local -- ARM
: gethei                            000014CC  Local -- ARM
: getheiFail                        00001538  Local -- ARM
: customfail                        00001550  Local -- ARM
: customend                         00001560  Local -- ARM
: customret                         00001564  Local -- ARM
: updategrid                        0000156C  Local -- ARM
: updategridrowloop                 000015A0  Local -- ARM
: updategridcolloop                 000015AC  Local -- ARM
: updatealive                       000015D4  Local -- ARM
: updatedead                        000015F0  Local -- ARM
: updatelcont                       00001600  Local -- ARM
: updategridccollend                00001608  Local -- ARM
: updategridfail                    00001614  Local -- ARM
: updategridrowlend                 00001620  Local -- ARM
: updategridend                     00001620  Local -- ARM
: countneighbours                   00001628  Local -- ARM
: countneighboursloop               00001654  Local -- ARM
: countneighboursskipadd            00001698  Local -- ARM
: countneighbourslend               0000169C  Local -- ARM
: countneighboursend                0000169C  Local -- ARM
: isinrange                         000016A8  Local -- ARM
: isinrangefail                     000016EC  Local -- ARM
: isinrangeend                      000016F0  Local -- ARM
: setupHeap                         000016F4  Local -- ARM
: malloc                            00001728  Local -- ARM
: mallignend                        00001744  Local -- ARM
: checkcrate                        00001750  Local -- ARM
: nocrates                          00001770  Local -- ARM
: foundcrate                        00001778  Local -- ARM
: splitcrate                        00001788  Local -- ARM
: usecrate                          000017BC  Local -- ARM
: mallocEnd                         000017D0  Local -- ARM
: printHeap                         000017D8  Local -- ARM
: printHeapend                      000017E4  Local -- ARM
: printAll                          000017EC  Local -- ARM
: printAllLoop                      0000180C  Local -- ARM
: printAllLoopSkipWarning           00001830  Local -- ARM
: printAllLoopCont                  00001850  Local -- ARM
: printAllLend                      00001870  Local -- ARM
: printAllEnd                       00001870  Local -- ARM
: printFree                         00001878  Local -- ARM
: printFreeloop                     00001894  Local -- ARM
: printFreelend                     000018CC  Local -- ARM
: printFreeErr                      000018D0  Local -- ARM
: printFreeEnd                      000018DC  Local -- ARM
: printblock                        000018E4  Local -- ARM
: free                              0000197C  Local -- ARM
: freeloop                          000019C0  Local -- ARM
: freelend                          000019DC  Local -- ARM
: freelendEnd                       000019FC  Local -- ARM
: freeMergeCheck                    00001A04  Local -- ARM
: verifyLeft                        00001A14  Local -- ARM
: verifyRight                       00001A28  Local -- ARM
: merge                             00001A3C  Local -- ARM
: mergeNew                          00001A70  Local -- ARM
: freeEndZero                       00001A74  Local -- ARM
: freeEnd                           00001A80  Local -- ARM
: welcomemsg                        00001A94  Local -- ARM
: welcome2msg                       00001AC8  Local -- ARM
: mainchoicefail                    00001B0D  Local -- ARM
: mainendmsg                        00001BA4  Local -- ARM
: askdefaults                       00001BCB  Local -- ARM
: askerase                          00001BFD  Local -- ARM
: askslow                           00001C16  Local -- ARM
: askstep                           00001C2E  Local -- ARM
: stepslowwarning                   00001C46  Local -- ARM
: savedchoice                       00001C93  Local -- ARM
: askname                           00001CBE  Local -- ARM
: warneraseslow                     00001CE1  Local -- ARM
: askwid                            00001D1F  Local -- ARM
: dash                              00001D36  Local -- ARM
: b_close_colon                     00001D38  Local -- ARM
: askhei                            00001D3C  Local -- ARM
: getwidfailmsg                     00001D53  Local -- ARM
: getheifailmsg                     00001D7F  Local -- ARM
: optionsp_1                        00001DAC  Local -- ARM
: optionsp_2                        00001DC4  Local -- ARM
: optionsp_3                        00001DC7  Local -- ARM
: optionsp_4                        00001DD3  Local -- ARM
: optionsp_5                        00001DDF  Local -- ARM
: mainloopittsmsg                   00001DEA  Local -- ARM
: askgenoption                      00001E8A  Local -- ARM
: setupGrdFailmsg                   00001EC3  Local -- ARM
: askseed                           00001F24  Local -- ARM
: drawinfomsg                       00001F50  Local -- ARM
: drawfailmsg                       00001FA6  Local -- ARM
: gridfailmsg                       00001FE3  Local -- ARM
: gridsavefail                      0000201D  Local -- ARM
: gridloadempty                     00002055  Local -- ARM
: gridloadpindex                    000020B0  Local -- ARM
: gridloadpname                     000020B9  Local -- ARM
: gridloadpwidth                    000020C1  Local -- ARM
: gridloadpheight                   000020CA  Local -- ARM
: loadboardaski                     000020D4  Local -- ARM
: loadboardretmsg                   00002146  Local -- ARM
: loadboardifail                    0000215E  Local -- ARM
: loadboardirerr                    00002181  Local -- ARM
: loadboardmlcerr                   0000219E  Local -- ARM
: loadboardsucmsg                   000021DE  Local -- ARM
: listgridmsg                       000021FC  Local -- ARM
: cutoff                            0000221F  Local -- ARM
: changearrverr_m                   00002232  Local -- ARM
: s_m1                              0000226B  Local -- ARM
: s_m2                              000022FC  Local -- ARM
: s_m3                              00002360  Local -- ARM
: s_m4                              00002411  Local -- ARM
: s_m                               0000246C  Local -- ARM
: s_m_err                           000024C8  Local -- ARM
: currentslow                       000024E8  Local -- ARM
: currenterase                      000024F1  Local -- ARM
: currentstep                       000024FB  Local -- ARM
: currentDims                       00002504  Local -- ARM
: currentRange                      0000250B  Local -- ARM
: currentItters                     00002513  Local -- ARM
: currentdraweras                   0000251C  Local -- ARM
: bracket_open                      00002531  Local -- ARM
: comma_space                       00002533  Local -- ARM
: bracket_close                     00002536  Local -- ARM
: currenticons_1                    00002538  Local -- ARM
: currenticons_2                    00002540  Local -- ARM
: currenticons_3                    00002547  Local -- ARM
: currenticons_a                    0000254D  Local -- ARM
: mallocerr_m                       000025A1  Local -- ARM
: getstringerr_m                    000025C3  Local -- ARM
: currentitter                      000025F0  Local -- ARM
: currentaskx                       000025F9  Local -- ARM
: currentasky                       0000260D  Local -- ARM
: currentasknew                     00002621  Local -- ARM
: currentasknew_B                   00002633  Local -- ARM
: currentasknew_E                   0000264E  Local -- ARM
: currentarrerr                     00002667  Local -- ARM
: changearrsizmsg                   00002688  Local -- ARM
: changeittere_m                    0000269A  Local -- ARM
: getitters_m                       000026BB  Local -- ARM
: printFree_m                       000026DF  Local -- ARM
: printfree_f_m                     000026F2  Local -- ARM
: printfree_f_mad                   00002709  Local -- ARM
: printfree_f_mnx                   00002713  Local -- ARM
: printfree_f_mpr                   0000271D  Local -- ARM
: printfree_f_msz                   00002727  Local -- ARM
: printFree_m_e                     00002731  Local -- ARM
: printAll_m                        0000276D  Local -- ARM
: printAll_m_f                      00002790  Local -- ARM
: printAll_m_t                      000027A6  Local -- ARM
: printAll_m_e                      000027BD  Local -- ARM
: printHeap_end_m                   0000280C  Local -- ARM
: malloc_panic                      00002838  Local -- ARM
: free_m_addr                       0000288C  Local -- ARM
: free_m_zero                       000028A9  Local -- ARM
: updatergrid_m_f                   000028D1  Local -- ARM
: on_msg                            000028FF  Local -- ARM
: off_msg                           00002902  Local -- ARM
: comma                             00002906  Local -- ARM
: heapstart                         00002908  Local -- ARM
