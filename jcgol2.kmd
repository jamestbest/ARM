KMD
00000000:             ; ;;  This is my second rendition of JCGOL in ARM assembly for Komodo
00000000:             ; ;;  
00000000:             ; ;;  This will attempt to follow the ARM 32bit calling convention 
00000000:             ; ;;      R0-3 are argument registers, scratch
00000000:             ; ;;      R4-10 are local variable registers and should be saved before use in a function
00000000:             ; ;;      R11 - FP
00000000:             ; ;;      R12 - IPC
00000000:             ; ;;      R13 - SP
00000000:             ; ;;      R14 - LR
00000000:             ; ;;      R15 - PC
00000000:             ; ;;
00000000:             ; ;;  The plan
00000000:             ; ;;  - Create a simple `heap` allocator for the grid and input
00000000:             ; ;;  - Ask the user
00000000:             ; ;;      |-Use default? Y - skip below
00000000:             ; ;;      |-dims of the grid
00000000:             ; ;;      |   `-Will need a way to get a string input and convert to an integer (make sure to cat
                      ; ch -ve)
00000000:             ; ;;      |-slow mode
00000000:             ; ;;      `-erase mode
00000000:             ; ;;  - ask for generation mode
00000000:             ; ;;      |-If random ask for seed
00000000:             ; ;;      |   `-For generation roll the seed to create a pseudorandom value for each `pixel`
00000000:             ; ;;      `-If draw then get them to draw the grid one `pixel` at a time
00000000:             ; ;;  - Allocate two grids, the pointers to which will swap after a frame. One is used to count t
                      ; he neighbours the other for the new cell value.
00000000:             ; ;;  - loop
00000000:             ; ;;      |-count neighbours
00000000:             ; ;;      |-update inactive grid
00000000:             ; ;;      |-swap grids
00000000:             ; ;;      |-draw active grid
00000000:             ; ;;      `-goto loop
00000000:             ; 
00000000:             ; ;;SINGLE STEP mode allows you to save the current state of the board into a list, also give it 
                      ; a name
00000000:             ; ;;At the main menu you can load a saved grid
00000000:             ; 
00000000:             ; ;;Grid info struct
00000000:             ; ;;  - SaveInfoStruct* array
00000000:             ; ;;  - int max size of arr
00000000:             ; ;;  - int current position in arr
00000000:             ; 
00000000:             ; ;;Save info struct
00000000:             ; ;;  -address of grid [4 BYTES]
00000000:             ; ;;  -char* to the name [4 BYTES]
00000000:             ; ;;  -width of grid (1 BYTE)
00000000:             ; ;;  -height of grid (1 BYTE)
00000000:             ; 
00000000:             ; 
00000000:             ; ;;  CURRENT ISSUES/TODOS
00000000:             ; ;;  `-Think about minimising the fragmentation of the heap - find the best free block instead o
                      ; f the first
00000000:             ;   
00000000:             ; max_addr    EQU  0x100000
00000000:             ; stack_size  EQU  0x10000
00000000:             ; nl          EQU  10
00000000:             ; backspace   EQU  8
00000000:             ; minBuffSize EQU  8
00000000:             ; enter       EQU  nl
00000000:             ; minSaveSize EQU  8
00000000:             ; sizeofSaveI EQU  12 ;;10 bytes + 2 bytes of padding to align to 4 byte boundry for arr
00000000:             ; 
00000000: EA000017    ; b _start
00000004:             ; 
00000004:             ; align
00000004:             ; ;;[[note]]
00000004:             ; ;;ldr instructions out of range (for pc-relative offsets?) of ldr (-4096/+4095?) use below
00000004:             ; ;;  adrl Rx, label
00000004:             ; ;;  ldr  Rx, [Rx]
00000004: 00010000    ; heaphead        defw 0x10000 ;;default start changed to addr of heapstart 
00000008:             ; 
00000008:             ; ;;Integer defs
00000008: FFFFFFFF    ; offsets         defw -1,-1,-1,0,-1,1,0,-1,0,1,1,-1,1,0,1,1 ;;[[-1,-1],[-1,0],[-1,1],[0,-1],[0,1
0000000C: FFFFFFFF    ; ],[1,-1],[1,0],[1,1]]
00000010: FFFFFFFF    ; 
00000014: 00000000    ; 
00000018: FFFFFFFF    ; 
0000001C: 00000001    ; 
00000020: 00000000    ; 
00000024: FFFFFFFF    ; 
00000028: 00000000    ; 
0000002C: 00000001    ; 
00000030: 00000001    ; 
00000034: FFFFFFFF    ; 
00000038: 00000001    ; 
0000003C: 00000000    ; 
00000040: 00000001    ; 
00000044: 00000001    ; 
00000048:             ; 
00000048:             ; ;;Grid addresses
00000048: 00000000    ; gridA           defw 0
0000004C: 00000000    ; gridB           defw 0
00000050:             ; 
00000050:             ; ;;options
00000050: 00          ; erase_b         defb 0
00000051: 00          ; slow_b          defb 0
00000052: 00          ; step_b          defb 0
00000053: 12          ; width           defb 18
00000054: 12          ; height          defb 18
00000055: 01          ; range_min       defb 1
00000056: 1E          ; range_max       defb 30
00000057: 19          ; maxitters       defb 25
00000058: 01          ; drawerase       defb 1  ;;Should the draw mode erase previous
00000059:             ; 
00000059: 58          ; alive_c         defb 'X'
0000005A: 2D          ; dead_c          defb '-'
0000005B: 23          ; ptr_c           defb '#'
0000005C:             ; 
0000005C:             ; ;;default options
0000005C: 00          ; erase_b_d       defb 0
0000005D: 00          ; slow_b_d        defb 0
0000005E: 01          ; step_b_d        defb 1
0000005F: 12          ; width_d         defb 18
00000060: 12          ; height_d        defb 18
00000061:             ; 
00000064:             ; align
00000064:             ; 
00000064:             ; _start
00000064:             ;     ;;prepare the stack
00000064: E3A0D601    ;     ldr R13, =max_addr
00000068: E3A0E000    ;     mov R14, #0 ;; allow for `returning` from _start
0000006C: E92D4000    ;     push {R14}
00000070:             ; 
00000070:             ;     ;;[[temp]] clean the heap (zero out)
00000070: EB0002F1    ;     bl heapclean
00000074:             ; 
00000074:             ;     ;;setup heap
00000074: E28F0FEA    ;     adrl R0, heapstart
00000078: E2800B09    ; 
0000007C: E50F0080    ;     str R0, heaphead    ;;place address of last instruction (heapstart label) into the heaphead
                      ;  variable
00000080: EB000594    ;     bl setupHeap
00000084:             ; 
00000084: EB000002    ;     bl main
00000088:             ; 
00000088: E8BD4000    ;     pop {R14}
0000008C: EF000002    ;     swi 2
00000090: E1A0F00E    ;     mov R15, R14
00000094:             ; 
00000094:             ; main
00000094: E92D4FF0    ;     push {fp, R14, R4-R10} ;;8 registers saved
00000098:             ; 
00000098: E28DB01C    ;     add fp, sp, #28 ;;(r - 1) * 4
0000009C: E24DD010    ;     sub sp, sp, #16 ;;reserve 12 bytes (4 bytes to align?) on the stack for the pointer to the 
                      ; list of saved grids + the maxSize of the array
000000A0:             ; 
000000A0:             ;     ;;The gridInfo struct
000000A0:             ;     ;;set the current position of the pointer
000000A0: E3A00000    ;     mov R0, #0
000000A4: E58D0008    ;     str R0, [sp, #8]
000000A8:             ; 
000000A8:             ;     ;;set the number of elements(save info structs) that can be stored in the array at the mome
                      ; nt
000000A8: E3A00008    ;     ldr R0, =minSaveSize
000000AC: E58D0004    ;     str R0, [sp, #4]
000000B0:             ; 
000000B0:             ;     ;;minsize * sizeof(SaveInfo) = number of bytes needed for the array
000000B0: E3A0100C    ;     ldr R1, =sizeofSaveI
000000B4: E0000190    ;     mul R0, R0, R1
000000B8: EB000593    ;     bl malloc ;;allocate the array on the heap
000000BC:             ; 
000000BC: E3500000    ;     cmp R0, #0
000000C0: 0A00004D    ;     beq mainMallocFail
000000C4:             ; 
000000C4: E58D0000    ;     str R0, [sp, #0] ;;store the address
000000C8:             ; 
000000C8:             ; mainmenu
000000C8: E28F0F55    ;     adrl R0, welcomemsg
000000CC: E2800B06    ; 
000000D0: EF000003    ;     swi 3
000000D4:             ; 
000000D4: E28F0079    ;     adrl R0, welcome2msg
000000D8: E2800C19    ; 
000000DC: EF000003    ;     swi 3
000000E0:             ; 
000000E0:             ; mainchoice
000000E0: EF000001    ;     swi 1
000000E4: E3800020    ;     orr R0, R0, #32
000000E8: E1A04000    ;     mov R4, R0
000000EC:             ; 
000000EC:             ;     ;;These should really be functions
000000EC:             ; 
000000EC: E354006E    ;     cmp R4, #'n' ;;new board generation
000000F0: 0A0001BC    ;     beq newboard
000000F4:             ; 
000000F4: E354006C    ;     cmp R4, #'l' ;;load a saved board
000000F8: E1A0000D    ;     mov R0, sp ;;load the info ptr
000000FC: 0A0001C5    ;     beq loadboard
00000100:             ; 
00000100: E3540073    ;     cmp R4, #'s'
00000104: 0A00005F    ;     beq settingsmenu
00000108:             ; 
00000108: E3540070    ;     cmp R4, #'p'
0000010C: 0A000005    ;     beq showHeap
00000110:             ; 
00000110: E3540071    ;     cmp R4, #'q' ;;quit
00000114: 0A00003C    ;     beq mainEnd
00000118:             ; 
00000118: E28F007A    ;     adrl R0, mainchoicefail
0000011C: E2800C19    ; 
00000120: EF000003    ;     swi 3
00000124:             ; 
00000124: EAFFFFED    ;     b mainchoice
00000128:             ; 
00000128:             ;     ;;R4 will hold the active grid, R5 will hold the passive grid
00000128:             ;     ;;Active is used to count neighbours, passive is used to place updated values in 
00000128:             ;     ;;either can be drawn, just drawn in a different position
00000128:             ; 
00000128:             ; 
00000128:             ; showHeap
00000128: EB0005A3    ;     bl printHeap
0000012C:             ; 
0000012C: EAFFFFE5    ;     b mainmenu
00000130:             ; 
00000130:             ; ;;update loop
00000130:             ; ;;    - loop
00000130:             ; ;;      |-count neighbours
00000130:             ; ;;      |-update inactive grid
00000130:             ; ;;      |-swap grids
00000130:             ; ;;      |-draw grid
00000130:             ; ;;      |-[slow?] - slow() - loops for some time to increase waiting time
00000130:             ; ;;      |-[step?] - step() - waits for input, s and q will have effects
00000130:             ; ;;      |-[erase?] - erase() - \b until grid is gone
00000130:             ; ;;      `-goto loop
00000130:             ; mainloopstart
00000130:             ;     ;;load the slow, step, and erase booleans
00000130: E55F60E7    ;     ldrb R6, slow_b
00000134: E55F70EC    ;     ldrb R7, erase_b
00000138: E55F80EE    ;     ldrb R8, step_b
0000013C:             ; 
0000013C: E51F40FC    ;     ldr R4, gridA
00000140: E51F50FC    ;     ldr R5, gridB
00000144:             ; 
00000144:             ;     ;;(width * height) * 2 + 1 + height
00000144: E55F00F9    ;     ldrb R0, width
00000148: E55F10FC    ;     ldrb R1, height
0000014C: E0000190    ;     mul R0, R0, R1
00000150: E1A00080    ;     mov R0, R0, lsl #1
00000154: E2800001    ;     add R0, R0, #1
00000158: E0800001    ;     add R0, R0, R1
0000015C: E1A09000    ;     mov R9, R0      ;;R9 holds the itterations for erase, so it doesn't have to calc it every t
                      ; ime
00000160:             ; 
00000160: E3A0A000    ;     mov R10, #0 ;;This will hold the number of itterations, when it reaches 
00000164:             ; 
00000164:             ; mainloop
00000164: E55F0115    ;     ldrb R0, maxitters ;;run out of registers @-@
00000168: E15A0000    ;     cmp R10, R0
0000016C: E28AA001    ;     add R10, R10, #1
00000170: 1A000004    ;     bne mainloopcont
00000174:             ; 
00000174: E3A0A000    ;     mov R10, #0
00000178:             ; 
00000178: E28F00F7    ;     adrl R0, mainloopittsmsg
0000017C: E2800C1B    ; 
00000180: EF000003    ;     swi 3
00000184:             ; 
00000184: EA000006    ;     b mainloopdostep
00000188:             ; 
00000188:             ; mainloopcont
00000188: E1A00004    ;     mov R0, R4
0000018C: E1A01005    ;     mov R1, R5
00000190: EB0004F4    ;     bl updategrid
00000194:             ; 
00000194: E1A00004    ;     mov R0, R4
00000198: EB0003C9    ;     bl drawgrid
0000019C:             ; 
0000019C: E3580001    ;     cmp R8, #1
000001A0: 1A000009    ;     bne mainloopskipstep
000001A4:             ; 
000001A4:             ; mainloopdostep
000001A4: E1A0000D    ;     mov R0, sp
000001A8: E1A01004    ;     mov R1, R4 ;;give the active grid
000001AC: EB0001F9    ;     bl step
000001B0: E3500000    ;     cmp R0, #0
000001B4: 0A000004    ;     beq mainloopskipstep
000001B8:             ;     
000001B8:             ;     ;;If R0 is #1 then free and go to the main menu
000001B8:             ;     ;;free the current grid
000001B8: E51F0178    ;     ldr R0, gridA
000001BC: EB0005E7    ;     bl free
000001C0: E51F017C    ;     ldr R0, gridB
000001C4: EB0005E5    ;     bl free
000001C8:             ; 
000001C8: EAFFFFBE    ;     b mainmenu
000001CC:             ; 
000001CC:             ; mainloopskipstep
000001CC: E3560001    ;     cmp R6, #1
000001D0: 0B00028E    ;     bleq slow
000001D4:             ; 
000001D4: E3570001    ;     cmp R7, #1
000001D8: 01A00009    ;     moveq R0, R9
000001DC: 0B000283    ;     bleq erase
000001E0:             ; 
000001E0: E1A00004    ;     mov R0, R4
000001E4: E1A04005    ;     mov R4, R5
000001E8: E1A05000    ;     mov R5, R0 ;;SWAP the active and passive
000001EC:             ; 
000001EC: EAFFFFDC    ;     b mainloop
000001F0:             ; 
000001F0:             ; gridFail
000001F0: E28F0F5E    ;     adrl R0, gridfailmsg
000001F4: E2800B07    ; 
000001F8: EF000003    ;     swi 3
000001FC:             ; 
000001FC:             ; mainMallocFail
000001FC: E28F00C1    ;     adrl R0, malloc_panic
00000200: E2800C25    ; 
00000204: EF000003    ;     swi 3
00000208:             ; 
00000208: EA000008    ;     b mainEndEnd
0000020C:             ; 
0000020C:             ; mainEnd
0000020C: E28F001D    ;     adrl R0, mainendmsg
00000210: E2800C19    ; 
00000214: EF000003    ;     swi 3
00000218:             ; 
00000218: E1A0000D    ;     mov R0, sp
0000021C: EB000006    ;     bl mainfree
00000220:             ; 
00000220: E28F0071    ;     adrl R0, printHeap_end_m
00000224: E2800C25    ; 
00000228: EF000003    ;     swi 3
0000022C:             ; 
0000022C: EB000562    ;     bl printHeap
00000230:             ; mainEndEnd
00000230: E24BD018    ;     sub sp, fp, #24 ;;???
00000234: E8BD47F0    ;     pop {R14, R4-R10}
00000238: E1A0F00E    ;     mov R15, R14
0000023C:             ; 
0000023C:             ; mainfree
0000023C:             ; ;;INP in R0 is the saveInfoStruct
0000023C:             ; ;;OUT --
0000023C:             ; ;;free all of the memory that we used i.e. any saved grids, saved grid names, and the arr of sa
                      ; ved grids
0000023C: E92D41F0    ;     push {R14, R4-R8}
00000240:             ; 
00000240: E5905008    ;     ldr R5, [R0, #8] ;;get the current index this is the number of elements in the arr
00000244: E5906000    ;     ldr R6, [R0, #0] ;;This is the array address
00000248: E3A0700C    ;     ldr R7, =sizeofSaveI
0000024C:             ; 
0000024C: E3A04000    ;     mov R4, #0
00000250:             ; mainfreeloop
00000250:             ;     ;;loop through the savedGrids
00000250: E1540005    ;     cmp R4, R5
00000254: 0A000007    ;     beq mainfreelend
00000258:             ; 
00000258: E0286794    ;     mla R8, R4, R7, R6
0000025C: E5980000    ;     ldr R0, [R8, #0] ;;get the address of the grid
00000260: E5988004    ;     ldr R8, [R8, #4] ;;get the address of the char*
00000264:             ; 
00000264: EB0005BD    ;     bl free
00000268:             ; 
00000268: E1A00008    ;     mov R0, R8
0000026C: EB0005BB    ;     bl free
00000270:             ; 
00000270: E2844001    ;     add R4, R4, #1
00000274: EAFFFFF5    ;     b mainfreeloop
00000278:             ; 
00000278:             ; mainfreelend
00000278:             ;     ;;free the array
00000278: E1A00006    ;     mov R0, R6
0000027C: EB0005B7    ;     bl free
00000280:             ; 
00000280:             ; mainfreeend
00000280: E8BD41F0    ;     pop {R14, R4-R8}
00000284: E1A0F00E    ;     mov R15, R14
00000288:             ; 
00000288:             ;     ;;Save info struct
00000288:             ; ;;  -address of grid [4 BYTES]
00000288:             ; ;;  -char* to the name [4 BYTES]
00000288:             ; ;;  -width of grid (1 BYTE)
00000288:             ; ;;  -height of grid (1 BYTE)
00000288:             ; 
00000288:             ; settingsmenu
00000288:             ; ;;https://media.giphy.com/media/jOpLbiGmHR9S0/giphy.gif
00000288:             ; ;;I think there's a limit on the defined string length
00000288: E28F0FDA    ;     adrl R0, s_m1
0000028C: E2800B07    ; 
00000290: EF000003    ;     swi 3
00000294:             ; 
00000294: E28F00ED    ;     adrl R0, s_m2
00000298: E2800C1F    ; 
0000029C: EF000003    ;     swi 3
000002A0:             ;     
000002A0: E28F0045    ;     adrl R0, s_m3
000002A4: E2800A02    ; 
000002A8: EF000003    ;     swi 3
000002AC:             ; 
000002AC: E28F00EA    ;     adrl R0, s_m4
000002B0: E2800A02    ; 
000002B4: EF000003    ;     swi 3
000002B8:             ; 
000002B8:             ; changesetting
000002B8: E28F0039    ;     adrl R0, s_m
000002BC: E2800C21    ; 
000002C0: EF000003    ;     swi 3
000002C4:             ; 
000002C4:             ; changesettingget
000002C4: E3A0000A    ;     ldr R0, =enter
000002C8: E3A01002    ;     mov R1, #2
000002CC: E3A02001    ;     mov R2, #1
000002D0: EB0002BA    ;     bl getstring
000002D4:             ; 
000002D4: E3500000    ;     cmp R0, #0
000002D8: 0A00000E    ;     beq changesettingsmallocfail
000002DC:             ; 
000002DC: E1A05000    ;     mov R5, R0
000002E0:             ; 
000002E0: EB00026C    ;     bl strtoi
000002E4:             ; 
000002E4: E1A04000    ;     mov R4, R0
000002E8: E1A06001    ;     mov R6, R1
000002EC: E1A00005    ;     mov R0, R5
000002F0:             ; 
000002F0: EB00059A    ;     bl free
000002F4:             ; 
000002F4: EB0001A4    ;     bl newline
000002F8:             ; 
000002F8: E3560001    ;     cmp R6, #1
000002FC: 0AFFFF71    ;     beq mainmenu
00000300:             ; 
00000300: E3560000    ;     cmp R6, #0
00000304: 0A000007    ;     beq changesettingscont
00000308:             ; 
00000308:             ; changesettingserr
00000308: E28F0045    ;     adrl R0, s_m_err
0000030C: E2800C21    ; 
00000310: EF000003    ;     swi 3
00000314:             ; 
00000314: EAFFFFEA    ;     b changesettingget
00000318:             ; 
00000318:             ; changesettingsmallocfail
00000318: E28F00A5    ;     adrl R0, malloc_panic
0000031C: E2800B09    ; 
00000320: EF000003    ;     swi 3
00000324:             ; 
00000324: EAFFFF67    ;     b mainmenu
00000328:             ; 
00000328:             ; changesettingscont
00000328: E3540007    ;     cmp R4, #7
0000032C: CAFFFFF5    ;     bgt changesettingserr
00000330:             ; 
00000330:             ;     ;;now we have the index we can print the current value and prompt for a new one then loop b
                      ; ack up to the getsetting
00000330: EA000007    ;     b getjump
00000334:             ; 
00000334: 00000514    ;     jumps defw changestep, changeslow, changeerase, changedims, changerange, changeicons, chang
00000338: 0000052C    ; eitter, changedrawerase
0000033C: 00000544    ; 
00000340: 000005FC    ; 
00000344: 00000630    ; 
00000348: 00000664    ; 
0000034C: 00000718    ; 
00000350: 000007CC    ; 
00000354:             ;     align
00000354:             ; 
00000354:             ; getjump
00000354: E1A04104    ;     mov R4, R4, lsl #2
00000358: E24F002C    ;     adr R0, jumps
0000035C: E0840000    ;     add R0, R4, R0
00000360: E5104000    ;     ldr R4, [R0]
00000364: E12FFF14    ;     bx R4 ;[[flag]]
00000368:             ; 
00000368: E3540000    ;     cmp R4, #0
0000036C: 0A000068    ;     beq changestep
00000370:             ; 
00000370: E3540001    ;     cmp R4, #1
00000374: 0A00006C    ;     beq changeslow
00000378:             ; 
00000378: E3540002    ;     cmp R4, #2
0000037C: 0A000070    ;     beq changeerase
00000380:             ; 
00000380: E3540003    ;     cmp R4, #3
00000384: 0A00009C    ;     beq changedims
00000388:             ; 
00000388: E3540004    ;     cmp R4, #4
0000038C: 0A0000A7    ;     beq changerange
00000390:             ; 
00000390: E3540005    ;     cmp R4, #5
00000394: 0A0000B2    ;     beq changeicons
00000398:             ; 
00000398: E3540006    ;     cmp R4, #6
0000039C: 0A0000DD    ;     beq changeitter
000003A0:             ; 
000003A0: E3540007    ;     cmp R4, #7
000003A4: 0A000108    ;     beq changedrawerase
000003A8:             ; 
000003A8:             ; changearr
000003A8:             ; ;;generic for changedims and change range
000003A8:             ; ;;INP in R0 is addr. for x
000003A8:             ; ;;INP in R1 is addr. for y
000003A8:             ; ;;INP in R2 is boolean for require x < y. 1 for require
000003A8:             ; ;;OUT in R0 is err code non-0 for error
000003A8: E92D41F0    ;     push {R14, R4-R8}
000003AC:             ; 
000003AC: E1A06000    ;     mov R6, R0
000003B0: E1A07001    ;     mov R7, R1
000003B4: E1A08002    ;     mov R8, R2
000003B8:             ; 
000003B8: EB000040    ;     bl printdims
000003BC:             ; 
000003BC:             ; changearrget
000003BC: E28F00C2    ;     adrl R0, currentaskx
000003C0: E2800C21    ; 
000003C4: EF000003    ;     swi 3
000003C8:             ; 
000003C8: EB00001D    ;     bl changearrgetvalidint
000003CC: E1A04000    ;     mov R4, R0
000003D0: E3510000    ;     cmp R1, #0
000003D4: 1A000015    ;     bne changearrmallocerr
000003D8:             ; 
000003D8: EB00016B    ;     bl newline
000003DC:             ; 
000003DC: E28F00B6    ;     adrl R0, currentasky
000003E0: E2800C21    ; 
000003E4: EF000003    ;     swi 3
000003E8:             ; 
000003E8: EB000015    ;     bl changearrgetvalidint
000003EC: E1A05000    ;     mov R5, R0
000003F0:             ; 
000003F0: EB000165    ;     bl newline
000003F4:             ; 
000003F4: E3580001    ;     cmp R8, #1
000003F8: 1A000006    ;     bne changearrset
000003FC:             ; 
000003FC: E1540005    ;     cmp R4, R5
00000400: AA000000    ;     bge changearrsizeerr
00000404:             ; 
00000404: EA000003    ;     b changearrset
00000408:             ; 
00000408:             ; changearrsizeerr
00000408: E28F0005    ;     adrl R0, changearrsizmsg
0000040C: E2800C22    ; 
00000410: EF000003    ;     swi 3
00000414:             ; 
00000414: EAFFFFE8    ;     b changearrget
00000418:             ; 
00000418:             ; changearrset
00000418:             ;     ;;now we have the two valid values so str them back
00000418: E5464000    ;     strb R4, [R6]
0000041C: E5475000    ;     strb R5, [R7] 
00000420:             ; 
00000420: E1A00006    ;     mov R0, R6
00000424: E1A01007    ;     mov R1, R7
00000428:             ; 
00000428: EB000024    ;     bl printdims
0000042C:             ; 
0000042C: EA000001    ;     b changearrend
00000430:             ; 
00000430:             ; changearrmallocerr
00000430: E3A00001    ;     mov R0, #1
00000434: EA000000    ;     b changearrendend
00000438:             ; 
00000438:             ; changearrend
00000438: E3A00000    ;     mov R0, #0
0000043C:             ; 
0000043C:             ; changearrendend
0000043C: E8BD41F0    ;     pop {R14, R4-R8}
00000440: E1A0F00E    ;     mov R15, R14
00000444:             ; 
00000444:             ; ;;And you thought the naming couldn't get worse \(*0*)/
00000444:             ; changearrgetvalidint ;;basically an inner function
00000444:             ; ;;INP --
00000444:             ; ;;OUT in R0 is the gotten value
00000444:             ; ;;OUT in R1 is err code non-0 for fail
00000444: E92D41F0    ;     push {R14, R4-R8}
00000448:             ; changearrgetvalidintget
00000448: E3A0000A    ;     ldr R0, =enter
0000044C: E3A01003    ;     mov R1, #3
00000450: E3A02001    ;     mov R2, #1
00000454: EB000259    ;     bl getstring
00000458:             ; 
00000458: E3500000    ;     cmp R0, #0
0000045C: 0A000011    ;     beq changearrgvmallocerr
00000460:             ; 
00000460: E1A04000    ;     mov R4, R0 ;;save the string to free
00000464:             ; 
00000464: EB00020B    ;     bl strtoi
00000468:             ; 
00000468: E1A05000    ;     mov R5, R0 ;;save the int value
0000046C: E1A06001    ;     mov R6, R1 ;;save err code
00000470:             ; 
00000470: E1A00004    ;     mov R0, R4
00000474: EB000539    ;     bl free
00000478:             ; 
00000478: E3560000    ;     cmp R6, #0
0000047C: 0A000004    ;     beq changearrgetvalidintcont
00000480:             ; 
00000480:             ; changearrgetvalidinterr
00000480: EB000141    ;     bl newline
00000484:             ; 
00000484: E28F0033    ;     adrl R0, changearrverr_m
00000488: E2800C1D    ; 
0000048C: EF000003    ;     swi 3
00000490:             ; 
00000490: EAFFFFEC    ;     b changearrgetvalidintget
00000494:             ; 
00000494:             ; changearrgetvalidintcont
00000494:             ;     ;;we now have an int value, need to do bounds checks
00000494: E3550000    ;     cmp R5, #0
00000498: DAFFFFF8    ;     ble changearrgetvalidinterr
0000049C:             ; 
0000049C: E35500FF    ;     cmp R5, #255
000004A0: CAFFFFF6    ;     bgt changearrgetvalidinterr
000004A4:             ; 
000004A4: EA000001    ;     b changearrgetvalidintend
000004A8:             ; 
000004A8:             ; changearrgvmallocerr
000004A8: E3A01001    ;     mov R1, #1
000004AC:             ; 
000004AC: EA000001    ;     b changearrgvendend
000004B0:             ; 
000004B0:             ; changearrgetvalidintend
000004B0: E1A00005    ;     mov R0, R5
000004B4: E3A01000    ;     mov R1, #0
000004B8:             ; changearrgvendend
000004B8: E8BD41F0    ;     pop {R14, R4-R8}
000004BC: E1A0F00E    ;     mov R15, R14
000004C0:             ; 
000004C0:             ; printdims
000004C0:             ; ;;INP in R0 is addr. for x
000004C0:             ; ;;INP in R1 is addr. for y
000004C0:             ; ;;(_, _)
000004C0:             ;     
000004C0: E1A02000    ;     mov R2, R0
000004C4: E1A03001    ;     mov R3, R1
000004C8:             ; 
000004C8: E28F00C1    ;     adrl R0, currentDims
000004CC: E2800C1F    ; 
000004D0: EF000003    ;     swi 3
000004D4:             ; 
000004D4: E28F00E2    ;     adrl R0, bracket_open
000004D8: E2800C1F    ; 
000004DC: EF000003    ;     swi 3
000004E0:             ; 
000004E0: E5520000    ;     ldrb R0, [R2]
000004E4: EF000004    ;     swi 4
000004E8:             ; 
000004E8: E28F0EFD    ;     adrl R0, comma_space
000004EC: E2800A01    ; 
000004F0: EF000003    ;     swi 3
000004F4:             ; 
000004F4: E5530000    ;     ldrb R0, [R3]
000004F8: EF000004    ;     swi 4
000004FC:             ; 
000004FC: E28F00BF    ;     adrl R0, bracket_close
00000500: E2800C1F    ; 
00000504: EF000003    ;     swi 3
00000508:             ; 
00000508: E3A0000A    ;     ldr R0, =nl
0000050C: EF000000    ;     swi 0
00000510:             ; 
00000510: E1A0F00E    ;     mov R15, R14
00000514:             ; 
00000514:             ; changestep
00000514: E24F00BE    ;     adrl R0, step_b_d
00000518: E2400B01    ; 
0000051C: E28F1FD9    ;     adrl R1, currentstep
00000520: E2811B07    ; 
00000524:             ; 
00000524: EB00000B    ;     bl changebool
00000528:             ; 
00000528: EAFFFF62    ;     b changesetting
0000052C:             ; 
0000052C:             ; changeslow
0000052C: E24F00D7    ;     adrl R0, slow_b_d
00000530: E2400B01    ; 
00000534: E28F1039    ;     adrl R1, currentslow
00000538: E2811C1F    ; 
0000053C:             ; 
0000053C: EB000005    ;     bl changebool
00000540:             ; 
00000540: EAFFFF5C    ;     b changesetting
00000544:             ; 
00000544:             ; changeerase
00000544: E24F0E4F    ;     adrl R0, erase_b_d
00000548: E28F102E    ;     adrl R1, currenterase
0000054C: E2811C1F    ; 
00000550:             ; 
00000550: EB000000    ;     bl changebool
00000554:             ; 
00000554: EAFFFF57    ;     b changesetting
00000558:             ; 
00000558:             ; changebool
00000558:             ; ;;INP in R0 is the address of ___b_d
00000558:             ; ;;INP in R1 is the address of the printing name
00000558:             ; ;;OUT --
00000558: E92D41F0    ;     push {R14, R4-R8}
0000055C:             ; 
0000055C: E1A04000    ;     mov R4, R0
00000560: E1A05001    ;     mov R5, R1
00000564:             ; 
00000564: E1A00001    ;     mov R0, R1
00000568: EF000003    ;     swi 3
0000056C:             ; 
0000056C: E5540000    ;     ldrb R0, [R4]
00000570: E3500001    ;     cmp R0, #1
00000574: 128F0E2A    ;     adrlne R0, off_msg
00000578: 12800A02    ; 
0000057C: 028F0095    ;     adrleq R0, on_msg
00000580: 02800C22    ; 
00000584: EF000003    ;     swi 3
00000588:             ; 
00000588: EB0000FF    ;     bl newline
0000058C:             ; 
0000058C: E28F002C    ;     adrl R0, currentasknew_B
00000590: E2800A02    ; 
00000594: EF000003    ;     swi 3
00000598:             ; 
00000598:             ; changebool_cont
00000598: EF000001    ;     swi 1
0000059C:             ; 
0000059C: E2400030    ;     sub R0, R0, #48
000005A0: E3500001    ;     cmp R0, #1
000005A4: 0A000006    ;     beq changebool_set
000005A8: E3500000    ;     cmp R0, #0
000005AC: 0A000004    ;     beq changebool_set
000005B0:             ; 
000005B0: EB0000F5    ;     bl newline
000005B4:             ; 
000005B4: E28F001F    ;     adrl R0, currentasknew_E
000005B8: E2800A02    ; 
000005BC: EF000003    ;     swi 3
000005C0:             ; 
000005C0: EAFFFFF4    ;     b changebool_cont
000005C4:             ; 
000005C4:             ; changebool_set
000005C4: E5440000    ;     strb R0, [R4]
000005C8:             ; 
000005C8: EB0000EF    ;     bl newline
000005CC:             ; 
000005CC: E1A00005    ;     mov R0, R5
000005D0: EF000003    ;     swi 3
000005D4:             ; 
000005D4: E5540000    ;     ldrb R0, [R4]
000005D8: E3500001    ;     cmp R0, #1
000005DC: 128F0F8E    ;     adrlne R0, off_msg
000005E0: 12800A02    ; 
000005E4: 028F002D    ;     adrleq R0, on_msg
000005E8: 02800C22    ; 
000005EC: EF000003    ;     swi 3
000005F0:             ; 
000005F0: EB0000E5    ;     bl newline
000005F4:             ; 
000005F4:             ; changeboolend
000005F4: E8BD41F0    ;     pop {R14, R4-R8}
000005F8: E1A0F00E    ;     mov R15, R14
000005FC:             ; 
000005FC:             ; changedims
000005FC:             ; ;;INP in R0 is addr. for x
000005FC:             ; ;;INP in R1 is addr. for y
000005FC:             ; ;;INP in R2 is boolean for require x < y. 1 for require
000005FC: E24F00A5    ;     adrl R0, width_d
00000600: E2400C05    ; 
00000604: E24F1F6B    ;     adrl R1, height_d
00000608: E2411B01    ; 
0000060C: E3A02000    ;     mov R2, #0
00000610: EBFFFF64    ;     bl changearr
00000614:             ; 
00000614: E3500000    ;     cmp R0, #0
00000618: 0A000003    ;     beq changedimscont
0000061C:             ; 
0000061C: E28F00A1    ;     adrl R0, malloc_panic
00000620: E2800C21    ; 
00000624: EF000003    ;     swi 3
00000628:             ; 
00000628: EAFFFEA6    ;     b mainmenu
0000062C:             ; 
0000062C:             ; changedimscont
0000062C:             ; 
0000062C: EAFFFF21    ;     b changesetting
00000630:             ; 
00000630:             ; changerange
00000630: E24F00E3    ;     adrl R0, range_min
00000634: E2400C05    ; 
00000638: E24F10EA    ;     adrl R1, range_max
0000063C: E2411C05    ; 
00000640: E3A02001    ;     mov R2, #1
00000644: EBFFFF57    ;     bl changearr
00000648:             ; 
00000648: E3500000    ;     cmp R0, #0
0000064C: 0A000003    ;     beq changerangecont
00000650:             ; 
00000650: E28F006D    ;     adrl R0, malloc_panic
00000654: E2800C21    ; 
00000658: EF000003    ;     swi 3
0000065C:             ; 
0000065C: EAFFFE99    ;     b mainmenu
00000660:             ; 
00000660:             ; changerangecont
00000660:             ; 
00000660: EAFFFF14    ;     b changesetting
00000664:             ; 
00000664:             ; changeicons
00000664:             ; ;;print the current icons, ask for 3 characters in sequence for alive/dead/ptr
00000664: EB000015    ;     bl printicons
00000668:             ; 
00000668: E28F006A    ;     adrl R0, currenticons_a
0000066C: E2800C1E    ; 
00000670: EF000003    ;     swi 3
00000674:             ; 
00000674: E3A00000    ;     mov R0, #0
00000678: E3A01003    ;     mov R1, #3
0000067C: E3A02001    ;     mov R2, #1
00000680: EB0001CE    ;     bl getstring
00000684:             ; 
00000684: E3500000    ;     cmp R0, #0
00000688: 0A000008    ;     beq changeiconsmallerr
0000068C:             ; 
0000068C: E5D01000    ;     ldrb R1, [R0, #0]
00000690: E5D02001    ;     ldrb R2, [R0, #1]
00000694: E5D03002    ;     ldrb R3, [R0, #2]
00000698:             ; 
00000698: E54F1647    ;     strb R1, alive_c
0000069C: E54F264A    ;     strb R2, dead_c
000006A0: E54F364D    ;     strb R3, ptr_c
000006A4:             ; 
000006A4: EB0000B8    ;     bl newline
000006A8:             ; 
000006A8: EB000004    ;     bl printicons
000006AC:             ; 
000006AC: EAFFFF01    ;     b changesetting
000006B0:             ; 
000006B0:             ; changeiconsmallerr
000006B0: E28F0FA6    ;     adrl R0, getstringerr_m
000006B4: E2800B07    ; 
000006B8: EF000003    ;     swi 3
000006BC:             ; 
000006BC: EAFFFEFD    ;     b changesetting
000006C0:             ; 
000006C0:             ; printicons
000006C0:             ; ;;INP --
000006C0:             ; ;;OUT --
000006C0: E28F00FD    ;     adrl R0, currenticons_1
000006C4: E2800C1D    ; 
000006C8: EF000003    ;     swi 3
000006CC:             ; 
000006CC: E55F067B    ;     ldrb R0, alive_c
000006D0: EF000000    ;     swi 0
000006D4:             ; 
000006D4: E3A0000A    ;     ldr R0, =nl
000006D8: EF000000    ;     swi 0
000006DC:             ; 
000006DC: E28F00E9    ;     adrl R0, currenticons_2
000006E0: E2800C1D    ; 
000006E4: EF000003    ;     swi 3
000006E8:             ; 
000006E8: E55F0696    ;     ldrb R0, dead_c
000006EC: EF000000    ;     swi 0
000006F0:             ; 
000006F0: E3A0000A    ;     ldr R0, =nl
000006F4: EF000000    ;     swi 0
000006F8:             ; 
000006F8: E28F0F75    ;     adrl R0, currenticons_3
000006FC: E2800B07    ; 
00000700: EF000003    ;     swi 3
00000704:             ; 
00000704: E55F06B1    ;     ldrb R0, ptr_c
00000708: EF000000    ;     swi 0
0000070C:             ; 
0000070C: E3A0000A    ;     ldr R0, =nl
00000710: EF000000    ;     swi 0
00000714:             ; 
00000714:             ; printiconsend
00000714: E1A0F00E    ;     mov R15, R14
00000718:             ; 
00000718:             ; changeitter
00000718: E28F0D76    ;     adrl R0, currentItters
0000071C: E2800000    ; 
00000720: EF000003    ;     swi 3
00000724:             ; 
00000724: E55F06D5    ;     ldrb R0, maxitters
00000728: EF000004    ;     swi 4
0000072C:             ; 
0000072C: EB000096    ;     bl newline
00000730:             ; 
00000730: E28F0EF1    ;     adrl R0, getitters_m
00000734: E2800A01    ; 
00000738: EF000003    ;     swi 3
0000073C:             ; 
0000073C:             ; changeitterget
0000073C: E3A0000A    ;     ldr R0, =enter
00000740: E3E01000    ;     mov R1, #-1
00000744: E3A02001    ;     mov R2, #1
00000748: EB00019C    ;     bl getstring
0000074C:             ; 
0000074C: E3500000    ;     cmp R0, #0
00000750: 1A000003    ;     bne changeittergetcont
00000754:             ; 
00000754: E28F0069    ;     adrl R0, malloc_panic
00000758: E2800A02    ; 
0000075C: EF000003    ;     swi 3
00000760:             ; 
00000760: EAFFFE58    ;     b mainmenu 
00000764:             ; 
00000764:             ; changeittergetcont
00000764:             ; 
00000764: E1A04000    ;     mov R4, R0
00000768:             ; 
00000768: EB00014A    ;     bl strtoi
0000076C: E1A03000    ;     mov R3, R0
00000770:             ; 
00000770: E1A05000    ;     mov R5, R0
00000774: E1A06001    ;     mov R6, R1
00000778:             ; 
00000778: E1A00004    ;     mov R0, R4
0000077C: EB000477    ;     bl free
00000780:             ; 
00000780: EB000081    ;     bl newline
00000784:             ; 
00000784: E3560000    ;     cmp R6, #0
00000788: 1A000003    ;     bne changeittererr
0000078C:             ; 
0000078C: E24F003D    ;     adrl R0, maxitters
00000790: E2400C07    ; 
00000794: E5405000    ;     strb R5, [R0]
00000798:             ; 
00000798: EA000004    ;     b changeitterend
0000079C:             ; 
0000079C:             ; changeittererr
0000079C: EB00007A    ;     bl newline
000007A0:             ; 
000007A0: E28F007F    ;     adrl R0, changeittere_m
000007A4: E2800C1E    ; 
000007A8: EF000003    ;     swi 3
000007AC: EAFFFFE2    ;     b changeitterget
000007B0:             ; changeitterend
000007B0: E28F00E8    ;     adrl R0, currentItters
000007B4: E2800B07    ; 
000007B8: EF000003    ;     swi 3
000007BC:             ; 
000007BC: E55F076D    ;     ldrb R0, maxitters
000007C0: EF000004    ;     swi 4
000007C4:             ; 
000007C4: EB000070    ;     bl newline
000007C8:             ; 
000007C8: EAFFFEBA    ;     b changesetting
000007CC:             ; 
000007CC:             ; changedrawerase
000007CC: E24F0FDF    ;     adrl R0, drawerase
000007D0: E2400B01    ; 
000007D4: E28F10CD    ;     adrl R1, currentdraweras
000007D8: E2811B07    ; 
000007DC: EBFFFF5D    ;     bl changebool
000007E0:             ; 
000007E0: EAFFFEB4    ;     b changesetting
000007E4:             ; 
000007E4:             ; changedraweraseend
000007E4: EAFFFEB3    ;     b changesetting
000007E8:             ; 
000007E8:             ; newboard
000007E8: E3A00001    ;     mov R0, #1;;should get dims
000007EC: EB000295    ;     bl setupOptions
000007F0:             ; 
000007F0: EB0001B9    ;     bl setupGrid
000007F4:             ; 
000007F4: E3500000    ;     cmp R0, #0
000007F8: 1AFFFE7F    ;     bne mainMallocFail
000007FC:             ;     
000007FC: E51F47BC    ;     ldr R4, gridA
00000800: E51F57BC    ;     ldr R5, gridB
00000804:             ; 
00000804: E3540000    ;     cmp R4, #0
00000808: 0AFFFE78    ;     beq gridFail
0000080C: E3550000    ;     cmp R5, #0
00000810: 0AFFFE76    ;     beq gridFail
00000814:             ; 
00000814: EAFFFE45    ;     b mainloopstart
00000818:             ; 
00000818:             ; loadboard
00000818:             ; ;;INP in R0 is the ptr to the SaveInfoHeader struct i.e. ptr to arr, current pos, max size
00000818:             ; ;;RET in R0 0 for success in which case go to main loop, n/0 for err in which case return to ma
                      ; in menu
00000818:             ; ;;display the saved grids
00000818:             ; ;;ask for the index
00000818:             ; ;;load the grids with the saved info
00000818:             ; ;;ask the user for the settings
00000818: E1A04000    ;     mov R4, R0 ;;save the struct ptr
0000081C:             ; 
0000081C:             ;     ;;pass ptr to listgrids
0000081C: EB000086    ;     bl listGrids
00000820:             ; 
00000820: E5940008    ;     ldr R0, [R4, #8] ;;get the current position
00000824: E3500000    ;     cmp R0, #0
00000828: 0A000055    ;     beq loadboardempty
0000082C:             ; 
0000082C:             ; loadboardaskindex
0000082C:             ;     ;;The grid has now been printed out we need to get the index to load
0000082C: E28F002D    ;     adrl R0, loadboardaski
00000830: E2800B06    ; 
00000834: EF000003    ;     swi 3
00000838:             ; 
00000838: E3A0000A    ;     ldr R0, =enter
0000083C: E3E01000    ;     mov R1, #-1
00000840: E3A02001    ;     mov R2, #1
00000844: EB00015D    ;     bl getstring
00000848:             ; 
00000848: E3500000    ;     cmp R0, #0
0000084C: 1A000003    ;     bne loadboardaskindexcont
00000850:             ; 
00000850: E28F006D    ;     adrl R0, malloc_panic
00000854: E2800C1F    ; 
00000858: EF000003    ;     swi 3
0000085C:             ; 
0000085C: EAFFFE19    ;     b mainmenu 
00000860:             ; 
00000860:             ; loadboardaskindexcont
00000860:             ; 
00000860: E1A05000    ;     mov R5, R0
00000864:             ; 
00000864: EB000048    ;     bl newline
00000868:             ; 
00000868: E1A00005    ;     mov R0, R5
0000086C: EB000109    ;     bl strtoi
00000870: E1A06000    ;     mov R6, R0
00000874: E1A07001    ;     mov R7, R1
00000878:             ;     ;;ERR codes
00000878:             ;     ;;  0 is success
00000878:             ;     ;;  1 is attempted -ve
00000878:             ;     ;;  2 is use of non-numeric characters
00000878:             ;     ;;  3 is value out of range of integer
00000878:             ;     ;;  4 is null string given
00000878:             ; 
00000878: E1A00005    ;     mov R0, R5
0000087C: EB000437    ;     bl free
00000880:             ; 
00000880: E1A00006    ;     mov R0, R6
00000884: E1A01007    ;     mov R1, R7
00000888:             ; 
00000888: E3510001    ;     cmp R1, #1
0000088C: 0A000039    ;     beq loadboardret
00000890:             ; 
00000890: E3510000    ;     cmp R1, #0
00000894: 0A000003    ;     beq loadboardindex
00000898:             ; 
00000898: E28F004B    ;     adrl R0, loadboardifail
0000089C: E2800B06    ; 
000008A0: EF000003    ;     swi 3
000008A4:             ; 
000008A4: EAFFFFE0    ;     b loadboardaskindex
000008A8:             ; 
000008A8:             ; loadboardindex
000008A8:             ; ;;we now have an index lets check if its in range and then load the board
000008A8:             ;     ;;should be +ve so don't need to check < 0
000008A8: E5941008    ;     ldr R1, [R4, #8] ;;get the current position, this is where things get added so index < curr
                      ; entposition
000008AC: E1500001    ;     cmp R0, R1
000008B0: BA000003    ;     blt loadboardmain
000008B4:             ; 
000008B4: E28F0052    ;     adrl R0, loadboardirerr
000008B8: E2800B06    ; 
000008BC: EF000003    ;     swi 3
000008C0: EAFFFFD9    ;     b loadboardaskindex
000008C4:             ; 
000008C4:             ; loadboardmain
000008C4:             ; ;;now we know that the index is valid we can load the grid
000008C4:             ; ;;
000008C4:             ; ;;need to free current grid
000008C4:             ; ;;need to create a copy of the snapshot and set gridA to it 
000008C4:             ; ;;return to main menu
000008C4: E5941000    ;     ldr R1, [R4, #0] ;;get the array of grids
000008C8: E3A0200C    ;     ldr R2, =sizeofSaveI
000008CC: E0201290    ;     mla R0, R0, R2, R1 ;;R0 = index * sizeofSaveI + grid.addr
000008D0:             ; 
000008D0: E5905000    ;     ldr R5, [R0, #0] ;;get the address of that grid
000008D4: E5D06008    ;     ldrb R6, [R0, #8] ;;get the width
000008D8: E5D07009    ;     ldrb R7, [R0, #9] ;;get the height
000008DC:             ; 
000008DC: E0000796    ;     mul R0, R6, R7 ;;get the required size
000008E0: E1A09000    ;     mov R9, R0 ;;save the number of bytes
000008E4:             ; 
000008E4: EB000388    ;     bl malloc
000008E8:             ; 
000008E8: E3500000    ;     cmp R0, #0
000008EC: 0A00001D    ;     beq loadboardmallocfail
000008F0:             ; 
000008F0: E1A08000    ;     mov R8, R0 ;;save the new grid arr
000008F4:             ; 
000008F4:             ;     ;;need to copy the saved grid into the new grid
000008F4:             ; 
000008F4: E1A00005    ;     mov R0, R5  ;;src is the saved grid
000008F8: E1A01008    ;     mov R1, R8  ;;dst is the new grid
000008FC: E1A02009    ;     mov R2, R9  ;;bytes is in R9 already from width and height
00000900: EB00010D    ;     bl memcpy
00000904:             ; 
00000904: E51F08C4    ;     ldr R0, gridA
00000908: EB000414    ;     bl free
0000090C:             ; 
0000090C: E50F88CC    ;     str R8, gridA
00000910:             ; 
00000910:             ;     ;;also need to check if the old gridB is big enough
00000910: E55F88C5    ;     ldrb R8, width
00000914: E55FA8C8    ;     ldrb R10, height
00000918: E1560008    ;     cmp R6, R8
0000091C: 1A000002    ;     bne loadboardmallocB
00000920: E157000A    ;     cmp R7, R10
00000924: 1A000000    ;     bne loadboardmallocB
00000928:             ; 
00000928: EA000006    ;     b loadboardskipB
0000092C:             ; 
0000092C:             ; loadboardmallocB
0000092C: E51F08E8    ;     ldr R0, gridB
00000930: EB00040A    ;     bl free
00000934:             ; 
00000934: E1A00009    ;     mov R0, R9
00000938: EB000373    ;     bl malloc
0000093C:             ; 
0000093C: E3500000    ;     cmp R0, #0
00000940: 0A000008    ;     beq loadboardmallocfail
00000944:             ; 
00000944: E50F0900    ;     str R0, gridB
00000948:             ; 
00000948:             ; loadboardskipB
00000948: E54F68FD    ;     strb R6, width
0000094C: E54F7900    ;     strb R7, height ;;overwrite the active grid information
00000950:             ; 
00000950: E28F0013    ;     adrl R0, loadboardsucmsg
00000954: E2800B06    ; 
00000958: EF000003    ;     swi 3
0000095C:             ; 
0000095C: E3A00000    ;     mov R0, #0 ;;skip asking dims as they've been loaded
00000960: EB000238    ;     bl setupOptions
00000964:             ; 
00000964: EA000007    ;     b loadboardsucc
00000968:             ; 
00000968:             ; loadboardmallocfail
00000968: E28F00BB    ;     adrl R0, loadboardmlcerr
0000096C: E2800C17    ; 
00000970: EF000003    ;     swi 3
00000974:             ; 
00000974: EA000002    ;     b loadboarderr
00000978:             ; 
00000978:             ; loadboardret
00000978: E28F0053    ;     adrl R0, loadboardretmsg
0000097C: E2800C17    ; 
00000980: EF000003    ;     swi 3
00000984:             ; 
00000984:             ; loadboardempty
00000984:             ; loadboarderr
00000984: EAFFFDCF    ;     b mainmenu
00000988:             ; loadboardsucc
00000988: EAFFFDE8    ;     b mainloopstart
0000098C:             ; 
0000098C:             ; newline
0000098C: E3A0000A    ;     ldr R0, =nl
00000990: EF000000    ;     swi 0
00000994:             ; 
00000994: E1A0F00E    ;     mov R15, R14
00000998:             ; 
00000998:             ; step
00000998:             ; ;;INP in R0 is the gridHeaderStruct ptr [[todo]]
00000998:             ; ;;INP in R1 is the active grid ptr
00000998:             ; ;;OUT in R0 is 1 if should return to main menu, else 0.
00000998:             ; 
00000998:             ; ;;get user input
00000998:             ; ;;if q -> jump to main menu
00000998:             ; ;;if s -> ask for name, bl saveGrid with name
00000998: E92D41F0    ;     push {R14, R4-R8}
0000099C: E1A04000    ;     mov R4, R0 ;;save the struct 
000009A0: E1A05001    ;     mov R5, R1
000009A4:             ; 
000009A4: EF000001    ;     swi 1
000009A8:             ; 
000009A8: E3500071    ;     cmp R0, #'q'
000009AC: 0A00001D    ;     beq stependfail ;;bad name, shame I can't change it eh
000009B0:             ; 
000009B0: E3500073    ;     cmp R0, #'s'
000009B4: 1A00001D    ;     bne stependsucc
000009B8:             ; 
000009B8: E28F008B    ;     adrl R0, askname
000009BC: E2800C12    ; 
000009C0: EF000003    ;     swi 3
000009C4:             ; 
000009C4: E3A0000A    ;     ldr R0, =enter
000009C8: E3E01000    ;     mov R1, #-1
000009CC: E3A02001    ;     mov R2, #1
000009D0: EB0000FA    ;     bl getstring
000009D4:             ; 
000009D4: E3500000    ;     cmp R0, #0
000009D8: 1A000003    ;     bne stepcont
000009DC:             ; 
000009DC: E28F00E1    ;     adrl R0, malloc_panic
000009E0: E2800C1D    ; 
000009E4: EF000003    ;     swi 3
000009E8:             ; 
000009E8: EA00000E    ;     b stependfail
000009EC:             ; 
000009EC:             ; stepcont
000009EC:             ; 
000009EC: E1A01000    ;     mov R1, R0 ;;char* name
000009F0: E1A00004    ;     mov R0, R4 ;;gridinfo* 
000009F4: E1A02005    ;     mov R2, R5 ;;active grid
000009F8: EB000046    ;     bl saveGrid
000009FC:             ; 
000009FC: EBFFFFE2    ;     bl newline
00000A00:             ; 
00000A00: E28F0F86    ;     adrl R0, savedchoice
00000A04: E2800A01    ; 
00000A08: EF000003    ;     swi 3
00000A0C:             ; 
00000A0C: EF000001    ;     swi 1
00000A10: EF000000    ;     swi 0
00000A14: E3500059    ;     cmp R0, #'Y'
00000A18:             ; 
00000A18: E3A0000A    ;     ldr R0, =nl
00000A1C: EF000000    ;     swi 0
00000A20:             ; 
00000A20: 0A000000    ;     beq stependfail
00000A24: EA000001    ;     b stependsucc
00000A28:             ; 
00000A28:             ; stependfail
00000A28: E3A00001    ;     mov R0, #1
00000A2C: EA000000    ;     b stepend
00000A30:             ; 
00000A30:             ; stependsucc
00000A30: E3A00000    ;     mov R0, #0
00000A34:             ; 
00000A34:             ; stepend
00000A34: E8BD41F0    ;     pop {R14, R4-R8}
00000A38: E1A0F00E    ;     mov R15, R14
00000A3C:             ; 
00000A3C:             ; listGrids
00000A3C:             ; ;;INP in R0 is the ptr to the gridInfo struct
00000A3C:             ; ;;RET --
00000A3C:             ; ;;Grid info struct
00000A3C:             ; ;;  - SaveInfoStruct* array
00000A3C:             ; ;;  - int max size of arr
00000A3C:             ; ;;  - int current position in arr
00000A3C:             ; 
00000A3C:             ; ;;loops through the array of grids (if any) printing their names, and dims, ask to print grid
00000A3C: E92D47F0    ;     push {R14, R4-R10}
00000A40:             ; 
00000A40: E5904000    ;     ldr R4, [R0, #0] ;;get the array ptr
00000A44: E5905008    ;     ldr R5, [R0, #8] ;;current position
00000A48:             ; 
00000A48: E3550000    ;     cmp R5, #0
00000A4C: 0A00002C    ;     beq listGridsEmpty
00000A50:             ; 
00000A50:             ; ;;if current position == 1: print("There are no saved grids")
00000A50:             ; ;;for i from 0 to current position
00000A50:             ; ;;  getname(4)
00000A50:             ; ;;  getwidth(8)
00000A50:             ; ;;  getheight(9)
00000A50:             ; ;;  print("There is a grid called %s with dims (%d, %d)")
00000A50: E3A01000    ;     mov R1, #0 ;;i
00000A54: E3A0200C    ;     ldr R2, =sizeofSaveI
00000A58:             ; 
00000A58: E28F0029    ;     adrl R0, listgridmsg
00000A5C: E2800C17    ; 
00000A60: EF000003    ;     swi 3
00000A64:             ; 
00000A64: E28F0D5D    ;     adrl R0, cutoff
00000A68: E2800000    ; 
00000A6C: EF000003    ;     swi 3
00000A70:             ; 
00000A70:             ; listGridsLoop
00000A70: E1510005    ;     cmp R1, R5
00000A74: 0A000025    ;     beq listGridsLend
00000A78:             ; 
00000A78: E0234291    ;     mla R3, R1, R2, R4 ;;R3 = i * sizeof(saveInfo) + array
00000A7C: E5936004    ;     ldr R6, [R3, #4] ;;load the name ptr
00000A80: E5D37008    ;     ldrb R7, [R3, #8] ;;load the width
00000A84: E5D38009    ;     ldrb R8, [R3, #9] ;;load the height
00000A88:             ; 
00000A88: E28F00AD    ;     adrl R0, gridloadpindex
00000A8C: E2800C15    ; 
00000A90: EF000003    ;     swi 3
00000A94:             ; 
00000A94: E3A0003A    ;     mov R0, #':'
00000A98: EF000000    ;     swi 0
00000A9C:             ; 
00000A9C: E1A00001    ;     mov R0, R1
00000AA0: EF000004    ;     swi 4
00000AA4:             ; 
00000AA4: EBFFFFB8    ;     bl newline
00000AA8:             ; 
00000AA8: E28F0096    ;     adrl R0, gridloadpname
00000AAC: E2800C15    ; 
00000AB0: EF000003    ;     swi 3
00000AB4:             ; 
00000AB4: E1A00006    ;     mov R0, R6
00000AB8: EF000003    ;     swi 3
00000ABC:             ; 
00000ABC: EBFFFFB2    ;     bl newline
00000AC0:             ; 
00000AC0: E28F0086    ;     adrl R0, gridloadpwidth
00000AC4: E2800C15    ; 
00000AC8: EF000003    ;     swi 3
00000ACC:             ; 
00000ACC: E1A00007    ;     mov R0, R7
00000AD0: EF000004    ;     swi 4
00000AD4:             ; 
00000AD4: EBFFFFAC    ;     bl newline
00000AD8:             ; 
00000AD8: E28F0077    ;     adrl R0, gridloadpheight
00000ADC: E2800C15    ; 
00000AE0: EF000003    ;     swi 3
00000AE4:             ; 
00000AE4: E1A00008    ;     mov R0, R8
00000AE8: EF000004    ;     swi 4
00000AEC:             ; 
00000AEC: EBFFFFA6    ;     bl newline
00000AF0:             ; 
00000AF0:             ;     ;;[[Prob]  Printing the grid uses the stored width and height, I could change it to use a p
                      ; assed in
00000AF0:             ;     ;;             version but do the other areas have enough registers to cope? probably not.
00000AF0:             ;     ;;             Would have to swap the width and height with the loaded versions - I really 
                      ; don't like this idea
00000AF0:             ; 
00000AF0: E2811001    ;     add R1, R1, #1
00000AF4:             ; 
00000AF4: E28F0E6B    ;     adrl R0, cutoff
00000AF8: E2800A01    ; 
00000AFC: EF000003    ;     swi 3
00000B00:             ; 
00000B00: EAFFFFDA    ;     b listGridsLoop
00000B04:             ; 
00000B04:             ; listGridsEmpty
00000B04: E28F00D6    ;     adrl R0, gridloadempty
00000B08: E2800B05    ; 
00000B0C: EF000003    ;     swi 3
00000B10:             ; 
00000B10:             ; listGridsLend
00000B10:             ; listGridsEnd
00000B10: E8BD47F0    ;     pop {R14, R4-R10}
00000B14: E1A0F00E    ;     mov R15, R14
00000B18:             ; 
00000B18:             ; saveGrid
00000B18:             ; ;;INP in R0 is the ptr gridInfo struct (in the main's stackframe)
00000B18:             ; ;;INP in R1 is the char* to the name
00000B18:             ; ;;INP in R2 is the active grid
00000B18:             ; ;;RET in R0 is an errcode or 0 for success. 1 for malloc error
00000B18:             ; 
00000B18:             ; ;;if reachedCap -> realloc + inc maxsize
00000B18:             ; ;;copy the current grid to another loc and place info in gridArr
00000B18:             ; ;;inc current index
00000B18: E92D47F0    ;     push {R14, R4-R10}
00000B1C:             ; 
00000B1C: E1A04000    ;     mov R4, R0
00000B20: E1A05001    ;     mov R5, R1
00000B24: E1A0A002    ;     mov R10, R2
00000B28:             ; 
00000B28: E5942008    ;     ldr R2, [R4, #8] ;;get the current index
00000B2C: E5943004    ;     ldr R3, [R4, #4] ;;get the maxsize
00000B30:             ; 
00000B30: E1520003    ;     cmp R2, R3
00000B34: 0A000000    ;     beq saveGridResize
00000B38: EA00000D    ;     b saveGridAdd
00000B3C:             ; 
00000B3C:             ; saveGridResize
00000B3C:             ;     ;;maxsize in R3
00000B3C: E1A06083    ;     mov R6, R3, lsl #1 ;;double the capacity
00000B40: E3A0700C    ;     ldr R7, =sizeofSaveI
00000B44: E0070796    ;     mul R7, R6, R7 ;;get the number of bytes
00000B48:             ; 
00000B48: E1A00007    ;     mov R0, R7
00000B4C: EB0002EE    ;     bl malloc ;;get the new grid
00000B50:             ; 
00000B50: E3500000    ;     cmp R0, #0 ;;if malloc failed then don't do any saving
00000B54: 0A000020    ;     beq saveGridFailMalloc
00000B58:             ; 
00000B58: E1A01000    ;     mov R1, R0
00000B5C: E1A08000    ;     mov R8, R0 ;;save of ptr
00000B60:             ; 
00000B60:             ;     ;;now that we have the new grid we need to memcpy the bytes from the original into the new 
                      ; one
00000B60: E5940000    ;     ldr R0, [R4, #0] ;;get the array ptr
00000B64:             ;     ;;R1 has the malloced address
00000B64: E1A020A7    ;     mov R2, R7, lsr #1 ;;not great, this is the double cap halfed, means no mul again
00000B68: EB000073    ;     bl memcpy
00000B6C:             ; 
00000B6C:             ;     ;;assume success because I didn't give memcpy an err code :)
00000B6C:             ;     ;;need to store the new size and arr ptr in the gridinfo struct
00000B6C:             ; 
00000B6C: E5848000    ;     str R8, [R4, #0]
00000B70: E5846004    ;     str R6, [R4, #4]
00000B74:             ; 
00000B74:             ; saveGridAdd
00000B74:             ; ;;add the current grid to the array
00000B74: E5946000    ;     ldr R6, [R4, #0] ;;get the arr ptr
00000B78: E5947008    ;     ldr R7, [R4, #8] ;;get current index
00000B7C:             ; 
00000B7C:             ;     ;;ptr is 4 bytes
00000B7C:             ;     ;;we're adding the struct of 
00000B7C:             ;     ;;  |-grid*     (ptr)
00000B7C:             ;     ;;  |-char*     (ptr)
00000B7C:             ;     ;;  |-width     (byte)
00000B7C:             ;     ;;  `-height    (byte)
00000B7C:             ; 
00000B7C:             ;     ;;we need to copy the current array
00000B7C: E55F8B31    ;     ldrb R8, width
00000B80: E55F9B34    ;     ldrb R9, height
00000B84: E0080998    ;     mul R8, R8, R9 ;;get the number of bytes in grid
00000B88:             ; 
00000B88: E1A00008    ;     mov R0, R8
00000B8C: EB0002DE    ;     bl malloc ;;allocate a new grid
00000B90:             ; 
00000B90: E3500000    ;     cmp R0, #0
00000B94: 0A000010    ;     beq saveGridFailMalloc
00000B98:             ; 
00000B98: E92D0100    ;     push {R8} ;; :(
00000B9C:             ; 
00000B9C: E3A0800C    ;     ldr R8, =sizeofSaveI
00000BA0: E0266897    ;     mla R6, R7, R8, R6 ;;currentindex * sizeof(Gridinfo) + arrptr
00000BA4: E5860000    ;     str R0, [R6, #0] ;;store the grid*
00000BA8: E5865004    ;     str R5, [R6, #4] ;;store the char*
00000BAC: E55F8B61    ;     ldrb R8, width
00000BB0: E5C68008    ;     strb R8, [R6, #8]
00000BB4: E5C69009    ;     strb R9, [R6, #9]
00000BB8:             ; 
00000BB8: E8BD0100    ;     pop {R8}
00000BBC:             ; 
00000BBC: E1A01000    ;     mov R1, R0 ;;dst
00000BC0: E1A0000A    ;     mov R0, R10 ;;src
00000BC4: E1A02008    ;     mov R2, R8 ;;num bytes
00000BC8: EB00005B    ;     bl memcpy ;;copy the grid into the new location
00000BCC:             ; 
00000BCC:             ;     ;;inc the position
00000BCC: E5940008    ;     ldr R0, [R4, #8]
00000BD0: E2800001    ;     add R0, R0, #1
00000BD4: E5840008    ;     str R0, [R4, #8]
00000BD8:             ; 
00000BD8: EA000001    ;     b saveGridSucc
00000BDC:             ; 
00000BDC:             ; saveGridFailMalloc
00000BDC: E3A00001    ;     mov R0, #1
00000BE0: EA000000    ;     b saveGridEnd
00000BE4:             ; 
00000BE4:             ; saveGridSucc
00000BE4: E3A00000    ;     mov R0, #0
00000BE8:             ; 
00000BE8:             ; saveGridEnd
00000BE8: E8BD47F0    ;     pop {R14, R4-R10}
00000BEC: E1A0F00E    ;     mov R15, R14
00000BF0:             ; 
00000BF0:             ; erase
00000BF0:             ; ;;INP in R0 is the itters
00000BF0:             ; ;;for (width * height + 1) * 2 + 1
00000BF0:             ; ;;      print('\b')
00000BF0: E1A01000    ;     mov R1, R0
00000BF4:             ; 
00000BF4:             ; eraseloop
00000BF4: E3510000    ;     cmp R1, #0
00000BF8: 0A000003    ;     beq eraseend
00000BFC:             ; 
00000BFC: E3A00008    ;     ldr R0, =backspace
00000C00: EF000000    ;     swi 0
00000C04:             ; 
00000C04: E2411001    ;     sub R1, R1, #1
00000C08: EAFFFFF9    ;     b eraseloop
00000C0C:             ; 
00000C0C:             ; eraseend
00000C0C: E1A0F00E    ;     mov R15, R14
00000C10:             ; 
00000C10:             ; slow
00000C10: E3A010FF    ;     mov R1, #0xFF
00000C14: E1A01081    ;     mov R1, R1, lsl #1
00000C18:             ; 
00000C18:             ; slowloop
00000C18: E3510000    ;     cmp R1, #0
00000C1C: 0A000005    ;     beq slowend
00000C20:             ; 
00000C20: E3A00020    ;     mov R0, #' '
00000C24: EF000000    ;     swi 0
00000C28: E3A00008    ;     ldr R0, =backspace
00000C2C: EF000000    ;     swi 0
00000C30:             ; 
00000C30: E2411001    ;     sub R1, R1, #1
00000C34: EAFFFFF7    ;     b slowloop
00000C38:             ; 
00000C38:             ; slowend
00000C38: E1A0F00E    ;     mov R15, R14
00000C3C:             ; 
00000C3C:             ; heapclean
00000C3C:             ; ;;zero out all memory in the heap (debugging uses)
00000C3C: E28F0EBE    ;     adrl R0, heapstart
00000C40: E2800A01    ; 
00000C44: E3A01601    ;     ldr R1, =max_addr ;;stores the end of the heap
00000C48: E3A02801    ;     ldr R2, =stack_size
00000C4C: E0411002    ;     sub R1, R1, R2 ;; R1 = max_addr - stack_size which should be the heap end
00000C50: E3C11003    ;     and R1, R1, #-4 ;;align to 4 byte boundry just in case
00000C54: E3A03000    ;     mov R3, #0
00000C58:             ; heapcleanloop ;;starting at heapstart
00000C58: E1500001    ;     cmp R0, R1
00000C5C: 0A000002    ;     beq heapcleanend
00000C60: E5003000    ;     str R3, [R0] ;;store 0 in loc
00000C64: E2800004    ;     add R0, R0, #4 ;;inc by a word
00000C68: EAFFFFFA    ;     b heapcleanloop
00000C6C:             ; heapcleanend
00000C6C: E1A0F00E    ;     mov R15, R14
00000C70:             ; 
00000C70:             ; strlen
00000C70:             ; ;;INP in R0 is the address of the string
00000C70:             ; ;;OUT in R0 is the length of the null terminated string
00000C70:             ; 
00000C70:             ; ;;len = 0
00000C70:             ; ;;while(inp[len] != \0) {len++;}
00000C70:             ; ;;return len
00000C70:             ; 
00000C70: E3A01000    ;     mov R1, #0 ;;len
00000C74: E3500000    ;     cmp R0, #0
00000C78: 0A000004    ;     beq strlenend
00000C7C:             ; 
00000C7C:             ; strlenloop
00000C7C: E7D02001    ;     ldrb R2, [R0, R1]
00000C80: E3520000    ;     cmp R2, #0
00000C84: 0A000001    ;     beq strlenend
00000C88: E2811001    ;     add R1, R1, #1
00000C8C: EAFFFFFA    ;     b strlenloop
00000C90:             ; 
00000C90:             ; strlenend
00000C90: E1A00001    ;     mov R0, R1
00000C94: E1A0F00E    ;     mov R15, R14
00000C98:             ; 
00000C98:             ; 
00000C98:             ; strtoi
00000C98:             ; ;;INP in R0 is the address of the string
00000C98:             ; ;;OUT in R0 is the value created
00000C98:             ; ;;OUT in R1 is the err code
00000C98:             ; ;;
00000C98:             ; ;;ERR codes
00000C98:             ; ;;  0 is success
00000C98:             ; ;;  1 is attempted -ve
00000C98:             ; ;;  2 is use of non-numeric characters
00000C98:             ; ;;  3 is value out of range of integer
00000C98:             ; ;;  4 is null string given
00000C98:             ; 
00000C98:             ; ;;  example inp
00000C98:             ; ;;  12234       len = 5
00000C98:             ; ;;      ^-find end
00000C98:             ; ;;  tot = 0
00000C98:             ; ;;  for i from end to 0:
00000C98:             ; ;;      tot += inp[i] * (10 ** (len(inp) - i - 1))
00000C98:             ; ;;  +some checks for valid input
00000C98:             ; 
00000C98:             ; ;;This will take in an address to the start of a string and attempt to convert it into an integ
                      ; er
00000C98:             ; ;;String is only valid when all characters are numerical
00000C98:             ; ;;For now it does not accept -ve numbers
00000C98:             ; 
00000C98: E92D41F0    ;     push {R14, R4-R8}
00000C9C: E1A04000    ;     mov R4, R0  ;;R4 holds the addr
00000CA0:             ; 
00000CA0: E3500000    ;     cmp R0, #0
00000CA4: 03A01004    ;     moveq R1, #4
00000CA8: 0A00001E    ;     beq strtoiendfail ;;null given so err code = 4 and end
00000CAC:             ; 
00000CAC: EBFFFFEF    ;     bl strlen
00000CB0: E1A05000    ;     mov R5, R0  ;;R5 holds the len of the string
00000CB4:             ; 
00000CB4: E3550000    ;     cmp R5, #0
00000CB8: 0A00001C    ;     beq strtoiendsucc ;;if len(string) == 0 then return 0
00000CBC:             ; 
00000CBC: E5D46000    ;     ldrb R6, [R4, #0]
00000CC0: E356002D    ;     cmp R6, #45
00000CC4: 0A000012    ;     beq strtoifailminus
00000CC8:             ; 
00000CC8: E3A06000    ;     mov R6, #0  ;;R6 holds the total
00000CCC: E3A07001    ;     mov R7, #1  ;;R7 holds the **
00000CD0: E2458001    ;     sub R8, R5, #1  ;;R8 is i which starts at end (len - 1)
00000CD4: E3A0300A    ;     mov R3, #10 ;;mul to **
00000CD8:             ; 
00000CD8:             ; strtoiloop
00000CD8: E3580000    ;     cmp R8, #0
00000CDC: BA00000A    ;     blt strtoilend
00000CE0:             ; 
00000CE0: E7D42008    ;     ldrb R2, [R4, R8]
00000CE4: E2422030    ;     sub R2, R2, #48
00000CE8:             ; 
00000CE8: E3520000    ;     cmp R2, #0
00000CEC: BA00000C    ;     blt strtoifailnonnum
00000CF0: E3520009    ;     cmp R2, #9
00000CF4: CA00000A    ;     bgt strtoifailnonnum
00000CF8:             ; 
00000CF8: E0266792    ;     mla R6, R2, R7, R6 ;;total = (inp[i] * (**)) + total -> total += inp[i] * (**)
00000CFC: 6A000006    ;     bvs strtoifailoutrange
00000D00: E0070397    ;     mul R7, R7, R3
00000D04:             ; 
00000D04: E2488001    ;     sub R8, R8, #1
00000D08:             ; 
00000D08: EAFFFFF2    ;     b strtoiloop
00000D0C:             ; 
00000D0C:             ; 
00000D0C:             ; ;;branches are expensive - should this just be rep RET? probably doesn't matter at this scale
00000D0C:             ; strtoilend
00000D0C: E1A00006    ;     mov R0, R6
00000D10: EA000006    ;     b strtoiendsucc
00000D14:             ; 
00000D14:             ; strtoifailminus
00000D14: E3A01001    ;     mov R1, #1
00000D18: EA000002    ;     b strtoiendfail
00000D1C:             ; 
00000D1C:             ; strtoifailoutrange
00000D1C: E3A01003    ;     mov R1, #3
00000D20: EA000000    ;     b strtoiendfail
00000D24:             ; 
00000D24:             ; strtoifailnonnum
00000D24: E3A01002    ;     mov R1, #2
00000D28:             ; 
00000D28:             ; strtoiendfail
00000D28: E3A00000    ;     mov R0, #0
00000D2C: EA000000    ;     b strtoiend
00000D30:             ; 
00000D30:             ; strtoiendsucc
00000D30: E3A01000    ;     mov R1, #0
00000D34:             ; 
00000D34:             ; strtoiend
00000D34: E8BD41F0    ;     pop {R14, R4-R8}
00000D38: E1A0F00E    ;     mov R15, R14
00000D3C:             ; 
00000D3C:             ; memcpy
00000D3C:             ; ;;INP in R0 is the addr of src
00000D3C:             ; ;;INP in R1 is the addr of dst
00000D3C:             ; ;;INP in R2 is the number of bytes to copy
00000D3C:             ; 
00000D3C:             ; ;;check if src and dst are alliged
00000D3C:             ; ;;If different then write bytes
00000D3C:             ; ;;If same then go to 4byte boundry
00000D3C:             ; ;;  Write words of bytes2copy / 4
00000D3C:             ; ;;  Write remaining bytes
00000D3C: E92D41F0    ;     push {R14, R4-R8}
00000D40:             ; 
00000D40: E2004003    ;     and R4, R0, #0b11
00000D44: E2015003    ;     and R5, R1, #0b11
00000D48:             ; 
00000D48: E1540005    ;     cmp R4, R5
00000D4C: 1A00000E    ;     bne memcpyallbytes
00000D50:             ; 
00000D50:             ;     ;;If they are the same then cpy R4 bytes and then do words
00000D50: E0422004    ;     sub R2, R2, R4;; bytes2cpy -= bytes we are about to write
00000D54: E1A03004    ;     mov R3, R4
00000D58: EB00000E    ;     bl memcpybytes
00000D5C:             ; 
00000D5C:             ;     ;;Now find the number of words that can be written i.e. bytes2cpy / 4 (bytes2cpy >> 2)
00000D5C: E3C23003    ;     and R3, R2, #-4 ;;the number of bytes to write that make up the words
00000D60: E3A04000    ;     mov R4, #0 ;;i
00000D64:             ; memcpywordsloop
00000D64: E1540003    ;     cmp R4, R3
00000D68: 0A000003    ;     beq memcpywordslend
00000D6C:             ; 
00000D6C: E7906004    ;     ldr R6, [R0, R4]
00000D70: E7816004    ;     str R6, [R1, R4]
00000D74:             ;     
00000D74: E2844004    ;     add R4, R4, #4
00000D78:             ; 
00000D78: EAFFFFF9    ;     b memcpywordsloop
00000D7C:             ;     
00000D7C:             ; memcpywordslend
00000D7C:             ; ;;Now copy the remaining bytes
00000D7C: E2022003    ;     and R2, R2, #0b11
00000D80: E1A03002    ;     mov R3, R2
00000D84: EB000003    ;     bl memcpybytes
00000D88: EA00000A    ;     b memcpyend
00000D8C:             ; 
00000D8C:             ; memcpyallbytes
00000D8C: E1A03002    ;     mov R3, R2
00000D90: EB000000    ;     bl memcpybytes
00000D94: EA000007    ;     b memcpyend
00000D98:             ; 
00000D98:             ; memcpybytes
00000D98:             ; ;;This is an internal function to memcpy and so doesn't follow the calling convention, it also 
                      ; assumes values are in place from memcpy
00000D98:             ; ;;for (int i = 0; i < byte2cpy; i++) {
00000D98:             ; ;;      *(dst + i) = *(src + i)
00000D98:             ; ;;INP in R3 is the number of bytes to copy
00000D98: E3A05000    ;     mov R5, #0 ;;i
00000D9C:             ; memcpybytesloop
00000D9C: E1550003    ;     cmp R5, R3
00000DA0: 0A000003    ;     beq memcpybyteslend ;;i < bytes2cpy
00000DA4:             ; 
00000DA4: E7D04005    ;     ldrb R4, [R0, R5]
00000DA8: E7C14005    ;     strb R4, [R1, R5] ;;dst[i] = src[i]
00000DAC:             ; 
00000DAC: E2855001    ;     add R5, R5, #1 ;;i++
00000DB0:             ; 
00000DB0: EAFFFFF9    ;     b memcpybytesloop
00000DB4:             ; 
00000DB4:             ; memcpybyteslend
00000DB4: E1A0F00E    ;     mov R15, R14
00000DB8:             ; 
00000DB8:             ; memcpyend
00000DB8: E8BD41F0    ;     pop {R14, R4-R8}
00000DBC: E1A0F00E    ;     mov R15, R14
00000DC0:             ; 
00000DC0:             ; getstring
00000DC0:             ; ;;INP in R0 the terminator character
00000DC0:             ; ;;INP in R1 the max number of characters or -1 for no max
00000DC0:             ; ;;INP in R2 boolean (non-0/0) for if letters should be printed out as well
00000DC0:             ; ;;RET in R0 a ptr to the memory address
00000DC0:             ; ;;
00000DC0:             ; ;;Dynamically allocate memory to support large string
00000DC0:             ; 
00000DC0:             ; ;;buff = malloc(minBytes)
00000DC0:             ; ;;while (input != terminator && pos < maxchars) 
00000DC0:             ; ;;  buff[pos] = input
00000DC0:             ; ;;  putchar(input)
00000DC0:             ; ;;  if (pos > buffSize)
00000DC0:             ; ;;      nBuff = malloc(buffSize << 1)
00000DC0:             ; ;;      memcpy from buff to nBuff
00000DC0:             ; ;;      free buff
00000DC0:             ; ;;      buff = nBuff
00000DC0:             ; 
00000DC0: E92D47F0    ;     push {R14, R4-R10}
00000DC4:             ; 
00000DC4: E1A08000    ;     mov R8, R0 ;;now holds terminator
00000DC8: E1A09001    ;     mov R9, R1 ;;nax chars
00000DCC: E3590000    ;     cmp R9, #0
00000DD0: 0A00003A    ;     beq getstringEnd
00000DD4:             ;     ;sub R9, R9, #1 ;;reduce by 1 to use later
00000DD4: E1A0A002    ;     mov R10, R2 ;;print bool
00000DD8:             ; 
00000DD8: E3A06008    ;     ldr R6, =minBuffSize ;;R6 will hold the current size of the buffer
00000DDC: E1A00006    ;     mov R0, R6
00000DE0: EB000249    ;     bl malloc
00000DE4:             ; 
00000DE4: E3500000    ;     cmp R0, #0
00000DE8: 0A000032    ;     beq getstringErr
00000DEC:             ; 
00000DEC: E1A04000    ;     mov R4, R0 ;;R4 is the address of the buffer
00000DF0:             ; 
00000DF0: E3A05000    ;     mov R5, #0 ;;R5 is the loop counter/index into buffer
00000DF4:             ; getstringloop
00000DF4: E3790001    ;     cmp R9, #-1
00000DF8: 0A000001    ;     beq getstringloopskipsize
00000DFC: E1550009    ;     cmp R5, R9 ;;position - maxsize
00000E00:             ;                       ;;pos 2 means 3 characters written
00000E00: AA00001B    ;     bge getstringlend ;;if position >= maxsize
00000E04:             ; getstringloopskipsize
00000E04: EF000001    ;     swi 1 ;;get input
00000E08: E1500008    ;     cmp R0, R8 ;;is input == terminator character
00000E0C: 0A000018    ;     beq getstringlend
00000E10:             ; 
00000E10: E3790001    ;     cmp R9, #-1
00000E14: 0AFFFFFF    ;     beq skipMax
00000E18:             ;     
00000E18:             ; skipMax
00000E18: E1550006    ;     cmp R5, R6
00000E1C: E92D0001    ;     push {R0}
00000E20: AA000005    ;     bge getstringresize
00000E24:             ; 
00000E24:             ; getstringlcont
00000E24: E8BD0001    ;     pop {R0}
00000E28: E7C40005    ;     strb R0, [R4, R5] ;;buff[pos] = input
00000E2C:             ; 
00000E2C: E35A0000    ;     cmp R10, #0
00000E30: 1F000000    ;     swine 0 ;;output the character to the screen if R10 is not 0
00000E34:             ; 
00000E34: E2855001    ;     add R5, R5, #1
00000E38:             ; 
00000E38: EAFFFFED    ;     b getstringloop
00000E3C:             ; 
00000E3C:             ; getstringresize
00000E3C:             ;     ;;r6 will hold new buffer
00000E3C: E1A00086    ;     mov R0, R6, lsl #1
00000E40: EB000231    ;     bl malloc
00000E44:             ; 
00000E44: E3500000    ;     cmp R0, #0
00000E48: 0A00001A    ;     beq getstringErr
00000E4C:             ; 
00000E4C: E1A07000    ;     mov R7, R0
00000E50:             ; 
00000E50: E1A00004    ;     mov R0, R4 ;;old buff
00000E54: E1A01007    ;     mov R1, R7 ;;newBuff
00000E58: E1A02005    ;     mov R2, R5 ;;bytes to write
00000E5C: EBFFFFB6    ;     bl memcpy
00000E60:             ; 
00000E60: E1A00004    ;     mov R0, R4
00000E64: EB0002BD    ;     bl free
00000E68: E1A04007    ;     mov R4, R7
00000E6C:             ; 
00000E6C: E1A06086    ;     mov R6, R6, lsl #1
00000E70:             ; 
00000E70: EAFFFFEB    ;     b getstringlcont
00000E74:             ; 
00000E74:             ; getstringlend
00000E74:             ;     ;;need to add a \0
00000E74:             ;     ;;need to check if the buffer is completely full -> resize buffer to +1? (will be aligned t
                      ; o 8 in malloc!) then copy
00000E74:             ;     ;;I could have the buffers always leave a space open for the \0? but this is kind of an edg
                      ; e case?
00000E74: E1550006    ;     cmp R5, R6 ;;position to size of buffer
00000E78: 0A000000    ;     beq getstringResizeEnd
00000E7C:             ; 
00000E7C: EA00000F    ;     b getstringEnd
00000E80:             ; 
00000E80:             ; getstringResizeEnd
00000E80: E2860001    ;     add R0, R6, #1
00000E84: EB000220    ;     bl malloc
00000E88:             ; 
00000E88: E3500000    ;     cmp R0, #0
00000E8C: 0A000009    ;     beq getstringErr
00000E90:             ; 
00000E90: E1A07000    ;     mov R7, R0
00000E94:             ; 
00000E94: E1A00004    ;     mov R0, R4;;old buff
00000E98: E1A01007    ;     mov R1, R7;;new buff
00000E9C: E1A02005    ;     mov R2, R5;;bytes2write
00000EA0: EBFFFFA5    ;     bl memcpy
00000EA4:             ; 
00000EA4: E1A00004    ;     mov R0, R4
00000EA8: EB0002AC    ;     bl free
00000EAC: E1A04007    ;     mov R4, R7
00000EB0:             ; 
00000EB0: E2866001    ;     add R6, R6, #1 ;;not needed
00000EB4:             ; 
00000EB4: EA000001    ;     b getstringEnd
00000EB8:             ; 
00000EB8:             ; getstringErr
00000EB8: E3A00000    ;     mov R0, #0
00000EBC: EA000002    ;     b getstringEndEnd
00000EC0:             ; 
00000EC0:             ; getstringEnd
00000EC0: E3A00000    ;     mov R0, #0
00000EC4: E7C40005    ;     strb R0, [R4, R5]
00000EC8:             ; 
00000EC8: E1A00004    ;     mov R0, R4
00000ECC:             ; 
00000ECC:             ; getstringEndEnd
00000ECC: E8BD47F0    ;     pop {R14, R4-R10}
00000ED0: E1A0F00E    ;     mov R15, R14
00000ED4:             ; 
00000ED4:             ; tolower
00000ED4:             ; ;;INP in R0 is a character
00000ED4:             ; ;;OUT in R0 is the character.lower()
00000ED4: E3800020    ;     orr R0, R0, #32
00000ED8: E1A0F00E    ;     mov R15, R14
00000EDC:             ; 
00000EDC:             ; setupGrid
00000EDC:             ; ;;INP --
00000EDC:             ; ;;RET in R0 is err code, non-0 is error
00000EDC:             ; ;;The values addresses of the grids will now be set, can still be 0
00000EDC:             ; ;; ask for generation mode
00000EDC:             ; ;;      |-If random ask for seed
00000EDC:             ; ;;      |   `-For generation roll the seed to create a pseudorandom value for each `pixel`
00000EDC:             ; ;;      `-If draw then get them to draw the grid one `pixel` at a time
00000EDC: E92D47F0    ;     push {R14, R4-R10}
00000EE0:             ; 
00000EE0:             ;     ;;generate the main grid
00000EE0: E55F6E95    ;     ldrb R6, width
00000EE4: E55F7E98    ;     ldrb R7, height
00000EE8:             ; 
00000EE8: E0000796    ;     mul R0, R6, R7 ;;width * height = num of bytes to malloc
00000EEC:             ; 
00000EEC: E1A05000    ;     mov R5, R0
00000EF0: EB000205    ;     bl malloc
00000EF4:             ; 
00000EF4: E1A04000    ;     mov R4, R0
00000EF8: E50F4EB8    ;     str R4, gridA
00000EFC:             ; 
00000EFC: E1A00005    ;     mov R0, R5
00000F00: EB000201    ;     bl malloc
00000F04: E50F0EC0    ;     str R0, gridB
00000F08:             ; 
00000F08: E3500000    ;     cmp R0, #0      ;;If either grid failed to malloc
00000F0C: 0A000066    ;     beq setupGridFail
00000F10: E3540000    ;     cmp R4, #0
00000F14: 0A000064    ;     beq setupGridFail
00000F18:             ; 
00000F18:             ;     ;;R4 holds the gridA addr
00000F18:             ;     ;;R6 holds the width
00000F18:             ;     ;;R7 holds the height
00000F18:             ; 
00000F18: E28F00F7    ;     adrl R0, askgenoption
00000F1C: E2800C0E    ; 
00000F20: EF000003    ;     swi 3
00000F24:             ; setupGridAsk
00000F24: EF000001    ;     swi 1
00000F28: E3800020    ;     orr R0, R0, #32
00000F2C:             ; 
00000F2C: E1A01000    ;     mov R1, R0
00000F30: EBFFFE95    ;     bl newline
00000F34:             ; 
00000F34: E3510064    ;     cmp R1, #'d'
00000F38: 0A000005    ;     beq setupdrawing
00000F3C:             ; 
00000F3C: E3510072    ;     cmp R1, #'r'
00000F40: 0A000008    ;     beq setuprandom
00000F44:             ; 
00000F44: E28F0FC1    ;     adrl R0, setupGrdFailmsg
00000F48: E2800B03    ; 
00000F4C: EF000003    ;     swi 3
00000F50: EAFFFFF3    ;     b setupGridAsk
00000F54:             ; 
00000F54:             ; setupdrawing
00000F54: E3A09000    ;     mov R9, #0
00000F58:             ; 
00000F58: E28F007D    ;     adrl R0, drawinfomsg
00000F5C: E2800C0F    ; 
00000F60: EF000003    ;     swi 3
00000F64:             ; 
00000F64: EA00000C    ;     b setupstart
00000F68:             ; 
00000F68:             ; setuprandom
00000F68: E28F0041    ;     adrl R0, askseed
00000F6C: E2800C0F    ; 
00000F70: EF000003    ;     swi 3
00000F74:             ; 
00000F74: E3A00000    ;     mov R0, #0
00000F78: E3A01004    ;     mov R1, #4
00000F7C: E3A02001    ;     mov R2, #1
00000F80: EBFFFF8E    ;     bl getstring
00000F84:             ; 
00000F84: E3500000    ;     cmp R0, #0
00000F88: 0A000047    ;     beq setupGridFail
00000F8C:             ; 
00000F8C: E5108000    ;     ldr R8, [R0]
00000F90:             ; 
00000F90: EB000272    ;     bl free
00000F94:             ; 
00000F94: EBFFFE7C    ;     bl newline
00000F98:             ; 
00000F98: E3A09001    ;     mov R9, #1
00000F9C:             ; 
00000F9C:             ; setupstart
00000F9C:             ; ;;This is probably not a good way to do it as there is more branching in the middle of a loop t
                      ; hat is executed alot
00000F9C:             ; ;;I'm doing it this way `not because it is easy, but because I though it would be easy`
00000F9C:             ; ;;Reduces the need for writing another loop :)
00000F9C:             ; ;;R9 holds the mode (1 for random, 0 for draw)
00000F9C:             ; ;;R8 will hold the seed for random
00000F9C:             ; ;;for row from 0 to height - 1
00000F9C:             ; ;;  for col from 0 to width - 1
00000F9C:             ; ;;      if (random)
00000F9C:             ; ;;          grid[row][col] = ((seed rol 1) || row) && 1
00000F9C:             ; ;;      else
00000F9C:             ; ;;          grid[row][col] = input() == 1
00000F9C: E3A05000    ;     mov R5, #0 ;; row
00000FA0:             ; setuprowloop
00000FA0: E1550007    ;     cmp R5, R7
00000FA4: 0A00003E    ;     beq setuprowlend
00000FA8:             ; 
00000FA8: E3A0A000    ;     mov R10, #0 ;;col
00000FAC:             ; setupcolloop
00000FAC: E15A0006    ;     cmp R10, R6
00000FB0: 0A000039    ;     beq setupcollend
00000FB4:             ; 
00000FB4: E3590001    ;     cmp R9, #1
00000FB8: 0A000000    ;     beq dorandom
00000FBC: EA000004    ;     b dodrawstart
00000FC0:             ; 
00000FC0:             ; ;;dorandom and dodraw will get their value for this position and then place it in R2
00000FC0:             ; ;;R3 is free at this point
00000FC0:             ; dorandom
00000FC0:             ;     ;;seed in R8
00000FC0: E1A080E8    ;     mov R8, R8, ror #1
00000FC4: E00A3005    ;     and R3, R10, R5
00000FC8: E0288003    ;     eor R8, R8, R3
00000FCC: E2082001    ;     and R2, R8, #1
00000FD0: EA00002D    ;     b setupcollcont
00000FD4:             ; 
00000FD4:             ; dodrawstart
00000FD4: E023A695    ;     mla R3, R5, R6, R10 ;;R3 = row * width + col
00000FD8:             ; 
00000FD8: E3A00002    ;     mov R0, #2
00000FDC: E7C40003    ;     strb R0, [R4, R3]
00000FE0:             ; 
00000FE0: E3590000    ;     cmp R9, #0
00000FE4: 01A00004    ;     moveq R0, R4
00000FE8: 0B000035    ;     bleq drawgrid ;;print the new state of the grid if this is drawing mode
00000FEC:             ; 
00000FEC:             ; dodraw
00000FEC:             ;     ;;get input, validate 1 or 0
00000FEC:             ;     ;;if invalid print error loop back
00000FEC:             ;     ;;-_- I've just realised I want to print the grid each time as well R0-R3 are scratch
00000FEC: EF000001    ;     swi 1
00000FF0:             ; 
00000FF0: E3500031    ;     cmp R0, #'1'
00000FF4: 0A000017    ;     beq dodrawsucc
00000FF8: E3500030    ;     cmp R0, #'0'
00000FFC: 0A000015    ;     beq dodrawsucc
00001000:             ; 
00001000: E3A0100A    ;     ldr R1, =enter
00001004: E1500001    ;     cmp R0, R1;;next line
00001008: 1A00000E    ;     bne dodrawfail
0000100C:             ; 
0000100C: E023A695    ;     mla R3, R5, R6, R10 ;;R3 = row * width + col
00001010: E3A00000    ;     mov R0, #0
00001014: E7C40003    ;     strb R0, [R4, R3]
00001018:             ; 
00001018: E2855001    ;     add R5, R5, #1
0000101C:             ; 
0000101C: E24F0FF3    ;     adrl R0, drawerase
00001020: E2400B03    ; 
00001024: E5500000    ;     ldrb R0, [R0]
00001028: E3500000    ;     cmp R0, #0
0000102C: 0AFFFFDB    ;     beq setuprowloop
00001030:             ; 
00001030: E0000796    ;     mul R0, R6, R7      ;;I don't like having to do this every time :(
00001034: E1A00080    ;     mov R0, R0, lsl #1
00001038: E2800001    ;     add R0, R0, #1
0000103C: E0800007    ;     add R0, R0, R7
00001040: EBFFFEEA    ;     bl erase
00001044:             ; 
00001044: EAFFFFD5    ;     b setuprowloop
00001048:             ; 
00001048:             ; dodrawfail
00001048:             ; 
00001048: E28F00E3    ;     adrl R0, drawfailmsg
0000104C: E2800C0E    ; 
00001050: EF000003    ;     swi 3
00001054:             ; 
00001054: EAFFFFE4    ;     b dodraw
00001058:             ; 
00001058:             ; dodrawsucc
00001058: E92D0001    ;     push {R0}
0000105C: E24F000C    ;     adrl R0, drawerase
00001060: E2400A01    ; 
00001064: E5500000    ;     ldrb R0, [R0]
00001068: E3500000    ;     cmp R0, #0
0000106C: 0A000004    ;     beq dodrawsuccskiperase
00001070:             ; 
00001070: E0000796    ;     mul R0, R6, R7      ;;I don't like having to do this every time :(
00001074: E1A00080    ;     mov R0, R0, lsl #1
00001078: E2800001    ;     add R0, R0, #1
0000107C: E0800007    ;     add R0, R0, R7
00001080: EBFFFEDA    ;     bl erase
00001084:             ;     
00001084:             ; dodrawsuccskiperase
00001084: E8BD0001    ;     pop {R0}
00001088:             ; 
00001088: E2402030    ;     sub R2, R0, #48 ;;could be xor?
0000108C:             ; 
0000108C:             ; setupcollcont
0000108C:             ;     ;;place the value in R2 into the grid[row][col]
0000108C:             ;     ;;row * width + col
0000108C: E023A695    ;     mla R3, R5, R6, R10 ;;R3 = row * width + col ;;I'm doing this twice \-(*v*)-/
00001090: E7C42003    ;     strb R2, [R4, R3] ;;grid offset by R3
00001094:             ; 
00001094: E28AA001    ;     add R10, R10, #1
00001098: EAFFFFC3    ;     b setupcolloop
0000109C:             ; setupcollend
0000109C: E2855001    ;     add R5, R5, #1
000010A0: EAFFFFBE    ;     b setuprowloop
000010A4:             ; setuprowlend
000010A4:             ;     ;;grid has been setup
000010A4: E3A00000    ;     mov R0, #0 ;;success
000010A8: EA000003    ;     b setupGridEnd
000010AC:             ; 
000010AC:             ; setupGridFail
000010AC: E28F0011    ;     adrl R0, malloc_panic
000010B0: E2800C17    ; 
000010B4: EF000003    ;     swi 3
000010B8:             ; 
000010B8: E3A00001    ;     mov R0, #1 ;;fail!
000010BC:             ; 
000010BC:             ; setupGridEnd
000010BC: E8BD47F0    ;     pop {R14, R4-R10}
000010C0: E1A0F00E    ;     mov R15, R14
000010C4:             ; 
000010C4:             ; 
000010C4:             ; ;;[[TODO]] the heap may not be blank (when heapclean is removed) and so need to 0 the mem. Mayb
                      ; e add option to malloc or add calloc (not the same)
000010C4:             ; drawgrid
000010C4:             ; ;;INP in R0 is the grid address to draw
000010C4:             ; 
000010C4:             ; ;;for row from 0 to height - 1
000010C4:             ; ;;  for col from 0 to width - 1
000010C4:             ; ;;      print('X' if grid[row][col] else '_')
000010C4:             ; ;;  print(newline)
000010C4:             ; ;;print(newline)
000010C4: E92D01F0    ;     push {R4-R8}
000010C8:             ; 
000010C8: E1A06000    ;     mov R6, R0
000010CC:             ; 
000010CC: E24F4081    ;     adrl R4, width
000010D0: E2444A01    ; 
000010D4: E5544000    ;     ldrb R4, [R4]
000010D8: E24F508C    ;     adrl R5, height
000010DC: E2455A01    ; 
000010E0: E5555000    ;     ldrb R5, [R5]
000010E4:             ; 
000010E4: E3A02000    ;     mov R2, #0 ;;row
000010E8:             ; drawgridrowloop
000010E8: E1520005    ;     cmp R2, R5
000010EC: 0A00001C    ;     beq drawgridrowlend
000010F0:             ; 
000010F0: E3A01000    ;     mov R1, #0 ;;col
000010F4:             ; drawgridcolloop
000010F4: E1510004    ;     cmp R1, R4
000010F8: 0A000014    ;     beq drawgridcollend
000010FC:             ; 
000010FC: E0231492    ;     mla R3, R2, R4, R1 ;;R3 = row * width + col
00001100: E7D63003    ;     ldrb R3, [R6, R3]
00001104:             ; 
00001104: E3530002    ;     cmp R3, #2
00001108: 0A000008    ;     beq drawgridprintcurrent
0000110C: E3530001    ;     cmp R3, #1
00001110: 024F00BF    ;     adrleq R0, alive_c
00001114: 02400A01    ; 
00001118: 05100000    ;     ldreq R0, [R0]
0000111C: 124F00CA    ;     adrlne R0, dead_c
00001120: 12400A01    ; 
00001124: 15100000    ;     ldrne R0, [R0]
00001128:             ; 
00001128: EF000000    ;     swi 0
0000112C:             ; 
0000112C: EA000003    ;     b drawgridcollcont
00001130:             ; 
00001130:             ; drawgridprintcurrent
00001130: E24F00DD    ;     adrl R0, ptr_c
00001134: E2400A01    ; 
00001138: E5100000    ;     ldr R0, [R0]
0000113C: EF000000    ;     swi 0
00001140:             ; 
00001140:             ; drawgridcollcont
00001140: E3A00020    ;     mov R0, #' '
00001144: EF000000    ;     swi 0
00001148:             ; 
00001148: E2811001    ;     add R1, R1, #1
0000114C: EAFFFFE8    ;     b drawgridcolloop
00001150:             ; 
00001150:             ; drawgridcollend
00001150: E3A01000    ;     mov R1, #0
00001154: E2822001    ;     add R2, R2, #1
00001158: E3A0000A    ;     mov R0, #10
0000115C: EF000000    ;     swi 0
00001160: EAFFFFE0    ;     b drawgridrowloop
00001164:             ; 
00001164:             ; drawgridrowlend
00001164: E3A0000A    ;     mov R0, #10
00001168: EF000000    ;     swi 0
0000116C:             ; drawgridend
0000116C: E8BD01F0    ;     pop {R4-R8}
00001170: E1A0F00E    ;     mov R15, R14
00001174:             ; 
00001174:             ; 
00001174:             ; printoptions
00001174:             ; ;;INP --
00001174:             ; ;;OUT --
00001174:             ; ;;optionsp_1-5
00001174: E28F00BD    ;     adrl R0, optionsp_1
00001178: E2800C0B    ; 
0000117C: EF000003    ;     swi 3
00001180:             ; 
00001180: E24F0035    ;     adrl R0, width
00001184: E2400C11    ; 
00001188: E5500000    ;     ldrb R0, [R0]
0000118C: EF000004    ;     swi 4
00001190:             ; 
00001190: E28F00B9    ;     adrl R0, optionsp_2
00001194: E2800C0B    ; 
00001198: EF000003    ;     swi 3
0000119C:             ; 
0000119C: E24F0E15    ;     adrl R0, height
000011A0: E2400A01    ; 
000011A4: E5500000    ;     ldrb R0, [R0]
000011A8: EF000004    ;     swi 4
000011AC:             ; 
000011AC: E28F0EBA    ;     adrl R0, optionsp_3
000011B0: E2800000    ; 
000011B4: EF000003    ;     swi 3
000011B8:             ; 
000011B8: E24F006F    ;     adrl R0, slow_b
000011BC: E2400C11    ; 
000011C0: E5500000    ;     ldrb R0, [R0]
000011C4: E3500001    ;     cmp R0, #1
000011C8: 128F0F93    ;     adrlne R0, off_msg
000011CC: 12800B05    ; 
000011D0: 028F0041    ;     adrleq R0, on_msg
000011D4: 02800C16    ; 
000011D8: EF000003    ;     swi 3
000011DC:             ; 
000011DC: E28F0FDF    ;     adrl R0, optionsp_4
000011E0: E2800B02    ; 
000011E4: EF000003    ;     swi 3
000011E8:             ; 
000011E8: E24F0E1A    ;     adrl R0, erase_b
000011EC: E2400A01    ; 
000011F0: E5500000    ;     ldrb R0, [R0]
000011F4: E3500001    ;     cmp R0, #1
000011F8: 128F0F87    ;     adrlne R0, off_msg
000011FC: 12800B05    ; 
00001200: 028F0011    ;     adrleq R0, on_msg
00001204: 02800C16    ; 
00001208: EF000003    ;     swi 3
0000120C:             ; 
0000120C: E28F0FD6    ;     adrl R0, optionsp_5
00001210: E2800B02    ; 
00001214: EF000003    ;     swi 3
00001218:             ; 
00001218: E24F00CE    ;     adrl R0, step_b
0000121C: E2400C11    ; 
00001220: E5500000    ;     ldrb R0, [R0]
00001224: E3500001    ;     cmp R0, #1
00001228: 128F0F7B    ;     adrlne R0, off_msg
0000122C: 12800B05    ; 
00001230: 028F00E1    ;     adrleq R0, on_msg
00001234: 02800C15    ; 
00001238: EF000003    ;     swi 3
0000123C:             ; 
0000123C: E3A0000A    ;     ldr R0, =nl
00001240: EF000000    ;     swi 0
00001244:             ; 
00001244: E1A0F00E    ;     mov R15, R14
00001248:             ; 
00001248:             ; setupOptions
00001248:             ; ;;INP in R0 is 1 if should ask for dims 0 for skip
00001248: E92D4010    ;     push {R14, R4}
0000124C: E1A04000    ;     mov R4, R0
00001250:             ; 
00001250: E28F0C09    ;     adrl R0, askdefaults ;;ask q
00001254: E2800000    ; 
00001258: EF000003    ;     swi 3
0000125C: EF000001    ;     swi 1   ;;get character answer
00001260: EF000000    ;     swi 0
00001264: E3500059    ;     cmp R0, #'Y'
00001268: E3A0000A    ;     ldr R0, =nl
0000126C: EF000000    ;     swi 0
00001270:             ; 
00001270: 1A000022    ;     bne setupCustom
00001274:             ; 
00001274: E24F0E22    ;     adrl R0, erase_b_d
00001278: E2400A01    ; 
0000127C: E5500000    ;     ldrb R0, [R0]
00001280: E24F1F8E    ;     adrl R1, erase_b
00001284: E2411A01    ; 
00001288: E5410000    ;     strb R0, [R1]
0000128C:             ; 
0000128C: E24F0037    ;     adrl R0, slow_b_d
00001290: E2400C12    ; 
00001294: E5500000    ;     ldrb R0, [R0]
00001298: E24F104F    ;     adrl R1, slow_b
0000129C: E2411C12    ; 
000012A0: E5410000    ;     strb R0, [R1]
000012A4:             ; 
000012A4: E24F004E    ;     adrl R0, step_b_d
000012A8: E2400C12    ; 
000012AC: E5500000    ;     ldrb R0, [R0]
000012B0: E24F1066    ;     adrl R1, step_b
000012B4: E2411C12    ; 
000012B8: E5410000    ;     strb R0, [R1]
000012BC:             ; 
000012BC: E3540000    ;     cmp R4, #0
000012C0: 0A00000B    ;     beq setupOptionsDEnd
000012C4:             ; 
000012C4: E24F006D    ;     adrl R0, width_d
000012C8: E2400C12    ; 
000012CC: E5500000    ;     ldrb R0, [R0]
000012D0: E24F1085    ;     adrl R1, width
000012D4: E2411C12    ; 
000012D8: E5410000    ;     strb R0, [R1]
000012DC: E24F0FA1    ;     adrl R0, height_d
000012E0: E2400A01    ; 
000012E4: E5500000    ;     ldrb R0, [R0]
000012E8: E24F1FA7    ;     adrl R1, height
000012EC: E2411A01    ; 
000012F0: E5410000    ;     strb R0, [R1]
000012F4:             ; 
000012F4:             ; setupOptionsDEnd
000012F4: EBFFFF9E    ;     bl printoptions
000012F8:             ; 
000012F8: E8BD4010    ;     pop {R14, R4}
000012FC: E1A0F00E    ;     mov R15, R14 ;;RET
00001300:             ; 
00001300:             ; setupCustom
00001300:             ; ;;ask for erase, slow, step, and conditionally dims
00001300:             ; 
00001300:             ; ;;ask step
00001300:             ; ;;ask erase
00001300:             ; ;;if (!step)
00001300:             ; ;;  if erase
00001300:             ; ;;      print(recommend slow)
00001300:             ; ;;  ask slow
00001300:             ; 
00001300: E3A01001    ;     mov R1, #1
00001304:             ; 
00001304: E28F00AF    ;     adrl R0, askstep
00001308: E2800B02    ; 
0000130C: EF000003    ;     swi 3
00001310: EF000001    ;     swi 1
00001314: EF000000    ;     swi 0 
00001318: E3500059    ;     cmp R0, #'Y' 
0000131C: E3A0000A    ;     ldr R0, =nl
00001320: EF000000    ;     swi 0
00001324: 13A01000    ;     movne R1, #0
00001328: E24F00DE    ;     adrl R0, step_b
0000132C: E2400C12    ; 
00001330: E5401000    ;     strb R1, [R0]
00001334:             ; 
00001334: E3A01001    ;     mov R1, #1
00001338:             ; 
00001338: E28F004A    ;     adrl R0, askerase
0000133C: E2800B02    ; 
00001340: EF000003    ;     swi 3
00001344: EF000001    ;     swi 1
00001348: EF000000    ;     swi 0
0000134C: E3500059    ;     cmp R0, #'Y'
00001350: E3A0000A    ;     ldr R0, =nl
00001354: EF000000    ;     swi 0
00001358: 13A01000    ;     movne R1, #0
0000135C: E24F0FC5    ;     adrl R0, erase_b
00001360: E2400A01    ; 
00001364: E5401000    ;     strb R1, [R0]
00001368:             ; 
00001368: E24F001E    ;     adrl R0, step_b
0000136C: E2400C13    ; 
00001370: E5500000    ;     ldrb R0, [R0]
00001374: E3500001    ;     cmp R0, #1
00001378: 0A000011    ;     beq setupCustomskipslow
0000137C:             ; 
0000137C: E3510001    ;     cmp R1, #1 ;;if erase is on
00001380: E28F00E6    ;     adrl R0, warneraseslow
00001384: E2800B02    ; 
00001388: 0F000003    ;     swieq 3
0000138C:             ; 
0000138C: E3A01001    ;     mov R1, #1
00001390:             ;  
00001390: E28F000B    ;     adrl R0, askslow
00001394: E2800B02    ; 
00001398: EF000003    ;     swi 3
0000139C: EF000001    ;     swi 1
000013A0: EF000000    ;     swi 0 
000013A4: E3500059    ;     cmp R0, #'Y' 
000013A8: E3A0000A    ;     ldr R0, =nl
000013AC: EF000000    ;     swi 0
000013B0: 13A01000    ;     movne R1, #0
000013B4: E24F006B    ;     adrl R0, slow_b
000013B8: E2400C13    ; 
000013BC: E5401000    ;     strb R1, [R0] ;;[[maybe]] changed but not checked, go here if error
000013C0:             ; 
000013C0: EA000016    ;     b setupCustomDimsCheck
000013C4:             ; 
000013C4:             ; setupCustomskipslow
000013C4: E3A00000    ;     mov R0, #0
000013C8: E24F107F    ;     adrl R1, slow_b
000013CC: E2411C13    ; 
000013D0: E5410000    ;     strb R0, [R1]
000013D4:             ; 
000013D4: EA000011    ;     b setupCustomDimsCheck
000013D8:             ; 
000013D8:             ; printrange
000013D8:             ; ;;INP --
000013D8:             ; ;;OUT --
000013D8: E28F00DE    ;     adrl R0, bracket_open
000013DC: E2800A01    ; 
000013E0: EF000003    ;     swi 3
000013E4:             ; 
000013E4: E24F0097    ;     adrl R0, range_min
000013E8: E2400C13    ; 
000013EC: E5500000    ;     ldrb R0, [R0]
000013F0: EF000004    ;     swi 4
000013F4:             ; 
000013F4: E28F00C7    ;     adrl R0, dash
000013F8: E2800B02    ; 
000013FC: EF000003    ;     swi 3
00001400:             ; 
00001400: E24F00B2    ;     adrl R0, range_max
00001404: E2400C13    ; 
00001408: E5500000    ;     ldrb R0, [R0]
0000140C: EF000004    ;     swi 4
00001410:             ; 
00001410: E28F00AD    ;     adrl R0, b_close_colon
00001414: E2800B02    ; 
00001418: EF000003    ;     swi 3
0000141C:             ; 
0000141C: E1A0F00E    ;     mov R15, R14
00001420:             ; 
00001420:             ; setupCustomDimsCheck
00001420: E3540000    ;     cmp R4, #0
00001424: 0A00004C    ;     beq customend
00001428:             ; 
00001428: E28F007C    ;     adrl R0, askwid
0000142C: E2800B02    ; 
00001430: EF000003    ;     swi 3
00001434:             ; 
00001434: EBFFFFE7    ;     bl printrange
00001438:             ; 
00001438:             ; getwid
00001438: E3A0000A    ;     ldr R0, =enter
0000143C: E3A01003    ;     mov R1, #3
00001440: E3A02001    ;     mov R2, #1
00001444: EBFFFE5D    ;     bl getstring
00001448:             ; 
00001448: E3500000    ;     cmp R0, #0
0000144C: 0A00003E    ;     beq customfail
00001450:             ; 
00001450: E1A04000    ;     mov R4, R0
00001454:             ; 
00001454: EBFFFE0F    ;     bl strtoi
00001458: E1A05000    ;     mov R5, R0
0000145C:             ;     
0000145C: E1A00004    ;     mov R0, R4
00001460: EB00013E    ;     bl free ;;free the collected string
00001464:             ; 
00001464: E1A01005    ;     mov R1, R5
00001468:             ; 
00001468: EBFFFD47    ;     bl newline
0000146C:             ; 
0000146C: E24F401F    ;     adrl R4, range_min
00001470: E2444B05    ; 
00001474: E5544000    ;     ldrb R4, [R4]
00001478: E24F502A    ;     adrl R5, range_max
0000147C: E2455B05    ; 
00001480: E5555000    ;     ldrb R5, [R5]
00001484:             ; 
00001484: E1510005    ;     cmp R1, R5
00001488: CA000005    ;     bgt getwidFail
0000148C: E1510004    ;     cmp R1, R4
00001490: BA000003    ;     blt getwidFail
00001494:             ; 
00001494: E24F0049    ;     adrl R0, width
00001498: E2400B05    ; 
0000149C: E5401000    ;     strb R1, [R0]
000014A0:             ; 
000014A0: EA000004    ;     b getheisetup
000014A4:             ; 
000014A4:             ; getwidFail
000014A4: E28F0034    ;     adrl R0, getwidfailmsg
000014A8: E2800B02    ; 
000014AC: EF000003    ;     swi 3
000014B0:             ; 
000014B0: EBFFFFC8    ;     bl printrange
000014B4:             ; 
000014B4: EAFFFFDF    ;     b getwid
000014B8:             ; 
000014B8:             ; getheisetup
000014B8: E28F0009    ;     adrl R0, askhei
000014BC: E2800B02    ; 
000014C0: EF000003    ;     swi 3
000014C4:             ; 
000014C4: EBFFFFC3    ;     bl printrange
000014C8:             ; 
000014C8:             ; gethei
000014C8: E3A0000A    ;     ldr R0, =enter
000014CC: E3A01003    ;     mov R1, #3
000014D0: E3A02001    ;     mov R2, #1
000014D4: EBFFFE39    ;     bl getstring
000014D8:             ; 
000014D8: E3500000    ;     cmp R0, #0
000014DC: 0A00001A    ;     beq customfail
000014E0:             ; 
000014E0: E1A04000    ;     mov R4, R0
000014E4:             ; 
000014E4: EBFFFDEB    ;     bl strtoi
000014E8: E1A05000    ;     mov R5, R0
000014EC:             ; 
000014EC: E1A00004    ;     mov R0, R4
000014F0: EB00011A    ;     bl free
000014F4:             ; 
000014F4: E1A01005    ;     mov R1, R5
000014F8:             ; 
000014F8: EBFFFD23    ;     bl newline
000014FC:             ; 
000014FC: E24F40AF    ;     adrl R4, range_min
00001500: E2444B05    ; 
00001504: E5544000    ;     ldrb R4, [R4]
00001508: E24F50BA    ;     adrl R5, range_max
0000150C: E2455B05    ; 
00001510: E5555000    ;     ldrb R5, [R5]
00001514:             ; 
00001514: E1510005    ;     cmp R1, R5
00001518: CA000005    ;     bgt getheiFail
0000151C: E1510004    ;     cmp R1, R4
00001520: BA000003    ;     blt getheiFail
00001524:             ; 
00001524: E24F20D8    ;     adrl R2, height
00001528: E2422B05    ; 
0000152C: E5421000    ;     strb R1, [R2]
00001530:             ; 
00001530: EA000009    ;     b customend
00001534:             ; 
00001534:             ; getheiFail
00001534: E28F0E7D    ;     adrl R0, getheifailmsg
00001538: E2800000    ; 
0000153C: EF000003    ;     swi 3
00001540:             ; 
00001540: EBFFFFA4    ;     bl printrange
00001544:             ; 
00001544: EAFFFFDF    ;     b gethei
00001548:             ; 
00001548: EA000003    ;     b customend
0000154C:             ; 
0000154C:             ; customfail
0000154C: E28F0071    ;     adrl R0, malloc_panic
00001550: E2800C12    ; 
00001554: EF000003    ;     swi 3
00001558:             ; 
00001558: EA000000    ;     b customret
0000155C:             ; 
0000155C:             ; customend
0000155C: EBFFFF04    ;     bl printoptions
00001560:             ; 
00001560:             ; customret
00001560: E8BD4010    ;     pop {R14, R4}
00001564: E1A0F00E    ;     mov R15, R14 ;;RET
00001568:             ; 
00001568:             ; 
00001568:             ; updategrid
00001568:             ; ;;INP in R0 is the active grid
00001568:             ; ;;INP in R1 is the passive grid
00001568:             ; ;;passive grid is the one being updated based on the value in the activeGrid
00001568:             ; ;;RET --
00001568:             ; ;;for row from 0 to height - 1
00001568:             ; ;;  for col from 0 to width - 1
00001568:             ; ;;      int n = countNeighbours(activeGrid, row, col)
00001568:             ; ;;      int s = activeGrid[row][col]
00001568:             ; ;;      
00001568:             ; ;;      if (s == alive)
00001568:             ; ;;          passiveGrid[row][col] = n == 3 or n == 2
00001568:             ; ;;      else
00001568:             ; ;;          passiveGrid[row][col] = n == 3
00001568:             ; 
00001568:             ; ;;  R4 holds the row
00001568:             ; ;;  R5 holds the col
00001568:             ; ;;  R6 holds the width
00001568:             ; ;;  R7 holds the height
00001568:             ; ;;  R8 holds the active grid
00001568:             ; ;;  R9 holds the passive grid
00001568:             ; 
00001568: E92D47F0    ;     push {R14, R4-R10}
0000156C:             ; 
0000156C: E24F6021    ;     adrl R6, width
00001570: E2466C15    ; 
00001574: E5566000    ;     ldrb R6, [R6]
00001578: E24F7F4B    ;     adrl R7, height
0000157C: E2477B05    ; 
00001580: E5577000    ;     ldrb R7, [R7]
00001584:             ; 
00001584: E1A08000    ;     mov R8, R0
00001588: E1A09001    ;     mov R9, R1
0000158C:             ; 
0000158C: E3A04000    ;     mov R4, #0 ;;row
00001590:             ; updategridrowloop
00001590: E1540007    ;     cmp R4, R7
00001594: 0A00001A    ;     beq updategridrowlend
00001598:             ; 
00001598: E3A05000    ;     mov R5, #0 ;;col
0000159C:             ; updategridcolloop
0000159C: E1550006    ;     cmp R5, R6
000015A0: 0A000014    ;     beq updategridccollend
000015A4:             ; 
000015A4: E1A00008    ;     mov R0, R8
000015A8: E1A01004    ;     mov R1, R4
000015AC: E1A02005    ;     mov R2, R5
000015B0: EB000015    ;     bl countneighbours
000015B4:             ; 
000015B4: E0215694    ;     mla R1, R4, R6, R5 ;;R1 = row * width + col
000015B8: E7D82001    ;     ldrb R2, [R8, R1] ;;grid[R1]
000015BC:             ;     ;;R0 holds the n count
000015BC: E3520000    ;     cmp R2, #0
000015C0: 0A000006    ;     beq updatedead
000015C4:             ; 
000015C4:             ; updatealive
000015C4: E3A03000    ;     mov R3, #0
000015C8: E3500003    ;     cmp R0, #3
000015CC: 03A03001    ;     moveq R3, #1
000015D0: E3500002    ;     cmp R0, #2
000015D4: 03A03001    ;     moveq R3, #1
000015D8: E7C93001    ;     strb R3, [R9, R1]
000015DC: EA000003    ;     b updatelcont
000015E0:             ; 
000015E0:             ; updatedead
000015E0: E3A03001    ;     mov R3, #1
000015E4: E3500003    ;     cmp R0, #3
000015E8: 13A03000    ;     movne R3, #0
000015EC: E7C93001    ;     strb R3, [R9, R1]
000015F0:             ; 
000015F0:             ; updatelcont
000015F0: E2855001    ;     add R5, R5, #1
000015F4: EAFFFFE8    ;     b updategridcolloop
000015F8:             ; 
000015F8:             ; updategridccollend
000015F8: E3A05000    ;     mov R5, #0
000015FC: E2844001    ;     add R4, R4, #1
00001600: EAFFFFE2    ;     b updategridrowloop
00001604:             ; 
00001604:             ; updategridrowlend
00001604:             ; updategridend
00001604: E8BD47F0    ;     pop {R14, R4-R10}
00001608: E1A0F00E    ;     mov R15, R14
0000160C:             ; 
0000160C:             ; 
0000160C:             ; countneighbours
0000160C:             ; ;;INP in R0 is the activeGrid
0000160C:             ; ;;INP in R1 is the row
0000160C:             ; ;;INP in R2 is the col
0000160C:             ; ;;OUT in R0 is the number of neighbours
0000160C:             ; 
0000160C:             ; ;;offsets = [[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]]
0000160C:             ; ;;tot = 0
0000160C:             ; ;;for offset in offsets
0000160C:             ; ;;  if (isinrange(row + offset[0], col + offset[1]))
0000160C:             ; ;;      tot += grid[row + offset[0]][col + offset[1]]
0000160C:             ; ;;return tot
0000160C: E92D4FF0    ;     push {R14, R4-R11} ;;I used the fp before I knew it wasn't a general purpose one, its fine 
                      ; in this context anyway
00001610:             ; 
00001610: E24F4E61    ;     adrl R4, offsets ;;holds the offset
00001614: E2444A01    ; 
00001618:             ; 
00001618: E1A07000    ;     mov R7, R0
0000161C: E1A08001    ;     mov R8, R1
00001620: E1A09002    ;     mov R9, R2
00001624: E3A0A000    ;     mov R10, #0 ;;R10 holds the total
00001628: E24FB0DD    ;     adrl R11, width
0000162C: E24BBC15    ; 
00001630: E55BB000    ;     ldrb R11, [R11];;R11 holds the width of the grid
00001634:             ; 
00001634: E3A03000    ;     mov R3, #0
00001638:             ; 
00001638:             ; countneighboursloop
00001638: E3530008    ;     cmp R3, #8 ;;change this ccheck to be for R4
0000163C: 0A00000F    ;     beq countneighbourslend
00001640:             ; 
00001640: E4945004    ;     ldr R5, [R4], #4
00001644: E4946004    ;     ldr R6, [R4], #4
00001648:             ; 
00001648: E0880005    ;     add R0, R8, R5
0000164C: E0891006    ;     add R1, R9, R6
00001650:             ; 
00001650: E2833001    ;     add R3, R3, #1
00001654:             ; 
00001654: E92D0008    ;     push {R3} ;;I should probably be using a local var on the stack, but I don't yet know how t
                      ; o setup a stack frame properly
00001658: EB00000B    ;     bl isinrange
0000165C: E8BD0008    ;     pop {R3}
00001660:             ; 
00001660: E3500000    ;     cmp R0, #0
00001664: 0A000004    ;     beq countneighboursskipadd
00001668:             ; 
00001668: E0880005    ;     add R0, R8, R5 ;;new row
0000166C: E0891006    ;     add R1, R9, R6 ;;new col ;;can assume that R0, R1 haven't changed as isinrange doesn't edit
                      ;  them, but I'm going to for now
00001670:             ; 
00001670: E0201B90    ;     mla R0, R0, R11, R1 ;;find offset
00001674: E7D70000    ;     ldrb R0, [R7, R0]
00001678: E08AA000    ;     add R10, R10, R0 ;;tot += grid[newrow][newcol]
0000167C:             ; 
0000167C:             ; countneighboursskipadd
0000167C: EAFFFFED    ;     b countneighboursloop
00001680:             ; 
00001680:             ; countneighbourslend
00001680:             ; countneighboursend
00001680: E1A0000A    ;     mov R0, R10
00001684: E8BD4FF0    ;     pop {R14, R4-R11}
00001688: E1A0F00E    ;     mov R15, R14
0000168C:             ; 
0000168C:             ; 
0000168C:             ; isinrange
0000168C:             ; ;;INP in R0 is the row
0000168C:             ; ;;INP in R1 is the col
0000168C:             ; ;;Uses defined width and height
0000168C:             ; ;;RET in R0 is 1 if is in range else 0
0000168C: E3A02001    ;     mov R2, #1 ;;is valid unless...
00001690:             ; 
00001690: E3500000    ;     cmp R0, #0
00001694: BA00000D    ;     blt isinrangefail
00001698:             ; 
00001698: E3510000    ;     cmp R1, #0
0000169C: BA00000B    ;     blt isinrangefail
000016A0:             ; 
000016A0: E24F3055    ;     adrl R3, width
000016A4: E2433C16    ; 
000016A8: E5533000    ;     ldrb R3, [R3]
000016AC: E1510003    ;     cmp R1, R3
000016B0: AA000006    ;     bge isinrangefail
000016B4:             ; 
000016B4: E24F3F9A    ;     adrl R3, height
000016B8: E2433B05    ; 
000016BC: E5533000    ;     ldrb R3, [R3]
000016C0: E1500003    ;     cmp R0, R3
000016C4: AA000001    ;     bge isinrangefail
000016C8:             ; 
000016C8: E3A00001    ;     mov R0, #1
000016CC: EA000000    ;     b isinrangeend
000016D0:             ; 
000016D0:             ; isinrangefail
000016D0: E3A00000    ;     mov R0, #0
000016D4:             ; 
000016D4:             ; isinrangeend
000016D4: E1A0F00E    ;     mov R15, R14
000016D8:             ; 
000016D8:             ; 
000016D8:             ; ;; The heap will be a linked list of free blocks - unlike the Comodo version which stores both 
                      ; free & taken blocks 
000016D8:             ; ;; This is an idea I'm stealing from the C programming book
000016D8:             ; ;; Crate structure
000016D8:             ; ;;  |-ptr to next crate (1 word)
000016D8:             ; ;;  |-ptr to prev crate (1 word)
000016D8:             ; ;;  `-Size (bytes)      (1 word)
000016D8:             ; ;; 
000016D8:             ; 
000016D8:             ; ;;  Traversal of the heap
000016D8:             ; ;;  Unlink in my Comodo implimentation the heap is not a linked list of all Crates (free or not
                      ; )
000016D8:             ; ;;  That made traversing the heap for debugging purposes very easy, in this case taken crates d
                      ; o not point to the next
000016D8:             ; ;;  Instead could start at head and then just go to addr + sizeof(Crate) + size. This should ta
                      ; ke us to the next crate, free or not
000016D8:             ; ;;  
000016D8:             ; setupHeap
000016D8:             ; ;;NO INP
000016D8:             ; ;;NO OUT
000016D8:             ;     ;;we have the heapstart
000016D8:             ;     ;;the end of the heap will be 0x100000 (it will overlap with the stack :) )
000016D8: E24F0FB7    ;     adrl R0, heaphead
000016DC: E2400B05    ; 
000016E0: E5100000    ;     ldr R0, [R0] ;;stores the mem addr of the start of the heap
000016E4: E3A01601    ;     ldr R1, =max_addr ;;stores the end of the heap
000016E8: E3A02801    ;     ldr R2, =stack_size
000016EC: E0411002    ;     sub R1, R1, R2
000016F0:             ; 
000016F0: E0411000    ;     sub R1, R1, R0  ;;HEAPEND - HEAPSTART = TOTAL STORAGE (bytes)
000016F4: E241100C    ;     sub R1, R1, #12 ;;SIZE -= SIZEOF(CRATE) (12 bytes)
000016F8: E5801008    ;     str R1, [R0, #8] ;;set the size of the crate
000016FC: E3A01000    ;     mov R1, #0
00001700: E5801004    ;     str R1, [R0, #4] ;;set the prev ptr
00001704: E5801000    ;     str R1, [R0, #0] ;;set the next ptr
00001708:             ; 
00001708: E1A0F00E    ;     mov R15, R14
0000170C:             ; 
0000170C:             ; ;; The heap is a linked list of free Crates and so find the header and then go though until one
                      ;  satifies the size requirement
0000170C:             ; ;;  end if next is 0
0000170C:             ; ;;  once found either take over the crate or split it into two new crates
0000170C:             ; ;;  align the bytes amount to 8 byte boundry
0000170C:             ; malloc
0000170C:             ; ;;INP into R0 bytes to allocate
0000170C:             ; ;;OUT into R0 the ptr to the memory or 0 for no memory allocated
0000170C:             ;     ;;step 1 align the bytes
0000170C:             ;     ;;1001010 & 0111 = 0000010 ;2
0000170C:             ;     ;;if 0 goto alignend
0000170C:             ;     ;;1001010 + (8 - 2)
0000170C: E92D0010    ;     push {R4}
00001710:             ; 
00001710: E2001007    ;     and R1, R0, #0b0111
00001714: E3510000    ;     cmp R1, #0
00001718: 0A000002    ;     beq mallignend
0000171C: E3A03008    ;     mov R3, #0b1000
00001720: E0432001    ;     sub R2, R3, R1
00001724: E0800002    ;     add R0, R0, R2
00001728:             ; 
00001728:             ; mallignend
00001728: E24F1FCB    ;     adrl R1, heaphead
0000172C: E2411B05    ; 
00001730: E5111000    ;     ldr R1, [R1] ;;stores a ptr to the first block
00001734:             ;     
00001734:             ; checkcrate
00001734: E5912008    ;     ldr R2, [R1, #8] ;;Size of the crate
00001738: E1500002    ;     cmp R0, R2 ;;bytes needed - bytes in crate
0000173C: DA000006    ;     ble foundcrate
00001740: E5912000    ;     ldr R2, [R1, #0] ;;get the next ptr
00001744: E3520000    ;     cmp R2, #0
00001748: 0A000001    ;     beq nocrates
0000174C: E1A01002    ;     mov R1, R2 ;;swap the current crate with the next crate
00001750: EAFFFFF7    ;     b checkcrate
00001754:             ; nocrates
00001754: E3A00000    ;     mov R0, #0
00001758: EA000015    ;     b mallocEnd
0000175C:             ; 
0000175C:             ; foundcrate
0000175C:             ;     ;;Once a crate that we can use has been found we need to either split the crate or use the 
                      ; crate
0000175C:             ;     ;;We should use the whole crate only when its size < bytesneeded + CrateHeader + 8
0000175C:             ;     ;;This would give the edge case crate 8 bytes
0000175C:             ;     
0000175C:             ;     ;;R1 holds the found crate ptr
0000175C:             ;     ;;R0 is the bytes requested and aligned
0000175C: E2802014    ;     add R2, R0, #20 ;;A crate header is 12 bytes + the extra 8 bytes minimum
00001760: E5913008    ;     ldr R3, [R1, #8]
00001764: E1530002    ;     cmp R3, R2
00001768: BA00000C    ;     blt usecrate
0000176C:             ; splitcrate
0000176C:             ;     ;;In this case we have a large crate that should be split up.
0000176C:             ;     ;;ATM the crate will just be split up to where the requested memory is at the end of the fr
                      ; ee Crate.
0000176C:             ; 
0000176C: E5913008    ;     ldr R3, [R1, #8] ;;The size of the toSplit Crate
00001770: E0433000    ;     sub R3, R3, R0 ;; size - bytesRequested
00001774: E243300C    ;     sub R3, R3, #12 ;; size - bytesRequested - sizeof(Crate)
00001778: E5813008    ;     str R3, [R1, #8] ;;toSplit->size = newSize
0000177C:             ; 
0000177C: E0833001    ;     add R3, R3, R1 ;; newSize + toSplit.addr
00001780: E283400C    ;     add R4, R3, #12 ;; newSize + toSplit.addr + sizeof(Crate) = position of new Crate
00001784:             ; 
00001784:             ;     ;;Setup the header for the newCrate
00001784: E3A02000    ;     mov R2, #0
00001788: E5842000    ;     str R2, [R4, #0] ;;next = 0
0000178C: E5842004    ;     str R2, [R4, #4] ;;prev = 0
00001790: E5840008    ;     str R0, [R4, #8] ;;size = requested and aligned
00001794:             ; 
00001794:             ;     ;;MAYBE: can the crates that are taken have a smaller header than those that are free. Take
                      ; n crates need not store the next, prev free nodes
00001794:             ;     ;;This may complicate things as size would need to be moved around and the size from taken 
                      ; to free would be different. 
00001794:             ;     ;;This would have been easier if the size of the Crate was stored at the start but it's not
                      ; , I'm probably not going to add this its not worth it.
00001794:             ; 
00001794: E284400C    ;     add R4, R4, #12
00001798:             ; 
00001798: E1A00004    ;     mov R0, R4
0000179C:             ; 
0000179C: EA000004    ;     b mallocEnd
000017A0:             ; 
000017A0:             ; usecrate
000017A0:             ;     ;; Simplest option as we can just remove it from the list
000017A0:             ;     ;; c1 <-> c2 <-> c3 ==> c1 <-> c3
000017A0: E5912000    ;     ldr R2, [R1, #0] ;;next ptr
000017A4: E5913004    ;     ldr R3, [R1, #4] ;;prev ptr
000017A8: E5823004    ;     str R3, [R2, #4] ;;Store c1 into c3's previous
000017AC: E5832000    ;     str R2, [R3, #0] ;;Store c3 into c1's next
000017B0:             ; 
000017B0: E1A00001    ;     mov R0, R1 ;;move the found crate's address into the return register ;;The crate header is 
                      ; no longer needed
000017B4:             ; 
000017B4:             ; mallocEnd
000017B4: E8BD0010    ;     pop {R4}
000017B8: E1A0F00E    ;     mov R15, R14
000017BC:             ; 
000017BC:             ; 
000017BC:             ; printHeap
000017BC:             ; ;;This is a debugging function that will print the free and taken list
000017BC:             ; ;;,-----------------------------------------------------------------,
000017BC:             ; ;;|   large free block  |tkn1   |tkn2       | freed1    | tkn3      |
000017BC:             ; ;;|                     |       |           |           |           |
000017BC:             ; ;;|                     |       |           |           |           |
000017BC:             ; ;;`-----------------------------------------------------------------'
000017BC:             ; 
000017BC:             ; ;;  PrintFree() - follow the free list ptrs print addr + size
000017BC:             ; ;;  PrintAll()  - start at head and go addr + size + 12 to get next, continue to end
000017BC: E92D47F0    ;     push {R14, R4-R10}
000017C0:             ; 
000017C0: EB000025    ;     bl printFree
000017C4:             ; 
000017C4: EB000001    ;     bl printAll
000017C8:             ; 
000017C8:             ; printHeapend
000017C8: E8BD47F0    ;     pop {R14, R4-R10}
000017CC: E1A0F00E    ;     mov R15, R14
000017D0:             ; 
000017D0:             ; printAll
000017D0: E92D41F0    ;     push {R14, R4-R8}
000017D4:             ; 
000017D4: E28F001E    ;     adrl R0, printAll_m
000017D8: E2800C0F    ; 
000017DC: EF000003    ;     swi 3
000017E0:             ;     
000017E0: E28F003C    ;     adrl R0, heapstart
000017E4: E2800A01    ; 
000017E8: E1A04000    ;     mov R4, R0
000017EC:             ; 
000017EC: E1A05000    ;     mov R5, R0 ;;stores the next expected free node
000017F0:             ; 
000017F0:             ; printAllLoop
000017F0: E5941000    ;     ldr R1, [R4, #0] ;;next ptr
000017F4: E5942004    ;     ldr R2, [R4, #4] ;;prev ptr
000017F8: E5943008    ;     ldr R3, [R4, #8] ;;size
000017FC:             ; 
000017FC: E1540001    ;     cmp R4, R1
00001800: 1A000003    ;     bne printAllLoopSkipWarning
00001804:             ; 
00001804: E28F003E    ;     adrl R0, printAll_m_e
00001808: E2800C0F    ; 
0000180C: EF000003    ;     swi 3
00001810:             ; 
00001810: E3A05000    ;     mov R5, #0
00001814:             ; 
00001814:             ; printAllLoopSkipWarning
00001814:             ; 
00001814:             ;     ;;check if this is a free node
00001814: E1550004    ;     cmp R5, R4
00001818:             ; 
00001818: 028F00FD    ;     adrleq R0, printAll_m_f
0000181C: 02800C0E    ; 
00001820: 128F000B    ;     adrlne R0, printAll_m_t
00001824: 12800C0F    ; 
00001828: EF000003    ;     swi 3
0000182C:             ; 
0000182C: 1A000000    ;     bne printAllLoopCont
00001830:             ; 
00001830: E1A05001    ;     mov R5, R1
00001834:             ; 
00001834:             ; printAllLoopCont
00001834: E1A00004    ;     mov R0, R4
00001838: EB000022    ;     bl printblock
0000183C:             ; 
0000183C:             ;     ;;calculate the next block
0000183C:             ;     ;;addr + 12 + size
0000183C:             ; 
0000183C: E284000C    ;     add R0, R4, #12
00001840: E0800003    ;     add R0, R0, R3
00001844:             ; 
00001844: E1A04000    ;     mov R4, R0
00001848:             ; 
00001848: E354080F    ;     cmp R4, #0xF0000
0000184C: AA000000    ;     bge printAllLend
00001850:             ;     
00001850: EAFFFFE6    ;     b printAllLoop
00001854:             ; 
00001854:             ; printAllLend
00001854:             ; printAllEnd
00001854: E8BD41F0    ;     pop {R14, R4-R8}
00001858: E1A0F00E    ;     mov R15, R14
0000185C:             ; 
0000185C:             ; printFree
0000185C: E92D41F0    ;     push {R14, R4-R8}
00001860:             ; 
00001860: E28F0F81    ;     adrl R0, printFree_m
00001864: E2800B03    ; 
00001868: EF000003    ;     swi 3
0000186C:             ; 
0000186C: E28F0EFB    ;     adrl R0, heapstart
00001870: E2800000    ; 
00001874: E1A04000    ;     mov R4, R0
00001878:             ; 
00001878:             ; printFreeloop
00001878: E5941000    ;     ldr R1, [R4, #0] ;;next ptr
0000187C: E5942004    ;     ldr R2, [R4, #4] ;;prev ptr
00001880: E5943008    ;     ldr R3, [R4, #8] ;;size
00001884:             ; 
00001884: E28F00F3    ;     adrl R0, printfree_f_m
00001888: E2800C0D    ; 
0000188C: EF000003    ;     swi 3
00001890:             ; 
00001890: E1A00004    ;     mov R0, R4
00001894: EB00000B    ;     bl printblock
00001898:             ; 
00001898: E3510000    ;     cmp R1, #0
0000189C: 0A000003    ;     beq printFreelend
000018A0:             ; 
000018A0: E1510004    ;     cmp R1, R4
000018A4: 0A000002    ;     beq printFreeErr
000018A8:             ; 
000018A8: E1A04001    ;     mov R4, R1
000018AC: EAFFFFF1    ;     b printFreeloop
000018B0:             ; 
000018B0:             ; printFreelend
000018B0: EA000002    ;     b printFreeEnd
000018B4:             ; 
000018B4:             ; printFreeErr
000018B4: E28F0002    ;     adrl R0, printFree_m_e
000018B8: E2800C0E    ; 
000018BC: EF000003    ;     swi 3
000018C0:             ; 
000018C0:             ; printFreeEnd
000018C0: E8BD41F0    ;     pop {R14, R4-R8}
000018C4: E1A0F00E    ;     mov R15, R14
000018C8:             ; 
000018C8:             ; printblock
000018C8:             ; ;;INP in R0 is the addr
000018C8:             ; ;;INP in R1 is the next
000018C8:             ; ;;INP in R2 is the prev
000018C8:             ; ;;INP in R3 is the size
000018C8:             ; ;;RET --
000018C8: E92D0010    ;     push {R4}
000018CC: E1A04000    ;     mov R4, R0
000018D0:             ; 
000018D0: E28F00D4    ;     adrl R0, cutoff
000018D4: E2800B02    ; 
000018D8: EF000003    ;     swi 3
000018DC:             ; 
000018DC: E28F00B2    ;     adrl R0, printfree_f_mad
000018E0: E2800C0D    ; 
000018E4: EF000003    ;     swi 3
000018E8:             ; 
000018E8: E1A00004    ;     mov R0, R4
000018EC: EF000004    ;     swi 4
000018F0:             ; 
000018F0: E3A0000A    ;     ldr R0, =nl
000018F4: EF000000    ;     swi 0
000018F8:             ; 
000018F8: E28F0EDA    ;     adrl R0, printfree_f_mnx
000018FC: E2800000    ; 
00001900: EF000003    ;     swi 3
00001904:             ; 
00001904: E1A00001    ;     mov R0, R1
00001908: EF000004    ;     swi 4
0000190C:             ; 
0000190C: E3A0000A    ;     ldr R0, =nl
00001910: EF000000    ;     swi 0
00001914:             ; 
00001914: E28F008E    ;     adrl R0, printfree_f_mpr
00001918: E2800C0D    ; 
0000191C: EF000003    ;     swi 3
00001920:             ; 
00001920: E1A00002    ;     mov R0, R2
00001924: EF000004    ;     swi 4
00001928:             ; 
00001928: E3A0000A    ;     ldr R0, =nl
0000192C: EF000000    ;     swi 0
00001930:             ; 
00001930: E28F0F5F    ;     adrl R0, printfree_f_msz
00001934: E2800B03    ; 
00001938: EF000003    ;     swi 3
0000193C:             ; 
0000193C: E1A00003    ;     mov R0, R3
00001940: EF000004    ;     swi 4
00001944:             ; 
00001944: E3A0000A    ;     ldr R0, =nl
00001948: EF000000    ;     swi 0
0000194C:             ; 
0000194C: E28F0058    ;     adrl R0, cutoff
00001950: E2800B02    ; 
00001954: EF000003    ;     swi 3
00001958:             ; 
00001958: E8BD0010    ;     pop {R4}
0000195C: E1A0F00E    ;     mov R15, R14
00001960:             ; 
00001960:             ; 
00001960:             ; free
00001960:             ; ;;INP in R0 is the mem addr of the data to be freed
00001960:             ; ;;OUT in R0 is the success code - 0 for mem freed, ¬0 for error ;;probably won't be currently 
                      ; used `=(- -)=' 
00001960:             ;     ;;In order to free memory we need to add it back to the linked list
00001960:             ;     ;;Following K&R's version the linked list will be ordered by address this will make finding
                      ;  consecutive memory locations that should be combined easier
00001960:             ; 
00001960:             ;     ;;The inputted address of the crate is the address given in malloc and so the start of the 
                      ; crate is that addr - sizeof(Crate) (#12)
00001960:             ; 
00001960:             ;     ;;heapHead = first Crate
00001960:             ;     ;;current = heapHead
00001960:             ;     ;;while (toFree.addr > current.addr)
00001960:             ;     ;;  current = current.next
00001960:             ;     ;;
00001960:             ;     ;;//Add the toFree Crate inbetween the current and its previous i.e.  A<->B<->C, toFree = D
                      ;  (addr < C, addr > B) ==> A<->B<->D<->C
00001960:             ;     ;;current->prev->next = toFree
00001960:             ;     ;;toFree->prev = current.prev
00001960:             ;     ;;current->prev = toFree
00001960:             ;     ;;toFree->next = current
00001960:             ; 
00001960:             ;     ;; Crate structure
00001960:             ;     ;;  |-ptr to next crate (1 word)
00001960:             ;     ;;  |-ptr to prev crate (1 word)
00001960:             ;     ;;  `-Size (bytes)      (1 word)
00001960:             ; 
00001960: E92D41F0    ;     push {R14, R4-R8}
00001964:             ; 
00001964: E24F1F5A    ;     adrl R1, heaphead
00001968: E2411B06    ; 
0000196C: E5111000    ;     ldr R1, [R1] ;;R1 will hold the current
00001970: E240000C    ;     sub R0, R0, #12 ;;subtract sizeof(Crate) to get header pointer
00001974:             ; freeloop
00001974: E5912000    ;     ldr R2, [R1, #0] ;;load the ptr to the next
00001978: E1520000    ;     cmp R2, R0 ;;compare the address of the toFree to the address of current->next
0000197C:             ; 
0000197C: AA000003    ;     bge freelend ;;current->next.addr >= toFree.addr
00001980:             ; 
00001980: E3520000    ;     cmp R2, #0 ;;If there are no more Crates to the right then this could be a new Crate at the
                      ;  end or |F|T| it should merge left 
00001984: 0A000009    ;     beq freelendEnd
00001988:             ; 
00001988: E1A01002    ;     mov R1, R2 ;;current = current.next
0000198C:             ; 
0000198C: EAFFFFF8    ;     b freeloop
00001990:             ; 
00001990:             ; freelend
00001990:             ;     ;; R1 holds the current (left)
00001990:             ;     ;; R2 holds the c->next (right)
00001990: E5912000    ;     ldr R2, [R1, #0]
00001994:             ; 
00001994:             ;     ;;Setup the ptrs for the crates this will help later on   left<->toFree<->right ;;left,righ
                      ; t can be 0
00001994:             ;     ;;We're just adding the new crate to the linked list
00001994:             ;     ;;current->next->prev = toFree
00001994:             ;     ;;toFree->next = current->next
00001994:             ;     ;;current->next = toFree
00001994:             ;     ;;toFree->prev = current
00001994:             ; 
00001994: E5913000    ;     ldr R3, [R1, #0] ;;holds current->next
00001998: E3530000    ;     cmp R3, #0
0000199C: 15830004    ;     strne R0, [R3, #4] ;;current->next->prev = toFree
000019A0: E5803000    ;     str R3, [R0, #0] ;;toFree->next = current->next
000019A4: E5810000    ;     str R0, [R1, #0] ;;current->next = toFree
000019A8: E5801004    ;     str R1, [R0, #4] ;;toFree->prev = current
000019AC:             ; 
000019AC: EA000001    ;     b freeMergeCheck
000019B0:             ; 
000019B0:             ; freelendEnd
000019B0:             ; ;;If there are no more Crates to the right then this could be a new Crate at the end or |F|T| i
                      ; t should merge left 
000019B0:             ; ;;Found a crate (current) that is to the left of the crate as we ran out of ->next ptrs
000019B0:             ; ;;Need to set current->next = toFree
000019B0:             ; ;;            toFree->prev = current
000019B0: E5801004    ;     str R1, [R0, #4] ;;toFree->prev = current
000019B4: E5810000    ;     str R0, [R1, #0] ;;current->next = toFree
000019B8:             ; 
000019B8:             ; freeMergeCheck
000019B8:             ;     ;;We have a ptr to current. This should be the closest Crate to the left of toFree
000019B8:             ;     ;;We also have the next Crate (null or not) which is to the right of toFree
000019B8:             ;     ;;Both of these crates MAY need to be merged but could also have taken crates in between
000019B8:             ;     ;;First is to check if the crates are adjacent
000019B8:             ;     ;;  If they are NOT then create a newCrate
000019B8:             ;     ;;  If they are     then merge both
000019B8:             ;     ;;  If only one     then merge either left or right
000019B8:             ; 
000019B8:             ;     ;;R1 will be left
000019B8:             ;     ;;R2 will be right
000019B8:             ; 
000019B8: E3510000    ;     cmp R1, #0
000019BC: 01A01000    ;     moveq R1, R0 ;;If there is no left crate then left=toFree
000019C0: E3520000    ;     cmp R2, #0
000019C4: 01A02000    ;     moveq R2, R0 ;;If there is no right crate (more likely) then right=toFree
000019C8:             ; 
000019C8:             ; verifyLeft
000019C8:             ;     ;;Check if the left is adjacent
000019C8:             ;     ;;It will be if (left.addr + sizeof(Crate) + left.size == toFree.addr)
000019C8:             ; 
000019C8: E5913008    ;     ldr R3, [R1, #8]
000019CC: E283300C    ;     add R3, R3, #12 ;;12 is sizeof(Crate) + toFree.size
000019D0: E0833001    ;     add R3, R3, R1 ;;left.addr + left->size ??
000019D4:             ; 
000019D4: E1530000    ;     cmp R3, R0
000019D8: 11A01000    ;     movne R1, R0
000019DC:             ; 
000019DC:             ; verifyRight
000019DC:             ;     ;;Going from toFree to Right
000019DC: E5903008    ;     ldr R3, [R0, #8] ;;get size of toFree
000019E0: E283300C    ;     add R3, R3, #12 ;;12 is sizeof(Crate) + toFree.size
000019E4: E0833000    ;     add R3, R3, R0 ;; + toFree.addr
000019E8:             ; 
000019E8: E1530002    ;     cmp R3, R2
000019EC: 11A02000    ;     movne R2, R0
000019F0:             ; 
000019F0:             ; merge
000019F0:             ;     ;;Merge the two Crates given in R1 and R2
000019F0:             ;     ;;left can be (left) or (toFree)
000019F0:             ;     ;;right can be (right) or (toFree)
000019F0:             ;     ;;If left == right: don't merge; create new Crate
000019F0:             ;     ;;If left != right: then add to left's size
000019F0:             ; 
000019F0: E1510002    ;     cmp R1, R2
000019F4: 0A000008    ;     beq mergeNew
000019F8:             ; 
000019F8:             ;     ;;The new size is right.addr - left.addr + right->size    from right.addr - left.addr - siz
                      ; eof(Crate) + sizeof(Crate) + right->size
000019F8:             ;     ;;                                                               |left      |right
000019F8:             ;     ;;                                                               |<12>|size||<12>|size|
000019F8:             ;     ;;
000019F8:             ;     ;;                                                               |left      
000019F8:             ;     ;;                                                               |<12>|size           |
000019F8:             ;     ;;
000019F8:             ;     ;;I'm doing it this way as the left and right may not be contiguous i.e. if toFree has a fr
                      ; ee crate on either side
000019F8:             ; 
000019F8: E0423001    ;     sub R3, R2, R1
000019FC: E5924008    ;     ldr R4, [R2, #8]
00001A00: E0833004    ;     add R3, R3, R4
00001A04: E5813008    ;     str R3, [R1, #8]
00001A08:             ; 
00001A08:             ;     ;;Time to switch some ptrs
00001A08:             ;     ;;Current state left.prev<->left<->right<->right.next (with left or right = toFree) or left
                      ; .prev<->left<->toFree<->right<->right.next
00001A08:             ;     ;;New state would be left.prev<->left<->right.next (with left or right = toFree) or left.pr
                      ; ev<->left<->right.next
00001A08:             ;     ;;Both cases end the same, so get right.next. These could be 0 but it doesn't matter
00001A08:             ;     ;;Next need to change the prev and next ptrs for adjacent Crates
00001A08:             ;     ;;i.e. right->next->prev = left
00001A08:             ; 
00001A08: E5924000    ;     ldr R4, [R2, #0] ;;right->next
00001A0C: E1540001    ;     cmp R4, R1
00001A10: 15814000    ;     strne R4, [R1, #0] ;;left->next = right->next
00001A14:             ; 
00001A14: E3540000    ;     cmp R4, #0
00001A18: 15841004    ;     strne R1, [R4, #4] ;;right->next->prev = left
00001A1C:             ; 
00001A1C:             ; mergeNew
00001A1C:             ;     ;;The crate has already been setup with its ptrs and had its size as well so don't need to 
                      ; do anything
00001A1C:             ; 
00001A1C:             ; freeEnd
00001A1C: E8BD41F0    ;     pop {R14, R4-R8}
00001A20: E1A0F00E    ;     mov R15, R14
00001A24:             ; 
00001A24:             ; align
00001A24:             ; 
00001A24:             ; ;;String defs -- The naming scheme is bad :(
00001A24: 2D 2D 2D 2D ; welcomemsg      defb "-----------Welcome to JCGOL in ARM32-----------", nl, 0
00001A28: 2D 2D 2D 2D ; 
00001A2C: 2D 2D 2D 57 ; 
00001A30: 65 6C 63 6F ; 
00001A34: 6D 65 20 74 ; 
00001A38: 6F 20 4A 43 ; 
00001A3C: 47 4F 4C 20 ; 
00001A40: 69 6E 20 41 ; 
00001A44: 52 4D 33 32 ; 
00001A48: 2D 2D 2D 2D ; 
00001A4C: 2D 2D 2D 2D ; 
00001A50: 2D 2D 2D 0A ; 
00001A54: 00          ; 
00001A55: 28 4E 29 65 ; welcome2msg     defb "(N)ew board\n(L)oad a saved board\n(S)ettings\n(P)rint the heap\n(Q)uit",
00001A59: 77 20 62 6F ;  nl, 0
00001A5D: 61 72 64 0A ; 
00001A61: 28 4C 29 6F ; 
00001A65: 61 64 20 61 ; 
00001A69: 20 73 61 76 ; 
00001A6D: 65 64 20 62 ; 
00001A71: 6F 61 72 64 ; 
00001A75: 0A 28 53 29 ; 
00001A79: 65 74 74 69 ; 
00001A7D: 6E 67 73 0A ; 
00001A81: 28 50 29 72 ; 
00001A85: 69 6E 74 20 ; 
00001A89: 74 68 65 20 ; 
00001A8D: 68 65 61 70 ; 
00001A91: 0A 28 51 29 ; 
00001A95: 75 69 74 0A ; 
00001A99: 00          ; 
00001A9A: 49 6E 76 61 ; mainchoicefail  defb "Invalid choice please enter 'n' for new board, 'l' for load a board, 's' 
00001A9E: 6C 69 64 20 ; to view settings, 'p' to view the heap, or 'q' to close. Not cases sensative", nl, 0
00001AA2: 63 68 6F 69 ; 
00001AA6: 63 65 20 70 ; 
00001AAA: 6C 65 61 73 ; 
00001AAE: 65 20 65 6E ; 
00001AB2: 74 65 72 20 ; 
00001AB6: 27 6E 27 20 ; 
00001ABA: 66 6F 72 20 ; 
00001ABE: 6E 65 77 20 ; 
00001AC2: 62 6F 61 72 ; 
00001AC6: 64 2C 20 27 ; 
00001ACA: 6C 27 20 66 ; 
00001ACE: 6F 72 20 6C ; 
00001AD2: 6F 61 64 20 ; 
00001AD6: 61 20 62 6F ; 
00001ADA: 61 72 64 2C ; 
00001ADE: 20 27 73 27 ; 
00001AE2: 20 74 6F 20 ; 
00001AE6: 76 69 65 77 ; 
00001AEA: 20 73 65 74 ; 
00001AEE: 74 69 6E 67 ; 
00001AF2: 73 2C 20 27 ; 
00001AF6: 70 27 20 74 ; 
00001AFA: 6F 20 76 69 ; 
00001AFE: 65 77 20 74 ; 
00001B02: 68 65 20 68 ; 
00001B06: 65 61 70 2C ; 
00001B0A: 20 6F 72 20 ; 
00001B0E: 27 71 27 20 ; 
00001B12: 74 6F 20 63 ; 
00001B16: 6C 6F 73 65 ; 
00001B1A: 2E 20 4E 6F ; 
00001B1E: 74 20 63 61 ; 
00001B22: 73 65 73 20 ; 
00001B26: 73 65 6E 73 ; 
00001B2A: 61 74 69 76 ; 
00001B2E: 65 0A 00    ; 
00001B31: 54 68 61 6E ; mainendmsg      defb "Thank you for playing JCGOL for ARM32", nl, 0
00001B35: 6B 20 79 6F ; 
00001B39: 75 20 66 6F ; 
00001B3D: 72 20 70 6C ; 
00001B41: 61 79 69 6E ; 
00001B45: 67 20 4A 43 ; 
00001B49: 47 4F 4C 20 ; 
00001B4D: 66 6F 72 20 ; 
00001B51: 41 52 4D 33 ; 
00001B55: 32 0A 00    ; 
00001B58: 57 6F 75 6C ; askdefaults     defb "Would you like to use the default settings? Y/n: ", 0
00001B5C: 64 20 79 6F ; 
00001B60: 75 20 6C 69 ; 
00001B64: 6B 65 20 74 ; 
00001B68: 6F 20 75 73 ; 
00001B6C: 65 20 74 68 ; 
00001B70: 65 20 64 65 ; 
00001B74: 66 61 75 6C ; 
00001B78: 74 20 73 65 ; 
00001B7C: 74 74 69 6E ; 
00001B80: 67 73 3F 20 ; 
00001B84: 59 2F 6E 3A ; 
00001B88: 20 00       ; 
00001B8A: 45 6E 61 62 ; askerase        defb "Enable erase mode? Y/n: ", 0
00001B8E: 6C 65 20 65 ; 
00001B92: 72 61 73 65 ; 
00001B96: 20 6D 6F 64 ; 
00001B9A: 65 3F 20 59 ; 
00001B9E: 2F 6E 3A 20 ; 
00001BA2: 00          ; 
00001BA3: 45 6E 61 62 ; askslow         defb "Enable slow mode? Y/n: ", 0
00001BA7: 6C 65 20 73 ; 
00001BAB: 6C 6F 77 20 ; 
00001BAF: 6D 6F 64 65 ; 
00001BB3: 3F 20 59 2F ; 
00001BB7: 6E 3A 20 00 ; 
00001BBB: 45 6E 61 62 ; askstep         defb "Enable step mode? Y/n: ", 0
00001BBF: 6C 65 20 73 ; 
00001BC3: 74 65 70 20 ; 
00001BC7: 6D 6F 64 65 ; 
00001BCB: 3F 20 59 2F ; 
00001BCF: 6E 3A 20 00 ; 
00001BD3: 43 61 6E 6E ; stepslowwarning defb "Cannot have slow and step mode active at the same time, disabling slow mo
00001BD7: 6F 74 20 68 ; de", nl, 0
00001BDB: 61 76 65 20 ; 
00001BDF: 73 6C 6F 77 ; 
00001BE3: 20 61 6E 64 ; 
00001BE7: 20 73 74 65 ; 
00001BEB: 70 20 6D 6F ; 
00001BEF: 64 65 20 61 ; 
00001BF3: 63 74 69 76 ; 
00001BF7: 65 20 61 74 ; 
00001BFB: 20 74 68 65 ; 
00001BFF: 20 73 61 6D ; 
00001C03: 65 20 74 69 ; 
00001C07: 6D 65 2C 20 ; 
00001C0B: 64 69 73 61 ; 
00001C0F: 62 6C 69 6E ; 
00001C13: 67 20 73 6C ; 
00001C17: 6F 77 20 6D ; 
00001C1B: 6F 64 65 0A ; 
00001C1F: 00          ; 
00001C20: 52 65 74 75 ; savedchoice     defb "Return to menu? (n for continue sim) Y/n: ", 0
00001C24: 72 6E 20 74 ; 
00001C28: 6F 20 6D 65 ; 
00001C2C: 6E 75 3F 20 ; 
00001C30: 28 6E 20 66 ; 
00001C34: 6F 72 20 63 ; 
00001C38: 6F 6E 74 69 ; 
00001C3C: 6E 75 65 20 ; 
00001C40: 73 69 6D 29 ; 
00001C44: 20 59 2F 6E ; 
00001C48: 3A 20 00    ; 
00001C4B: 50 6C 65 61 ; askname         defb "Please enter a name for the grid: ", 0
00001C4F: 73 65 20 65 ; 
00001C53: 6E 74 65 72 ; 
00001C57: 20 61 20 6E ; 
00001C5B: 61 6D 65 20 ; 
00001C5F: 66 6F 72 20 ; 
00001C63: 74 68 65 20 ; 
00001C67: 67 72 69 64 ; 
00001C6B: 3A 20 00    ; 
00001C6E: 45 72 61 73 ; warneraseslow   defb "Erase mode is active it is recommended to also use slow mode", nl, 0
00001C72: 65 20 6D 6F ; 
00001C76: 64 65 20 69 ; 
00001C7A: 73 20 61 63 ; 
00001C7E: 74 69 76 65 ; 
00001C82: 20 69 74 20 ; 
00001C86: 69 73 20 72 ; 
00001C8A: 65 63 6F 6D ; 
00001C8E: 6D 65 6E 64 ; 
00001C92: 65 64 20 74 ; 
00001C96: 6F 20 61 6C ; 
00001C9A: 73 6F 20 75 ; 
00001C9E: 73 65 20 73 ; 
00001CA2: 6C 6F 77 20 ; 
00001CA6: 6D 6F 64 65 ; 
00001CAA: 0A 00       ; 
00001CAC: 50 6C 65 61 ; askwid          defb "Please enter a width (", 0
00001CB0: 73 65 20 65 ; 
00001CB4: 6E 74 65 72 ; 
00001CB8: 20 61 20 77 ; 
00001CBC: 69 64 74 68 ; 
00001CC0: 20 28 00    ; 
00001CC3: 2D 00       ; dash            defb "-", 0
00001CC5: 29 3A 20 00 ; b_close_colon   defb "): ",0
00001CC9: 50 6C 65 61 ; askhei          defb "Please enter a height ", 0
00001CCD: 73 65 20 65 ; 
00001CD1: 6E 74 65 72 ; 
00001CD5: 20 61 20 68 ; 
00001CD9: 65 69 67 68 ; 
00001CDD: 74 20 00    ; 
00001CE0: 49 6E 76 61 ; getwidfailmsg   defb "Invalid width please enter a value between ", 0
00001CE4: 6C 69 64 20 ; 
00001CE8: 77 69 64 74 ; 
00001CEC: 68 20 70 6C ; 
00001CF0: 65 61 73 65 ; 
00001CF4: 20 65 6E 74 ; 
00001CF8: 65 72 20 61 ; 
00001CFC: 20 76 61 6C ; 
00001D00: 75 65 20 62 ; 
00001D04: 65 74 77 65 ; 
00001D08: 65 6E 20 00 ; 
00001D0C: 49 6E 76 61 ; getheifailmsg   defb "Invalid height please enter a value between ", 0
00001D10: 6C 69 64 20 ; 
00001D14: 68 65 69 67 ; 
00001D18: 68 74 20 70 ; 
00001D1C: 6C 65 61 73 ; 
00001D20: 65 20 65 6E ; 
00001D24: 74 65 72 20 ; 
00001D28: 61 20 76 61 ; 
00001D2C: 6C 75 65 20 ; 
00001D30: 62 65 74 77 ; 
00001D34: 65 65 6E 20 ; 
00001D38: 00          ; 
00001D39:             ; 
00001D39: 43 75 72 72 ; optionsp_1      defb "Current options: dims=(", 0 ;;width
00001D3D: 65 6E 74 20 ; 
00001D41: 6F 70 74 69 ; 
00001D45: 6F 6E 73 3A ; 
00001D49: 20 64 69 6D ; 
00001D4D: 73 3D 28 00 ; 
00001D51: 2C 20 00    ; optionsp_2      defb ", ", 0 ;;height
00001D54: 29 20 73 6C ; optionsp_3      defb ") slowMode=", 0 ;;OFF/ON
00001D58: 6F 77 4D 6F ; 
00001D5C: 64 65 3D 00 ; 
00001D60: 20 65 72 61 ; optionsp_4      defb " eraseMode=", 0 ;;^
00001D64: 73 65 4D 6F ; 
00001D68: 64 65 3D 00 ; 
00001D6C: 20 73 74 65 ; optionsp_5      defb " stepMode=", 0  ;;^
00001D70: 70 4D 6F 64 ; 
00001D74: 65 3D 00    ; 
00001D77:             ; 
00001D77: 59 6F 75 27 ; mainloopittsmsg defb "You've reached the max itterations before waiting for input. You can chan
00001D7B: 76 65 20 72 ; ge this in settings. Press any key to continue, 'q' to quit, and 's' to save the grid", nl, 0
00001D7F: 65 61 63 68 ; 
00001D83: 65 64 20 74 ; 
00001D87: 68 65 20 6D ; 
00001D8B: 61 78 20 69 ; 
00001D8F: 74 74 65 72 ; 
00001D93: 61 74 69 6F ; 
00001D97: 6E 73 20 62 ; 
00001D9B: 65 66 6F 72 ; 
00001D9F: 65 20 77 61 ; 
00001DA3: 69 74 69 6E ; 
00001DA7: 67 20 66 6F ; 
00001DAB: 72 20 69 6E ; 
00001DAF: 70 75 74 2E ; 
00001DB3: 20 59 6F 75 ; 
00001DB7: 20 63 61 6E ; 
00001DBB: 20 63 68 61 ; 
00001DBF: 6E 67 65 20 ; 
00001DC3: 74 68 69 73 ; 
00001DC7: 20 69 6E 20 ; 
00001DCB: 73 65 74 74 ; 
00001DCF: 69 6E 67 73 ; 
00001DD3: 2E 20 50 72 ; 
00001DD7: 65 73 73 20 ; 
00001DDB: 61 6E 79 20 ; 
00001DDF: 6B 65 79 20 ; 
00001DE3: 74 6F 20 63 ; 
00001DE7: 6F 6E 74 69 ; 
00001DEB: 6E 75 65 2C ; 
00001DEF: 20 27 71 27 ; 
00001DF3: 20 74 6F 20 ; 
00001DF7: 71 75 69 74 ; 
00001DFB: 2C 20 61 6E ; 
00001DFF: 64 20 27 73 ; 
00001E03: 27 20 74 6F ; 
00001E07: 20 73 61 76 ; 
00001E0B: 65 20 74 68 ; 
00001E0F: 65 20 67 72 ; 
00001E13: 69 64 0A 00 ; 
00001E17:             ; 
00001E17: 43 68 6F 6F ; askgenoption    defb "Choose between (R)andom generation or (D)rawing the grid", 0
00001E1B: 73 65 20 62 ; 
00001E1F: 65 74 77 65 ; 
00001E23: 65 6E 20 28 ; 
00001E27: 52 29 61 6E ; 
00001E2B: 64 6F 6D 20 ; 
00001E2F: 67 65 6E 65 ; 
00001E33: 72 61 74 69 ; 
00001E37: 6F 6E 20 6F ; 
00001E3B: 72 20 28 44 ; 
00001E3F: 29 72 61 77 ; 
00001E43: 69 6E 67 20 ; 
00001E47: 74 68 65 20 ; 
00001E4B: 67 72 69 64 ; 
00001E4F: 00          ; 
00001E50: 49 6E 76 61 ; setupGrdFailmsg defb "Invalid choice, use `R` for random generation and `d` for drawing the gri
00001E54: 6C 69 64 20 ; d. Not case sensative: ", 0
00001E58: 63 68 6F 69 ; 
00001E5C: 63 65 2C 20 ; 
00001E60: 75 73 65 20 ; 
00001E64: 60 52 60 20 ; 
00001E68: 66 6F 72 20 ; 
00001E6C: 72 61 6E 64 ; 
00001E70: 6F 6D 20 67 ; 
00001E74: 65 6E 65 72 ; 
00001E78: 61 74 69 6F ; 
00001E7C: 6E 20 61 6E ; 
00001E80: 64 20 60 64 ; 
00001E84: 60 20 66 6F ; 
00001E88: 72 20 64 72 ; 
00001E8C: 61 77 69 6E ; 
00001E90: 67 20 74 68 ; 
00001E94: 65 20 67 72 ; 
00001E98: 69 64 2E 20 ; 
00001E9C: 4E 6F 74 20 ; 
00001EA0: 63 61 73 65 ; 
00001EA4: 20 73 65 6E ; 
00001EA8: 73 61 74 69 ; 
00001EAC: 76 65 3A 20 ; 
00001EB0: 00          ; 
00001EB1: 45 6E 74 65 ; askseed         defb "Enter 4 characters to be used as the seed: ", 0
00001EB5: 72 20 34 20 ; 
00001EB9: 63 68 61 72 ; 
00001EBD: 61 63 74 65 ; 
00001EC1: 72 73 20 74 ; 
00001EC5: 6F 20 62 65 ; 
00001EC9: 20 75 73 65 ; 
00001ECD: 64 20 61 73 ; 
00001ED1: 20 74 68 65 ; 
00001ED5: 20 73 65 65 ; 
00001ED9: 64 3A 20 00 ; 
00001EDD: 55 73 69 6E ; drawinfomsg     defb "Using '1' and '0' choose the value of the current cell. Use enter to go t
00001EE1: 67 20 27 31 ; o next line", nl, 0
00001EE5: 27 20 61 6E ; 
00001EE9: 64 20 27 30 ; 
00001EED: 27 20 63 68 ; 
00001EF1: 6F 6F 73 65 ; 
00001EF5: 20 74 68 65 ; 
00001EF9: 20 76 61 6C ; 
00001EFD: 75 65 20 6F ; 
00001F01: 66 20 74 68 ; 
00001F05: 65 20 63 75 ; 
00001F09: 72 72 65 6E ; 
00001F0D: 74 20 63 65 ; 
00001F11: 6C 6C 2E 20 ; 
00001F15: 55 73 65 20 ; 
00001F19: 65 6E 74 65 ; 
00001F1D: 72 20 74 6F ; 
00001F21: 20 67 6F 20 ; 
00001F25: 74 6F 20 6E ; 
00001F29: 65 78 74 20 ; 
00001F2D: 6C 69 6E 65 ; 
00001F31: 0A 00       ; 
00001F33: 49 6E 76 61 ; drawfailmsg     defb "Invalid input please enter 1 or 0, or enter for next line: ", nl, 0
00001F37: 6C 69 64 20 ; 
00001F3B: 69 6E 70 75 ; 
00001F3F: 74 20 70 6C ; 
00001F43: 65 61 73 65 ; 
00001F47: 20 65 6E 74 ; 
00001F4B: 65 72 20 31 ; 
00001F4F: 20 6F 72 20 ; 
00001F53: 30 2C 20 6F ; 
00001F57: 72 20 65 6E ; 
00001F5B: 74 65 72 20 ; 
00001F5F: 66 6F 72 20 ; 
00001F63: 6E 65 78 74 ; 
00001F67: 20 6C 69 6E ; 
00001F6B: 65 3A 20 0A ; 
00001F6F: 00          ; 
00001F70: 47 72 69 64 ; gridfailmsg     defb "Grid was not properly initialised, consider smaller dims", nl, 0
00001F74: 20 77 61 73 ; 
00001F78: 20 6E 6F 74 ; 
00001F7C: 20 70 72 6F ; 
00001F80: 70 65 72 6C ; 
00001F84: 79 20 69 6E ; 
00001F88: 69 74 69 61 ; 
00001F8C: 6C 69 73 65 ; 
00001F90: 64 2C 20 63 ; 
00001F94: 6F 6E 73 69 ; 
00001F98: 64 65 72 20 ; 
00001F9C: 73 6D 61 6C ; 
00001FA0: 6C 65 72 20 ; 
00001FA4: 64 69 6D 73 ; 
00001FA8: 0A 00       ; 
00001FAA: 54 68 65 72 ; gridsavefail    defb "There was an error allocating memory for the grid save", nl, 0
00001FAE: 65 20 77 61 ; 
00001FB2: 73 20 61 6E ; 
00001FB6: 20 65 72 72 ; 
00001FBA: 6F 72 20 61 ; 
00001FBE: 6C 6C 6F 63 ; 
00001FC2: 61 74 69 6E ; 
00001FC6: 67 20 6D 65 ; 
00001FCA: 6D 6F 72 79 ; 
00001FCE: 20 66 6F 72 ; 
00001FD2: 20 74 68 65 ; 
00001FD6: 20 67 72 69 ; 
00001FDA: 64 20 73 61 ; 
00001FDE: 76 65 0A 00 ; 
00001FE2: 54 68 65 72 ; gridloadempty   defb "There are no saved grids, start a step mode sim and save the grid, return
00001FE6: 65 20 61 72 ; ing to main menu", nl, 0
00001FEA: 65 20 6E 6F ; 
00001FEE: 20 73 61 76 ; 
00001FF2: 65 64 20 67 ; 
00001FF6: 72 69 64 73 ; 
00001FFA: 2C 20 73 74 ; 
00001FFE: 61 72 74 20 ; 
00002002: 61 20 73 74 ; 
00002006: 65 70 20 6D ; 
0000200A: 6F 64 65 20 ; 
0000200E: 73 69 6D 20 ; 
00002012: 61 6E 64 20 ; 
00002016: 73 61 76 65 ; 
0000201A: 20 74 68 65 ; 
0000201E: 20 67 72 69 ; 
00002022: 64 2C 20 72 ; 
00002026: 65 74 75 72 ; 
0000202A: 6E 69 6E 67 ; 
0000202E: 20 74 6F 20 ; 
00002032: 6D 61 69 6E ; 
00002036: 20 6D 65 6E ; 
0000203A: 75 0A 00    ; 
0000203D: 7C 69 6E 64 ; gridloadpindex  defb "|index: ", 0
00002041: 65 78 3A 20 ; 
00002045: 00          ; 
00002046: 7C 6E 61 6D ; gridloadpname   defb "|name: ", 0
0000204A: 65 3A 20 00 ; 
0000204E: 7C 77 69 64 ; gridloadpwidth  defb "|width: ", 0
00002052: 74 68 3A 20 ; 
00002056: 00          ; 
00002057: 7C 68 65 69 ; gridloadpheight defb "|height: ", 0
0000205B: 67 68 74 3A ; 
0000205F: 20 00       ; 
00002061: 50 6C 65 61 ; loadboardaski   defb "Please enter the index of the grid to load, or enter a negative index to 
00002065: 73 65 20 65 ; not load a grid. (press enter to input)", nl, 0
00002069: 6E 74 65 72 ; 
0000206D: 20 74 68 65 ; 
00002071: 20 69 6E 64 ; 
00002075: 65 78 20 6F ; 
00002079: 66 20 74 68 ; 
0000207D: 65 20 67 72 ; 
00002081: 69 64 20 74 ; 
00002085: 6F 20 6C 6F ; 
00002089: 61 64 2C 20 ; 
0000208D: 6F 72 20 65 ; 
00002091: 6E 74 65 72 ; 
00002095: 20 61 20 6E ; 
00002099: 65 67 61 74 ; 
0000209D: 69 76 65 20 ; 
000020A1: 69 6E 64 65 ; 
000020A5: 78 20 74 6F ; 
000020A9: 20 6E 6F 74 ; 
000020AD: 20 6C 6F 61 ; 
000020B1: 64 20 61 20 ; 
000020B5: 67 72 69 64 ; 
000020B9: 2E 20 28 70 ; 
000020BD: 72 65 73 73 ; 
000020C1: 20 65 6E 74 ; 
000020C5: 65 72 20 74 ; 
000020C9: 6F 20 69 6E ; 
000020CD: 70 75 74 29 ; 
000020D1: 0A 00       ; 
000020D3: 52 65 74 75 ; loadboardretmsg defb "Returning to main menu", nl, 0
000020D7: 72 6E 69 6E ; 
000020DB: 67 20 74 6F ; 
000020DF: 20 6D 61 69 ; 
000020E3: 6E 20 6D 65 ; 
000020E7: 6E 75 0A 00 ; 
000020EB: 49 6E 76 61 ; loadboardifail  defb "Invalid input given for the index", nl, 0
000020EF: 6C 69 64 20 ; 
000020F3: 69 6E 70 75 ; 
000020F7: 74 20 67 69 ; 
000020FB: 76 65 6E 20 ; 
000020FF: 66 6F 72 20 ; 
00002103: 74 68 65 20 ; 
00002107: 69 6E 64 65 ; 
0000210B: 78 0A 00    ; 
0000210E: 49 6E 76 61 ; loadboardirerr  defb "Invalid index, out of range", nl, 0
00002112: 6C 69 64 20 ; 
00002116: 69 6E 64 65 ; 
0000211A: 78 2C 20 6F ; 
0000211E: 75 74 20 6F ; 
00002122: 66 20 72 61 ; 
00002126: 6E 67 65 0A ; 
0000212A: 00          ; 
0000212B: 45 72 72 6F ; loadboardmlcerr defb "Error allocating memory for loaded grid. Returing to main menu", nl, 0
0000212F: 72 20 61 6C ; 
00002133: 6C 6F 63 61 ; 
00002137: 74 69 6E 67 ; 
0000213B: 20 6D 65 6D ; 
0000213F: 6F 72 79 20 ; 
00002143: 66 6F 72 20 ; 
00002147: 6C 6F 61 64 ; 
0000214B: 65 64 20 67 ; 
0000214F: 72 69 64 2E ; 
00002153: 20 52 65 74 ; 
00002157: 75 72 69 6E ; 
0000215B: 67 20 74 6F ; 
0000215F: 20 6D 61 69 ; 
00002163: 6E 20 6D 65 ; 
00002167: 6E 75 0A 00 ; 
0000216B: 53 75 63 63 ; loadboardsucmsg defb "Successfully loaded the grid", nl, 0
0000216F: 65 73 73 66 ; 
00002173: 75 6C 6C 79 ; 
00002177: 20 6C 6F 61 ; 
0000217B: 64 65 64 20 ; 
0000217F: 74 68 65 20 ; 
00002183: 67 72 69 64 ; 
00002187: 0A 00       ; 
00002189: 4C 69 73 74 ; listgridmsg     defb "Listing all availible saved grids", nl, 0
0000218D: 69 6E 67 20 ; 
00002191: 61 6C 6C 20 ; 
00002195: 61 76 61 69 ; 
00002199: 6C 69 62 6C ; 
0000219D: 65 20 73 61 ; 
000021A1: 76 65 64 20 ; 
000021A5: 67 72 69 64 ; 
000021A9: 73 0A 00    ; 
000021AC: 2D 2D 2D 2D ; cutoff          defb "-----------------", nl, 0
000021B0: 2D 2D 2D 2D ; 
000021B4: 2D 2D 2D 2D ; 
000021B8: 2D 2D 2D 2D ; 
000021BC: 2D 0A 00    ; 
000021BF: 45 72 72 6F ; changearrverr_m defb "Error invalid value given (1-255) inclusive. Re-enter: ", nl, 0
000021C3: 72 20 69 6E ; 
000021C7: 76 61 6C 69 ; 
000021CB: 64 20 76 61 ; 
000021CF: 6C 75 65 20 ; 
000021D3: 67 69 76 65 ; 
000021D7: 6E 20 28 31 ; 
000021DB: 2D 32 35 35 ; 
000021DF: 29 20 69 6E ; 
000021E3: 63 6C 75 73 ; 
000021E7: 69 76 65 2E ; 
000021EB: 20 52 65 2D ; 
000021EF: 65 6E 74 65 ; 
000021F3: 72 3A 20 0A ; 
000021F7: 00          ; 
000021F8:             ; 
000021F8: 53 65 74 74 ; s_m1            defb "Settings", nl, "|-[0] stepMode_d     - The following 4 settings are the d
000021FC: 69 6E 67 73 ; efault values for the options", nl, "|-[1] slowMode_d", nl, "|-[2] eraseMode_d", nl, "|-[3] Dim
00002200: 0A 7C 2D 5B ; s_d", nl, 0
00002204: 30 5D 20 73 ; 
00002208: 74 65 70 4D ; 
0000220C: 6F 64 65 5F ; 
00002210: 64 20 20 20 ; 
00002214: 20 20 2D 20 ; 
00002218: 54 68 65 20 ; 
0000221C: 66 6F 6C 6C ; 
00002220: 6F 77 69 6E ; 
00002224: 67 20 34 20 ; 
00002228: 73 65 74 74 ; 
0000222C: 69 6E 67 73 ; 
00002230: 20 61 72 65 ; 
00002234: 20 74 68 65 ; 
00002238: 20 64 65 66 ; 
0000223C: 61 75 6C 74 ; 
00002240: 20 76 61 6C ; 
00002244: 75 65 73 20 ; 
00002248: 66 6F 72 20 ; 
0000224C: 74 68 65 20 ; 
00002250: 6F 70 74 69 ; 
00002254: 6F 6E 73 0A ; 
00002258: 7C 2D 5B 31 ; 
0000225C: 5D 20 73 6C ; 
00002260: 6F 77 4D 6F ; 
00002264: 64 65 5F 64 ; 
00002268: 0A 7C 2D 5B ; 
0000226C: 32 5D 20 65 ; 
00002270: 72 61 73 65 ; 
00002274: 4D 6F 64 65 ; 
00002278: 5F 64 0A 7C ; 
0000227C: 2D 5B 33 5D ; 
00002280: 20 44 69 6D ; 
00002284: 73 5F 64 0A ; 
00002288: 00          ; 
00002289: 7C 2D 5B 34 ; s_m2            defb "|-[4] range          - The range of values that the dims can have (1-255 
0000228D: 5D 20 72 61 ; && range_min < range_max)", nl, 0
00002291: 6E 67 65 20 ; 
00002295: 20 20 20 20 ; 
00002299: 20 20 20 20 ; 
0000229D: 20 2D 20 54 ; 
000022A1: 68 65 20 72 ; 
000022A5: 61 6E 67 65 ; 
000022A9: 20 6F 66 20 ; 
000022AD: 76 61 6C 75 ; 
000022B1: 65 73 20 74 ; 
000022B5: 68 61 74 20 ; 
000022B9: 74 68 65 20 ; 
000022BD: 64 69 6D 73 ; 
000022C1: 20 63 61 6E ; 
000022C5: 20 68 61 76 ; 
000022C9: 65 20 28 31 ; 
000022CD: 2D 32 35 35 ; 
000022D1: 20 26 26 20 ; 
000022D5: 72 61 6E 67 ; 
000022D9: 65 5F 6D 69 ; 
000022DD: 6E 20 3C 20 ; 
000022E1: 72 61 6E 67 ; 
000022E5: 65 5F 6D 61 ; 
000022E9: 78 29 0A 00 ; 
000022ED: 7C 2D 5B 35 ; s_m3            defb "|-[5] Icons          - The characters printed for an alive/dead/ptr cell"
000022F1: 5D 20 49 63 ; ,nl, "`-[6] itters         - The number of itterations in the non-step version before it will w
000022F5: 6F 6E 73 20 ; ait for input", nl, 0
000022F9: 20 20 20 20 ; 
000022FD: 20 20 20 20 ; 
00002301: 20 2D 20 54 ; 
00002305: 68 65 20 63 ; 
00002309: 68 61 72 61 ; 
0000230D: 63 74 65 72 ; 
00002311: 73 20 70 72 ; 
00002315: 69 6E 74 65 ; 
00002319: 64 20 66 6F ; 
0000231D: 72 20 61 6E ; 
00002321: 20 61 6C 69 ; 
00002325: 76 65 2F 64 ; 
00002329: 65 61 64 2F ; 
0000232D: 70 74 72 20 ; 
00002331: 63 65 6C 6C ; 
00002335: 0A 60 2D 5B ; 
00002339: 36 5D 20 69 ; 
0000233D: 74 74 65 72 ; 
00002341: 73 20 20 20 ; 
00002345: 20 20 20 20 ; 
00002349: 20 20 2D 20 ; 
0000234D: 54 68 65 20 ; 
00002351: 6E 75 6D 62 ; 
00002355: 65 72 20 6F ; 
00002359: 66 20 69 74 ; 
0000235D: 74 65 72 61 ; 
00002361: 74 69 6F 6E ; 
00002365: 73 20 69 6E ; 
00002369: 20 74 68 65 ; 
0000236D: 20 6E 6F 6E ; 
00002371: 2D 73 74 65 ; 
00002375: 70 20 76 65 ; 
00002379: 72 73 69 6F ; 
0000237D: 6E 20 62 65 ; 
00002381: 66 6F 72 65 ; 
00002385: 20 69 74 20 ; 
00002389: 77 69 6C 6C ; 
0000238D: 20 77 61 69 ; 
00002391: 74 20 66 6F ; 
00002395: 72 20 69 6E ; 
00002399: 70 75 74 0A ; 
0000239D: 00          ; 
0000239E: 7C 2D 5B 37 ; s_m4            defb "|-[7] Drawing erase  - Bool for if when drawing the grid it should erase 
000023A2: 5D 20 44 72 ; the previous one", nl, 0
000023A6: 61 77 69 6E ; 
000023AA: 67 20 65 72 ; 
000023AE: 61 73 65 20 ; 
000023B2: 20 2D 20 42 ; 
000023B6: 6F 6F 6C 20 ; 
000023BA: 66 6F 72 20 ; 
000023BE: 69 66 20 77 ; 
000023C2: 68 65 6E 20 ; 
000023C6: 64 72 61 77 ; 
000023CA: 69 6E 67 20 ; 
000023CE: 74 68 65 20 ; 
000023D2: 67 72 69 64 ; 
000023D6: 20 69 74 20 ; 
000023DA: 73 68 6F 75 ; 
000023DE: 6C 64 20 65 ; 
000023E2: 72 61 73 65 ; 
000023E6: 20 74 68 65 ; 
000023EA: 20 70 72 65 ; 
000023EE: 76 69 6F 75 ; 
000023F2: 73 20 6F 6E ; 
000023F6: 65 0A 00    ; 
000023F9: 45 6E 74 65 ; s_m             defb "Enter the index of the setting to edit or -1 to return to the menu (press
000023FD: 72 20 74 68 ;  enter to input): ", 0
00002401: 65 20 69 6E ; 
00002405: 64 65 78 20 ; 
00002409: 6F 66 20 74 ; 
0000240D: 68 65 20 73 ; 
00002411: 65 74 74 69 ; 
00002415: 6E 67 20 74 ; 
00002419: 6F 20 65 64 ; 
0000241D: 69 74 20 6F ; 
00002421: 72 20 2D 31 ; 
00002425: 20 74 6F 20 ; 
00002429: 72 65 74 75 ; 
0000242D: 72 6E 20 74 ; 
00002431: 6F 20 74 68 ; 
00002435: 65 20 6D 65 ; 
00002439: 6E 75 20 28 ; 
0000243D: 70 72 65 73 ; 
00002441: 73 20 65 6E ; 
00002445: 74 65 72 20 ; 
00002449: 74 6F 20 69 ; 
0000244D: 6E 70 75 74 ; 
00002451: 29 3A 20 00 ; 
00002455: 45 72 72 6F ; s_m_err         defb "Error invalid index. Re-enter: ", 0
00002459: 72 20 69 6E ; 
0000245D: 76 61 6C 69 ; 
00002461: 64 20 69 6E ; 
00002465: 64 65 78 2E ; 
00002469: 20 52 65 2D ; 
0000246D: 65 6E 74 65 ; 
00002471: 72 3A 20 00 ; 
00002475:             ; 
00002475: 53 6C 6F 77 ; currentslow     defb "Slow_d: ", 0
00002479: 5F 64 3A 20 ; 
0000247D: 00          ; 
0000247E: 45 72 61 73 ; currenterase    defb "Erase_d: ", 0
00002482: 65 5F 64 3A ; 
00002486: 20 00       ; 
00002488: 53 74 65 70 ; currentstep     defb "Step_d: ", 0
0000248C: 5F 64 3A 20 ; 
00002490: 00          ; 
00002491: 44 69 6D 73 ; currentDims     defb "Dims: ", 0
00002495: 3A 20 00    ; 
00002498: 52 61 6E 67 ; currentRange    defb "Range: ", 0
0000249C: 65 3A 20 00 ; 
000024A0: 49 74 74 65 ; currentItters   defb "Itters: ", 0
000024A4: 72 73 3A 20 ; 
000024A8: 00          ; 
000024A9: 45 72 61 73 ; currentdraweras defb "Erase when drawing: ", 0
000024AD: 65 20 77 68 ; 
000024B1: 65 6E 20 64 ; 
000024B5: 72 61 77 69 ; 
000024B9: 6E 67 3A 20 ; 
000024BD: 00          ; 
000024BE: 28 00       ; bracket_open    defb "(", 0
000024C0: 2C 20 00    ; comma_space     defb ", ", 0
000024C3: 29 00       ; bracket_close   defb ")", 0
000024C5: 41 6C 69 76 ; currenticons_1  defb "Alive: ", 0
000024C9: 65 3A 20 00 ; 
000024CD: 44 65 61 64 ; currenticons_2  defb "Dead: ", 0
000024D1: 3A 20 00    ; 
000024D4: 50 74 72 3A ; currenticons_3  defb "Ptr: ", 0
000024D8: 20 00       ; 
000024DA: 45 6E 74 65 ; currenticons_a  defb "Enter 3 character (not seperated) for the values of the alive/dead/ptr ch
000024DE: 72 20 33 20 ; aracters: ", 0
000024E2: 63 68 61 72 ; 
000024E6: 61 63 74 65 ; 
000024EA: 72 20 28 6E ; 
000024EE: 6F 74 20 73 ; 
000024F2: 65 70 65 72 ; 
000024F6: 61 74 65 64 ; 
000024FA: 29 20 66 6F ; 
000024FE: 72 20 74 68 ; 
00002502: 65 20 76 61 ; 
00002506: 6C 75 65 73 ; 
0000250A: 20 6F 66 20 ; 
0000250E: 74 68 65 20 ; 
00002512: 61 6C 69 76 ; 
00002516: 65 2F 64 65 ; 
0000251A: 61 64 2F 70 ; 
0000251E: 74 72 20 63 ; 
00002522: 68 61 72 61 ; 
00002526: 63 74 65 72 ; 
0000252A: 73 3A 20 00 ; 
0000252E: 45 72 72 6F ; mallocerr_m     defb "Error getting memory from malloc", nl, 0
00002532: 72 20 67 65 ; 
00002536: 74 74 69 6E ; 
0000253A: 67 20 6D 65 ; 
0000253E: 6D 6F 72 79 ; 
00002542: 20 66 72 6F ; 
00002546: 6D 20 6D 61 ; 
0000254A: 6C 6C 6F 63 ; 
0000254E: 0A 00       ; 
00002550: 45 72 72 6F ; getstringerr_m  defb "Error getting string, could be malloc error", nl, 0
00002554: 72 20 67 65 ; 
00002558: 74 74 69 6E ; 
0000255C: 67 20 73 74 ; 
00002560: 72 69 6E 67 ; 
00002564: 2C 20 63 6F ; 
00002568: 75 6C 64 20 ; 
0000256C: 62 65 20 6D ; 
00002570: 61 6C 6C 6F ; 
00002574: 63 20 65 72 ; 
00002578: 72 6F 72 0A ; 
0000257C: 00          ; 
0000257D: 49 74 74 65 ; currentitter    defb "Itters: ", 0
00002581: 72 73 3A 20 ; 
00002585: 00          ; 
00002586: 45 6E 74 65 ; currentaskx     defb "Enter value for x: ", 0
0000258A: 72 20 76 61 ; 
0000258E: 6C 75 65 20 ; 
00002592: 66 6F 72 20 ; 
00002596: 78 3A 20 00 ; 
0000259A: 45 6E 74 65 ; currentasky     defb "Enter value for y: ", 0
0000259E: 72 20 76 61 ; 
000025A2: 6C 75 65 20 ; 
000025A6: 66 6F 72 20 ; 
000025AA: 79 3A 20 00 ; 
000025AE: 45 6E 74 65 ; currentasknew   defb "Enter new value: ", 0
000025B2: 72 20 6E 65 ; 
000025B6: 77 20 76 61 ; 
000025BA: 6C 75 65 3A ; 
000025BE: 20 00       ; 
000025C0: 45 6E 74 65 ; currentasknew_B defb "Enter new value (0 or 1): ", 0
000025C4: 72 20 6E 65 ; 
000025C8: 77 20 76 61 ; 
000025CC: 6C 75 65 20 ; 
000025D0: 28 30 20 6F ; 
000025D4: 72 20 31 29 ; 
000025D8: 3A 20 00    ; 
000025DB: 45 72 72 6F ; currentasknew_E defb "Error invalid re-enter: ", 0
000025DF: 72 20 69 6E ; 
000025E3: 76 61 6C 69 ; 
000025E7: 64 20 72 65 ; 
000025EB: 2D 65 6E 74 ; 
000025EF: 65 72 3A 20 ; 
000025F3: 00          ; 
000025F4: 49 6E 76 61 ; currentarrerr   defb "Invalid value entered re-enter: ", 0
000025F8: 6C 69 64 20 ; 
000025FC: 76 61 6C 75 ; 
00002600: 65 20 65 6E ; 
00002604: 74 65 72 65 ; 
00002608: 64 20 72 65 ; 
0000260C: 2D 65 6E 74 ; 
00002610: 65 72 3A 20 ; 
00002614: 00          ; 
00002615: 49 6E 76 61 ; changearrsizmsg defb "Invalid, x >= y.", nl, 0
00002619: 6C 69 64 2C ; 
0000261D: 20 78 20 3E ; 
00002621: 3D 20 79 2E ; 
00002625: 0A 00       ; 
00002627: 49 6E 76 61 ; changeittere_m  defb "Invalid itter value. Re-enter: ", nl, 0
0000262B: 6C 69 64 20 ; 
0000262F: 69 74 74 65 ; 
00002633: 72 20 76 61 ; 
00002637: 6C 75 65 2E ; 
0000263B: 20 52 65 2D ; 
0000263F: 65 6E 74 65 ; 
00002643: 72 3A 20 0A ; 
00002647: 00          ; 
00002648: 45 6E 74 65 ; getitters_m     defb "Enter the max itterations (1-255): ", 0
0000264C: 72 20 74 68 ; 
00002650: 65 20 6D 61 ; 
00002654: 78 20 69 74 ; 
00002658: 74 65 72 61 ; 
0000265C: 74 69 6F 6E ; 
00002660: 73 20 28 31 ; 
00002664: 2D 32 35 35 ; 
00002668: 29 3A 20 00 ; 
0000266C:             ; 
0000266C:             ; ;;debug for heap
0000266C: 50 72 69 6E ; printFree_m     defb "Printing free list", nl
00002670: 74 69 6E 67 ; 
00002674: 20 66 72 65 ; 
00002678: 65 20 6C 69 ; 
0000267C: 73 74 0A    ; 
0000267F: 46 6F 75 6E ; printfree_f_m   defb "Found a new free item", nl, 0
00002683: 64 20 61 20 ; 
00002687: 6E 65 77 20 ; 
0000268B: 66 72 65 65 ; 
0000268F: 20 69 74 65 ; 
00002693: 6D 0A 00    ; 
00002696: 41 64 64 72 ; printfree_f_mad defb "Address: ", 0
0000269A: 65 73 73 3A ; 
0000269E: 20 00       ; 
000026A0: 4E 65 78 74 ; printfree_f_mnx defb "Next   : ", 0
000026A4: 20 20 20 3A ; 
000026A8: 20 00       ; 
000026AA: 50 72 65 76 ; printfree_f_mpr defb "Prev   : ", 0
000026AE: 20 20 20 3A ; 
000026B2: 20 00       ; 
000026B4: 53 69 7A 65 ; printfree_f_msz defb "Size   : ", 0
000026B8: 20 20 20 3A ; 
000026BC: 20 00       ; 
000026BE: 5B 5B 21 21 ; printFree_m_e   defb "[[!!]] Error circular Crate found. Ending printFree [[!!]]", nl, 0
000026C2: 5D 5D 20 45 ; 
000026C6: 72 72 6F 72 ; 
000026CA: 20 63 69 72 ; 
000026CE: 63 75 6C 61 ; 
000026D2: 72 20 43 72 ; 
000026D6: 61 74 65 20 ; 
000026DA: 66 6F 75 6E ; 
000026DE: 64 2E 20 45 ; 
000026E2: 6E 64 69 6E ; 
000026E6: 67 20 70 72 ; 
000026EA: 69 6E 74 46 ; 
000026EE: 72 65 65 20 ; 
000026F2: 5B 5B 21 21 ; 
000026F6: 5D 5D 0A 00 ; 
000026FA:             ; 
000026FA: 50 72 69 6E ; printAll_m      defb "Printing all elements in the heap", nl, 0
000026FE: 74 69 6E 67 ; 
00002702: 20 61 6C 6C ; 
00002706: 20 65 6C 65 ; 
0000270A: 6D 65 6E 74 ; 
0000270E: 73 20 69 6E ; 
00002712: 20 74 68 65 ; 
00002716: 20 68 65 61 ; 
0000271A: 70 0A 00    ; 
0000271D: 54 68 69 73 ; printAll_m_f    defb "This is a Free block", nl, 0
00002721: 20 69 73 20 ; 
00002725: 61 20 46 72 ; 
00002729: 65 65 20 62 ; 
0000272D: 6C 6F 63 6B ; 
00002731: 0A 00       ; 
00002733: 54 68 69 73 ; printAll_m_t    defb "This is a Taken block", nl, 0
00002737: 20 69 73 20 ; 
0000273B: 61 20 54 61 ; 
0000273F: 6B 65 6E 20 ; 
00002743: 62 6C 6F 63 ; 
00002747: 6B 0A 00    ; 
0000274A: 5B 5B 21 21 ; printAll_m_e    defb "[[!!]] Error circular crate found, NO LONGER PRINTING FREE CLASSIFIERS [[
0000274E: 5D 5D 20 45 ; !!]]", nl, 0
00002752: 72 72 6F 72 ; 
00002756: 20 63 69 72 ; 
0000275A: 63 75 6C 61 ; 
0000275E: 72 20 63 72 ; 
00002762: 61 74 65 20 ; 
00002766: 66 6F 75 6E ; 
0000276A: 64 2C 20 4E ; 
0000276E: 4F 20 4C 4F ; 
00002772: 4E 47 45 52 ; 
00002776: 20 50 52 49 ; 
0000277A: 4E 54 49 4E ; 
0000277E: 47 20 46 52 ; 
00002782: 45 45 20 43 ; 
00002786: 4C 41 53 53 ; 
0000278A: 49 46 49 45 ; 
0000278E: 52 53 20 5B ; 
00002792: 5B 21 21 5D ; 
00002796: 5D 0A 00    ; 
00002799:             ; 
00002799: 48 65 72 65 ; printHeap_end_m defb "Here's the heap at the end of the program!", nl, 0
0000279D: 27 73 20 74 ; 
000027A1: 68 65 20 68 ; 
000027A5: 65 61 70 20 ; 
000027A9: 61 74 20 74 ; 
000027AD: 68 65 20 65 ; 
000027B1: 6E 64 20 6F ; 
000027B5: 66 20 74 68 ; 
000027B9: 65 20 70 72 ; 
000027BD: 6F 67 72 61 ; 
000027C1: 6D 21 0A 00 ; 
000027C5:             ; 
000027C5: 4D 61 6C 6C ; malloc_panic    defb "Malloc failed, cannot recover. Please consider reporting this to your nea
000027C9: 6F 63 20 66 ; rest duck", nl, 0
000027CD: 61 69 6C 65 ; 
000027D1: 64 2C 20 63 ; 
000027D5: 61 6E 6E 6F ; 
000027D9: 74 20 72 65 ; 
000027DD: 63 6F 76 65 ; 
000027E1: 72 2E 20 50 ; 
000027E5: 6C 65 61 73 ; 
000027E9: 65 20 63 6F ; 
000027ED: 6E 73 69 64 ; 
000027F1: 65 72 20 72 ; 
000027F5: 65 70 6F 72 ; 
000027F9: 74 69 6E 67 ; 
000027FD: 20 74 68 69 ; 
00002801: 73 20 74 6F ; 
00002805: 20 79 6F 75 ; 
00002809: 72 20 6E 65 ; 
0000280D: 61 72 65 73 ; 
00002811: 74 20 64 75 ; 
00002815: 63 6B 0A 00 ; 
00002819:             ; 
00002819: 4F 4E 00    ; on_msg          defb "ON", 0
0000281C: 4F 46 46 00 ; off_msg         defb "OFF", 0
00002820: 2C 00       ; comma           defb ",", 0
00002822:             ; 
00002824:             ; align
00002824: 00000000    ; heapstart       defw 0 ;;points to the end of the data this is where the heap can then begin
00002828:             ; Remaining literals

Symbol Table: Labels
: max_addr                          00100000  Value
: stack_size                        00010000  Value
: nl                                0000000A  Value
: backspace                         00000008  Value
: minBuffSize                       00000008  Value
: enter                             0000000A  Value
: minSaveSize                       00000008  Value
: sizeofSaveI                       0000000C  Value
: heaphead                          00000004  Local -- ARM
: offsets                           00000008  Local -- ARM
: gridA                             00000048  Local -- ARM
: gridB                             0000004C  Local -- ARM
: erase_b                           00000050  Local -- ARM
: slow_b                            00000051  Local -- ARM
: step_b                            00000052  Local -- ARM
: width                             00000053  Local -- ARM
: height                            00000054  Local -- ARM
: range_min                         00000055  Local -- ARM
: range_max                         00000056  Local -- ARM
: maxitters                         00000057  Local -- ARM
: drawerase                         00000058  Local -- ARM
: alive_c                           00000059  Local -- ARM
: dead_c                            0000005A  Local -- ARM
: ptr_c                             0000005B  Local -- ARM
: erase_b_d                         0000005C  Local -- ARM
: slow_b_d                          0000005D  Local -- ARM
: step_b_d                          0000005E  Local -- ARM
: width_d                           0000005F  Local -- ARM
: height_d                          00000060  Local -- ARM
: _start                            00000064  Local -- ARM
: main                              00000094  Local -- ARM
: mainmenu                          000000C8  Local -- ARM
: mainchoice                        000000E0  Local -- ARM
: showHeap                          00000128  Local -- ARM
: mainloopstart                     00000130  Local -- ARM
: mainloop                          00000164  Local -- ARM
: mainloopcont                      00000188  Local -- ARM
: mainloopdostep                    000001A4  Local -- ARM
: mainloopskipstep                  000001CC  Local -- ARM
: gridFail                          000001F0  Local -- ARM
: mainMallocFail                    000001FC  Local -- ARM
: mainEnd                           0000020C  Local -- ARM
: mainEndEnd                        00000230  Local -- ARM
: mainfree                          0000023C  Local -- ARM
: mainfreeloop                      00000250  Local -- ARM
: mainfreelend                      00000278  Local -- ARM
: mainfreeend                       00000280  Local -- ARM
: settingsmenu                      00000288  Local -- ARM
: changesetting                     000002B8  Local -- ARM
: changesettingget                  000002C4  Local -- ARM
: changesettingserr                 00000308  Local -- ARM
: changesettingsmallocfail          00000318  Local -- ARM
: changesettingscont                00000328  Local -- ARM
: jumps                             00000334  Local -- ARM
: getjump                           00000354  Local -- ARM
: changearr                         000003A8  Local -- ARM
: changearrget                      000003BC  Local -- ARM
: changearrsizeerr                  00000408  Local -- ARM
: changearrset                      00000418  Local -- ARM
: changearrmallocerr                00000430  Local -- ARM
: changearrend                      00000438  Local -- ARM
: changearrendend                   0000043C  Local -- ARM
: changearrgetvalidint              00000444  Local -- ARM
: changearrgetvalidintget           00000448  Local -- ARM
: changearrgetvalidinterr           00000480  Local -- ARM
: changearrgetvalidintcont          00000494  Local -- ARM
: changearrgvmallocerr              000004A8  Local -- ARM
: changearrgetvalidintend           000004B0  Local -- ARM
: changearrgvendend                 000004B8  Local -- ARM
: printdims                         000004C0  Local -- ARM
: changestep                        00000514  Local -- ARM
: changeslow                        0000052C  Local -- ARM
: changeerase                       00000544  Local -- ARM
: changebool                        00000558  Local -- ARM
: changebool_cont                   00000598  Local -- ARM
: changebool_set                    000005C4  Local -- ARM
: changeboolend                     000005F4  Local -- ARM
: changedims                        000005FC  Local -- ARM
: changedimscont                    0000062C  Local -- ARM
: changerange                       00000630  Local -- ARM
: changerangecont                   00000660  Local -- ARM
: changeicons                       00000664  Local -- ARM
: changeiconsmallerr                000006B0  Local -- ARM
: printicons                        000006C0  Local -- ARM
: printiconsend                     00000714  Local -- ARM
: changeitter                       00000718  Local -- ARM
: changeitterget                    0000073C  Local -- ARM
: changeittergetcont                00000764  Local -- ARM
: changeittererr                    0000079C  Local -- ARM
: changeitterend                    000007B0  Local -- ARM
: changedrawerase                   000007CC  Local -- ARM
: changedraweraseend                000007E4  Local -- ARM
: newboard                          000007E8  Local -- ARM
: loadboard                         00000818  Local -- ARM
: loadboardaskindex                 0000082C  Local -- ARM
: loadboardaskindexcont             00000860  Local -- ARM
: loadboardindex                    000008A8  Local -- ARM
: loadboardmain                     000008C4  Local -- ARM
: loadboardmallocB                  0000092C  Local -- ARM
: loadboardskipB                    00000948  Local -- ARM
: loadboardmallocfail               00000968  Local -- ARM
: loadboardret                      00000978  Local -- ARM
: loadboardempty                    00000984  Local -- ARM
: loadboarderr                      00000984  Local -- ARM
: loadboardsucc                     00000988  Local -- ARM
: newline                           0000098C  Local -- ARM
: step                              00000998  Local -- ARM
: stepcont                          000009EC  Local -- ARM
: stependfail                       00000A28  Local -- ARM
: stependsucc                       00000A30  Local -- ARM
: stepend                           00000A34  Local -- ARM
: listGrids                         00000A3C  Local -- ARM
: listGridsLoop                     00000A70  Local -- ARM
: listGridsEmpty                    00000B04  Local -- ARM
: listGridsLend                     00000B10  Local -- ARM
: listGridsEnd                      00000B10  Local -- ARM
: saveGrid                          00000B18  Local -- ARM
: saveGridResize                    00000B3C  Local -- ARM
: saveGridAdd                       00000B74  Local -- ARM
: saveGridFailMalloc                00000BDC  Local -- ARM
: saveGridSucc                      00000BE4  Local -- ARM
: saveGridEnd                       00000BE8  Local -- ARM
: erase                             00000BF0  Local -- ARM
: eraseloop                         00000BF4  Local -- ARM
: eraseend                          00000C0C  Local -- ARM
: slow                              00000C10  Local -- ARM
: slowloop                          00000C18  Local -- ARM
: slowend                           00000C38  Local -- ARM
: heapclean                         00000C3C  Local -- ARM
: heapcleanloop                     00000C58  Local -- ARM
: heapcleanend                      00000C6C  Local -- ARM
: strlen                            00000C70  Local -- ARM
: strlenloop                        00000C7C  Local -- ARM
: strlenend                         00000C90  Local -- ARM
: strtoi                            00000C98  Local -- ARM
: strtoiloop                        00000CD8  Local -- ARM
: strtoilend                        00000D0C  Local -- ARM
: strtoifailminus                   00000D14  Local -- ARM
: strtoifailoutrange                00000D1C  Local -- ARM
: strtoifailnonnum                  00000D24  Local -- ARM
: strtoiendfail                     00000D28  Local -- ARM
: strtoiendsucc                     00000D30  Local -- ARM
: strtoiend                         00000D34  Local -- ARM
: memcpy                            00000D3C  Local -- ARM
: memcpywordsloop                   00000D64  Local -- ARM
: memcpywordslend                   00000D7C  Local -- ARM
: memcpyallbytes                    00000D8C  Local -- ARM
: memcpybytes                       00000D98  Local -- ARM
: memcpybytesloop                   00000D9C  Local -- ARM
: memcpybyteslend                   00000DB4  Local -- ARM
: memcpyend                         00000DB8  Local -- ARM
: getstring                         00000DC0  Local -- ARM
: getstringloop                     00000DF4  Local -- ARM
: getstringloopskipsize             00000E04  Local -- ARM
: skipMax                           00000E18  Local -- ARM
: getstringlcont                    00000E24  Local -- ARM
: getstringresize                   00000E3C  Local -- ARM
: getstringlend                     00000E74  Local -- ARM
: getstringResizeEnd                00000E80  Local -- ARM
: getstringErr                      00000EB8  Local -- ARM
: getstringEnd                      00000EC0  Local -- ARM
: getstringEndEnd                   00000ECC  Local -- ARM
: tolower                           00000ED4  Local -- ARM
: setupGrid                         00000EDC  Local -- ARM
: setupGridAsk                      00000F24  Local -- ARM
: setupdrawing                      00000F54  Local -- ARM
: setuprandom                       00000F68  Local -- ARM
: setupstart                        00000F9C  Local -- ARM
: setuprowloop                      00000FA0  Local -- ARM
: setupcolloop                      00000FAC  Local -- ARM
: dorandom                          00000FC0  Local -- ARM
: dodrawstart                       00000FD4  Local -- ARM
: dodraw                            00000FEC  Local -- ARM
: dodrawfail                        00001048  Local -- ARM
: dodrawsucc                        00001058  Local -- ARM
: dodrawsuccskiperase               00001084  Local -- ARM
: setupcollcont                     0000108C  Local -- ARM
: setupcollend                      0000109C  Local -- ARM
: setuprowlend                      000010A4  Local -- ARM
: setupGridFail                     000010AC  Local -- ARM
: setupGridEnd                      000010BC  Local -- ARM
: drawgrid                          000010C4  Local -- ARM
: drawgridrowloop                   000010E8  Local -- ARM
: drawgridcolloop                   000010F4  Local -- ARM
: drawgridprintcurrent              00001130  Local -- ARM
: drawgridcollcont                  00001140  Local -- ARM
: drawgridcollend                   00001150  Local -- ARM
: drawgridrowlend                   00001164  Local -- ARM
: drawgridend                       0000116C  Local -- ARM
: printoptions                      00001174  Local -- ARM
: setupOptions                      00001248  Local -- ARM
: setupOptionsDEnd                  000012F4  Local -- ARM
: setupCustom                       00001300  Local -- ARM
: setupCustomskipslow               000013C4  Local -- ARM
: printrange                        000013D8  Local -- ARM
: setupCustomDimsCheck              00001420  Local -- ARM
: getwid                            00001438  Local -- ARM
: getwidFail                        000014A4  Local -- ARM
: getheisetup                       000014B8  Local -- ARM
: gethei                            000014C8  Local -- ARM
: getheiFail                        00001534  Local -- ARM
: customfail                        0000154C  Local -- ARM
: customend                         0000155C  Local -- ARM
: customret                         00001560  Local -- ARM
: updategrid                        00001568  Local -- ARM
: updategridrowloop                 00001590  Local -- ARM
: updategridcolloop                 0000159C  Local -- ARM
: updatealive                       000015C4  Local -- ARM
: updatedead                        000015E0  Local -- ARM
: updatelcont                       000015F0  Local -- ARM
: updategridccollend                000015F8  Local -- ARM
: updategridrowlend                 00001604  Local -- ARM
: updategridend                     00001604  Local -- ARM
: countneighbours                   0000160C  Local -- ARM
: countneighboursloop               00001638  Local -- ARM
: countneighboursskipadd            0000167C  Local -- ARM
: countneighbourslend               00001680  Local -- ARM
: countneighboursend                00001680  Local -- ARM
: isinrange                         0000168C  Local -- ARM
: isinrangefail                     000016D0  Local -- ARM
: isinrangeend                      000016D4  Local -- ARM
: setupHeap                         000016D8  Local -- ARM
: malloc                            0000170C  Local -- ARM
: mallignend                        00001728  Local -- ARM
: checkcrate                        00001734  Local -- ARM
: nocrates                          00001754  Local -- ARM
: foundcrate                        0000175C  Local -- ARM
: splitcrate                        0000176C  Local -- ARM
: usecrate                          000017A0  Local -- ARM
: mallocEnd                         000017B4  Local -- ARM
: printHeap                         000017BC  Local -- ARM
: printHeapend                      000017C8  Local -- ARM
: printAll                          000017D0  Local -- ARM
: printAllLoop                      000017F0  Local -- ARM
: printAllLoopSkipWarning           00001814  Local -- ARM
: printAllLoopCont                  00001834  Local -- ARM
: printAllLend                      00001854  Local -- ARM
: printAllEnd                       00001854  Local -- ARM
: printFree                         0000185C  Local -- ARM
: printFreeloop                     00001878  Local -- ARM
: printFreelend                     000018B0  Local -- ARM
: printFreeErr                      000018B4  Local -- ARM
: printFreeEnd                      000018C0  Local -- ARM
: printblock                        000018C8  Local -- ARM
: free                              00001960  Local -- ARM
: freeloop                          00001974  Local -- ARM
: freelend                          00001990  Local -- ARM
: freelendEnd                       000019B0  Local -- ARM
: freeMergeCheck                    000019B8  Local -- ARM
: verifyLeft                        000019C8  Local -- ARM
: verifyRight                       000019DC  Local -- ARM
: merge                             000019F0  Local -- ARM
: mergeNew                          00001A1C  Local -- ARM
: freeEnd                           00001A1C  Local -- ARM
: welcomemsg                        00001A24  Local -- ARM
: welcome2msg                       00001A55  Local -- ARM
: mainchoicefail                    00001A9A  Local -- ARM
: mainendmsg                        00001B31  Local -- ARM
: askdefaults                       00001B58  Local -- ARM
: askerase                          00001B8A  Local -- ARM
: askslow                           00001BA3  Local -- ARM
: askstep                           00001BBB  Local -- ARM
: stepslowwarning                   00001BD3  Local -- ARM
: savedchoice                       00001C20  Local -- ARM
: askname                           00001C4B  Local -- ARM
: warneraseslow                     00001C6E  Local -- ARM
: askwid                            00001CAC  Local -- ARM
: dash                              00001CC3  Local -- ARM
: b_close_colon                     00001CC5  Local -- ARM
: askhei                            00001CC9  Local -- ARM
: getwidfailmsg                     00001CE0  Local -- ARM
: getheifailmsg                     00001D0C  Local -- ARM
: optionsp_1                        00001D39  Local -- ARM
: optionsp_2                        00001D51  Local -- ARM
: optionsp_3                        00001D54  Local -- ARM
: optionsp_4                        00001D60  Local -- ARM
: optionsp_5                        00001D6C  Local -- ARM
: mainloopittsmsg                   00001D77  Local -- ARM
: askgenoption                      00001E17  Local -- ARM
: setupGrdFailmsg                   00001E50  Local -- ARM
: askseed                           00001EB1  Local -- ARM
: drawinfomsg                       00001EDD  Local -- ARM
: drawfailmsg                       00001F33  Local -- ARM
: gridfailmsg                       00001F70  Local -- ARM
: gridsavefail                      00001FAA  Local -- ARM
: gridloadempty                     00001FE2  Local -- ARM
: gridloadpindex                    0000203D  Local -- ARM
: gridloadpname                     00002046  Local -- ARM
: gridloadpwidth                    0000204E  Local -- ARM
: gridloadpheight                   00002057  Local -- ARM
: loadboardaski                     00002061  Local -- ARM
: loadboardretmsg                   000020D3  Local -- ARM
: loadboardifail                    000020EB  Local -- ARM
: loadboardirerr                    0000210E  Local -- ARM
: loadboardmlcerr                   0000212B  Local -- ARM
: loadboardsucmsg                   0000216B  Local -- ARM
: listgridmsg                       00002189  Local -- ARM
: cutoff                            000021AC  Local -- ARM
: changearrverr_m                   000021BF  Local -- ARM
: s_m1                              000021F8  Local -- ARM
: s_m2                              00002289  Local -- ARM
: s_m3                              000022ED  Local -- ARM
: s_m4                              0000239E  Local -- ARM
: s_m                               000023F9  Local -- ARM
: s_m_err                           00002455  Local -- ARM
: currentslow                       00002475  Local -- ARM
: currenterase                      0000247E  Local -- ARM
: currentstep                       00002488  Local -- ARM
: currentDims                       00002491  Local -- ARM
: currentRange                      00002498  Local -- ARM
: currentItters                     000024A0  Local -- ARM
: currentdraweras                   000024A9  Local -- ARM
: bracket_open                      000024BE  Local -- ARM
: comma_space                       000024C0  Local -- ARM
: bracket_close                     000024C3  Local -- ARM
: currenticons_1                    000024C5  Local -- ARM
: currenticons_2                    000024CD  Local -- ARM
: currenticons_3                    000024D4  Local -- ARM
: currenticons_a                    000024DA  Local -- ARM
: mallocerr_m                       0000252E  Local -- ARM
: getstringerr_m                    00002550  Local -- ARM
: currentitter                      0000257D  Local -- ARM
: currentaskx                       00002586  Local -- ARM
: currentasky                       0000259A  Local -- ARM
: currentasknew                     000025AE  Local -- ARM
: currentasknew_B                   000025C0  Local -- ARM
: currentasknew_E                   000025DB  Local -- ARM
: currentarrerr                     000025F4  Local -- ARM
: changearrsizmsg                   00002615  Local -- ARM
: changeittere_m                    00002627  Local -- ARM
: getitters_m                       00002648  Local -- ARM
: printFree_m                       0000266C  Local -- ARM
: printfree_f_m                     0000267F  Local -- ARM
: printfree_f_mad                   00002696  Local -- ARM
: printfree_f_mnx                   000026A0  Local -- ARM
: printfree_f_mpr                   000026AA  Local -- ARM
: printfree_f_msz                   000026B4  Local -- ARM
: printFree_m_e                     000026BE  Local -- ARM
: printAll_m                        000026FA  Local -- ARM
: printAll_m_f                      0000271D  Local -- ARM
: printAll_m_t                      00002733  Local -- ARM
: printAll_m_e                      0000274A  Local -- ARM
: printHeap_end_m                   00002799  Local -- ARM
: malloc_panic                      000027C5  Local -- ARM
: on_msg                            00002819  Local -- ARM
: off_msg                           0000281C  Local -- ARM
: comma                             00002820  Local -- ARM
: heapstart                         00002824  Local -- ARM
