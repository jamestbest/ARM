KMD
00000000:             ; ;;  This is my second rendition of JCGOL in ARM assembly for Komodo
00000000:             ; ;;  
00000000:             ; ;;  This will attempt to follow the ARM 32bit calling convention 
00000000:             ; ;;      R0-3 are argument registers, scratch
00000000:             ; ;;      R4-10 are local variable registers and should be saved before use in a function
00000000:             ; ;;      R11 - FP
00000000:             ; ;;      R12 - IPC
00000000:             ; ;;      R13 - SP
00000000:             ; ;;      R14 - LR
00000000:             ; ;;      R15 - PC
00000000:             ; ;;
00000000:             ; ;;  The plan
00000000:             ; ;;  - Create a simple `heap` allocator for the grid and input
00000000:             ; ;;  - Ask the user
00000000:             ; ;;      |-Use default? Y - skip below
00000000:             ; ;;      |-dims of the grid
00000000:             ; ;;      |   `-Will need a way to get a string input and convert to an integer (make sure to cat
                      ; ch -ve)
00000000:             ; ;;      |-slow mode
00000000:             ; ;;      `-erase mode
00000000:             ; ;;  - ask for generation mode
00000000:             ; ;;      |-If random ask for seed
00000000:             ; ;;      |   `-For generation roll the seed to create a pseudorandom value for each `pixel`
00000000:             ; ;;      `-If draw then get them to draw the grid one `pixel` at a time
00000000:             ; ;;  - Allocate two grids, the pointers to which will swap after a frame. One is used to count t
                      ; he neighbours the other for the new cell value.
00000000:             ; ;;  - loop
00000000:             ; ;;      |-count neighbours
00000000:             ; ;;      |-update inactive grid
00000000:             ; ;;      |-swap grids
00000000:             ; ;;      |-draw active grid
00000000:             ; ;;      `-goto loop
00000000:             ; 
00000000:             ; ;;SINGLE STEP mode allows you to save the current state of the board into a list, also give it 
                      ; a name
00000000:             ; ;;At the main menu you can load a saved grid
00000000:             ; 
00000000:             ; ;;Grid info struct
00000000:             ; ;;  - SaveInfoStruct* array
00000000:             ; ;;  - int max size of arr
00000000:             ; ;;  - int current position in arr
00000000:             ; 
00000000:             ; ;;Save info struct
00000000:             ; ;;  -address of grid [4 BYTES]
00000000:             ; ;;  -char* to the name [4 BYTES]
00000000:             ; ;;  -width of grid (1 BYTE)
00000000:             ; ;;  -height of grid (1 BYTE)
00000000:             ; 
00000000:             ; 
00000000:             ; ;;  CURRENT ISSUES/TODOS
00000000:             ; ;;  `-Think about minimising the fragmentation of the heap - find the best free block instead o
                      ; f the first
00000000:             ;   
00000000:             ; max_addr    EQU  0x100000
00000000:             ; stack_size  EQU  0x10000
00000000:             ; nl          EQU  10
00000000:             ; backspace   EQU  8
00000000:             ; minBuffSize EQU  8
00000000:             ; enter       EQU  nl
00000000:             ; minSaveSize EQU  8
00000000:             ; sizeofSaveI EQU  12 ;;10 bytes + 2 bytes of padding to align to 4 byte boundry for arr
00000000:             ; 
00000000: EA000017    ; b _start
00000004:             ; 
00000004:             ; align
00000004:             ; ;;[[note]]
00000004:             ; ;;ldr instructions out of range (for pc-relative offsets?) of ldr (-4096/+4095?) use below
00000004:             ; ;;  adrl Rx, label
00000004:             ; ;;  ldr  Rx, [Rx]
00000004: 00010000    ; heaphead        defw 0x10000 ;;default start changed to addr of heapstart 
00000008:             ; 
00000008:             ; ;;Integer defs
00000008: FFFFFFFF    ; offsets         defw -1,-1,-1,0,-1,1,0,-1,0,1,1,-1,1,0,1,1 ;;[[-1,-1],[-1,0],[-1,1],[0,-1],[0,1
0000000C: FFFFFFFF    ; ],[1,-1],[1,0],[1,1]]
00000010: FFFFFFFF    ; 
00000014: 00000000    ; 
00000018: FFFFFFFF    ; 
0000001C: 00000001    ; 
00000020: 00000000    ; 
00000024: FFFFFFFF    ; 
00000028: 00000000    ; 
0000002C: 00000001    ; 
00000030: 00000001    ; 
00000034: FFFFFFFF    ; 
00000038: 00000001    ; 
0000003C: 00000000    ; 
00000040: 00000001    ; 
00000044: 00000001    ; 
00000048:             ; 
00000048:             ; ;;Grid addresses
00000048: 00000000    ; gridA           defw 0
0000004C: 00000000    ; gridB           defw 0
00000050:             ; 
00000050:             ; ;;options
00000050: 00          ; erase_b         defb 0
00000051: 00          ; slow_b          defb 0
00000052: 00          ; step_b          defb 0
00000053: 12          ; width           defb 18
00000054: 12          ; height          defb 18
00000055: 01          ; range_min       defb 1
00000056: 1E          ; range_max       defb 30
00000057: 19          ; maxitters       defb 25
00000058: 01          ; drawerase       defb 1  ;;Should the draw mode erase previous
00000059:             ; 
00000059: 58          ; alive_c         defb 'X'
0000005A: 2D          ; dead_c          defb '-'
0000005B: 23          ; ptr_c           defb '#'
0000005C:             ; 
0000005C:             ; ;;default options
0000005C: 00          ; erase_b_d       defb 0
0000005D: 00          ; slow_b_d        defb 0
0000005E: 01          ; step_b_d        defb 1
0000005F: 12          ; width_d         defb 18
00000060: 12          ; height_d        defb 18
00000061:             ; 
00000064:             ; align
00000064:             ; 
00000064:             ; _start
00000064:             ;     ;;prepare the stack
00000064: E3A0D601    ;     ldr R13, =max_addr
00000068: E3A0E000    ;     mov R14, #0 ;; allow for `returning` from _start
0000006C: E92D4000    ;     push {R14}
00000070:             ; 
00000070:             ;     ;;[[temp]] clean the heap (zero out)
00000070: EB0002E1    ;     bl heapclean
00000074:             ; 
00000074:             ;     ;;setup heap
00000074: E28F0E6A    ;     adrl R0, heapstart
00000078: E2800A02    ; 
0000007C: E50F0080    ;     str R0, heaphead    ;;place address of last instruction (heapstart label) into the heaphead
                      ;  variable
00000080: EB000580    ;     bl setupHeap
00000084:             ; 
00000084: EB000002    ;     bl main
00000088:             ; 
00000088: E8BD4000    ;     pop {R14}
0000008C: EF000002    ;     swi 2
00000090: E1A0F00E    ;     mov R15, R14
00000094:             ; 
00000094:             ; main
00000094: E92D4FF0    ;     push {fp, R14, R4-R10} ;;8 registers saved
00000098:             ; 
00000098: E28DB01C    ;     add fp, sp, #28 ;;(r - 1) * 4
0000009C: E24DD010    ;     sub sp, sp, #16 ;;reserve 12 bytes (4 bytes to align?) on the stack for the pointer to the 
                      ; list of saved grids + the maxSize of the array
000000A0:             ; 
000000A0:             ;     ;;The gridInfo struct
000000A0:             ;     ;;set the current position of the pointer
000000A0: E3A00000    ;     mov R0, #0
000000A4: E58D0008    ;     str R0, [sp, #8]
000000A8:             ; 
000000A8:             ;     ;;set the number of elements(save info structs) that can be stored in the array at the mome
                      ; nt
000000A8: E3A00008    ;     ldr R0, =minSaveSize
000000AC: E58D0004    ;     str R0, [sp, #4]
000000B0:             ; 
000000B0:             ;     ;;minsize * sizeof(SaveInfo) = number of bytes needed for the array
000000B0: E3A0100C    ;     ldr R1, =sizeofSaveI
000000B4: E0000190    ;     mul R0, R0, R1
000000B8: EB00057F    ;     bl malloc ;;allocate the array on the heap
000000BC:             ; 
000000BC: E3500000    ;     cmp R0, #0
000000C0: 0A00004D    ;     beq mainMallocFail
000000C4:             ; 
000000C4: E58D0000    ;     str R0, [sp, #0] ;;store the address
000000C8:             ; 
000000C8:             ; mainmenu
000000C8: E28F00D4    ;     adrl R0, welcomemsg
000000CC: E2800B06    ; 
000000D0: EF000003    ;     swi 3
000000D4:             ; 
000000D4: E28F00FC    ;     adrl R0, welcome2msg
000000D8: E2800B06    ; 
000000DC: EF000003    ;     swi 3
000000E0:             ; 
000000E0:             ; mainchoice
000000E0: EF000001    ;     swi 1
000000E4: E3800020    ;     orr R0, R0, #32
000000E8: E1A04000    ;     mov R4, R0
000000EC:             ; 
000000EC:             ;     ;;These should really be functions
000000EC:             ; 
000000EC: E354006E    ;     cmp R4, #'n' ;;new board generation
000000F0: 0A0001AC    ;     beq newboard
000000F4:             ; 
000000F4: E354006C    ;     cmp R4, #'l' ;;load a saved board
000000F8: E1A0000D    ;     mov R0, sp ;;load the info ptr
000000FC: 0A0001B5    ;     beq loadboard
00000100:             ; 
00000100: E3540073    ;     cmp R4, #'s'
00000104: 0A00005F    ;     beq settingsmenu
00000108:             ; 
00000108: E3540070    ;     cmp R4, #'p'
0000010C: 0A000005    ;     beq showHeap
00000110:             ; 
00000110: E3540071    ;     cmp R4, #'q' ;;quit
00000114: 0A00003C    ;     beq mainEnd
00000118:             ; 
00000118: E28F00FD    ;     adrl R0, mainchoicefail
0000011C: E2800B06    ; 
00000120: EF000003    ;     swi 3
00000124:             ; 
00000124: EAFFFFED    ;     b mainchoice
00000128:             ; 
00000128:             ;     ;;R4 will hold the active grid, R5 will hold the passive grid
00000128:             ;     ;;Active is used to count neighbours, passive is used to place updated values in 
00000128:             ;     ;;either can be drawn, just drawn in a different position
00000128:             ; 
00000128:             ; 
00000128:             ; showHeap
00000128: EB00058F    ;     bl printHeap
0000012C:             ; 
0000012C: EAFFFFE5    ;     b mainmenu
00000130:             ; 
00000130:             ; ;;update loop
00000130:             ; ;;    - loop
00000130:             ; ;;      |-count neighbours
00000130:             ; ;;      |-update inactive grid
00000130:             ; ;;      |-swap grids
00000130:             ; ;;      |-draw grid
00000130:             ; ;;      |-[slow?] - slow() - loops for some time to increase waiting time
00000130:             ; ;;      |-[step?] - step() - waits for input, s and q will have effects
00000130:             ; ;;      |-[erase?] - erase() - \b until grid is gone
00000130:             ; ;;      `-goto loop
00000130:             ; mainloopstart
00000130:             ;     ;;load the slow, step, and erase booleans
00000130: E55F60E7    ;     ldrb R6, slow_b
00000134: E55F70EC    ;     ldrb R7, erase_b
00000138: E55F80EE    ;     ldrb R8, step_b
0000013C:             ; 
0000013C: E51F40FC    ;     ldr R4, gridA
00000140: E51F50FC    ;     ldr R5, gridB
00000144:             ; 
00000144:             ;     ;;(width * height) * 2 + 1 + height
00000144: E55F00F9    ;     ldrb R0, width
00000148: E55F10FC    ;     ldrb R1, height
0000014C: E0000190    ;     mul R0, R0, R1
00000150: E1A00080    ;     mov R0, R0, lsl #1
00000154: E2800001    ;     add R0, R0, #1
00000158: E0800001    ;     add R0, R0, R1
0000015C: E1A09000    ;     mov R9, R0      ;;R9 holds the itterations for erase, so it doesn't have to calc it every t
                      ; ime
00000160:             ; 
00000160: E3A0A000    ;     mov R10, #0 ;;This will hold the number of itterations, when it reaches 
00000164:             ; 
00000164:             ; mainloop
00000164: E55F0115    ;     ldrb R0, maxitters ;;run out of registers @-@
00000168: E15A0000    ;     cmp R10, R0
0000016C: E28AA001    ;     add R10, R10, #1
00000170: 1A000004    ;     bne mainloopcont
00000174:             ; 
00000174: E3A0A000    ;     mov R10, #0
00000178:             ; 
00000178: E28F007A    ;     adrl R0, mainloopittsmsg
0000017C: E2800C1B    ; 
00000180: EF000003    ;     swi 3
00000184:             ; 
00000184: EA000006    ;     b mainloopdostep
00000188:             ; 
00000188:             ; mainloopcont
00000188: E1A00004    ;     mov R0, R4
0000018C: E1A01005    ;     mov R1, R5
00000190: EB0004E0    ;     bl updategrid
00000194:             ; 
00000194: E1A00004    ;     mov R0, R4
00000198: EB0003B5    ;     bl drawgrid
0000019C:             ; 
0000019C: E3580001    ;     cmp R8, #1
000001A0: 1A000009    ;     bne mainloopskipstep
000001A4:             ; 
000001A4:             ; mainloopdostep
000001A4: E1A0000D    ;     mov R0, sp
000001A8: E1A01004    ;     mov R1, R4 ;;give the active grid
000001AC: EB0001E9    ;     bl step
000001B0: E3500000    ;     cmp R0, #0
000001B4: 0A000004    ;     beq mainloopskipstep
000001B8:             ;     
000001B8:             ;     ;;If R0 is #1 then free and go to the main menu
000001B8:             ;     ;;free the current grid
000001B8: E51F0178    ;     ldr R0, gridA
000001BC: EB0005C7    ;     bl free
000001C0: E51F017C    ;     ldr R0, gridB
000001C4: EB0005C5    ;     bl free
000001C8:             ; 
000001C8: EAFFFFBE    ;     b mainmenu
000001CC:             ; 
000001CC:             ; mainloopskipstep
000001CC: E3560001    ;     cmp R6, #1
000001D0: 0B00027E    ;     bleq slow
000001D4:             ; 
000001D4: E3570001    ;     cmp R7, #1
000001D8: 01A00009    ;     moveq R0, R9
000001DC: 0B000273    ;     bleq erase
000001E0:             ; 
000001E0: E1A00004    ;     mov R0, R4
000001E4: E1A04005    ;     mov R4, R5
000001E8: E1A05000    ;     mov R5, R0 ;;SWAP the active and passive
000001EC:             ; 
000001EC: EAFFFFDC    ;     b mainloop
000001F0:             ; 
000001F0:             ; gridFail
000001F0: E28F00FB    ;     adrl R0, gridfailmsg
000001F4: E2800B07    ; 
000001F8: EF000003    ;     swi 3
000001FC:             ; 
000001FC:             ; mainMallocFail
000001FC: E28F00B9    ;     adrl R0, malloc_panic
00000200: E2800B09    ; 
00000204: EF000003    ;     swi 3
00000208:             ; 
00000208: EA000008    ;     b mainEndEnd
0000020C:             ; 
0000020C:             ; mainEnd
0000020C: E28F0E8A    ;     adrl R0, mainendmsg
00000210: E2800A01    ; 
00000214: EF000003    ;     swi 3
00000218:             ; 
00000218: E1A0000D    ;     mov R0, sp
0000021C: EB000006    ;     bl mainfree
00000220:             ; 
00000220: E28F0069    ;     adrl R0, printHeap_end_m
00000224: E2800B09    ; 
00000228: EF000003    ;     swi 3
0000022C:             ; 
0000022C: EB00054E    ;     bl printHeap
00000230:             ; mainEndEnd
00000230: E24BD018    ;     sub sp, fp, #24 ;;???
00000234: E8BD47F0    ;     pop {R14, R4-R10}
00000238: E1A0F00E    ;     mov R15, R14
0000023C:             ; 
0000023C:             ; mainfree
0000023C:             ; ;;INP in R0 is the saveInfoStruct
0000023C:             ; ;;OUT --
0000023C:             ; ;;free all of the memory that we used i.e. any saved grids, saved grid names, and the arr of sa
                      ; ved grids
0000023C: E92D41F0    ;     push {R14, R4-R8}
00000240:             ; 
00000240: E5905008    ;     ldr R5, [R0, #8] ;;get the current index this is the number of elements in the arr
00000244: E5906000    ;     ldr R6, [R0, #0] ;;This is the array address
00000248: E3A0700C    ;     ldr R7, =sizeofSaveI
0000024C:             ; 
0000024C: E3A04000    ;     mov R4, #0
00000250:             ; mainfreeloop
00000250:             ;     ;;loop through the savedGrids
00000250: E1540005    ;     cmp R4, R5
00000254: 0A000007    ;     beq mainfreelend
00000258:             ; 
00000258: E0286794    ;     mla R8, R4, R7, R6
0000025C: E5980000    ;     ldr R0, [R8, #0] ;;get the address of the grid
00000260: E5988004    ;     ldr R8, [R8, #4] ;;get the address of the char*
00000264:             ; 
00000264: EB00059D    ;     bl free
00000268:             ; 
00000268: E1A00008    ;     mov R0, R8
0000026C: EB00059B    ;     bl free
00000270:             ; 
00000270: E2844001    ;     add R4, R4, #1
00000274: EAFFFFF5    ;     b mainfreeloop
00000278:             ; 
00000278:             ; mainfreelend
00000278:             ;     ;;free the array
00000278: E1A00006    ;     mov R0, R6
0000027C: EB000597    ;     bl free
00000280:             ; 
00000280:             ; mainfreeend
00000280: E8BD41F0    ;     pop {R14, R4-R8}
00000284: E1A0F00E    ;     mov R15, R14
00000288:             ; 
00000288:             ;     ;;Save info struct
00000288:             ; ;;  -address of grid [4 BYTES]
00000288:             ; ;;  -char* to the name [4 BYTES]
00000288:             ; ;;  -width of grid (1 BYTE)
00000288:             ; ;;  -height of grid (1 BYTE)
00000288:             ; 
00000288:             ; settingsmenu
00000288:             ; ;;https://media.giphy.com/media/jOpLbiGmHR9S0/giphy.gif
00000288:             ; ;;I think there's a limit on the defined string length
00000288: E28F00EB    ;     adrl R0, s_m1
0000028C: E2800C1E    ; 
00000290: EF000003    ;     swi 3
00000294:             ; 
00000294: E28F0EF7    ;     adrl R0, s_m2
00000298: E2800A01    ; 
0000029C: EF000003    ;     swi 3
000002A0:             ;     
000002A0: E28F0FF2    ;     adrl R0, s_m3
000002A4: E2800B07    ; 
000002A8: EF000003    ;     swi 3
000002AC:             ; 
000002AC: E28F006D    ;     adrl R0, s_m4
000002B0: E2800A02    ; 
000002B4: EF000003    ;     swi 3
000002B8:             ; 
000002B8:             ; changesetting
000002B8: E28F00BC    ;     adrl R0, s_m
000002BC: E2800A02    ; 
000002C0: EF000003    ;     swi 3
000002C4:             ; 
000002C4:             ; changesettingget
000002C4: E3A0000A    ;     ldr R0, =enter
000002C8: E3A01002    ;     mov R1, #2
000002CC: E3A02001    ;     mov R2, #1
000002D0: EB0002AA    ;     bl getstring
000002D4:             ; 
000002D4: E3500000    ;     cmp R0, #0
000002D8: 0A00000E    ;     beq changesettingsmallocfail
000002DC:             ; 
000002DC: E1A05000    ;     mov R5, R0
000002E0:             ; 
000002E0: EB00025C    ;     bl strtoi
000002E4:             ; 
000002E4: E1A04000    ;     mov R4, R0
000002E8: E1A06001    ;     mov R6, R1
000002EC: E1A00005    ;     mov R0, R5
000002F0:             ; 
000002F0: EB00057A    ;     bl free
000002F4:             ; 
000002F4: EB000194    ;     bl newline
000002F8:             ; 
000002F8: E3560001    ;     cmp R6, #1
000002FC: 0AFFFF71    ;     beq mainmenu
00000300:             ; 
00000300: E3560000    ;     cmp R6, #0
00000304: 0A000007    ;     beq changesettingscont
00000308:             ; 
00000308:             ; changesettingserr
00000308: E28F00C8    ;     adrl R0, s_m_err
0000030C: E2800A02    ; 
00000310: EF000003    ;     swi 3
00000314:             ; 
00000314: EAFFFFEA    ;     b changesettingget
00000318:             ; 
00000318:             ; changesettingsmallocfail
00000318: E28F009D    ;     adrl R0, malloc_panic
0000031C: E2800C23    ; 
00000320: EF000003    ;     swi 3
00000324:             ; 
00000324: EAFFFF67    ;     b mainmenu
00000328:             ; 
00000328:             ; changesettingscont
00000328: E3540007    ;     cmp R4, #7
0000032C: CAFFFFF5    ;     bgt changesettingserr
00000330:             ; 
00000330:             ;     ;;now we have the index we can print the current value and prompt for a new one then loop b
                      ; ack up to the getsetting
00000330: E3540000    ;     cmp R4, #0
00000334: 0A000066    ;     beq changestep
00000338:             ; 
00000338: E3540001    ;     cmp R4, #1
0000033C: 0A00006A    ;     beq changeslow
00000340:             ; 
00000340: E3540002    ;     cmp R4, #2
00000344: 0A00006E    ;     beq changeerase
00000348:             ; 
00000348: E3540003    ;     cmp R4, #3
0000034C: 0A00009A    ;     beq changedims
00000350:             ; 
00000350: E3540004    ;     cmp R4, #4
00000354: 0A0000A5    ;     beq changerange
00000358:             ; 
00000358: E3540005    ;     cmp R4, #5
0000035C: 0A0000B0    ;     beq changeicons
00000360:             ; 
00000360: E3540006    ;     cmp R4, #6
00000364: 0A0000DB    ;     beq changeitter
00000368:             ; 
00000368: E3540007    ;     cmp R4, #7
0000036C: 0A000106    ;     beq changedrawerase
00000370:             ; 
00000370:             ; changearr
00000370:             ; ;;generic for changedims and change range
00000370:             ; ;;INP in R0 is addr. for x
00000370:             ; ;;INP in R1 is addr. for y
00000370:             ; ;;INP in R2 is boolean for require x < y. 1 for require
00000370:             ; ;;OUT in R0 is err code non-0 for error
00000370: E92D41F0    ;     push {R14, R4-R8}
00000374:             ; 
00000374: E1A06000    ;     mov R6, R0
00000378: E1A07001    ;     mov R7, R1
0000037C: E1A08002    ;     mov R8, R2
00000380:             ; 
00000380: EB00003E    ;     bl printdims
00000384:             ; 
00000384:             ; changearrget
00000384: E28F007D    ;     adrl R0, currentaskx
00000388: E2800C21    ; 
0000038C: EF000003    ;     swi 3
00000390:             ; 
00000390: EB00001C    ;     bl changearrgetvalidint
00000394: E1A04000    ;     mov R4, R0
00000398: E3510000    ;     cmp R1, #0
0000039C: 1A000014    ;     bne changearrmallocerr
000003A0:             ; 
000003A0: EB000169    ;     bl newline
000003A4:             ; 
000003A4: E28F0071    ;     adrl R0, currentasky
000003A8: E2800C21    ; 
000003AC: EF000003    ;     swi 3
000003B0:             ; 
000003B0: EB000014    ;     bl changearrgetvalidint
000003B4: E1A05000    ;     mov R5, R0
000003B8:             ; 
000003B8: EB000163    ;     bl newline
000003BC:             ; 
000003BC: E3580001    ;     cmp R8, #1
000003C0: 1A000006    ;     bne changearrset
000003C4:             ; 
000003C4: E1540005    ;     cmp R4, R5
000003C8: AA000000    ;     bge changearrsizeerr
000003CC:             ; 
000003CC: EA000003    ;     b changearrset
000003D0:             ; 
000003D0:             ; changearrsizeerr
000003D0: E28F0D87    ;     adrl R0, changearrsizmsg
000003D4: E2800000    ; 
000003D8: EF000003    ;     swi 3
000003DC:             ; 
000003DC: EAFFFFE8    ;     b changearrget
000003E0:             ; 
000003E0:             ; changearrset
000003E0:             ;     ;;now we have the two valid values so str them back
000003E0: E5464000    ;     strb R4, [R6]
000003E4: E5475000    ;     strb R5, [R7] 
000003E8:             ; 
000003E8: E1A00006    ;     mov R0, R6
000003EC: E1A01007    ;     mov R1, R7
000003F0:             ; 
000003F0: EB000022    ;     bl printdims
000003F4:             ; 
000003F4:             ; changearrmallocerr
000003F4: E3A00001    ;     mov R0, #1
000003F8: EA000000    ;     b changearrendend
000003FC:             ; 
000003FC:             ; changearrend
000003FC: E3A00000    ;     mov R0, #0
00000400:             ; 
00000400:             ; changearrendend
00000400: E8BD41F0    ;     pop {R14, R4-R8}
00000404: E1A0F00E    ;     mov R15, R14
00000408:             ; 
00000408:             ; ;;And you thought the naming couldn't get worse \(*0*)/
00000408:             ; changearrgetvalidint ;;basically an inner function
00000408:             ; ;;INP --
00000408:             ; ;;OUT in R0 is the gotten value
00000408:             ; ;;OUT in R1 is err code non-0 for fail
00000408: E92D41F0    ;     push {R14, R4-R8}
0000040C:             ; changearrgetvalidintget
0000040C: E3A0000A    ;     ldr R0, =enter
00000410: E3A01003    ;     mov R1, #3
00000414: E3A02001    ;     mov R2, #1
00000418: EB000258    ;     bl getstring
0000041C:             ; 
0000041C: E3500000    ;     cmp R0, #0
00000420: 0A000010    ;     beq changearrgvmallocerr
00000424:             ; 
00000424: E1A04000    ;     mov R4, R0 ;;save the string to free
00000428:             ; 
00000428: EB00020A    ;     bl strtoi
0000042C:             ; 
0000042C: E1A05000    ;     mov R5, R0 ;;save the int value
00000430: E1A06001    ;     mov R6, R1 ;;save err code
00000434:             ; 
00000434: E1A00004    ;     mov R0, R4
00000438: EB000528    ;     bl free
0000043C:             ; 
0000043C: E3560000    ;     cmp R6, #0
00000440: 0A000004    ;     beq changearrgetvalidintcont
00000444:             ; 
00000444:             ; changearrgetvalidinterr
00000444: EB000140    ;     bl newline
00000448:             ; 
00000448: E28F00F2    ;     adrl R0, changearrverr_m
0000044C: E2800B07    ; 
00000450: EF000003    ;     swi 3
00000454:             ; 
00000454: EAFFFFEC    ;     b changearrgetvalidintget
00000458:             ; 
00000458:             ; changearrgetvalidintcont
00000458:             ;     ;;we now have an int value, need to do bounds checks
00000458: E3550000    ;     cmp R5, #0
0000045C: DAFFFFF8    ;     ble changearrgetvalidinterr
00000460:             ; 
00000460: E35500FF    ;     cmp R5, #255
00000464: CAFFFFF6    ;     bgt changearrgetvalidinterr
00000468:             ; 
00000468:             ; changearrgvmallocerr
00000468: E3A01001    ;     mov R1, #1
0000046C:             ; 
0000046C: EA000001    ;     b changearrgvendend
00000470:             ; 
00000470:             ; changearrgetvalidintend
00000470: E1A00005    ;     mov R0, R5
00000474: E3A01000    ;     mov R1, #0
00000478:             ; changearrgvendend
00000478: E8BD41F0    ;     pop {R14, R4-R8}
0000047C: E1A0F00E    ;     mov R15, R14
00000480:             ; 
00000480:             ; printdims
00000480:             ; ;;INP in R0 is addr. for x
00000480:             ; ;;INP in R1 is addr. for y
00000480:             ; ;;(_, _)
00000480:             ;     
00000480: E1A02000    ;     mov R2, R0
00000484: E1A03001    ;     mov R3, R1
00000488:             ; 
00000488: E28F0FE1    ;     adrl R0, currentDims
0000048C: E2800B07    ; 
00000490: EF000003    ;     swi 3
00000494:             ; 
00000494: E28F00A5    ;     adrl R0, bracket_open
00000498: E2800C1F    ; 
0000049C: EF000003    ;     swi 3
000004A0:             ; 
000004A0: E5520000    ;     ldrb R0, [R2]
000004A4: EF000004    ;     swi 4
000004A8:             ; 
000004A8: E28F0093    ;     adrl R0, comma_space
000004AC: E2800C1F    ; 
000004B0: EF000003    ;     swi 3
000004B4:             ; 
000004B4: E5530000    ;     ldrb R0, [R3]
000004B8: EF000004    ;     swi 4
000004BC:             ; 
000004BC: E28F0082    ;     adrl R0, bracket_close
000004C0: E2800C1F    ; 
000004C4: EF000003    ;     swi 3
000004C8:             ; 
000004C8: E3A0000A    ;     ldr R0, =nl
000004CC: EF000000    ;     swi 0
000004D0:             ; 
000004D0: E1A0F00E    ;     mov R15, R14
000004D4:             ; 
000004D4:             ; changestep
000004D4: E24F007E    ;     adrl R0, step_b_d
000004D8: E2400B01    ; 
000004DC: E28F1027    ;     adrl R1, currentstep
000004E0: E2811C1F    ; 
000004E4:             ; 
000004E4: EB00000B    ;     bl changebool
000004E8:             ; 
000004E8: EAFFFF72    ;     b changesetting
000004EC:             ; 
000004EC:             ; changeslow
000004EC: E24F0097    ;     adrl R0, slow_b_d
000004F0: E2400B01    ; 
000004F4: E28F1FBF    ;     adrl R1, currentslow
000004F8: E2811B07    ; 
000004FC:             ; 
000004FC: EB000005    ;     bl changebool
00000500:             ; 
00000500: EAFFFF6C    ;     b changesetting
00000504:             ; 
00000504:             ; changeerase
00000504: E24F0E4B    ;     adrl R0, erase_b_d
00000508: E28F10F1    ;     adrl R1, currenterase
0000050C: E2811C1E    ; 
00000510:             ; 
00000510: EB000000    ;     bl changebool
00000514:             ; 
00000514: EAFFFF67    ;     b changesetting
00000518:             ; 
00000518:             ; changebool
00000518:             ; ;;INP in R0 is the address of ___b_d
00000518:             ; ;;INP in R1 is the address of the printing name
00000518:             ; ;;OUT --
00000518: E92D41F0    ;     push {R14, R4-R8}
0000051C:             ; 
0000051C: E1A04000    ;     mov R4, R0
00000520: E1A05001    ;     mov R5, R1
00000524:             ; 
00000524: E1A00001    ;     mov R0, R1
00000528: EF000003    ;     swi 3
0000052C:             ; 
0000052C: E5540000    ;     ldrb R0, [R4]
00000530: E3500001    ;     cmp R0, #1
00000534: 128F0F76    ;     adrlne R0, off_msg
00000538: 12800A02    ; 
0000053C: 028F00CD    ;     adrleq R0, on_msg
00000540: 02800C21    ; 
00000544: EF000003    ;     swi 3
00000548:             ; 
00000548: EB0000FF    ;     bl newline
0000054C:             ; 
0000054C: E28F00EF    ;     adrl R0, currentasknew_B
00000550: E2800C1F    ; 
00000554: EF000003    ;     swi 3
00000558:             ; 
00000558:             ; changebool_cont
00000558: EF000001    ;     swi 1
0000055C:             ; 
0000055C: E2400030    ;     sub R0, R0, #48
00000560: E3500001    ;     cmp R0, #1
00000564: 0A000006    ;     beq changebool_set
00000568: E3500000    ;     cmp R0, #0
0000056C: 0A000004    ;     beq changebool_set
00000570:             ; 
00000570: EB0000F5    ;     bl newline
00000574:             ; 
00000574: E28F00E2    ;     adrl R0, currentasknew_E
00000578: E2800C1F    ; 
0000057C: EF000003    ;     swi 3
00000580:             ; 
00000580: EAFFFFF4    ;     b changebool_cont
00000584:             ; 
00000584:             ; changebool_set
00000584: E5440000    ;     strb R0, [R4]
00000588:             ; 
00000588: EB0000EF    ;     bl newline
0000058C:             ; 
0000058C: E1A00005    ;     mov R0, R5
00000590: EF000003    ;     swi 3
00000594:             ; 
00000594: E5540000    ;     ldrb R0, [R4]
00000598: E3500001    ;     cmp R0, #1
0000059C: 128F0E17    ;     adrlne R0, off_msg
000005A0: 12800A02    ; 
000005A4: 028F0065    ;     adrleq R0, on_msg
000005A8: 02800C21    ; 
000005AC: EF000003    ;     swi 3
000005B0:             ; 
000005B0: EB0000E5    ;     bl newline
000005B4:             ; 
000005B4:             ; changeboolend
000005B4: E8BD41F0    ;     pop {R14, R4-R8}
000005B8: E1A0F00E    ;     mov R15, R14
000005BC:             ; 
000005BC:             ; changedims
000005BC:             ; ;;INP in R0 is addr. for x
000005BC:             ; ;;INP in R1 is addr. for y
000005BC:             ; ;;INP in R2 is boolean for require x < y. 1 for require
000005BC: E24F0065    ;     adrl R0, width_d
000005C0: E2400C05    ; 
000005C4: E24F1F5B    ;     adrl R1, height_d
000005C8: E2411B01    ; 
000005CC: E3A02000    ;     mov R2, #0
000005D0: EBFFFF66    ;     bl changearr
000005D4:             ; 
000005D4: E3500000    ;     cmp R0, #0
000005D8: 0A000003    ;     beq changedimscont
000005DC:             ; 
000005DC: E28F00D9    ;     adrl R0, malloc_panic
000005E0: E2800A02    ; 
000005E4: EF000003    ;     swi 3
000005E8:             ; 
000005E8: EAFFFEB6    ;     b mainmenu
000005EC:             ; 
000005EC:             ; changedimscont
000005EC:             ; 
000005EC: EAFFFF31    ;     b changesetting
000005F0:             ; 
000005F0:             ; changerange
000005F0: E24F00A3    ;     adrl R0, range_min
000005F4: E2400C05    ; 
000005F8: E24F10AA    ;     adrl R1, range_max
000005FC: E2411C05    ; 
00000600: E3A02001    ;     mov R2, #1
00000604: EBFFFF59    ;     bl changearr
00000608:             ; 
00000608: E3500000    ;     cmp R0, #0
0000060C: 0A000003    ;     beq changerangecont
00000610:             ; 
00000610: E28F00A5    ;     adrl R0, malloc_panic
00000614: E2800A02    ; 
00000618: EF000003    ;     swi 3
0000061C:             ; 
0000061C: EAFFFEA9    ;     b mainmenu
00000620:             ; 
00000620:             ; changerangecont
00000620:             ; 
00000620: EAFFFF24    ;     b changesetting
00000624:             ; 
00000624:             ; changeicons
00000624:             ; ;;print the current icons, ask for 3 characters in sequence for alive/dead/ptr
00000624: EB000015    ;     bl printicons
00000628:             ; 
00000628: E28F002D    ;     adrl R0, currenticons_a
0000062C: E2800C1E    ; 
00000630: EF000003    ;     swi 3
00000634:             ; 
00000634: E3A00000    ;     mov R0, #0
00000638: E3A01003    ;     mov R1, #3
0000063C: E3A02001    ;     mov R2, #1
00000640: EB0001CE    ;     bl getstring
00000644:             ; 
00000644: E3500000    ;     cmp R0, #0
00000648: 0A000008    ;     beq changeiconsmallerr
0000064C:             ; 
0000064C: E5D01000    ;     ldrb R1, [R0, #0]
00000650: E5D02001    ;     ldrb R2, [R0, #1]
00000654: E5D03002    ;     ldrb R3, [R0, #2]
00000658:             ; 
00000658: E54F1607    ;     strb R1, alive_c
0000065C: E54F260A    ;     strb R2, dead_c
00000660: E54F360D    ;     strb R3, ptr_c
00000664:             ; 
00000664: EB0000B8    ;     bl newline
00000668:             ; 
00000668: EB000004    ;     bl printicons
0000066C:             ; 
0000066C: EAFFFF11    ;     b changesetting
00000670:             ; 
00000670:             ; changeiconsmallerr
00000670: E28F005B    ;     adrl R0, getstringerr_m
00000674: E2800C1E    ; 
00000678: EF000003    ;     swi 3
0000067C:             ; 
0000067C: EAFFFF0D    ;     b changesetting
00000680:             ; 
00000680:             ; printicons
00000680:             ; ;;INP --
00000680:             ; ;;OUT --
00000680: E28F0D77    ;     adrl R0, currenticons_1
00000684: E2800000    ; 
00000688: EF000003    ;     swi 3
0000068C:             ; 
0000068C: E55F063B    ;     ldrb R0, alive_c
00000690: EF000000    ;     swi 0
00000694:             ; 
00000694: E3A0000A    ;     ldr R0, =nl
00000698: EF000000    ;     swi 0
0000069C:             ; 
0000069C: E28F0F6B    ;     adrl R0, currenticons_2
000006A0: E2800B07    ; 
000006A4: EF000003    ;     swi 3
000006A8:             ; 
000006A8: E55F0656    ;     ldrb R0, dead_c
000006AC: EF000000    ;     swi 0
000006B0:             ; 
000006B0: E3A0000A    ;     ldr R0, =nl
000006B4: EF000000    ;     swi 0
000006B8:             ; 
000006B8: E28F0097    ;     adrl R0, currenticons_3
000006BC: E2800C1D    ; 
000006C0: EF000003    ;     swi 3
000006C4:             ; 
000006C4: E55F0671    ;     ldrb R0, ptr_c
000006C8: EF000000    ;     swi 0
000006CC:             ; 
000006CC: E3A0000A    ;     ldr R0, =nl
000006D0: EF000000    ;     swi 0
000006D4:             ; 
000006D4:             ; printiconsend
000006D4: E1A0F00E    ;     mov R15, R14
000006D8:             ; 
000006D8:             ; changeitter
000006D8: E28F0043    ;     adrl R0, currentItters
000006DC: E2800C1D    ; 
000006E0: EF000003    ;     swi 3
000006E4:             ; 
000006E4: E55F0695    ;     ldrb R0, maxitters
000006E8: EF000004    ;     swi 4
000006EC:             ; 
000006EC: EB000096    ;     bl newline
000006F0:             ; 
000006F0: E28F00D3    ;     adrl R0, getitters_m
000006F4: E2800C1E    ; 
000006F8: EF000003    ;     swi 3
000006FC:             ; 
000006FC:             ; changeitterget
000006FC: E3A0000A    ;     ldr R0, =enter
00000700: E3E01000    ;     mov R1, #-1
00000704: E3A02001    ;     mov R2, #1
00000708: EB00019C    ;     bl getstring
0000070C:             ; 
0000070C: E3500000    ;     cmp R0, #0
00000710: 0A000003    ;     beq changeittergetcont
00000714:             ; 
00000714: E28F00A1    ;     adrl R0, malloc_panic
00000718: E2800C1F    ; 
0000071C: EF000003    ;     swi 3
00000720:             ; 
00000720: EAFFFE68    ;     b mainmenu 
00000724:             ; 
00000724:             ; changeittergetcont
00000724:             ; 
00000724: E1A04000    ;     mov R4, R0
00000728:             ; 
00000728: EB00014A    ;     bl strtoi
0000072C: E1A03000    ;     mov R3, R0
00000730:             ; 
00000730: E1A05000    ;     mov R5, R0
00000734: E1A06001    ;     mov R6, R1
00000738:             ; 
00000738: E1A00004    ;     mov R0, R4
0000073C: EB000467    ;     bl free
00000740:             ; 
00000740: EB000081    ;     bl newline
00000744:             ; 
00000744: E3560000    ;     cmp R6, #0
00000748: 1A000003    ;     bne changeittererr
0000074C:             ; 
0000074C: E24F00FD    ;     adrl R0, maxitters
00000750: E2400C06    ; 
00000754: E5405000    ;     strb R5, [R0]
00000758:             ; 
00000758: EA000004    ;     b changeitterend
0000075C:             ; 
0000075C:             ; changeittererr
0000075C: EB00007A    ;     bl newline
00000760:             ; 
00000760: E28F0042    ;     adrl R0, changeittere_m
00000764: E2800C1E    ; 
00000768: EF000003    ;     swi 3
0000076C: EAFFFFE2    ;     b changeitterget
00000770:             ; changeitterend
00000770: E28F00AB    ;     adrl R0, currentItters
00000774: E2800B07    ; 
00000778: EF000003    ;     swi 3
0000077C:             ; 
0000077C: E55F072D    ;     ldrb R0, maxitters
00000780: EF000004    ;     swi 4
00000784:             ; 
00000784: EB000070    ;     bl newline
00000788:             ; 
00000788: EAFFFECA    ;     b changesetting
0000078C:             ; 
0000078C:             ; changedrawerase
0000078C: E24F0FCF    ;     adrl R0, drawerase
00000790: E2400B01    ; 
00000794: E28F1EC9    ;     adrl R1, currentdraweras
00000798: E2811A01    ; 
0000079C: EBFFFF5D    ;     bl changebool
000007A0:             ; 
000007A0: EAFFFEC4    ;     b changesetting
000007A4:             ; 
000007A4:             ; changedraweraseend
000007A4: EAFFFEC3    ;     b changesetting
000007A8:             ; 
000007A8:             ; newboard
000007A8: E3A00001    ;     mov R0, #1;;should get dims
000007AC: EB000291    ;     bl setupOptions
000007B0:             ; 
000007B0: EB0001B9    ;     bl setupGrid
000007B4:             ; 
000007B4: E3500000    ;     cmp R0, #0
000007B8: 1AFFFE8F    ;     bne mainMallocFail
000007BC:             ;     
000007BC: E51F477C    ;     ldr R4, gridA
000007C0: E51F577C    ;     ldr R5, gridB
000007C4:             ; 
000007C4: E3540000    ;     cmp R4, #0
000007C8: 0AFFFE88    ;     beq gridFail
000007CC: E3550000    ;     cmp R5, #0
000007D0: 0AFFFE86    ;     beq gridFail
000007D4:             ; 
000007D4: EAFFFE55    ;     b mainloopstart
000007D8:             ; 
000007D8:             ; loadboard
000007D8:             ; ;;INP in R0 is the ptr to the SaveInfoHeader struct i.e. ptr to arr, current pos, max size
000007D8:             ; ;;RET in R0 0 for success in which case go to main loop, n/0 for err in which case return to ma
                      ; in menu
000007D8:             ; ;;display the saved grids
000007D8:             ; ;;ask for the index
000007D8:             ; ;;load the grids with the saved info
000007D8:             ; ;;ask the user for the settings
000007D8: E1A04000    ;     mov R4, R0 ;;save the struct ptr
000007DC:             ; 
000007DC:             ;     ;;pass ptr to listgrids
000007DC: EB000086    ;     bl listGrids
000007E0:             ; 
000007E0: E5940008    ;     ldr R0, [R4, #8] ;;get the current position
000007E4: E3500000    ;     cmp R0, #0
000007E8: 0A000055    ;     beq loadboardempty
000007EC:             ; 
000007EC:             ; loadboardaskindex
000007EC:             ;     ;;The grid has now been printed out we need to get the index to load
000007EC: E28F0E7F    ;     adrl R0, loadboardaski
000007F0: E2800A01    ; 
000007F4: EF000003    ;     swi 3
000007F8:             ; 
000007F8: E3A0000A    ;     ldr R0, =enter
000007FC: E3E01000    ;     mov R1, #-1
00000800: E3A02001    ;     mov R2, #1
00000804: EB00015D    ;     bl getstring
00000808:             ; 
00000808: E3500000    ;     cmp R0, #0
0000080C: 1A000003    ;     bne loadboardaskindexcont
00000810:             ; 
00000810: E28F00A5    ;     adrl R0, malloc_panic
00000814: E2800C1E    ; 
00000818: EF000003    ;     swi 3
0000081C:             ; 
0000081C: EAFFFE29    ;     b mainmenu 
00000820:             ; 
00000820:             ; loadboardaskindexcont
00000820:             ; 
00000820: E1A05000    ;     mov R5, R0
00000824:             ; 
00000824: EB000048    ;     bl newline
00000828:             ; 
00000828: E1A00005    ;     mov R0, R5
0000082C: EB000109    ;     bl strtoi
00000830: E1A06000    ;     mov R6, R0
00000834: E1A07001    ;     mov R7, R1
00000838:             ;     ;;ERR codes
00000838:             ;     ;;  0 is success
00000838:             ;     ;;  1 is attempted -ve
00000838:             ;     ;;  2 is use of non-numeric characters
00000838:             ;     ;;  3 is value out of range of integer
00000838:             ;     ;;  4 is null string given
00000838:             ; 
00000838: E1A00005    ;     mov R0, R5
0000083C: EB000427    ;     bl free
00000840:             ; 
00000840: E1A00006    ;     mov R0, R6
00000844: E1A01007    ;     mov R1, R7
00000848:             ; 
00000848: E3510001    ;     cmp R1, #1
0000084C: 0A000039    ;     beq loadboardret
00000850:             ; 
00000850: E3510000    ;     cmp R1, #0
00000854: 0A000003    ;     beq loadboardindex
00000858:             ; 
00000858: E28F000E    ;     adrl R0, loadboardifail
0000085C: E2800B06    ; 
00000860: EF000003    ;     swi 3
00000864:             ; 
00000864: EAFFFFE0    ;     b loadboardaskindex
00000868:             ; 
00000868:             ; loadboardindex
00000868:             ; ;;we now have an index lets check if its in range and then load the board
00000868:             ;     ;;should be +ve so don't need to check < 0
00000868: E5941008    ;     ldr R1, [R4, #8] ;;get the current position, this is where things get added so index < curr
                      ; entposition
0000086C: E1500001    ;     cmp R0, R1
00000870: BA000003    ;     blt loadboardmain
00000874:             ; 
00000874: E28F0015    ;     adrl R0, loadboardirerr
00000878: E2800B06    ; 
0000087C: EF000003    ;     swi 3
00000880: EAFFFFD9    ;     b loadboardaskindex
00000884:             ; 
00000884:             ; loadboardmain
00000884:             ; ;;now we know that the index is valid we can load the grid
00000884:             ; ;;
00000884:             ; ;;need to free current grid
00000884:             ; ;;need to create a copy of the snapshot and set gridA to it 
00000884:             ; ;;return to main menu
00000884: E5941000    ;     ldr R1, [R4, #0] ;;get the array of grids
00000888: E3A0200C    ;     ldr R2, =sizeofSaveI
0000088C: E0201290    ;     mla R0, R0, R2, R1 ;;R0 = index * sizeofSaveI + grid.addr
00000890:             ; 
00000890: E5905000    ;     ldr R5, [R0, #0] ;;get the address of that grid
00000894: E5D06008    ;     ldrb R6, [R0, #8] ;;get the width
00000898: E5D07009    ;     ldrb R7, [R0, #9] ;;get the height
0000089C:             ; 
0000089C: E0000796    ;     mul R0, R6, R7 ;;get the required size
000008A0: E1A09000    ;     mov R9, R0 ;;save the number of bytes
000008A4:             ; 
000008A4: EB000384    ;     bl malloc
000008A8:             ; 
000008A8: E3500000    ;     cmp R0, #0
000008AC: 0A00001D    ;     beq loadboardmallocfail
000008B0:             ; 
000008B0: E1A08000    ;     mov R8, R0 ;;save the new grid arr
000008B4:             ; 
000008B4:             ;     ;;need to copy the saved grid into the new grid
000008B4:             ; 
000008B4: E1A00005    ;     mov R0, R5  ;;src is the saved grid
000008B8: E1A01008    ;     mov R1, R8  ;;dst is the new grid
000008BC: E1A02009    ;     mov R2, R9  ;;bytes is in R9 already from width and height
000008C0: EB00010D    ;     bl memcpy
000008C4:             ; 
000008C4: E51F0884    ;     ldr R0, gridA
000008C8: EB000404    ;     bl free
000008CC:             ; 
000008CC: E50F888C    ;     str R8, gridA
000008D0:             ; 
000008D0:             ;     ;;also need to check if the old gridB is big enough
000008D0: E55F8885    ;     ldrb R8, width
000008D4: E55FA888    ;     ldrb R10, height
000008D8: E1560008    ;     cmp R6, R8
000008DC: 1A000002    ;     bne loadboardmallocB
000008E0: E157000A    ;     cmp R7, R10
000008E4: 1A000000    ;     bne loadboardmallocB
000008E8:             ; 
000008E8: EA000006    ;     b loadboardskipB
000008EC:             ; 
000008EC:             ; loadboardmallocB
000008EC: E51F08A8    ;     ldr R0, gridB
000008F0: EB0003FA    ;     bl free
000008F4:             ; 
000008F4: E1A00009    ;     mov R0, R9
000008F8: EB00036F    ;     bl malloc
000008FC:             ; 
000008FC: E3500000    ;     cmp R0, #0
00000900: 0A000008    ;     beq loadboardmallocfail
00000904:             ; 
00000904: E50F08C0    ;     str R0, gridB
00000908:             ; 
00000908:             ; loadboardskipB
00000908: E54F68BD    ;     strb R6, width
0000090C: E54F78C0    ;     strb R7, height ;;overwrite the active grid information
00000910:             ; 
00000910: E28F00D6    ;     adrl R0, loadboardsucmsg
00000914: E2800C17    ; 
00000918: EF000003    ;     swi 3
0000091C:             ; 
0000091C: E3A00000    ;     mov R0, #0 ;;skip asking dims as they've been loaded
00000920: EB000234    ;     bl setupOptions
00000924:             ; 
00000924: EA000007    ;     b loadboardsucc
00000928:             ; 
00000928:             ; loadboardmallocfail
00000928: E28F007E    ;     adrl R0, loadboardmlcerr
0000092C: E2800C17    ; 
00000930: EF000003    ;     swi 3
00000934:             ; 
00000934: EA000002    ;     b loadboarderr
00000938:             ; 
00000938:             ; loadboardret
00000938: E28F0016    ;     adrl R0, loadboardretmsg
0000093C: E2800C17    ; 
00000940: EF000003    ;     swi 3
00000944:             ; 
00000944:             ; loadboardempty
00000944:             ; loadboarderr
00000944: EAFFFDDF    ;     b mainmenu
00000948:             ; loadboardsucc
00000948: EAFFFDF8    ;     b mainloopstart
0000094C:             ; 
0000094C:             ; newline
0000094C: E3A0000A    ;     ldr R0, =nl
00000950: EF000000    ;     swi 0
00000954:             ; 
00000954: E1A0F00E    ;     mov R15, R14
00000958:             ; 
00000958:             ; step
00000958:             ; ;;INP in R0 is the gridHeaderStruct ptr [[todo]]
00000958:             ; ;;INP in R1 is the active grid ptr
00000958:             ; ;;OUT in R0 is 1 if should return to main menu, else 0.
00000958:             ; 
00000958:             ; ;;get user input
00000958:             ; ;;if q -> jump to main menu
00000958:             ; ;;if s -> ask for name, bl saveGrid with name
00000958: E92D41F0    ;     push {R14, R4-R8}
0000095C: E1A04000    ;     mov R4, R0 ;;save the struct 
00000960: E1A05001    ;     mov R5, R1
00000964:             ; 
00000964: EF000001    ;     swi 1
00000968:             ; 
00000968: E3500071    ;     cmp R0, #'q'
0000096C: 0A00001D    ;     beq stependfail ;;bad name, shame I can't change it eh
00000970:             ; 
00000970: E3500073    ;     cmp R0, #'s'
00000974: 1A00001D    ;     bne stependsucc
00000978:             ; 
00000978: E28F004E    ;     adrl R0, askname
0000097C: E2800C12    ; 
00000980: EF000003    ;     swi 3
00000984:             ; 
00000984: E3A0000A    ;     ldr R0, =enter
00000988: E3E01000    ;     mov R1, #-1
0000098C: E3A02001    ;     mov R2, #1
00000990: EB0000FA    ;     bl getstring
00000994:             ; 
00000994: E3500000    ;     cmp R0, #0
00000998: 1A000003    ;     bne stepcont
0000099C:             ; 
0000099C: E28F0019    ;     adrl R0, malloc_panic
000009A0: E2800C1D    ; 
000009A4: EF000003    ;     swi 3
000009A8:             ; 
000009A8: EA00000E    ;     b stependfail
000009AC:             ; 
000009AC:             ; stepcont
000009AC:             ; 
000009AC: E1A01000    ;     mov R1, R0 ;;char* name
000009B0: E1A00004    ;     mov R0, R4 ;;gridinfo* 
000009B4: E1A02005    ;     mov R2, R5 ;;active grid
000009B8: EB000046    ;     bl saveGrid
000009BC:             ; 
000009BC: EBFFFFE2    ;     bl newline
000009C0:             ; 
000009C0: E28F00DB    ;     adrl R0, savedchoice
000009C4: E2800C11    ; 
000009C8: EF000003    ;     swi 3
000009CC:             ; 
000009CC: EF000001    ;     swi 1
000009D0: EF000000    ;     swi 0
000009D4: E3500059    ;     cmp R0, #'Y'
000009D8:             ; 
000009D8: E3A0000A    ;     ldr R0, =nl
000009DC: EF000000    ;     swi 0
000009E0:             ; 
000009E0: 0A000000    ;     beq stependfail
000009E4: EA000001    ;     b stependsucc
000009E8:             ; 
000009E8:             ; stependfail
000009E8: E3A00001    ;     mov R0, #1
000009EC: EA000000    ;     b stepend
000009F0:             ; 
000009F0:             ; stependsucc
000009F0: E3A00000    ;     mov R0, #0
000009F4:             ; 
000009F4:             ; stepend
000009F4: E8BD41F0    ;     pop {R14, R4-R8}
000009F8: E1A0F00E    ;     mov R15, R14
000009FC:             ; 
000009FC:             ; listGrids
000009FC:             ; ;;INP in R0 is the ptr to the gridInfo struct
000009FC:             ; ;;RET --
000009FC:             ; ;;Grid info struct
000009FC:             ; ;;  - SaveInfoStruct* array
000009FC:             ; ;;  - int max size of arr
000009FC:             ; ;;  - int current position in arr
000009FC:             ; 
000009FC:             ; ;;loops through the array of grids (if any) printing their names, and dims, ask to print grid
000009FC: E92D47F0    ;     push {R14, R4-R10}
00000A00:             ; 
00000A00: E5904000    ;     ldr R4, [R0, #0] ;;get the array ptr
00000A04: E5905008    ;     ldr R5, [R0, #8] ;;current position
00000A08:             ; 
00000A08: E3550000    ;     cmp R5, #0
00000A0C: 0A00002C    ;     beq listGridsEmpty
00000A10:             ; 
00000A10:             ; ;;if current position == 1: print("There are no saved grids")
00000A10:             ; ;;for i from 0 to current position
00000A10:             ; ;;  getname(4)
00000A10:             ; ;;  getwidth(8)
00000A10:             ; ;;  getheight(9)
00000A10:             ; ;;  print("There is a grid called %s with dims (%d, %d)")
00000A10: E3A01000    ;     mov R1, #0 ;;i
00000A14: E3A0200C    ;     ldr R2, =sizeofSaveI
00000A18:             ; 
00000A18: E28F0FBB    ;     adrl R0, listgridmsg
00000A1C: E2800B05    ; 
00000A20: EF000003    ;     swi 3
00000A24:             ; 
00000A24: E28F0003    ;     adrl R0, cutoff
00000A28: E2800C17    ; 
00000A2C: EF000003    ;     swi 3
00000A30:             ; 
00000A30:             ; listGridsLoop
00000A30: E1510005    ;     cmp R1, R5
00000A34: 0A000025    ;     beq listGridsLend
00000A38:             ; 
00000A38: E0234291    ;     mla R3, R1, R2, R4 ;;R3 = i * sizeof(saveInfo) + array
00000A3C: E5936004    ;     ldr R6, [R3, #4] ;;load the name ptr
00000A40: E5D37008    ;     ldrb R7, [R3, #8] ;;load the width
00000A44: E5D38009    ;     ldrb R8, [R3, #9] ;;load the height
00000A48:             ; 
00000A48: E28F0E57    ;     adrl R0, gridloadpindex
00000A4C: E2800A01    ; 
00000A50: EF000003    ;     swi 3
00000A54:             ; 
00000A54: E3A0003A    ;     mov R0, #':'
00000A58: EF000000    ;     swi 0
00000A5C:             ; 
00000A5C: E1A00001    ;     mov R0, R1
00000A60: EF000004    ;     swi 4
00000A64:             ; 
00000A64: EBFFFFB8    ;     bl newline
00000A68:             ; 
00000A68: E28F0059    ;     adrl R0, gridloadpname
00000A6C: E2800C15    ; 
00000A70: EF000003    ;     swi 3
00000A74:             ; 
00000A74: E1A00006    ;     mov R0, R6
00000A78: EF000003    ;     swi 3
00000A7C:             ; 
00000A7C: EBFFFFB2    ;     bl newline
00000A80:             ; 
00000A80: E28F0049    ;     adrl R0, gridloadpwidth
00000A84: E2800C15    ; 
00000A88: EF000003    ;     swi 3
00000A8C:             ; 
00000A8C: E1A00007    ;     mov R0, R7
00000A90: EF000004    ;     swi 4
00000A94:             ; 
00000A94: EBFFFFAC    ;     bl newline
00000A98:             ; 
00000A98: E28F003A    ;     adrl R0, gridloadpheight
00000A9C: E2800C15    ; 
00000AA0: EF000003    ;     swi 3
00000AA4:             ; 
00000AA4: E1A00008    ;     mov R0, R8
00000AA8: EF000004    ;     swi 4
00000AAC:             ; 
00000AAC: EBFFFFA6    ;     bl newline
00000AB0:             ; 
00000AB0:             ;     ;;[[Prob]  Printing the grid uses the stored width and height, I could change it to use a p
                      ; assed in
00000AB0:             ;     ;;             version but do the other areas have enough registers to cope? probably not.
00000AB0:             ;     ;;             Would have to swap the width and height with the loaded versions - I really 
                      ; don't like this idea
00000AB0:             ; 
00000AB0: E2811001    ;     add R1, R1, #1
00000AB4:             ; 
00000AB4: E28F0073    ;     adrl R0, cutoff
00000AB8: E2800C16    ; 
00000ABC: EF000003    ;     swi 3
00000AC0:             ; 
00000AC0: EAFFFFDA    ;     b listGridsLoop
00000AC4:             ; 
00000AC4:             ; listGridsEmpty
00000AC4: E28F0099    ;     adrl R0, gridloadempty
00000AC8: E2800B05    ; 
00000ACC: EF000003    ;     swi 3
00000AD0:             ; 
00000AD0:             ; listGridsLend
00000AD0:             ; listGridsEnd
00000AD0: E8BD47F0    ;     pop {R14, R4-R10}
00000AD4: E1A0F00E    ;     mov R15, R14
00000AD8:             ; 
00000AD8:             ; saveGrid
00000AD8:             ; ;;INP in R0 is the ptr gridInfo struct (in the main's stackframe)
00000AD8:             ; ;;INP in R1 is the char* to the name
00000AD8:             ; ;;INP in R2 is the active grid
00000AD8:             ; ;;RET in R0 is an errcode or 0 for success. 1 for malloc error
00000AD8:             ; 
00000AD8:             ; ;;if reachedCap -> realloc + inc maxsize
00000AD8:             ; ;;copy the current grid to another loc and place info in gridArr
00000AD8:             ; ;;inc current index
00000AD8: E92D47F0    ;     push {R14, R4-R10}
00000ADC:             ; 
00000ADC: E1A04000    ;     mov R4, R0
00000AE0: E1A05001    ;     mov R5, R1
00000AE4: E1A0A002    ;     mov R10, R2
00000AE8:             ; 
00000AE8: E5942008    ;     ldr R2, [R4, #8] ;;get the current index
00000AEC: E5943004    ;     ldr R3, [R4, #4] ;;get the maxsize
00000AF0:             ; 
00000AF0: E1520003    ;     cmp R2, R3
00000AF4: 0A000000    ;     beq saveGridResize
00000AF8: EA00000D    ;     b saveGridAdd
00000AFC:             ; 
00000AFC:             ; saveGridResize
00000AFC:             ;     ;;maxsize in R3
00000AFC: E1A06083    ;     mov R6, R3, lsl #1 ;;double the capacity
00000B00: E3A0700C    ;     ldr R7, =sizeofSaveI
00000B04: E0070796    ;     mul R7, R6, R7 ;;get the number of bytes
00000B08:             ; 
00000B08: E1A00007    ;     mov R0, R7
00000B0C: EB0002EA    ;     bl malloc ;;get the new grid
00000B10:             ; 
00000B10: E3500000    ;     cmp R0, #0 ;;if malloc failed then don't do any saving
00000B14: 0A000020    ;     beq saveGridFailMalloc
00000B18:             ; 
00000B18: E1A01000    ;     mov R1, R0
00000B1C: E1A08000    ;     mov R8, R0 ;;save of ptr
00000B20:             ; 
00000B20:             ;     ;;now that we have the new grid we need to memcpy the bytes from the original into the new 
                      ; one
00000B20: E5940000    ;     ldr R0, [R4, #0] ;;get the array ptr
00000B24:             ;     ;;R1 has the malloced address
00000B24: E1A020A7    ;     mov R2, R7, lsr #1 ;;not great, this is the double cap halfed, means no mul again
00000B28: EB000073    ;     bl memcpy
00000B2C:             ; 
00000B2C:             ;     ;;assume success because I didn't give memcpy an err code :)
00000B2C:             ;     ;;need to store the new size and arr ptr in the gridinfo struct
00000B2C:             ; 
00000B2C: E5848000    ;     str R8, [R4, #0]
00000B30: E5846004    ;     str R6, [R4, #4]
00000B34:             ; 
00000B34:             ; saveGridAdd
00000B34:             ; ;;add the current grid to the array
00000B34: E5946000    ;     ldr R6, [R4, #0] ;;get the arr ptr
00000B38: E5947008    ;     ldr R7, [R4, #8] ;;get current index
00000B3C:             ; 
00000B3C:             ;     ;;ptr is 4 bytes
00000B3C:             ;     ;;we're adding the struct of 
00000B3C:             ;     ;;  |-grid*     (ptr)
00000B3C:             ;     ;;  |-char*     (ptr)
00000B3C:             ;     ;;  |-width     (byte)
00000B3C:             ;     ;;  `-height    (byte)
00000B3C:             ; 
00000B3C:             ;     ;;we need to copy the current array
00000B3C: E55F8AF1    ;     ldrb R8, width
00000B40: E55F9AF4    ;     ldrb R9, height
00000B44: E0080998    ;     mul R8, R8, R9 ;;get the number of bytes in grid
00000B48:             ; 
00000B48: E1A00008    ;     mov R0, R8
00000B4C: EB0002DA    ;     bl malloc ;;allocate a new grid
00000B50:             ; 
00000B50: E3500000    ;     cmp R0, #0
00000B54: 0A000010    ;     beq saveGridFailMalloc
00000B58:             ; 
00000B58: E92D0100    ;     push {R8} ;; :(
00000B5C:             ; 
00000B5C: E3A0800C    ;     ldr R8, =sizeofSaveI
00000B60: E0266897    ;     mla R6, R7, R8, R6 ;;currentindex * sizeof(Gridinfo) + arrptr
00000B64: E5860000    ;     str R0, [R6, #0] ;;store the grid*
00000B68: E5865004    ;     str R5, [R6, #4] ;;store the char*
00000B6C: E55F8B21    ;     ldrb R8, width
00000B70: E5C68008    ;     strb R8, [R6, #8]
00000B74: E5C69009    ;     strb R9, [R6, #9]
00000B78:             ; 
00000B78: E8BD0100    ;     pop {R8}
00000B7C:             ; 
00000B7C: E1A01000    ;     mov R1, R0 ;;dst
00000B80: E1A0000A    ;     mov R0, R10 ;;src
00000B84: E1A02008    ;     mov R2, R8 ;;num bytes
00000B88: EB00005B    ;     bl memcpy ;;copy the grid into the new location
00000B8C:             ; 
00000B8C:             ;     ;;inc the position
00000B8C: E5940008    ;     ldr R0, [R4, #8]
00000B90: E2800001    ;     add R0, R0, #1
00000B94: E5840008    ;     str R0, [R4, #8]
00000B98:             ; 
00000B98: EA000001    ;     b saveGridSucc
00000B9C:             ; 
00000B9C:             ; saveGridFailMalloc
00000B9C: E3A00001    ;     mov R0, #1
00000BA0: EA000000    ;     b saveGridEnd
00000BA4:             ; 
00000BA4:             ; saveGridSucc
00000BA4: E3A00000    ;     mov R0, #0
00000BA8:             ; 
00000BA8:             ; saveGridEnd
00000BA8: E8BD47F0    ;     pop {R14, R4-R10}
00000BAC: E1A0F00E    ;     mov R15, R14
00000BB0:             ; 
00000BB0:             ; erase
00000BB0:             ; ;;INP in R0 is the itters
00000BB0:             ; ;;for (width * height + 1) * 2 + 1
00000BB0:             ; ;;      print('\b')
00000BB0: E1A01000    ;     mov R1, R0
00000BB4:             ; 
00000BB4:             ; eraseloop
00000BB4: E3510000    ;     cmp R1, #0
00000BB8: 0A000003    ;     beq eraseend
00000BBC:             ; 
00000BBC: E3A00008    ;     ldr R0, =backspace
00000BC0: EF000000    ;     swi 0
00000BC4:             ; 
00000BC4: E2411001    ;     sub R1, R1, #1
00000BC8: EAFFFFF9    ;     b eraseloop
00000BCC:             ; 
00000BCC:             ; eraseend
00000BCC: E1A0F00E    ;     mov R15, R14
00000BD0:             ; 
00000BD0:             ; slow
00000BD0: E3A010FF    ;     mov R1, #0xFF
00000BD4: E1A01081    ;     mov R1, R1, lsl #1
00000BD8:             ; 
00000BD8:             ; slowloop
00000BD8: E3510000    ;     cmp R1, #0
00000BDC: 0A000005    ;     beq slowend
00000BE0:             ; 
00000BE0: E3A00020    ;     mov R0, #' '
00000BE4: EF000000    ;     swi 0
00000BE8: E3A00008    ;     ldr R0, =backspace
00000BEC: EF000000    ;     swi 0
00000BF0:             ; 
00000BF0: E2411001    ;     sub R1, R1, #1
00000BF4: EAFFFFF7    ;     b slowloop
00000BF8:             ; 
00000BF8:             ; slowend
00000BF8: E1A0F00E    ;     mov R15, R14
00000BFC:             ; 
00000BFC:             ; heapclean
00000BFC:             ; ;;zero out all memory in the heap (debugging uses)
00000BFC: E28F0FC6    ;     adrl R0, heapstart
00000C00: E2800B06    ; 
00000C04: E3A01601    ;     ldr R1, =max_addr ;;stores the end of the heap
00000C08: E3A02801    ;     ldr R2, =stack_size
00000C0C: E0411002    ;     sub R1, R1, R2 ;; R1 = max_addr - stack_size which should be the heap end
00000C10: E3C11003    ;     and R1, R1, #-4 ;;align to 4 byte boundry just in case
00000C14: E3A03000    ;     mov R3, #0
00000C18:             ; heapcleanloop ;;starting at heapstart
00000C18: E1500001    ;     cmp R0, R1
00000C1C: 0A000002    ;     beq heapcleanend
00000C20: E5003000    ;     str R3, [R0] ;;store 0 in loc
00000C24: E2800004    ;     add R0, R0, #4 ;;inc by a word
00000C28: EAFFFFFA    ;     b heapcleanloop
00000C2C:             ; heapcleanend
00000C2C: E1A0F00E    ;     mov R15, R14
00000C30:             ; 
00000C30:             ; strlen
00000C30:             ; ;;INP in R0 is the address of the string
00000C30:             ; ;;OUT in R0 is the length of the null terminated string
00000C30:             ; 
00000C30:             ; ;;len = 0
00000C30:             ; ;;while(inp[len] != \0) {len++;}
00000C30:             ; ;;return len
00000C30:             ; 
00000C30: E3A01000    ;     mov R1, #0 ;;len
00000C34: E3500000    ;     cmp R0, #0
00000C38: 0A000004    ;     beq strlenend
00000C3C:             ; 
00000C3C:             ; strlenloop
00000C3C: E7D02001    ;     ldrb R2, [R0, R1]
00000C40: E3520000    ;     cmp R2, #0
00000C44: 0A000001    ;     beq strlenend
00000C48: E2811001    ;     add R1, R1, #1
00000C4C: EAFFFFFA    ;     b strlenloop
00000C50:             ; 
00000C50:             ; strlenend
00000C50: E1A00001    ;     mov R0, R1
00000C54: E1A0F00E    ;     mov R15, R14
00000C58:             ; 
00000C58:             ; 
00000C58:             ; strtoi
00000C58:             ; ;;INP in R0 is the address of the string
00000C58:             ; ;;OUT in R0 is the value created
00000C58:             ; ;;OUT in R1 is the err code
00000C58:             ; ;;
00000C58:             ; ;;ERR codes
00000C58:             ; ;;  0 is success
00000C58:             ; ;;  1 is attempted -ve
00000C58:             ; ;;  2 is use of non-numeric characters
00000C58:             ; ;;  3 is value out of range of integer
00000C58:             ; ;;  4 is null string given
00000C58:             ; 
00000C58:             ; ;;  example inp
00000C58:             ; ;;  12234       len = 5
00000C58:             ; ;;      ^-find end
00000C58:             ; ;;  tot = 0
00000C58:             ; ;;  for i from end to 0:
00000C58:             ; ;;      tot += inp[i] * (10 ** (len(inp) - i - 1))
00000C58:             ; ;;  +some checks for valid input
00000C58:             ; 
00000C58:             ; ;;This will take in an address to the start of a string and attempt to convert it into an integ
                      ; er
00000C58:             ; ;;String is only valid when all characters are numerical
00000C58:             ; ;;For now it does not accept -ve numbers
00000C58:             ; 
00000C58: E92D41F0    ;     push {R14, R4-R8}
00000C5C: E1A04000    ;     mov R4, R0  ;;R4 holds the addr
00000C60:             ; 
00000C60: E3500000    ;     cmp R0, #0
00000C64: 03A01004    ;     moveq R1, #4
00000C68: 0A00001E    ;     beq strtoiendfail ;;null given so err code = 4 and end
00000C6C:             ; 
00000C6C: EBFFFFEF    ;     bl strlen
00000C70: E1A05000    ;     mov R5, R0  ;;R5 holds the len of the string
00000C74:             ; 
00000C74: E3550000    ;     cmp R5, #0
00000C78: 0A00001C    ;     beq strtoiendsucc ;;if len(string) == 0 then return 0
00000C7C:             ; 
00000C7C: E5D46000    ;     ldrb R6, [R4, #0]
00000C80: E356002D    ;     cmp R6, #45
00000C84: 0A000012    ;     beq strtoifailminus
00000C88:             ; 
00000C88: E3A06000    ;     mov R6, #0  ;;R6 holds the total
00000C8C: E3A07001    ;     mov R7, #1  ;;R7 holds the **
00000C90: E2458001    ;     sub R8, R5, #1  ;;R8 is i which starts at end (len - 1)
00000C94: E3A0300A    ;     mov R3, #10 ;;mul to **
00000C98:             ; 
00000C98:             ; strtoiloop
00000C98: E3580000    ;     cmp R8, #0
00000C9C: BA00000A    ;     blt strtoilend
00000CA0:             ; 
00000CA0: E7D42008    ;     ldrb R2, [R4, R8]
00000CA4: E2422030    ;     sub R2, R2, #48
00000CA8:             ; 
00000CA8: E3520000    ;     cmp R2, #0
00000CAC: BA00000C    ;     blt strtoifailnonnum
00000CB0: E3520009    ;     cmp R2, #9
00000CB4: CA00000A    ;     bgt strtoifailnonnum
00000CB8:             ; 
00000CB8: E0266792    ;     mla R6, R2, R7, R6 ;;total = (inp[i] * (**)) + total -> total += inp[i] * (**)
00000CBC: 6A000006    ;     bvs strtoifailoutrange
00000CC0: E0070397    ;     mul R7, R7, R3
00000CC4:             ; 
00000CC4: E2488001    ;     sub R8, R8, #1
00000CC8:             ; 
00000CC8: EAFFFFF2    ;     b strtoiloop
00000CCC:             ; 
00000CCC:             ; 
00000CCC:             ; ;;branches are expensive - should this just be rep RET? probably doesn't matter at this scale
00000CCC:             ; strtoilend
00000CCC: E1A00006    ;     mov R0, R6
00000CD0: EA000006    ;     b strtoiendsucc
00000CD4:             ; 
00000CD4:             ; strtoifailminus
00000CD4: E3A01001    ;     mov R1, #1
00000CD8: EA000002    ;     b strtoiendfail
00000CDC:             ; 
00000CDC:             ; strtoifailoutrange
00000CDC: E3A01003    ;     mov R1, #3
00000CE0: EA000000    ;     b strtoiendfail
00000CE4:             ; 
00000CE4:             ; strtoifailnonnum
00000CE4: E3A01002    ;     mov R1, #2
00000CE8:             ; 
00000CE8:             ; strtoiendfail
00000CE8: E3A00000    ;     mov R0, #0
00000CEC: EA000000    ;     b strtoiend
00000CF0:             ; 
00000CF0:             ; strtoiendsucc
00000CF0: E3A01000    ;     mov R1, #0
00000CF4:             ; 
00000CF4:             ; strtoiend
00000CF4: E8BD41F0    ;     pop {R14, R4-R8}
00000CF8: E1A0F00E    ;     mov R15, R14
00000CFC:             ; 
00000CFC:             ; memcpy
00000CFC:             ; ;;INP in R0 is the addr of src
00000CFC:             ; ;;INP in R1 is the addr of dst
00000CFC:             ; ;;INP in R2 is the number of bytes to copy
00000CFC:             ; 
00000CFC:             ; ;;check if src and dst are alliged
00000CFC:             ; ;;If different then write bytes
00000CFC:             ; ;;If same then go to 4byte boundry
00000CFC:             ; ;;  Write words of bytes2copy / 4
00000CFC:             ; ;;  Write remaining bytes
00000CFC: E92D41F0    ;     push {R14, R4-R8}
00000D00:             ; 
00000D00: E2004003    ;     and R4, R0, #0b11
00000D04: E2015003    ;     and R5, R1, #0b11
00000D08:             ; 
00000D08: E1540005    ;     cmp R4, R5
00000D0C: 1A00000E    ;     bne memcpyallbytes
00000D10:             ; 
00000D10:             ;     ;;If they are the same then cpy R4 bytes and then do words
00000D10: E0422004    ;     sub R2, R2, R4;; bytes2cpy -= bytes we are about to write
00000D14: E1A03004    ;     mov R3, R4
00000D18: EB00000E    ;     bl memcpybytes
00000D1C:             ; 
00000D1C:             ;     ;;Now find the number of words that can be written i.e. bytes2cpy / 4 (bytes2cpy >> 2)
00000D1C: E3C23003    ;     and R3, R2, #-4 ;;the number of bytes to write that make up the words
00000D20: E3A04000    ;     mov R4, #0 ;;i
00000D24:             ; memcpywordsloop
00000D24: E1540003    ;     cmp R4, R3
00000D28: 0A000003    ;     beq memcpywordslend
00000D2C:             ; 
00000D2C: E7906004    ;     ldr R6, [R0, R4]
00000D30: E7816004    ;     str R6, [R1, R4]
00000D34:             ;     
00000D34: E2844004    ;     add R4, R4, #4
00000D38:             ; 
00000D38: EAFFFFF9    ;     b memcpywordsloop
00000D3C:             ;     
00000D3C:             ; memcpywordslend
00000D3C:             ; ;;Now copy the remaining bytes
00000D3C: E2022003    ;     and R2, R2, #0b11
00000D40: E1A03002    ;     mov R3, R2
00000D44: EB000003    ;     bl memcpybytes
00000D48: EA00000A    ;     b memcpyend
00000D4C:             ; 
00000D4C:             ; memcpyallbytes
00000D4C: E1A03002    ;     mov R3, R2
00000D50: EB000000    ;     bl memcpybytes
00000D54: EA000007    ;     b memcpyend
00000D58:             ; 
00000D58:             ; memcpybytes
00000D58:             ; ;;This is an internal function to memcpy and so doesn't follow the calling convention, it also 
                      ; assumes values are in place from memcpy
00000D58:             ; ;;for (int i = 0; i < byte2cpy; i++) {
00000D58:             ; ;;      *(dst + i) = *(src + i)
00000D58:             ; ;;INP in R3 is the number of bytes to copy
00000D58: E3A05000    ;     mov R5, #0 ;;i
00000D5C:             ; memcpybytesloop
00000D5C: E1550003    ;     cmp R5, R3
00000D60: 0A000003    ;     beq memcpybyteslend ;;i < bytes2cpy
00000D64:             ; 
00000D64: E7D04005    ;     ldrb R4, [R0, R5]
00000D68: E7C14005    ;     strb R4, [R1, R5] ;;dst[i] = src[i]
00000D6C:             ; 
00000D6C: E2855001    ;     add R5, R5, #1 ;;i++
00000D70:             ; 
00000D70: EAFFFFF9    ;     b memcpybytesloop
00000D74:             ; 
00000D74:             ; memcpybyteslend
00000D74: E1A0F00E    ;     mov R15, R14
00000D78:             ; 
00000D78:             ; memcpyend
00000D78: E8BD41F0    ;     pop {R14, R4-R8}
00000D7C: E1A0F00E    ;     mov R15, R14
00000D80:             ; 
00000D80:             ; getstring
00000D80:             ; ;;INP in R0 the terminator character
00000D80:             ; ;;INP in R1 the max number of characters or -1 for no max
00000D80:             ; ;;INP in R2 boolean (non-0/0) for if letters should be printed out as well
00000D80:             ; ;;RET in R0 a ptr to the memory address
00000D80:             ; ;;
00000D80:             ; ;;Dynamically allocate memory to support large string
00000D80:             ; 
00000D80:             ; ;;buff = malloc(minBytes)
00000D80:             ; ;;while (input != terminator && pos < maxchars) 
00000D80:             ; ;;  buff[pos] = input
00000D80:             ; ;;  putchar(input)
00000D80:             ; ;;  if (pos > buffSize)
00000D80:             ; ;;      nBuff = malloc(buffSize << 1)
00000D80:             ; ;;      memcpy from buff to nBuff
00000D80:             ; ;;      free buff
00000D80:             ; ;;      buff = nBuff
00000D80:             ; 
00000D80: E92D47F0    ;     push {R14, R4-R10}
00000D84:             ; 
00000D84: E1A08000    ;     mov R8, R0 ;;now holds terminator
00000D88: E1A09001    ;     mov R9, R1 ;;nax chars
00000D8C: E3590000    ;     cmp R9, #0
00000D90: 0A00003A    ;     beq getstringEnd
00000D94:             ;     ;sub R9, R9, #1 ;;reduce by 1 to use later
00000D94: E1A0A002    ;     mov R10, R2 ;;print bool
00000D98:             ; 
00000D98: E3A06008    ;     ldr R6, =minBuffSize ;;R6 will hold the current size of the buffer
00000D9C: E1A00006    ;     mov R0, R6
00000DA0: EB000245    ;     bl malloc
00000DA4:             ; 
00000DA4: E3500000    ;     cmp R0, #0
00000DA8: 0A000032    ;     beq getstringErr
00000DAC:             ; 
00000DAC: E1A04000    ;     mov R4, R0 ;;R4 is the address of the buffer
00000DB0:             ; 
00000DB0: E3A05000    ;     mov R5, #0 ;;R5 is the loop counter/index into buffer
00000DB4:             ; getstringloop
00000DB4: E3790001    ;     cmp R9, #-1
00000DB8: 0A000001    ;     beq getstringloopskipsize
00000DBC: E1550009    ;     cmp R5, R9 ;;position - maxsize
00000DC0:             ;                       ;;pos 2 means 3 characters written
00000DC0: AA00001B    ;     bge getstringlend ;;if position >= maxsize
00000DC4:             ; getstringloopskipsize
00000DC4: EF000001    ;     swi 1 ;;get input
00000DC8: E1500008    ;     cmp R0, R8 ;;is input == terminator character
00000DCC: 0A000018    ;     beq getstringlend
00000DD0:             ; 
00000DD0: E3790001    ;     cmp R9, #-1
00000DD4: 0AFFFFFF    ;     beq skipMax
00000DD8:             ;     
00000DD8:             ; skipMax
00000DD8: E1550006    ;     cmp R5, R6
00000DDC: E92D0001    ;     push {R0}
00000DE0: AA000005    ;     bge getstringresize
00000DE4:             ; 
00000DE4:             ; getstringlcont
00000DE4: E8BD0001    ;     pop {R0}
00000DE8: E7C40005    ;     strb R0, [R4, R5] ;;buff[pos] = input
00000DEC:             ; 
00000DEC: E35A0000    ;     cmp R10, #0
00000DF0: 1F000000    ;     swine 0 ;;output the character to the screen if R10 is not 0
00000DF4:             ; 
00000DF4: E2855001    ;     add R5, R5, #1
00000DF8:             ; 
00000DF8: EAFFFFED    ;     b getstringloop
00000DFC:             ; 
00000DFC:             ; getstringresize
00000DFC:             ;     ;;r6 will hold new buffer
00000DFC: E1A00086    ;     mov R0, R6, lsl #1
00000E00: EB00022D    ;     bl malloc
00000E04:             ; 
00000E04: E3500000    ;     cmp R0, #0
00000E08: 0A00001A    ;     beq getstringErr
00000E0C:             ; 
00000E0C: E1A07000    ;     mov R7, R0
00000E10:             ; 
00000E10: E1A00004    ;     mov R0, R4 ;;old buff
00000E14: E1A01007    ;     mov R1, R7 ;;newBuff
00000E18: E1A02005    ;     mov R2, R5 ;;bytes to write
00000E1C: EBFFFFB6    ;     bl memcpy
00000E20:             ; 
00000E20: E1A00004    ;     mov R0, R4
00000E24: EB0002AD    ;     bl free
00000E28: E1A04007    ;     mov R4, R7
00000E2C:             ; 
00000E2C: E1A06086    ;     mov R6, R6, lsl #1
00000E30:             ; 
00000E30: EAFFFFEB    ;     b getstringlcont
00000E34:             ; 
00000E34:             ; getstringlend
00000E34:             ;     ;;need to add a \0
00000E34:             ;     ;;need to check if the buffer is completely full -> resize buffer to +1? (will be aligned t
                      ; o 8 in malloc!) then copy
00000E34:             ;     ;;I could have the buffers always leave a space open for the \0? but this is kind of an edg
                      ; e case?
00000E34: E1550006    ;     cmp R5, R6 ;;position to size of buffer
00000E38: 0A000000    ;     beq getstringResizeEnd
00000E3C:             ; 
00000E3C: EA00000F    ;     b getstringEnd
00000E40:             ; 
00000E40:             ; getstringResizeEnd
00000E40: E2860001    ;     add R0, R6, #1
00000E44: EB00021C    ;     bl malloc
00000E48:             ; 
00000E48: E3500000    ;     cmp R0, #0
00000E4C: 0A000009    ;     beq getstringErr
00000E50:             ; 
00000E50: E1A07000    ;     mov R7, R0
00000E54:             ; 
00000E54: E1A00004    ;     mov R0, R4;;old buff
00000E58: E1A01007    ;     mov R1, R7;;new buff
00000E5C: E1A02005    ;     mov R2, R5;;bytes2write
00000E60: EBFFFFA5    ;     bl memcpy
00000E64:             ; 
00000E64: E1A00004    ;     mov R0, R4
00000E68: EB00029C    ;     bl free
00000E6C: E1A04007    ;     mov R4, R7
00000E70:             ; 
00000E70: E2866001    ;     add R6, R6, #1 ;;not needed
00000E74:             ; 
00000E74: EA000001    ;     b getstringEnd
00000E78:             ; 
00000E78:             ; getstringErr
00000E78: E3A00000    ;     mov R0, #0
00000E7C: EA000002    ;     b getstringEndEnd
00000E80:             ; 
00000E80:             ; getstringEnd
00000E80: E3A00000    ;     mov R0, #0
00000E84: E7C40005    ;     strb R0, [R4, R5]
00000E88:             ; 
00000E88: E1A00004    ;     mov R0, R4
00000E8C:             ; 
00000E8C:             ; getstringEndEnd
00000E8C: E8BD47F0    ;     pop {R14, R4-R10}
00000E90: E1A0F00E    ;     mov R15, R14
00000E94:             ; 
00000E94:             ; tolower
00000E94:             ; ;;INP in R0 is a character
00000E94:             ; ;;OUT in R0 is the character.lower()
00000E94: E3800020    ;     orr R0, R0, #32
00000E98: E1A0F00E    ;     mov R15, R14
00000E9C:             ; 
00000E9C:             ; setupGrid
00000E9C:             ; ;;INP --
00000E9C:             ; ;;RET in R0 is err code, non-0 is error
00000E9C:             ; ;;The values addresses of the grids will now be set, can still be 0
00000E9C:             ; ;; ask for generation mode
00000E9C:             ; ;;      |-If random ask for seed
00000E9C:             ; ;;      |   `-For generation roll the seed to create a pseudorandom value for each `pixel`
00000E9C:             ; ;;      `-If draw then get them to draw the grid one `pixel` at a time
00000E9C: E92D47F0    ;     push {R14, R4-R10}
00000EA0:             ; 
00000EA0:             ;     ;;generate the main grid
00000EA0: E55F6E55    ;     ldrb R6, width
00000EA4: E55F7E58    ;     ldrb R7, height
00000EA8:             ; 
00000EA8: E0000796    ;     mul R0, R6, R7 ;;width * height = num of bytes to malloc
00000EAC:             ; 
00000EAC: E1A05000    ;     mov R5, R0
00000EB0: EB000201    ;     bl malloc
00000EB4:             ; 
00000EB4: E1A04000    ;     mov R4, R0
00000EB8: E50F4E78    ;     str R4, gridA
00000EBC:             ; 
00000EBC: E1A00005    ;     mov R0, R5
00000EC0: EB0001FD    ;     bl malloc
00000EC4: E50F0E80    ;     str R0, gridB
00000EC8:             ; 
00000EC8: E3500000    ;     cmp R0, #0      ;;If either grid failed to malloc
00000ECC: 0A000062    ;     beq setupGridFail
00000ED0: E3540000    ;     cmp R4, #0
00000ED4: 0A000060    ;     beq setupGridFail
00000ED8:             ; 
00000ED8:             ;     ;;R4 holds the gridA addr
00000ED8:             ;     ;;R6 holds the width
00000ED8:             ;     ;;R7 holds the height
00000ED8:             ; 
00000ED8: E28F00BA    ;     adrl R0, askgenoption
00000EDC: E2800C0E    ; 
00000EE0: EF000003    ;     swi 3
00000EE4:             ; setupGridAsk
00000EE4: EF000001    ;     swi 1
00000EE8: E3800020    ;     orr R0, R0, #32
00000EEC:             ; 
00000EEC: E1A01000    ;     mov R1, R0
00000EF0: EBFFFE95    ;     bl newline
00000EF4:             ; 
00000EF4: E3510064    ;     cmp R1, #'d'
00000EF8: 0A000005    ;     beq setupdrawing
00000EFC:             ; 
00000EFC: E3510072    ;     cmp R1, #'r'
00000F00: 0A000008    ;     beq setuprandom
00000F04:             ; 
00000F04: E28F00C7    ;     adrl R0, setupGrdFailmsg
00000F08: E2800C0E    ; 
00000F0C: EF000003    ;     swi 3
00000F10: EAFFFFF3    ;     b setupGridAsk
00000F14:             ; 
00000F14:             ; setupdrawing
00000F14: E3A09000    ;     mov R9, #0
00000F18:             ; 
00000F18: E28F0D3D    ;     adrl R0, drawinfomsg
00000F1C: E2800000    ; 
00000F20: EF000003    ;     swi 3
00000F24:             ; 
00000F24: EA00000C    ;     b setupstart
00000F28:             ; 
00000F28:             ; setuprandom
00000F28: E28F0FC1    ;     adrl R0, askseed
00000F2C: E2800B03    ; 
00000F30: EF000003    ;     swi 3
00000F34:             ; 
00000F34: E3A00000    ;     mov R0, #0
00000F38: E3A01004    ;     mov R1, #4
00000F3C: E3A02001    ;     mov R2, #1
00000F40: EBFFFF8E    ;     bl getstring
00000F44:             ; 
00000F44: E3500000    ;     cmp R0, #0
00000F48: 0A000043    ;     beq setupGridFail
00000F4C:             ; 
00000F4C: E5108000    ;     ldr R8, [R0]
00000F50:             ; 
00000F50: EB000262    ;     bl free
00000F54:             ; 
00000F54: EBFFFE7C    ;     bl newline
00000F58:             ; 
00000F58: E3A09001    ;     mov R9, #1
00000F5C:             ; 
00000F5C:             ; setupstart
00000F5C:             ; ;;This is probably not a good way to do it as there is more branching in the middle of a loop t
                      ; hat is executed alot
00000F5C:             ; ;;I'm doing it this way `not because it is easy, but because I though it would be easy`
00000F5C:             ; ;;Reduces the need for writing another loop :)
00000F5C:             ; ;;R9 holds the mode (1 for random, 0 for draw)
00000F5C:             ; ;;R8 will hold the seed for random
00000F5C:             ; ;;for row from 0 to height - 1
00000F5C:             ; ;;  for col from 0 to width - 1
00000F5C:             ; ;;      if (random)
00000F5C:             ; ;;          grid[row][col] = ((seed rol 1) || row) && 1
00000F5C:             ; ;;      else
00000F5C:             ; ;;          grid[row][col] = input() == 1
00000F5C: E3A05000    ;     mov R5, #0 ;; row
00000F60:             ; setuprowloop
00000F60: E1550007    ;     cmp R5, R7
00000F64: 0A00003A    ;     beq setuprowlend
00000F68:             ; 
00000F68: E3A0A000    ;     mov R10, #0 ;;col
00000F6C:             ; setupcolloop
00000F6C: E15A0006    ;     cmp R10, R6
00000F70: 0A000035    ;     beq setupcollend
00000F74:             ; 
00000F74: E3590001    ;     cmp R9, #1
00000F78: 0A000000    ;     beq dorandom
00000F7C: EA000004    ;     b dodrawstart
00000F80:             ; 
00000F80:             ; ;;dorandom and dodraw will get their value for this position and then place it in R2
00000F80:             ; ;;R3 is free at this point
00000F80:             ; dorandom
00000F80:             ;     ;;seed in R8
00000F80: E1A080E8    ;     mov R8, R8, ror #1
00000F84: E00A3005    ;     and R3, R10, R5
00000F88: E0288003    ;     eor R8, R8, R3
00000F8C: E2082001    ;     and R2, R8, #1
00000F90: EA000029    ;     b setupcollcont
00000F94:             ; 
00000F94:             ; dodrawstart
00000F94: E023A695    ;     mla R3, R5, R6, R10 ;;R3 = row * width + col
00000F98:             ; 
00000F98: E3A00002    ;     mov R0, #2
00000F9C: E7C40003    ;     strb R0, [R4, R3]
00000FA0:             ; 
00000FA0: E3590000    ;     cmp R9, #0
00000FA4: 01A00004    ;     moveq R0, R4
00000FA8: 0B000031    ;     bleq drawgrid ;;print the new state of the grid if this is drawing mode
00000FAC:             ; 
00000FAC:             ; dodraw
00000FAC:             ;     ;;get input, validate 1 or 0
00000FAC:             ;     ;;if invalid print error loop back
00000FAC:             ;     ;;-_- I've just realised I want to print the grid each time as well R0-R3 are scratch
00000FAC: EF000001    ;     swi 1
00000FB0:             ; 
00000FB0: E3500031    ;     cmp R0, #'1'
00000FB4: 0A000015    ;     beq dodrawsucc
00000FB8: E3500030    ;     cmp R0, #'0'
00000FBC: 0A000013    ;     beq dodrawsucc
00000FC0:             ; 
00000FC0: E3A0100A    ;     ldr R1, =enter
00000FC4: E1500001    ;     cmp R0, R1;;next line
00000FC8: 1A00000C    ;     bne dodrawfail
00000FCC:             ; 
00000FCC: E023A695    ;     mla R3, R5, R6, R10 ;;R3 = row * width + col
00000FD0: E3A00000    ;     mov R0, #0
00000FD4: E7C40003    ;     strb R0, [R4, R3]
00000FD8:             ; 
00000FD8: E2855001    ;     add R5, R5, #1
00000FDC:             ; 
00000FDC: E55F0F8C    ;     ldrb R0, drawerase
00000FE0: E3500000    ;     cmp R0, #0
00000FE4: 0AFFFFDD    ;     beq setuprowloop
00000FE8:             ; 
00000FE8: E0000796    ;     mul R0, R6, R7      ;;I don't like having to do this every time :(
00000FEC: E1A00080    ;     mov R0, R0, lsl #1
00000FF0: E2800001    ;     add R0, R0, #1
00000FF4: E0800007    ;     add R0, R0, R7
00000FF8: EBFFFEEC    ;     bl erase
00000FFC:             ; 
00000FFC: EAFFFFD7    ;     b setuprowloop
00001000:             ; 
00001000:             ; dodrawfail
00001000:             ; 
00001000: E28F00AE    ;     adrl R0, drawfailmsg
00001004: E2800C0E    ; 
00001008: EF000003    ;     swi 3
0000100C:             ; 
0000100C: EAFFFFE6    ;     b dodraw
00001010:             ; 
00001010:             ; dodrawsucc
00001010: E92D0001    ;     push {R0}
00001014: E55F0FC4    ;     ldrb R0, drawerase
00001018: E3500000    ;     cmp R0, #0
0000101C: 0A000004    ;     beq dodrawsuccskiperase
00001020:             ; 
00001020: E0000796    ;     mul R0, R6, R7      ;;I don't like having to do this every time :(
00001024: E1A00080    ;     mov R0, R0, lsl #1
00001028: E2800001    ;     add R0, R0, #1
0000102C: E0800007    ;     add R0, R0, R7
00001030: EBFFFEDE    ;     bl erase
00001034:             ;     
00001034:             ; dodrawsuccskiperase
00001034: E8BD0001    ;     pop {R0}
00001038:             ; 
00001038: E2402030    ;     sub R2, R0, #48 ;;could be xor?
0000103C:             ; 
0000103C:             ; setupcollcont
0000103C:             ;     ;;place the value in R2 into the grid[row][col]
0000103C:             ;     ;;row * width + col
0000103C: E023A695    ;     mla R3, R5, R6, R10 ;;R3 = row * width + col ;;I'm doing this twice \-(*v*)-/
00001040: E7C42003    ;     strb R2, [R4, R3] ;;grid offset by R3
00001044:             ; 
00001044: E28AA001    ;     add R10, R10, #1
00001048: EAFFFFC7    ;     b setupcolloop
0000104C:             ; setupcollend
0000104C: E2855001    ;     add R5, R5, #1
00001050: EAFFFFC2    ;     b setuprowloop
00001054:             ; setuprowlend
00001054:             ;     ;;grid has been setup
00001054: E3A00000    ;     mov R0, #0 ;;success
00001058: EA000003    ;     b setupGridEnd
0000105C:             ; 
0000105C:             ; setupGridFail
0000105C: E28F0059    ;     adrl R0, malloc_panic
00001060: E2800C16    ; 
00001064: EF000003    ;     swi 3
00001068:             ; 
00001068: E3A00001    ;     mov R0, #1 ;;fail!
0000106C:             ; 
0000106C:             ; setupGridEnd
0000106C: E8BD47F0    ;     pop {R14, R4-R10}
00001070: E1A0F00E    ;     mov R15, R14
00001074:             ; 
00001074:             ; 
00001074:             ; ;;[[TODO]] the heap may not be blank (when heapclean is removed) and so need to 0 the mem. Mayb
                      ; e add option to malloc or add calloc (not the same)
00001074:             ; drawgrid
00001074:             ; ;;INP in R0 is the grid address to draw
00001074:             ; 
00001074:             ; ;;for row from 0 to height - 1
00001074:             ; ;;  for col from 0 to width - 1
00001074:             ; ;;      print('X' if grid[row][col] else '_')
00001074:             ; ;;  print(newline)
00001074:             ; ;;print(newline)
00001074: E92D01F0    ;     push {R4-R8}
00001078:             ; 
00001078: E1A06000    ;     mov R6, R0
0000107C:             ; 
0000107C: E24F4031    ;     adrl R4, width
00001080: E2444A01    ; 
00001084: E5544000    ;     ldrb R4, [R4]
00001088: E24F503C    ;     adrl R5, height
0000108C: E2455A01    ; 
00001090: E5555000    ;     ldrb R5, [R5]
00001094:             ; 
00001094: E3A02000    ;     mov R2, #0 ;;row
00001098:             ; drawgridrowloop
00001098: E1520005    ;     cmp R2, R5
0000109C: 0A00001C    ;     beq drawgridrowlend
000010A0:             ; 
000010A0: E3A01000    ;     mov R1, #0 ;;col
000010A4:             ; drawgridcolloop
000010A4: E1510004    ;     cmp R1, R4
000010A8: 0A000014    ;     beq drawgridcollend
000010AC:             ; 
000010AC: E0231492    ;     mla R3, R2, R4, R1 ;;R3 = row * width + col
000010B0: E7D63003    ;     ldrb R3, [R6, R3]
000010B4:             ; 
000010B4: E3530002    ;     cmp R3, #2
000010B8: 0A000008    ;     beq drawgridprintcurrent
000010BC: E3530001    ;     cmp R3, #1
000010C0: 024F006F    ;     adrleq R0, alive_c
000010C4: 02400A01    ; 
000010C8: 05100000    ;     ldreq R0, [R0]
000010CC: 124F007A    ;     adrlne R0, dead_c
000010D0: 12400A01    ; 
000010D4: 15100000    ;     ldrne R0, [R0]
000010D8:             ; 
000010D8: EF000000    ;     swi 0
000010DC:             ; 
000010DC: EA000003    ;     b drawgridcollcont
000010E0:             ; 
000010E0:             ; drawgridprintcurrent
000010E0: E24F008D    ;     adrl R0, ptr_c
000010E4: E2400A01    ; 
000010E8: E5100000    ;     ldr R0, [R0]
000010EC: EF000000    ;     swi 0
000010F0:             ; 
000010F0:             ; drawgridcollcont
000010F0: E3A00020    ;     mov R0, #' '
000010F4: EF000000    ;     swi 0
000010F8:             ; 
000010F8: E2811001    ;     add R1, R1, #1
000010FC: EAFFFFE8    ;     b drawgridcolloop
00001100:             ; 
00001100:             ; drawgridcollend
00001100: E3A01000    ;     mov R1, #0
00001104: E2822001    ;     add R2, R2, #1
00001108: E3A0000A    ;     mov R0, #10
0000110C: EF000000    ;     swi 0
00001110: EAFFFFE0    ;     b drawgridrowloop
00001114:             ; 
00001114:             ; drawgridrowlend
00001114: E3A0000A    ;     mov R0, #10
00001118: EF000000    ;     swi 0
0000111C:             ; drawgridend
0000111C: E8BD01F0    ;     pop {R4-R8}
00001120: E1A0F00E    ;     mov R15, R14
00001124:             ; 
00001124:             ; 
00001124:             ; printoptions
00001124:             ; ;;INP --
00001124:             ; ;;OUT --
00001124:             ; ;;optionsp_1-5
00001124: E28F0EB9    ;     adrl R0, optionsp_1
00001128: E2800000    ; 
0000112C: EF000003    ;     swi 3
00001130:             ; 
00001130: E24F00E5    ;     adrl R0, width
00001134: E2400A01    ; 
00001138: E5500000    ;     ldrb R0, [R0]
0000113C: EF000004    ;     swi 4
00001140:             ; 
00001140: E28F0FE3    ;     adrl R0, optionsp_2
00001144: E2800B02    ; 
00001148: EF000003    ;     swi 3
0000114C:             ; 
0000114C: E24F0C11    ;     adrl R0, height
00001150: E2400000    ; 
00001154: E5500000    ;     ldrb R0, [R0]
00001158: EF000004    ;     swi 4
0000115C:             ; 
0000115C: E28F0073    ;     adrl R0, optionsp_3
00001160: E2800C0B    ; 
00001164: EF000003    ;     swi 3
00001168:             ; 
00001168: E24F001F    ;     adrl R0, slow_b
0000116C: E2400C11    ; 
00001170: E5500000    ;     ldrb R0, [R0]
00001174: E3500001    ;     cmp R0, #1
00001178: 128F0F65    ;     adrlne R0, off_msg
0000117C: 12800B05    ; 
00001180: 028F0089    ;     adrleq R0, on_msg
00001184: 02800C15    ; 
00001188: EF000003    ;     swi 3
0000118C:             ; 
0000118C: E28F004F    ;     adrl R0, optionsp_4
00001190: E2800C0B    ; 
00001194: EF000003    ;     swi 3
00001198:             ; 
00001198: E24F0E15    ;     adrl R0, erase_b
0000119C: E2400A01    ; 
000011A0: E5500000    ;     ldrb R0, [R0]
000011A4: E3500001    ;     cmp R0, #1
000011A8: 128F0F59    ;     adrlne R0, off_msg
000011AC: 12800B05    ; 
000011B0: 028F0059    ;     adrleq R0, on_msg
000011B4: 02800C15    ; 
000011B8: EF000003    ;     swi 3
000011BC:             ; 
000011BC: E28F002B    ;     adrl R0, optionsp_5
000011C0: E2800C0B    ; 
000011C4: EF000003    ;     swi 3
000011C8:             ; 
000011C8: E24F007E    ;     adrl R0, step_b
000011CC: E2400C11    ; 
000011D0: E5500000    ;     ldrb R0, [R0]
000011D4: E3500001    ;     cmp R0, #1
000011D8: 128F0F4D    ;     adrlne R0, off_msg
000011DC: 12800B05    ; 
000011E0: 028F0029    ;     adrleq R0, on_msg
000011E4: 02800C15    ; 
000011E8: EF000003    ;     swi 3
000011EC:             ; 
000011EC: E3A0000A    ;     ldr R0, =nl
000011F0: EF000000    ;     swi 0
000011F4:             ; 
000011F4: E1A0F00E    ;     mov R15, R14
000011F8:             ; 
000011F8:             ; setupOptions
000011F8:             ; ;;INP in R0 is 1 if should ask for dims 0 for skip
000011F8: E92D4010    ;     push {R14, R4}
000011FC: E1A04000    ;     mov R4, R0
00001200:             ; 
00001200: E28F00D3    ;     adrl R0, askdefaults ;;ask q
00001204: E2800B02    ; 
00001208: EF000003    ;     swi 3
0000120C: EF000001    ;     swi 1   ;;get character answer
00001210: EF000000    ;     swi 0
00001214: E3500059    ;     cmp R0, #'Y'
00001218: E3A0000A    ;     ldr R0, =nl
0000121C: EF000000    ;     swi 0
00001220:             ; 
00001220: 1A000022    ;     bne setupCustom
00001224:             ; 
00001224: E24F0E1D    ;     adrl R0, erase_b_d
00001228: E2400A01    ; 
0000122C: E5500000    ;     ldrb R0, [R0]
00001230: E24F1F7A    ;     adrl R1, erase_b
00001234: E2411A01    ; 
00001238: E5410000    ;     strb R0, [R1]
0000123C:             ; 
0000123C: E24F00E7    ;     adrl R0, slow_b_d
00001240: E2400C11    ; 
00001244: E5500000    ;     ldrb R0, [R0]
00001248: E24F10FF    ;     adrl R1, slow_b
0000124C: E2411C11    ; 
00001250: E5410000    ;     strb R0, [R1]
00001254:             ; 
00001254: E24F00FE    ;     adrl R0, step_b_d
00001258: E2400C11    ; 
0000125C: E5500000    ;     ldrb R0, [R0]
00001260: E24F1016    ;     adrl R1, step_b
00001264: E2411C12    ; 
00001268: E5410000    ;     strb R0, [R1]
0000126C:             ; 
0000126C: E3540000    ;     cmp R4, #0
00001270: 0A00000B    ;     beq setupOptionsDEnd
00001274:             ; 
00001274: E24F001D    ;     adrl R0, width_d
00001278: E2400C12    ; 
0000127C: E5500000    ;     ldrb R0, [R0]
00001280: E24F1035    ;     adrl R1, width
00001284: E2411C12    ; 
00001288: E5410000    ;     strb R0, [R1]
0000128C: E24F0F8D    ;     adrl R0, height_d
00001290: E2400A01    ; 
00001294: E5500000    ;     ldrb R0, [R0]
00001298: E24F1F93    ;     adrl R1, height
0000129C: E2411A01    ; 
000012A0: E5410000    ;     strb R0, [R1]
000012A4:             ; 
000012A4:             ; setupOptionsDEnd
000012A4: EBFFFF9E    ;     bl printoptions
000012A8:             ; 
000012A8: E8BD4010    ;     pop {R14, R4}
000012AC: E1A0F00E    ;     mov R15, R14 ;;RET
000012B0:             ; 
000012B0:             ; setupCustom
000012B0:             ; ;;ask for erase, slow, step, and conditionally dims
000012B0:             ; 
000012B0:             ; ;;ask step
000012B0:             ; ;;ask erase
000012B0:             ; ;;if (!step)
000012B0:             ; ;;  if erase
000012B0:             ; ;;      print(recommend slow)
000012B0:             ; ;;  ask slow
000012B0:             ; 
000012B0: E3A01001    ;     mov R1, #1
000012B4:             ; 
000012B4: E28F0082    ;     adrl R0, askstep
000012B8: E2800B02    ; 
000012BC: EF000003    ;     swi 3
000012C0: EF000001    ;     swi 1
000012C4: EF000000    ;     swi 0 
000012C8: E3500059    ;     cmp R0, #'Y' 
000012CC: E3A0000A    ;     ldr R0, =nl
000012D0: EF000000    ;     swi 0
000012D4: 13A01000    ;     movne R1, #0
000012D8: E24F008E    ;     adrl R0, step_b
000012DC: E2400C12    ; 
000012E0: E5401000    ;     strb R1, [R0]
000012E4:             ; 
000012E4: E3A01001    ;     mov R1, #1
000012E8:             ; 
000012E8: E28F001D    ;     adrl R0, askerase
000012EC: E2800B02    ; 
000012F0: EF000003    ;     swi 3
000012F4: EF000001    ;     swi 1
000012F8: EF000000    ;     swi 0
000012FC: E3500059    ;     cmp R0, #'Y'
00001300: E3A0000A    ;     ldr R0, =nl
00001304: EF000000    ;     swi 0
00001308: 13A01000    ;     movne R1, #0
0000130C: E24F0FB1    ;     adrl R0, erase_b
00001310: E2400A01    ; 
00001314: E5401000    ;     strb R1, [R0]
00001318:             ; 
00001318: E24F00CE    ;     adrl R0, step_b
0000131C: E2400C12    ; 
00001320: E5500000    ;     ldrb R0, [R0]
00001324: E3500001    ;     cmp R0, #1
00001328: 0A000011    ;     beq setupCustomskipslow
0000132C:             ; 
0000132C: E3510001    ;     cmp R1, #1 ;;if erase is on
00001330: E28F00B9    ;     adrl R0, warneraseslow
00001334: E2800B02    ; 
00001338: 0F000003    ;     swieq 3
0000133C:             ; 
0000133C: E3A01001    ;     mov R1, #1
00001340:             ;  
00001340: E28F00DE    ;     adrl R0, askslow
00001344: E2800C07    ; 
00001348: EF000003    ;     swi 3
0000134C: EF000001    ;     swi 1
00001350: EF000000    ;     swi 0 
00001354: E3500059    ;     cmp R0, #'Y' 
00001358: E3A0000A    ;     ldr R0, =nl
0000135C: EF000000    ;     swi 0
00001360: 13A01000    ;     movne R1, #0
00001364: E24F001B    ;     adrl R0, slow_b
00001368: E2400C13    ; 
0000136C: E5401000    ;     strb R1, [R0] ;;[[maybe]] changed but not checked, go here if error
00001370:             ; 
00001370: EA000016    ;     b setupCustomDimsCheck
00001374:             ; 
00001374:             ; setupCustomskipslow
00001374: E3A00000    ;     mov R0, #0
00001378: E24F102F    ;     adrl R1, slow_b
0000137C: E2411C13    ; 
00001380: E5410000    ;     strb R0, [R1]
00001384:             ; 
00001384: EA000011    ;     b setupCustomDimsCheck
00001388:             ; 
00001388:             ; printrange
00001388:             ; ;;INP --
00001388:             ; ;;OUT --
00001388: E28F00B1    ;     adrl R0, bracket_open
0000138C: E2800A01    ; 
00001390: EF000003    ;     swi 3
00001394:             ; 
00001394: E24F0047    ;     adrl R0, range_min
00001398: E2400C13    ; 
0000139C: E5500000    ;     ldrb R0, [R0]
000013A0: EF000004    ;     swi 4
000013A4:             ; 
000013A4: E28F009A    ;     adrl R0, dash
000013A8: E2800B02    ; 
000013AC: EF000003    ;     swi 3
000013B0:             ; 
000013B0: E24F0062    ;     adrl R0, range_max
000013B4: E2400C13    ; 
000013B8: E5500000    ;     ldrb R0, [R0]
000013BC: EF000004    ;     swi 4
000013C0:             ; 
000013C0: E28F0D22    ;     adrl R0, b_close_colon
000013C4: E2800000    ; 
000013C8: EF000003    ;     swi 3
000013CC:             ; 
000013CC: E1A0F00E    ;     mov R15, R14
000013D0:             ; 
000013D0:             ; setupCustomDimsCheck
000013D0: E3540000    ;     cmp R4, #0
000013D4: 0A00004C    ;     beq customend
000013D8:             ; 
000013D8: E28F004F    ;     adrl R0, askwid
000013DC: E2800B02    ; 
000013E0: EF000003    ;     swi 3
000013E4:             ; 
000013E4: EBFFFFE7    ;     bl printrange
000013E8:             ; 
000013E8:             ; getwid
000013E8: E3A0000A    ;     ldr R0, =enter
000013EC: E3A01003    ;     mov R1, #3
000013F0: E3A02001    ;     mov R2, #1
000013F4: EBFFFE61    ;     bl getstring
000013F8:             ; 
000013F8: E3500000    ;     cmp R0, #0
000013FC: 0A00003E    ;     beq customfail
00001400:             ; 
00001400: E1A04000    ;     mov R4, R0
00001404:             ; 
00001404: EBFFFE13    ;     bl strtoi
00001408: E1A05000    ;     mov R5, R0
0000140C:             ;     
0000140C: E1A00004    ;     mov R0, R4
00001410: EB000132    ;     bl free ;;free the collected string
00001414:             ; 
00001414: E1A01005    ;     mov R1, R5
00001418:             ; 
00001418: EBFFFD4B    ;     bl newline
0000141C:             ; 
0000141C: E24F40CF    ;     adrl R4, range_min
00001420: E2444C13    ; 
00001424: E5544000    ;     ldrb R4, [R4]
00001428: E24F50DA    ;     adrl R5, range_max
0000142C: E2455C13    ; 
00001430: E5555000    ;     ldrb R5, [R5]
00001434:             ; 
00001434: E1510005    ;     cmp R1, R5
00001438: CA000005    ;     bgt getwidFail
0000143C: E1510004    ;     cmp R1, R4
00001440: BA000003    ;     blt getwidFail
00001444:             ; 
00001444: E24F00F9    ;     adrl R0, width
00001448: E2400C13    ; 
0000144C: E5401000    ;     strb R1, [R0]
00001450:             ; 
00001450: EA000004    ;     b getheisetup
00001454:             ; 
00001454:             ; getwidFail
00001454: E28F0007    ;     adrl R0, getwidfailmsg
00001458: E2800B02    ; 
0000145C: EF000003    ;     swi 3
00001460:             ; 
00001460: EBFFFFC8    ;     bl printrange
00001464:             ; 
00001464: EAFFFFDF    ;     b getwid
00001468:             ; 
00001468:             ; getheisetup
00001468: E28F0FF7    ;     adrl R0, askhei
0000146C: E2800B01    ; 
00001470: EF000003    ;     swi 3
00001474:             ; 
00001474: EBFFFFC3    ;     bl printrange
00001478:             ; 
00001478:             ; gethei
00001478: E3A0000A    ;     ldr R0, =enter
0000147C: E3A01003    ;     mov R1, #3
00001480: E3A02001    ;     mov R2, #1
00001484: EBFFFE3D    ;     bl getstring
00001488:             ; 
00001488: E3500000    ;     cmp R0, #0
0000148C: 0A00001A    ;     beq customfail
00001490:             ; 
00001490: E1A04000    ;     mov R4, R0
00001494:             ; 
00001494: EBFFFDEF    ;     bl strtoi
00001498: E1A05000    ;     mov R5, R0
0000149C:             ; 
0000149C: E1A00004    ;     mov R0, R4
000014A0: EB00010E    ;     bl free
000014A4:             ; 
000014A4: E1A01005    ;     mov R1, R5
000014A8:             ; 
000014A8: EBFFFD27    ;     bl newline
000014AC:             ; 
000014AC: E24F405F    ;     adrl R4, range_min
000014B0: E2444B05    ; 
000014B4: E5544000    ;     ldrb R4, [R4]
000014B8: E24F506A    ;     adrl R5, range_max
000014BC: E2455B05    ; 
000014C0: E5555000    ;     ldrb R5, [R5]
000014C4:             ; 
000014C4: E1510005    ;     cmp R1, R5
000014C8: CA000005    ;     bgt getheiFail
000014CC: E1510004    ;     cmp R1, R4
000014D0: BA000003    ;     blt getheiFail
000014D4:             ; 
000014D4: E24F2088    ;     adrl R2, height
000014D8: E2422B05    ; 
000014DC: E5421000    ;     strb R1, [R2]
000014E0:             ; 
000014E0: EA000009    ;     b customend
000014E4:             ; 
000014E4:             ; getheiFail
000014E4: E28F00A3    ;     adrl R0, getheifailmsg
000014E8: E2800C07    ; 
000014EC: EF000003    ;     swi 3
000014F0:             ; 
000014F0: EBFFFFA4    ;     bl printrange
000014F4:             ; 
000014F4: EAFFFFDF    ;     b gethei
000014F8:             ; 
000014F8: EA000003    ;     b customend
000014FC:             ; 
000014FC:             ; customfail
000014FC: E28F00B9    ;     adrl R0, malloc_panic
00001500: E2800C11    ; 
00001504: EF000003    ;     swi 3
00001508:             ; 
00001508: EA000000    ;     b customret
0000150C:             ; 
0000150C:             ; customend
0000150C: EBFFFF04    ;     bl printoptions
00001510:             ; 
00001510:             ; customret
00001510: E8BD4010    ;     pop {R14, R4}
00001514: E1A0F00E    ;     mov R15, R14 ;;RET
00001518:             ; 
00001518:             ; 
00001518:             ; updategrid
00001518:             ; ;;INP in R0 is the active grid
00001518:             ; ;;INP in R1 is the passive grid
00001518:             ; ;;passive grid is the one being updated based on the value in the activeGrid
00001518:             ; ;;RET --
00001518:             ; ;;for row from 0 to height - 1
00001518:             ; ;;  for col from 0 to width - 1
00001518:             ; ;;      int n = countNeighbours(activeGrid, row, col)
00001518:             ; ;;      int s = activeGrid[row][col]
00001518:             ; ;;      
00001518:             ; ;;      if (s == alive)
00001518:             ; ;;          passiveGrid[row][col] = n == 3 or n == 2
00001518:             ; ;;      else
00001518:             ; ;;          passiveGrid[row][col] = n == 3
00001518:             ; 
00001518:             ; ;;  R4 holds the row
00001518:             ; ;;  R5 holds the col
00001518:             ; ;;  R6 holds the width
00001518:             ; ;;  R7 holds the height
00001518:             ; ;;  R8 holds the active grid
00001518:             ; ;;  R9 holds the passive grid
00001518:             ; 
00001518: E92D47F0    ;     push {R14, R4-R10}
0000151C:             ; 
0000151C: E24F60D1    ;     adrl R6, width
00001520: E2466B05    ; 
00001524: E5566000    ;     ldrb R6, [R6]
00001528: E24F70DC    ;     adrl R7, height
0000152C: E2477B05    ; 
00001530: E5577000    ;     ldrb R7, [R7]
00001534:             ; 
00001534: E1A08000    ;     mov R8, R0
00001538: E1A09001    ;     mov R9, R1
0000153C:             ; 
0000153C: E3A04000    ;     mov R4, #0 ;;row
00001540:             ; updategridrowloop
00001540: E1540007    ;     cmp R4, R7
00001544: 0A00001A    ;     beq updategridrowlend
00001548:             ; 
00001548: E3A05000    ;     mov R5, #0 ;;col
0000154C:             ; updategridcolloop
0000154C: E1550006    ;     cmp R5, R6
00001550: 0A000014    ;     beq updategridccollend
00001554:             ; 
00001554: E1A00008    ;     mov R0, R8
00001558: E1A01004    ;     mov R1, R4
0000155C: E1A02005    ;     mov R2, R5
00001560: EB000015    ;     bl countneighbours
00001564:             ; 
00001564: E0215694    ;     mla R1, R4, R6, R5 ;;R1 = row * width + col
00001568: E7D82001    ;     ldrb R2, [R8, R1] ;;grid[R1]
0000156C:             ;     ;;R0 holds the n count
0000156C: E3520000    ;     cmp R2, #0
00001570: 0A000006    ;     beq updatedead
00001574:             ; 
00001574:             ; updatealive
00001574: E3A03000    ;     mov R3, #0
00001578: E3500003    ;     cmp R0, #3
0000157C: 03A03001    ;     moveq R3, #1
00001580: E3500002    ;     cmp R0, #2
00001584: 03A03001    ;     moveq R3, #1
00001588: E7C93001    ;     strb R3, [R9, R1]
0000158C: EA000003    ;     b updatelcont
00001590:             ; 
00001590:             ; updatedead
00001590: E3A03001    ;     mov R3, #1
00001594: E3500003    ;     cmp R0, #3
00001598: 13A03000    ;     movne R3, #0
0000159C: E7C93001    ;     strb R3, [R9, R1]
000015A0:             ; 
000015A0:             ; updatelcont
000015A0: E2855001    ;     add R5, R5, #1
000015A4: EAFFFFE8    ;     b updategridcolloop
000015A8:             ; 
000015A8:             ; updategridccollend
000015A8: E3A05000    ;     mov R5, #0
000015AC: E2844001    ;     add R4, R4, #1
000015B0: EAFFFFE2    ;     b updategridrowloop
000015B4:             ; 
000015B4:             ; updategridrowlend
000015B4:             ; updategridend
000015B4: E8BD47F0    ;     pop {R14, R4-R10}
000015B8: E1A0F00E    ;     mov R15, R14
000015BC:             ; 
000015BC:             ; 
000015BC:             ; countneighbours
000015BC:             ; ;;INP in R0 is the activeGrid
000015BC:             ; ;;INP in R1 is the row
000015BC:             ; ;;INP in R2 is the col
000015BC:             ; ;;OUT in R0 is the number of neighbours
000015BC:             ; 
000015BC:             ; ;;offsets = [[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]]
000015BC:             ; ;;tot = 0
000015BC:             ; ;;for offset in offsets
000015BC:             ; ;;  if (isinrange(row + offset[0], col + offset[1]))
000015BC:             ; ;;      tot += grid[row + offset[0]][col + offset[1]]
000015BC:             ; ;;return tot
000015BC: E92D4FF0    ;     push {R14, R4-R11} ;;I used the fp before I knew it wasn't a general purpose one, its fine 
                      ; in this context anyway
000015C0:             ; 
000015C0: E24F4D57    ;     adrl R4, offsets ;;holds the offset
000015C4: E2444000    ; 
000015C8:             ; 
000015C8: E1A07000    ;     mov R7, R0
000015CC: E1A08001    ;     mov R8, R1
000015D0: E1A09002    ;     mov R9, R2
000015D4: E3A0A000    ;     mov R10, #0 ;;R10 holds the total
000015D8: E24FB08D    ;     adrl R11, width
000015DC: E24BBC15    ; 
000015E0: E55BB000    ;     ldrb R11, [R11];;R11 holds the width of the grid
000015E4:             ; 
000015E4: E3A03000    ;     mov R3, #0
000015E8:             ; 
000015E8:             ; countneighboursloop
000015E8: E3530008    ;     cmp R3, #8 ;;change this ccheck to be for R4
000015EC: 0A00000F    ;     beq countneighbourslend
000015F0:             ; 
000015F0: E4945004    ;     ldr R5, [R4], #4
000015F4: E4946004    ;     ldr R6, [R4], #4
000015F8:             ; 
000015F8: E0880005    ;     add R0, R8, R5
000015FC: E0891006    ;     add R1, R9, R6
00001600:             ; 
00001600: E2833001    ;     add R3, R3, #1
00001604:             ; 
00001604: E92D0008    ;     push {R3} ;;I should probably be using a local var on the stack, but I don't yet know how t
                      ; o setup a stack frame properly
00001608: EB00000B    ;     bl isinrange
0000160C: E8BD0008    ;     pop {R3}
00001610:             ; 
00001610: E3500000    ;     cmp R0, #0
00001614: 0A000004    ;     beq countneighboursskipadd
00001618:             ; 
00001618: E0880005    ;     add R0, R8, R5 ;;new row
0000161C: E0891006    ;     add R1, R9, R6 ;;new col ;;can assume that R0, R1 haven't changed as isinrange doesn't edit
                      ;  them, but I'm going to for now
00001620:             ; 
00001620: E0201B90    ;     mla R0, R0, R11, R1 ;;find offset
00001624: E7D70000    ;     ldrb R0, [R7, R0]
00001628: E08AA000    ;     add R10, R10, R0 ;;tot += grid[newrow][newcol]
0000162C:             ; 
0000162C:             ; countneighboursskipadd
0000162C: EAFFFFED    ;     b countneighboursloop
00001630:             ; 
00001630:             ; countneighbourslend
00001630:             ; countneighboursend
00001630: E1A0000A    ;     mov R0, R10
00001634: E8BD4FF0    ;     pop {R14, R4-R11}
00001638: E1A0F00E    ;     mov R15, R14
0000163C:             ; 
0000163C:             ; 
0000163C:             ; isinrange
0000163C:             ; ;;INP in R0 is the row
0000163C:             ; ;;INP in R1 is the col
0000163C:             ; ;;Uses defined width and height
0000163C:             ; ;;RET in R0 is 1 if is in range else 0
0000163C: E3A02001    ;     mov R2, #1 ;;is valid unless...
00001640:             ; 
00001640: E3500000    ;     cmp R0, #0
00001644: BA00000D    ;     blt isinrangefail
00001648:             ; 
00001648: E3510000    ;     cmp R1, #0
0000164C: BA00000B    ;     blt isinrangefail
00001650:             ; 
00001650: E24F3005    ;     adrl R3, width
00001654: E2433C16    ; 
00001658: E5533000    ;     ldrb R3, [R3]
0000165C: E1510003    ;     cmp R1, R3
00001660: AA000006    ;     bge isinrangefail
00001664:             ; 
00001664: E24F3F86    ;     adrl R3, height
00001668: E2433B05    ; 
0000166C: E5533000    ;     ldrb R3, [R3]
00001670: E1500003    ;     cmp R0, R3
00001674: AA000001    ;     bge isinrangefail
00001678:             ; 
00001678: E3A00001    ;     mov R0, #1
0000167C: EA000000    ;     b isinrangeend
00001680:             ; 
00001680:             ; isinrangefail
00001680: E3A00000    ;     mov R0, #0
00001684:             ; 
00001684:             ; isinrangeend
00001684: E1A0F00E    ;     mov R15, R14
00001688:             ; 
00001688:             ; 
00001688:             ; ;; The heap will be a linked list of free blocks - unlike the Comodo version which stores both 
                      ; free & taken blocks 
00001688:             ; ;; This is an idea I'm stealing from the C programming book
00001688:             ; ;; Crate structure
00001688:             ; ;;  |-ptr to next crate (1 word)
00001688:             ; ;;  |-ptr to prev crate (1 word)
00001688:             ; ;;  `-Size (bytes)      (1 word)
00001688:             ; ;; 
00001688:             ; 
00001688:             ; ;;  Traversal of the heap
00001688:             ; ;;  Unlink in my Comodo implimentation the heap is not a linked list of all Crates (free or not
                      ; )
00001688:             ; ;;  That made traversing the heap for debugging purposes very easy, in this case taken crates d
                      ; o not point to the next
00001688:             ; ;;  Instead could start at head and then just go to addr + sizeof(Crate) + size. This should ta
                      ; ke us to the next crate, free or not
00001688:             ; ;;  
00001688:             ; setupHeap
00001688:             ; ;;NO INP
00001688:             ; ;;NO OUT
00001688:             ;     ;;we have the heapstart
00001688:             ;     ;;the end of the heap will be 0x100000 (it will overlap with the stack :) )
00001688: E24F0FA3    ;     adrl R0, heaphead
0000168C: E2400B05    ; 
00001690: E5100000    ;     ldr R0, [R0] ;;stores the mem addr of the start of the heap
00001694: E3A01601    ;     ldr R1, =max_addr ;;stores the end of the heap
00001698: E3A02801    ;     ldr R2, =stack_size
0000169C: E0411002    ;     sub R1, R1, R2
000016A0:             ; 
000016A0: E0411000    ;     sub R1, R1, R0  ;;HEAPEND - HEAPSTART = TOTAL STORAGE (bytes)
000016A4: E241100C    ;     sub R1, R1, #12 ;;SIZE -= SIZEOF(CRATE) (12 bytes)
000016A8: E5801008    ;     str R1, [R0, #8] ;;set the size of the crate
000016AC: E3A01000    ;     mov R1, #0
000016B0: E5801004    ;     str R1, [R0, #4] ;;set the prev ptr
000016B4: E5801000    ;     str R1, [R0, #0] ;;set the next ptr
000016B8:             ; 
000016B8: E1A0F00E    ;     mov R15, R14
000016BC:             ; 
000016BC:             ; ;; The heap is a linked list of free Crates and so find the header and then go though until one
                      ;  satifies the size requirement
000016BC:             ; ;;  end if next is 0
000016BC:             ; ;;  once found either take over the crate or split it into two new crates
000016BC:             ; ;;  align the bytes amount to 8 byte boundry
000016BC:             ; malloc
000016BC:             ; ;;INP into R0 bytes to allocate
000016BC:             ; ;;OUT into R0 the ptr to the memory or 0 for no memory allocated
000016BC:             ;     ;;step 1 align the bytes
000016BC:             ;     ;;1001010 & 0111 = 0000010 ;2
000016BC:             ;     ;;if 0 goto alignend
000016BC:             ;     ;;1001010 + (8 - 2)
000016BC: E92D0010    ;     push {R4}
000016C0:             ; 
000016C0: E2001007    ;     and R1, R0, #0b0111
000016C4: E3510000    ;     cmp R1, #0
000016C8: 0A000002    ;     beq mallignend
000016CC: E3A03008    ;     mov R3, #0b1000
000016D0: E0432001    ;     sub R2, R3, R1
000016D4: E0800002    ;     add R0, R0, R2
000016D8:             ; 
000016D8:             ; mallignend
000016D8: E24F1FB7    ;     adrl R1, heaphead
000016DC: E2411B05    ; 
000016E0: E5111000    ;     ldr R1, [R1] ;;stores a ptr to the first block
000016E4:             ;     
000016E4:             ; checkcrate
000016E4: E5912008    ;     ldr R2, [R1, #8] ;;Size of the crate
000016E8: E1500002    ;     cmp R0, R2 ;;bytes needed - bytes in crate
000016EC: DA000006    ;     ble foundcrate
000016F0: E5912000    ;     ldr R2, [R1, #0] ;;get the next ptr
000016F4: E3520000    ;     cmp R2, #0
000016F8: 0A000001    ;     beq nocrates
000016FC: E1A01002    ;     mov R1, R2 ;;swap the current crate with the next crate
00001700: EAFFFFF7    ;     b checkcrate
00001704:             ; nocrates
00001704: E3A00000    ;     mov R0, #0
00001708: EA000015    ;     b mallocEnd
0000170C:             ; 
0000170C:             ; foundcrate
0000170C:             ;     ;;Once a crate that we can use has been found we need to either split the crate or use the 
                      ; crate
0000170C:             ;     ;;We should use the whole crate only when its size < bytesneeded + CrateHeader + 8
0000170C:             ;     ;;This would give the edge case crate 8 bytes
0000170C:             ;     
0000170C:             ;     ;;R1 holds the found crate ptr
0000170C:             ;     ;;R0 is the bytes requested and aligned
0000170C: E2802014    ;     add R2, R0, #20 ;;A crate header is 12 bytes + the extra 8 bytes minimum
00001710: E5913008    ;     ldr R3, [R1, #8]
00001714: E1530002    ;     cmp R3, R2
00001718: BA00000C    ;     blt usecrate
0000171C:             ; splitcrate
0000171C:             ;     ;;In this case we have a large crate that should be split up.
0000171C:             ;     ;;ATM the crate will just be split up to where the requested memory is at the end of the fr
                      ; ee Crate.
0000171C:             ; 
0000171C: E5913008    ;     ldr R3, [R1, #8] ;;The size of the toSplit Crate
00001720: E0433000    ;     sub R3, R3, R0 ;; size - bytesRequested
00001724: E243300C    ;     sub R3, R3, #12 ;; size - bytesRequested - sizeof(Crate)
00001728: E5813008    ;     str R3, [R1, #8] ;;toSplit->size = newSize
0000172C:             ; 
0000172C: E0833001    ;     add R3, R3, R1 ;; newSize + toSplit.addr
00001730: E283400C    ;     add R4, R3, #12 ;; newSize + toSplit.addr + sizeof(Crate) = position of new Crate
00001734:             ; 
00001734:             ;     ;;Setup the header for the newCrate
00001734: E3A02000    ;     mov R2, #0
00001738: E5842000    ;     str R2, [R4, #0] ;;next = 0
0000173C: E5842004    ;     str R2, [R4, #4] ;;prev = 0
00001740: E5840008    ;     str R0, [R4, #8] ;;size = requested and aligned
00001744:             ; 
00001744:             ;     ;;MAYBE: can the crates that are taken have a smaller header than those that are free. Take
                      ; n crates need not store the next, prev free nodes
00001744:             ;     ;;This may complicate things as size would need to be moved around and the size from taken 
                      ; to free would be different. 
00001744:             ;     ;;This would have been easier if the size of the Crate was stored at the start but it's not
                      ; , I'm probably not going to add this its not worth it.
00001744:             ; 
00001744: E284400C    ;     add R4, R4, #12
00001748:             ; 
00001748: E1A00004    ;     mov R0, R4
0000174C:             ; 
0000174C: EA000004    ;     b mallocEnd
00001750:             ; 
00001750:             ; usecrate
00001750:             ;     ;; Simplest option as we can just remove it from the list
00001750:             ;     ;; c1 <-> c2 <-> c3 ==> c1 <-> c3
00001750: E5912000    ;     ldr R2, [R1, #0] ;;next ptr
00001754: E5913004    ;     ldr R3, [R1, #4] ;;prev ptr
00001758: E5823004    ;     str R3, [R2, #4] ;;Store c1 into c3's previous
0000175C: E5832000    ;     str R2, [R3, #0] ;;Store c3 into c1's next
00001760:             ; 
00001760: E1A00001    ;     mov R0, R1 ;;move the found crate's address into the return register ;;The crate header is 
                      ; no longer needed
00001764:             ; 
00001764:             ; mallocEnd
00001764: E8BD0010    ;     pop {R4}
00001768: E1A0F00E    ;     mov R15, R14
0000176C:             ; 
0000176C:             ; 
0000176C:             ; printHeap
0000176C:             ; ;;This is a debugging function that will print the free and taken list
0000176C:             ; ;;,-----------------------------------------------------------------,
0000176C:             ; ;;|   large free block  |tkn1   |tkn2       | freed1    | tkn3      |
0000176C:             ; ;;|                     |       |           |           |           |
0000176C:             ; ;;|                     |       |           |           |           |
0000176C:             ; ;;`-----------------------------------------------------------------'
0000176C:             ; 
0000176C:             ; ;;  PrintFree() - follow the free list ptrs print addr + size
0000176C:             ; ;;  PrintAll()  - start at head and go addr + size + 12 to get next, continue to end
0000176C: E92D47F0    ;     push {R14, R4-R10}
00001770:             ; 
00001770: EB00001F    ;     bl printFree
00001774:             ; 
00001774: EB000001    ;     bl printAll
00001778:             ; 
00001778:             ; printHeapend
00001778: E8BD47F0    ;     pop {R14, R4-R10}
0000177C: E1A0F00E    ;     mov R15, R14
00001780:             ; 
00001780:             ; printAll
00001780: E92D41F0    ;     push {R14, R4-R8}
00001784:             ; 
00001784: E28F00B5    ;     adrl R0, printAll_m
00001788: E2800C0E    ; 
0000178C: EF000003    ;     swi 3
00001790:             ;     
00001790: E28F0FE1    ;     adrl R0, heapstart
00001794: E2800B03    ; 
00001798: E1A04000    ;     mov R4, R0
0000179C:             ; 
0000179C: E1A05000    ;     mov R5, R0 ;;stores the next expected free node
000017A0:             ; 
000017A0:             ; printAllLoop
000017A0: E5941000    ;     ldr R1, [R4, #0] ;;next ptr
000017A4: E5942004    ;     ldr R2, [R4, #4] ;;prev ptr
000017A8: E5943008    ;     ldr R3, [R4, #8] ;;size
000017AC:             ; 
000017AC:             ;     ;;check if this is a free node
000017AC: E1550004    ;     cmp R5, R4
000017B0:             ; 
000017B0: 028F0FAB    ;     adrleq R0, printAll_m_f
000017B4: 02800B03    ; 
000017B8: 128F00BA    ;     adrlne R0, printAll_m_t
000017BC: 12800C0E    ; 
000017C0: EF000003    ;     swi 3
000017C4:             ; 
000017C4: 1A000000    ;     bne printAllLoopCont
000017C8:             ; 
000017C8: E1A05001    ;     mov R5, R1
000017CC:             ; 
000017CC:             ; printAllLoopCont
000017CC: E1A00004    ;     mov R0, R4
000017D0: EB00001C    ;     bl printblock
000017D4:             ; 
000017D4:             ;     ;;calculate the next block
000017D4:             ;     ;;addr + 12 + size
000017D4:             ; 
000017D4: E284000C    ;     add R0, R4, #12
000017D8: E0800003    ;     add R0, R0, R3
000017DC:             ; 
000017DC: E1A04000    ;     mov R4, R0
000017E0:             ; 
000017E0: E354080F    ;     cmp R4, #0xF0000
000017E4: AA000000    ;     bge printAllLend
000017E8:             ;     
000017E8: EAFFFFEC    ;     b printAllLoop
000017EC:             ; 
000017EC:             ; printAllLend
000017EC:             ; printAllEnd
000017EC: E8BD41F0    ;     pop {R14, R4-R8}
000017F0: E1A0F00E    ;     mov R15, R14
000017F4:             ; 
000017F4:             ; printFree
000017F4: E92D41F0    ;     push {R14, R4-R8}
000017F8:             ; 
000017F8: E28F00EF    ;     adrl R0, printFree_m
000017FC: E2800C0D    ; 
00001800: EF000003    ;     swi 3
00001804:             ; 
00001804: E28F0EF1    ;     adrl R0, heapstart
00001808: E2800000    ; 
0000180C: E1A04000    ;     mov R4, R0
00001810:             ; 
00001810:             ; printFreeloop
00001810: E5941000    ;     ldr R1, [R4, #0] ;;next ptr
00001814: E5942004    ;     ldr R2, [R4, #4] ;;prev ptr
00001818: E5943008    ;     ldr R3, [R4, #8] ;;size
0000181C:             ; 
0000181C: E28F00DE    ;     adrl R0, printfree_f_m
00001820: E2800C0D    ; 
00001824: EF000003    ;     swi 3
00001828:             ; 
00001828: E1A00004    ;     mov R0, R4
0000182C: EB000005    ;     bl printblock
00001830:             ; 
00001830: E3510000    ;     cmp R1, #0
00001834: 0A000001    ;     beq printFreelend
00001838:             ; 
00001838: E1A04001    ;     mov R4, R1
0000183C: EAFFFFF3    ;     b printFreeloop
00001840:             ; 
00001840:             ; printFreelend
00001840:             ; printFreeEnd
00001840: E8BD41F0    ;     pop {R14, R4-R8}
00001844: E1A0F00E    ;     mov R15, R14
00001848:             ; 
00001848:             ; printblock
00001848:             ; ;;INP in R0 is the addr
00001848:             ; ;;INP in R1 is the next
00001848:             ; ;;INP in R2 is the prev
00001848:             ; ;;INP in R3 is the size
00001848:             ; ;;RET --
00001848: E92D0010    ;     push {R4}
0000184C: E1A04000    ;     mov R4, R0
00001850:             ; 
00001850: E28F00D7    ;     adrl R0, cutoff
00001854: E2800B02    ; 
00001858: EF000003    ;     swi 3
0000185C:             ; 
0000185C: E28F00B5    ;     adrl R0, printfree_f_mad
00001860: E2800C0D    ; 
00001864: EF000003    ;     swi 3
00001868:             ; 
00001868: E1A00004    ;     mov R0, R4
0000186C: EF000004    ;     swi 4
00001870:             ; 
00001870: E3A0000A    ;     ldr R0, =nl
00001874: EF000000    ;     swi 0
00001878:             ; 
00001878: E28F00A3    ;     adrl R0, printfree_f_mnx
0000187C: E2800C0D    ; 
00001880: EF000003    ;     swi 3
00001884:             ; 
00001884: E1A00001    ;     mov R0, R1
00001888: EF000004    ;     swi 4
0000188C:             ; 
0000188C: E3A0000A    ;     ldr R0, =nl
00001890: EF000000    ;     swi 0
00001894:             ; 
00001894: E28F0091    ;     adrl R0, printfree_f_mpr
00001898: E2800C0D    ; 
0000189C: EF000003    ;     swi 3
000018A0:             ; 
000018A0: E1A00002    ;     mov R0, R2
000018A4: EF000004    ;     swi 4
000018A8:             ; 
000018A8: E3A0000A    ;     ldr R0, =nl
000018AC: EF000000    ;     swi 0
000018B0:             ; 
000018B0: E28F007F    ;     adrl R0, printfree_f_msz
000018B4: E2800C0D    ; 
000018B8: EF000003    ;     swi 3
000018BC:             ; 
000018BC: E1A00003    ;     mov R0, R3
000018C0: EF000004    ;     swi 4
000018C4:             ; 
000018C4: E3A0000A    ;     ldr R0, =nl
000018C8: EF000000    ;     swi 0
000018CC:             ; 
000018CC: E28F005B    ;     adrl R0, cutoff
000018D0: E2800B02    ; 
000018D4: EF000003    ;     swi 3
000018D8:             ; 
000018D8: E8BD0010    ;     pop {R4}
000018DC: E1A0F00E    ;     mov R15, R14
000018E0:             ; 
000018E0:             ; 
000018E0:             ; free
000018E0:             ; ;;INP in R0 is the mem addr of the data to be freed
000018E0:             ; ;;OUT in R0 is the success code - 0 for mem freed, ¬0 for error ;;probably won't be currently 
                      ; used `=(- -)=' 
000018E0:             ;     ;;In order to free memory we need to add it back to the linked list
000018E0:             ;     ;;Following K&R's version the linked list will be ordered by address this will make finding
                      ;  consecutive memory locations that should be combined easier
000018E0:             ; 
000018E0:             ;     ;;The inputted address of the crate is the address given in malloc and so the start of the 
                      ; crate is that addr - sizeof(Crate) (#12)
000018E0:             ; 
000018E0:             ;     ;;heapHead = first Crate
000018E0:             ;     ;;current = heapHead
000018E0:             ;     ;;while (toFree.addr > current.addr)
000018E0:             ;     ;;  current = current.next
000018E0:             ;     ;;
000018E0:             ;     ;;//Add the toFree Crate inbetween the current and its previous i.e.  A<->B<->C, toFree = D
                      ;  (addr < C, addr > B) ==> A<->B<->D<->C
000018E0:             ;     ;;current->prev->next = toFree
000018E0:             ;     ;;toFree->prev = current.prev
000018E0:             ;     ;;current->prev = toFree
000018E0:             ;     ;;toFree->next = current
000018E0:             ; 
000018E0:             ;     ;; Crate structure
000018E0:             ;     ;;  |-ptr to next crate (1 word)
000018E0:             ;     ;;  |-ptr to prev crate (1 word)
000018E0:             ;     ;;  `-Size (bytes)      (1 word)
000018E0:             ; 
000018E0: E92D41F0    ;     push {R14, R4-R8}
000018E4:             ; 
000018E4: E24F10E8    ;     adrl R1, heaphead
000018E8: E2411B06    ; 
000018EC: E5111000    ;     ldr R1, [R1] ;;R1 will hold the current
000018F0: E240000C    ;     sub R0, R0, #12 ;;subtract sizeof(Crate) to get header pointer
000018F4:             ; freeloop
000018F4: E5912000    ;     ldr R2, [R1, #0] ;;load the ptr to the next
000018F8: E1520000    ;     cmp R2, R0 ;;compare the address of the toFree to the address of current->next
000018FC:             ; 
000018FC: AA000003    ;     bge freelend ;;current->next.addr >= toFree.addr
00001900:             ; 
00001900: E3520000    ;     cmp R2, #0 ;;If there are no more Crates to the right then this could be a new Crate at the
                      ;  end or |F|T| it should merge left 
00001904: 0A000009    ;     beq freelendEnd
00001908:             ; 
00001908: E1A01002    ;     mov R1, R2 ;;current = current.next
0000190C:             ; 
0000190C: EAFFFFF8    ;     b freeloop
00001910:             ; 
00001910:             ; freelend
00001910:             ;     ;; R1 holds the current (left)
00001910:             ;     ;; R2 holds the c->next (right)
00001910: E5912000    ;     ldr R2, [R1, #0]
00001914:             ; 
00001914:             ;     ;;Setup the ptrs for the crates this will help later on   left<->toFree<->right ;;left,righ
                      ; t can be 0
00001914:             ;     ;;We're just adding the new crate to the linked list
00001914:             ;     ;;current->next->prev = toFree
00001914:             ;     ;;toFree->next = current->next
00001914:             ;     ;;current->next = toFree
00001914:             ;     ;;toFree->prev = current
00001914:             ; 
00001914: E5913000    ;     ldr R3, [R1, #0] ;;holds current->next
00001918: E3530000    ;     cmp R3, #0
0000191C: 15830004    ;     strne R0, [R3, #4] ;;current->next->prev = toFree
00001920: E5803000    ;     str R3, [R0, #0] ;;toFree->next = current->next
00001924: E5810000    ;     str R0, [R1, #0] ;;current->next = toFree
00001928: E5801004    ;     str R1, [R0, #4] ;;toFree->prev = current
0000192C:             ; 
0000192C: EA000001    ;     b freeMergeCheck
00001930:             ; 
00001930:             ; freelendEnd
00001930:             ; ;;If there are no more Crates to the right then this could be a new Crate at the end or |F|T| i
                      ; t should merge left 
00001930:             ; ;;Found a crate (current) that is to the left of the crate as we ran out of ->next ptrs
00001930:             ; ;;Need to set current->next = toFree
00001930:             ; ;;            toFree->prev = current
00001930: E5801004    ;     str R1, [R0, #4] ;;toFree->prev = current
00001934: E5810000    ;     str R0, [R1, #0] ;;current->next = toFree
00001938:             ; 
00001938:             ; freeMergeCheck
00001938:             ;     ;;We have a ptr to current. This should be the closest Crate to the left of toFree
00001938:             ;     ;;We also have the next Crate (null or not) which is to the right of toFree
00001938:             ;     ;;Both of these crates MAY need to be merged but could also have taken crates in between
00001938:             ;     ;;First is to check if the crates are adjacent
00001938:             ;     ;;  If they are NOT then create a newCrate
00001938:             ;     ;;  If they are     then merge both
00001938:             ;     ;;  If only one     then merge either left or right
00001938:             ; 
00001938:             ;     ;;R1 will be left
00001938:             ;     ;;R2 will be right
00001938:             ; 
00001938: E3510000    ;     cmp R1, #0
0000193C: 01A01000    ;     moveq R1, R0 ;;If there is no left crate then left=toFree
00001940: E3520000    ;     cmp R2, #0
00001944: 01A02000    ;     moveq R2, R0 ;;If there is no right crate (more likely) then right=toFree
00001948:             ; 
00001948:             ; verifyLeft
00001948:             ;     ;;Check if the left is adjacent
00001948:             ;     ;;It will be if (left.addr + sizeof(Crate) + left.size == toFree.addr)
00001948:             ; 
00001948: E5913008    ;     ldr R3, [R1, #8]
0000194C: E283300C    ;     add R3, R3, #12 ;;12 is sizeof(Crate) + toFree.size
00001950: E0833001    ;     add R3, R3, R1 ;;left.addr + left->size ??
00001954:             ; 
00001954: E1530000    ;     cmp R3, R0
00001958: 11A01000    ;     movne R1, R0
0000195C:             ; 
0000195C:             ; verifyRight
0000195C:             ;     ;;Going from toFree to Right
0000195C: E5903008    ;     ldr R3, [R0, #8] ;;get size of toFree
00001960: E283300C    ;     add R3, R3, #12 ;;12 is sizeof(Crate) + toFree.size
00001964: E0833000    ;     add R3, R3, R0 ;; + toFree.addr
00001968:             ; 
00001968: E1530002    ;     cmp R3, R2
0000196C: 11A02000    ;     movne R2, R0
00001970:             ; 
00001970:             ; merge
00001970:             ;     ;;Merge the two Crates given in R1 and R2
00001970:             ;     ;;left can be (left) or (toFree)
00001970:             ;     ;;right can be (right) or (toFree)
00001970:             ;     ;;If left == right: don't merge; create new Crate
00001970:             ;     ;;If left != right: then add to left's size
00001970:             ; 
00001970: E1510002    ;     cmp R1, R2
00001974: 0A000008    ;     beq mergeNew
00001978:             ; 
00001978:             ;     ;;The new size is right.addr - left.addr + right->size    from right.addr - left.addr - siz
                      ; eof(Crate) + sizeof(Crate) + right->size
00001978:             ;     ;;                                                               |left      |right
00001978:             ;     ;;                                                               |<12>|size||<12>|size|
00001978:             ;     ;;
00001978:             ;     ;;                                                               |left      
00001978:             ;     ;;                                                               |<12>|size           |
00001978:             ;     ;;
00001978:             ;     ;;I'm doing it this way as the left and right may not be contiguous i.e. if toFree has a fr
                      ; ee crate on either side
00001978:             ; 
00001978: E0423001    ;     sub R3, R2, R1
0000197C: E5924008    ;     ldr R4, [R2, #8]
00001980: E0833004    ;     add R3, R3, R4
00001984: E5813008    ;     str R3, [R1, #8]
00001988:             ; 
00001988:             ;     ;;Time to switch some ptrs
00001988:             ;     ;;Current state left.prev<->left<->right<->right.next (with left or right = toFree) or left
                      ; .prev<->left<->toFree<->right<->right.next
00001988:             ;     ;;New state would be left.prev<->left<->right.next (with left or right = toFree) or left.pr
                      ; ev<->left<->right.next
00001988:             ;     ;;Both cases end the same, so get right.next. These could be 0 but it doesn't matter
00001988:             ;     ;;Next need to change the prev and next ptrs for adjacent Crates
00001988:             ;     ;;i.e. right->next->prev = left
00001988:             ; 
00001988: E5924000    ;     ldr R4, [R2, #0] ;;right->next
0000198C: E1540001    ;     cmp R4, R1
00001990: 15814000    ;     strne R4, [R1, #0] ;;left->next = right->next
00001994:             ; 
00001994: E3540000    ;     cmp R4, #0
00001998: 15841004    ;     strne R1, [R4, #4] ;;right->next->prev = left
0000199C:             ; 
0000199C:             ; mergeNew
0000199C:             ;     ;;The crate has already been setup with its ptrs and had its size as well so don't need to 
                      ; do anything
0000199C:             ; 
0000199C:             ; freeEnd
0000199C: E8BD41F0    ;     pop {R14, R4-R8}
000019A0: E1A0F00E    ;     mov R15, R14
000019A4:             ; 
000019A4:             ; align
000019A4:             ; 
000019A4:             ; ;;String defs -- The naming scheme is bad :(
000019A4: 2D 2D 2D 2D ; welcomemsg      defb "-----------Welcome to JCGOL in ARM32-----------", nl, 0
000019A8: 2D 2D 2D 2D ; 
000019AC: 2D 2D 2D 57 ; 
000019B0: 65 6C 63 6F ; 
000019B4: 6D 65 20 74 ; 
000019B8: 6F 20 4A 43 ; 
000019BC: 47 4F 4C 20 ; 
000019C0: 69 6E 20 41 ; 
000019C4: 52 4D 33 32 ; 
000019C8: 2D 2D 2D 2D ; 
000019CC: 2D 2D 2D 2D ; 
000019D0: 2D 2D 2D 0A ; 
000019D4: 00          ; 
000019D8:             ; align ;;WHY?!
000019D8: 28 4E 29 65 ; welcome2msg     defb "(N)ew board\n(L)oad a saved board\n(S)ettings\n(P)rint the heap\n(Q)uit",
000019DC: 77 20 62 6F ;  nl, 0
000019E0: 61 72 64 0A ; 
000019E4: 28 4C 29 6F ; 
000019E8: 61 64 20 61 ; 
000019EC: 20 73 61 76 ; 
000019F0: 65 64 20 62 ; 
000019F4: 6F 61 72 64 ; 
000019F8: 0A 28 53 29 ; 
000019FC: 65 74 74 69 ; 
00001A00: 6E 67 73 0A ; 
00001A04: 28 50 29 72 ; 
00001A08: 69 6E 74 20 ; 
00001A0C: 74 68 65 20 ; 
00001A10: 68 65 61 70 ; 
00001A14: 0A 28 51 29 ; 
00001A18: 75 69 74 0A ; 
00001A1C: 00          ; 
00001A1D: 49 6E 76 61 ; mainchoicefail  defb "Invalid choice please enter 'n' for new board, 'l' for load a board, 's' 
00001A21: 6C 69 64 20 ; to view settings, 'p' to view the heap, or 'q' to close. Not cases sensative", nl, 0
00001A25: 63 68 6F 69 ; 
00001A29: 63 65 20 70 ; 
00001A2D: 6C 65 61 73 ; 
00001A31: 65 20 65 6E ; 
00001A35: 74 65 72 20 ; 
00001A39: 27 6E 27 20 ; 
00001A3D: 66 6F 72 20 ; 
00001A41: 6E 65 77 20 ; 
00001A45: 62 6F 61 72 ; 
00001A49: 64 2C 20 27 ; 
00001A4D: 6C 27 20 66 ; 
00001A51: 6F 72 20 6C ; 
00001A55: 6F 61 64 20 ; 
00001A59: 61 20 62 6F ; 
00001A5D: 61 72 64 2C ; 
00001A61: 20 27 73 27 ; 
00001A65: 20 74 6F 20 ; 
00001A69: 76 69 65 77 ; 
00001A6D: 20 73 65 74 ; 
00001A71: 74 69 6E 67 ; 
00001A75: 73 2C 20 27 ; 
00001A79: 70 27 20 74 ; 
00001A7D: 6F 20 76 69 ; 
00001A81: 65 77 20 74 ; 
00001A85: 68 65 20 68 ; 
00001A89: 65 61 70 2C ; 
00001A8D: 20 6F 72 20 ; 
00001A91: 27 71 27 20 ; 
00001A95: 74 6F 20 63 ; 
00001A99: 6C 6F 73 65 ; 
00001A9D: 2E 20 4E 6F ; 
00001AA1: 74 20 63 61 ; 
00001AA5: 73 65 73 20 ; 
00001AA9: 73 65 6E 73 ; 
00001AAD: 61 74 69 76 ; 
00001AB1: 65 0A 00    ; 
00001AB4: 54 68 61 6E ; mainendmsg      defb "Thank you for playing JCGOL for ARM32", nl, 0
00001AB8: 6B 20 79 6F ; 
00001ABC: 75 20 66 6F ; 
00001AC0: 72 20 70 6C ; 
00001AC4: 61 79 69 6E ; 
00001AC8: 67 20 4A 43 ; 
00001ACC: 47 4F 4C 20 ; 
00001AD0: 66 6F 72 20 ; 
00001AD4: 41 52 4D 33 ; 
00001AD8: 32 0A 00    ; 
00001ADB: 57 6F 75 6C ; askdefaults     defb "Would you like to use the default settings? Y/n: ", 0
00001ADF: 64 20 79 6F ; 
00001AE3: 75 20 6C 69 ; 
00001AE7: 6B 65 20 74 ; 
00001AEB: 6F 20 75 73 ; 
00001AEF: 65 20 74 68 ; 
00001AF3: 65 20 64 65 ; 
00001AF7: 66 61 75 6C ; 
00001AFB: 74 20 73 65 ; 
00001AFF: 74 74 69 6E ; 
00001B03: 67 73 3F 20 ; 
00001B07: 59 2F 6E 3A ; 
00001B0B: 20 00       ; 
00001B0D: 45 6E 61 62 ; askerase        defb "Enable erase mode? Y/n: ", 0
00001B11: 6C 65 20 65 ; 
00001B15: 72 61 73 65 ; 
00001B19: 20 6D 6F 64 ; 
00001B1D: 65 3F 20 59 ; 
00001B21: 2F 6E 3A 20 ; 
00001B25: 00          ; 
00001B26: 45 6E 61 62 ; askslow         defb "Enable slow mode? Y/n: ", 0
00001B2A: 6C 65 20 73 ; 
00001B2E: 6C 6F 77 20 ; 
00001B32: 6D 6F 64 65 ; 
00001B36: 3F 20 59 2F ; 
00001B3A: 6E 3A 20 00 ; 
00001B3E: 45 6E 61 62 ; askstep         defb "Enable step mode? Y/n: ", 0
00001B42: 6C 65 20 73 ; 
00001B46: 74 65 70 20 ; 
00001B4A: 6D 6F 64 65 ; 
00001B4E: 3F 20 59 2F ; 
00001B52: 6E 3A 20 00 ; 
00001B56: 43 61 6E 6E ; stepslowwarning defb "Cannot have slow and step mode active at the same time, disabling slow mo
00001B5A: 6F 74 20 68 ; de", nl, 0
00001B5E: 61 76 65 20 ; 
00001B62: 73 6C 6F 77 ; 
00001B66: 20 61 6E 64 ; 
00001B6A: 20 73 74 65 ; 
00001B6E: 70 20 6D 6F ; 
00001B72: 64 65 20 61 ; 
00001B76: 63 74 69 76 ; 
00001B7A: 65 20 61 74 ; 
00001B7E: 20 74 68 65 ; 
00001B82: 20 73 61 6D ; 
00001B86: 65 20 74 69 ; 
00001B8A: 6D 65 2C 20 ; 
00001B8E: 64 69 73 61 ; 
00001B92: 62 6C 69 6E ; 
00001B96: 67 20 73 6C ; 
00001B9A: 6F 77 20 6D ; 
00001B9E: 6F 64 65 0A ; 
00001BA2: 00          ; 
00001BA3: 52 65 74 75 ; savedchoice     defb "Return to menu? (n for continue sim) Y/n: ", 0
00001BA7: 72 6E 20 74 ; 
00001BAB: 6F 20 6D 65 ; 
00001BAF: 6E 75 3F 20 ; 
00001BB3: 28 6E 20 66 ; 
00001BB7: 6F 72 20 63 ; 
00001BBB: 6F 6E 74 69 ; 
00001BBF: 6E 75 65 20 ; 
00001BC3: 73 69 6D 29 ; 
00001BC7: 20 59 2F 6E ; 
00001BCB: 3A 20 00    ; 
00001BCE: 50 6C 65 61 ; askname         defb "Please enter a name for the grid: ", 0
00001BD2: 73 65 20 65 ; 
00001BD6: 6E 74 65 72 ; 
00001BDA: 20 61 20 6E ; 
00001BDE: 61 6D 65 20 ; 
00001BE2: 66 6F 72 20 ; 
00001BE6: 74 68 65 20 ; 
00001BEA: 67 72 69 64 ; 
00001BEE: 3A 20 00    ; 
00001BF1: 45 72 61 73 ; warneraseslow   defb "Erase mode is active it is recommended to also use slow mode", nl, 0
00001BF5: 65 20 6D 6F ; 
00001BF9: 64 65 20 69 ; 
00001BFD: 73 20 61 63 ; 
00001C01: 74 69 76 65 ; 
00001C05: 20 69 74 20 ; 
00001C09: 69 73 20 72 ; 
00001C0D: 65 63 6F 6D ; 
00001C11: 6D 65 6E 64 ; 
00001C15: 65 64 20 74 ; 
00001C19: 6F 20 61 6C ; 
00001C1D: 73 6F 20 75 ; 
00001C21: 73 65 20 73 ; 
00001C25: 6C 6F 77 20 ; 
00001C29: 6D 6F 64 65 ; 
00001C2D: 0A 00       ; 
00001C2F: 50 6C 65 61 ; askwid          defb "Please enter a width (", 0
00001C33: 73 65 20 65 ; 
00001C37: 6E 74 65 72 ; 
00001C3B: 20 61 20 77 ; 
00001C3F: 69 64 74 68 ; 
00001C43: 20 28 00    ; 
00001C46: 2D 00       ; dash            defb "-", 0
00001C48: 29 3A 20 00 ; b_close_colon   defb "): ",0
00001C4C: 50 6C 65 61 ; askhei          defb "Please enter a height ", 0
00001C50: 73 65 20 65 ; 
00001C54: 6E 74 65 72 ; 
00001C58: 20 61 20 68 ; 
00001C5C: 65 69 67 68 ; 
00001C60: 74 20 00    ; 
00001C63: 49 6E 76 61 ; getwidfailmsg   defb "Invalid width please enter a value between ", 0
00001C67: 6C 69 64 20 ; 
00001C6B: 77 69 64 74 ; 
00001C6F: 68 20 70 6C ; 
00001C73: 65 61 73 65 ; 
00001C77: 20 65 6E 74 ; 
00001C7B: 65 72 20 61 ; 
00001C7F: 20 76 61 6C ; 
00001C83: 75 65 20 62 ; 
00001C87: 65 74 77 65 ; 
00001C8B: 65 6E 20 00 ; 
00001C8F: 49 6E 76 61 ; getheifailmsg   defb "Invalid height please enter a value between ", 0
00001C93: 6C 69 64 20 ; 
00001C97: 68 65 69 67 ; 
00001C9B: 68 74 20 70 ; 
00001C9F: 6C 65 61 73 ; 
00001CA3: 65 20 65 6E ; 
00001CA7: 74 65 72 20 ; 
00001CAB: 61 20 76 61 ; 
00001CAF: 6C 75 65 20 ; 
00001CB3: 62 65 74 77 ; 
00001CB7: 65 65 6E 20 ; 
00001CBB: 00          ; 
00001CBC:             ; 
00001CBC: 43 75 72 72 ; optionsp_1      defb "Current options: dims=(", 0 ;;width
00001CC0: 65 6E 74 20 ; 
00001CC4: 6F 70 74 69 ; 
00001CC8: 6F 6E 73 3A ; 
00001CCC: 20 64 69 6D ; 
00001CD0: 73 3D 28 00 ; 
00001CD4: 2C 20 00    ; optionsp_2      defb ", ", 0 ;;height
00001CD7: 29 20 73 6C ; optionsp_3      defb ") slowMode=", 0 ;;OFF/ON
00001CDB: 6F 77 4D 6F ; 
00001CDF: 64 65 3D 00 ; 
00001CE3: 20 65 72 61 ; optionsp_4      defb " eraseMode=", 0 ;;^
00001CE7: 73 65 4D 6F ; 
00001CEB: 64 65 3D 00 ; 
00001CEF: 20 73 74 65 ; optionsp_5      defb " stepMode=", 0  ;;^
00001CF3: 70 4D 6F 64 ; 
00001CF7: 65 3D 00    ; 
00001CFA:             ; 
00001CFA: 59 6F 75 27 ; mainloopittsmsg defb "You've reached the max itterations before waiting for input. You can chan
00001CFE: 76 65 20 72 ; ge this in settings. Press any key to continue, 'q' to quit, and 's' to save the grid", nl, 0
00001D02: 65 61 63 68 ; 
00001D06: 65 64 20 74 ; 
00001D0A: 68 65 20 6D ; 
00001D0E: 61 78 20 69 ; 
00001D12: 74 74 65 72 ; 
00001D16: 61 74 69 6F ; 
00001D1A: 6E 73 20 62 ; 
00001D1E: 65 66 6F 72 ; 
00001D22: 65 20 77 61 ; 
00001D26: 69 74 69 6E ; 
00001D2A: 67 20 66 6F ; 
00001D2E: 72 20 69 6E ; 
00001D32: 70 75 74 2E ; 
00001D36: 20 59 6F 75 ; 
00001D3A: 20 63 61 6E ; 
00001D3E: 20 63 68 61 ; 
00001D42: 6E 67 65 20 ; 
00001D46: 74 68 69 73 ; 
00001D4A: 20 69 6E 20 ; 
00001D4E: 73 65 74 74 ; 
00001D52: 69 6E 67 73 ; 
00001D56: 2E 20 50 72 ; 
00001D5A: 65 73 73 20 ; 
00001D5E: 61 6E 79 20 ; 
00001D62: 6B 65 79 20 ; 
00001D66: 74 6F 20 63 ; 
00001D6A: 6F 6E 74 69 ; 
00001D6E: 6E 75 65 2C ; 
00001D72: 20 27 71 27 ; 
00001D76: 20 74 6F 20 ; 
00001D7A: 71 75 69 74 ; 
00001D7E: 2C 20 61 6E ; 
00001D82: 64 20 27 73 ; 
00001D86: 27 20 74 6F ; 
00001D8A: 20 73 61 76 ; 
00001D8E: 65 20 74 68 ; 
00001D92: 65 20 67 72 ; 
00001D96: 69 64 0A 00 ; 
00001D9A:             ; 
00001D9A: 43 68 6F 6F ; askgenoption    defb "Choose between (R)andom generation or (D)rawing the grid", 0
00001D9E: 73 65 20 62 ; 
00001DA2: 65 74 77 65 ; 
00001DA6: 65 6E 20 28 ; 
00001DAA: 52 29 61 6E ; 
00001DAE: 64 6F 6D 20 ; 
00001DB2: 67 65 6E 65 ; 
00001DB6: 72 61 74 69 ; 
00001DBA: 6F 6E 20 6F ; 
00001DBE: 72 20 28 44 ; 
00001DC2: 29 72 61 77 ; 
00001DC6: 69 6E 67 20 ; 
00001DCA: 74 68 65 20 ; 
00001DCE: 67 72 69 64 ; 
00001DD2: 00          ; 
00001DD3: 49 6E 76 61 ; setupGrdFailmsg defb "Invalid choice, use `R` for random generation and `d` for drawing the gri
00001DD7: 6C 69 64 20 ; d. Not case sensative: ", 0
00001DDB: 63 68 6F 69 ; 
00001DDF: 63 65 2C 20 ; 
00001DE3: 75 73 65 20 ; 
00001DE7: 60 52 60 20 ; 
00001DEB: 66 6F 72 20 ; 
00001DEF: 72 61 6E 64 ; 
00001DF3: 6F 6D 20 67 ; 
00001DF7: 65 6E 65 72 ; 
00001DFB: 61 74 69 6F ; 
00001DFF: 6E 20 61 6E ; 
00001E03: 64 20 60 64 ; 
00001E07: 60 20 66 6F ; 
00001E0B: 72 20 64 72 ; 
00001E0F: 61 77 69 6E ; 
00001E13: 67 20 74 68 ; 
00001E17: 65 20 67 72 ; 
00001E1B: 69 64 2E 20 ; 
00001E1F: 4E 6F 74 20 ; 
00001E23: 63 61 73 65 ; 
00001E27: 20 73 65 6E ; 
00001E2B: 73 61 74 69 ; 
00001E2F: 76 65 3A 20 ; 
00001E33: 00          ; 
00001E34: 45 6E 74 65 ; askseed         defb "Enter 4 characters to be used as the seed: ", 0
00001E38: 72 20 34 20 ; 
00001E3C: 63 68 61 72 ; 
00001E40: 61 63 74 65 ; 
00001E44: 72 73 20 74 ; 
00001E48: 6F 20 62 65 ; 
00001E4C: 20 75 73 65 ; 
00001E50: 64 20 61 73 ; 
00001E54: 20 74 68 65 ; 
00001E58: 20 73 65 65 ; 
00001E5C: 64 3A 20 00 ; 
00001E60: 55 73 69 6E ; drawinfomsg     defb "Using '1' and '0' choose the value of the current cell. Use enter to go t
00001E64: 67 20 27 31 ; o next line", nl, 0
00001E68: 27 20 61 6E ; 
00001E6C: 64 20 27 30 ; 
00001E70: 27 20 63 68 ; 
00001E74: 6F 6F 73 65 ; 
00001E78: 20 74 68 65 ; 
00001E7C: 20 76 61 6C ; 
00001E80: 75 65 20 6F ; 
00001E84: 66 20 74 68 ; 
00001E88: 65 20 63 75 ; 
00001E8C: 72 72 65 6E ; 
00001E90: 74 20 63 65 ; 
00001E94: 6C 6C 2E 20 ; 
00001E98: 55 73 65 20 ; 
00001E9C: 65 6E 74 65 ; 
00001EA0: 72 20 74 6F ; 
00001EA4: 20 67 6F 20 ; 
00001EA8: 74 6F 20 6E ; 
00001EAC: 65 78 74 20 ; 
00001EB0: 6C 69 6E 65 ; 
00001EB4: 0A 00       ; 
00001EB6: 49 6E 76 61 ; drawfailmsg     defb "Invalid input please enter 1 or 0, or enter for next line: ", nl, 0
00001EBA: 6C 69 64 20 ; 
00001EBE: 69 6E 70 75 ; 
00001EC2: 74 20 70 6C ; 
00001EC6: 65 61 73 65 ; 
00001ECA: 20 65 6E 74 ; 
00001ECE: 65 72 20 31 ; 
00001ED2: 20 6F 72 20 ; 
00001ED6: 30 2C 20 6F ; 
00001EDA: 72 20 65 6E ; 
00001EDE: 74 65 72 20 ; 
00001EE2: 66 6F 72 20 ; 
00001EE6: 6E 65 78 74 ; 
00001EEA: 20 6C 69 6E ; 
00001EEE: 65 3A 20 0A ; 
00001EF2: 00          ; 
00001EF3: 47 72 69 64 ; gridfailmsg     defb "Grid was not properly initialised, consider smaller dims", nl, 0
00001EF7: 20 77 61 73 ; 
00001EFB: 20 6E 6F 74 ; 
00001EFF: 20 70 72 6F ; 
00001F03: 70 65 72 6C ; 
00001F07: 79 20 69 6E ; 
00001F0B: 69 74 69 61 ; 
00001F0F: 6C 69 73 65 ; 
00001F13: 64 2C 20 63 ; 
00001F17: 6F 6E 73 69 ; 
00001F1B: 64 65 72 20 ; 
00001F1F: 73 6D 61 6C ; 
00001F23: 6C 65 72 20 ; 
00001F27: 64 69 6D 73 ; 
00001F2B: 0A 00       ; 
00001F2D: 54 68 65 72 ; gridsavefail    defb "There was an error allocating memory for the grid save", nl, 0
00001F31: 65 20 77 61 ; 
00001F35: 73 20 61 6E ; 
00001F39: 20 65 72 72 ; 
00001F3D: 6F 72 20 61 ; 
00001F41: 6C 6C 6F 63 ; 
00001F45: 61 74 69 6E ; 
00001F49: 67 20 6D 65 ; 
00001F4D: 6D 6F 72 79 ; 
00001F51: 20 66 6F 72 ; 
00001F55: 20 74 68 65 ; 
00001F59: 20 67 72 69 ; 
00001F5D: 64 20 73 61 ; 
00001F61: 76 65 0A 00 ; 
00001F65: 54 68 65 72 ; gridloadempty   defb "There are no saved grids, start a step mode sim and save the grid, return
00001F69: 65 20 61 72 ; ing to main menu", nl, 0
00001F6D: 65 20 6E 6F ; 
00001F71: 20 73 61 76 ; 
00001F75: 65 64 20 67 ; 
00001F79: 72 69 64 73 ; 
00001F7D: 2C 20 73 74 ; 
00001F81: 61 72 74 20 ; 
00001F85: 61 20 73 74 ; 
00001F89: 65 70 20 6D ; 
00001F8D: 6F 64 65 20 ; 
00001F91: 73 69 6D 20 ; 
00001F95: 61 6E 64 20 ; 
00001F99: 73 61 76 65 ; 
00001F9D: 20 74 68 65 ; 
00001FA1: 20 67 72 69 ; 
00001FA5: 64 2C 20 72 ; 
00001FA9: 65 74 75 72 ; 
00001FAD: 6E 69 6E 67 ; 
00001FB1: 20 74 6F 20 ; 
00001FB5: 6D 61 69 6E ; 
00001FB9: 20 6D 65 6E ; 
00001FBD: 75 0A 00    ; 
00001FC0: 7C 69 6E 64 ; gridloadpindex  defb "|index: ", 0
00001FC4: 65 78 3A 20 ; 
00001FC8: 00          ; 
00001FC9: 7C 6E 61 6D ; gridloadpname   defb "|name: ", 0
00001FCD: 65 3A 20 00 ; 
00001FD1: 7C 77 69 64 ; gridloadpwidth  defb "|width: ", 0
00001FD5: 74 68 3A 20 ; 
00001FD9: 00          ; 
00001FDA: 7C 68 65 69 ; gridloadpheight defb "|height: ", 0
00001FDE: 67 68 74 3A ; 
00001FE2: 20 00       ; 
00001FE4: 50 6C 65 61 ; loadboardaski   defb "Please enter the index of the grid to load, or enter a negative index to 
00001FE8: 73 65 20 65 ; not load a grid. (press enter to input)", nl, 0
00001FEC: 6E 74 65 72 ; 
00001FF0: 20 74 68 65 ; 
00001FF4: 20 69 6E 64 ; 
00001FF8: 65 78 20 6F ; 
00001FFC: 66 20 74 68 ; 
00002000: 65 20 67 72 ; 
00002004: 69 64 20 74 ; 
00002008: 6F 20 6C 6F ; 
0000200C: 61 64 2C 20 ; 
00002010: 6F 72 20 65 ; 
00002014: 6E 74 65 72 ; 
00002018: 20 61 20 6E ; 
0000201C: 65 67 61 74 ; 
00002020: 69 76 65 20 ; 
00002024: 69 6E 64 65 ; 
00002028: 78 20 74 6F ; 
0000202C: 20 6E 6F 74 ; 
00002030: 20 6C 6F 61 ; 
00002034: 64 20 61 20 ; 
00002038: 67 72 69 64 ; 
0000203C: 2E 20 28 70 ; 
00002040: 72 65 73 73 ; 
00002044: 20 65 6E 74 ; 
00002048: 65 72 20 74 ; 
0000204C: 6F 20 69 6E ; 
00002050: 70 75 74 29 ; 
00002054: 0A 00       ; 
00002056: 52 65 74 75 ; loadboardretmsg defb "Returning to main menu", nl, 0
0000205A: 72 6E 69 6E ; 
0000205E: 67 20 74 6F ; 
00002062: 20 6D 61 69 ; 
00002066: 6E 20 6D 65 ; 
0000206A: 6E 75 0A 00 ; 
0000206E: 49 6E 76 61 ; loadboardifail  defb "Invalid input given for the index", nl, 0
00002072: 6C 69 64 20 ; 
00002076: 69 6E 70 75 ; 
0000207A: 74 20 67 69 ; 
0000207E: 76 65 6E 20 ; 
00002082: 66 6F 72 20 ; 
00002086: 74 68 65 20 ; 
0000208A: 69 6E 64 65 ; 
0000208E: 78 0A 00    ; 
00002091: 49 6E 76 61 ; loadboardirerr  defb "Invalid index, out of range", nl, 0
00002095: 6C 69 64 20 ; 
00002099: 69 6E 64 65 ; 
0000209D: 78 2C 20 6F ; 
000020A1: 75 74 20 6F ; 
000020A5: 66 20 72 61 ; 
000020A9: 6E 67 65 0A ; 
000020AD: 00          ; 
000020AE: 45 72 72 6F ; loadboardmlcerr defb "Error allocating memory for loaded grid. Returing to main menu", nl, 0
000020B2: 72 20 61 6C ; 
000020B6: 6C 6F 63 61 ; 
000020BA: 74 69 6E 67 ; 
000020BE: 20 6D 65 6D ; 
000020C2: 6F 72 79 20 ; 
000020C6: 66 6F 72 20 ; 
000020CA: 6C 6F 61 64 ; 
000020CE: 65 64 20 67 ; 
000020D2: 72 69 64 2E ; 
000020D6: 20 52 65 74 ; 
000020DA: 75 72 69 6E ; 
000020DE: 67 20 74 6F ; 
000020E2: 20 6D 61 69 ; 
000020E6: 6E 20 6D 65 ; 
000020EA: 6E 75 0A 00 ; 
000020EE: 53 75 63 63 ; loadboardsucmsg defb "Successfully loaded the grid", nl, 0
000020F2: 65 73 73 66 ; 
000020F6: 75 6C 6C 79 ; 
000020FA: 20 6C 6F 61 ; 
000020FE: 64 65 64 20 ; 
00002102: 74 68 65 20 ; 
00002106: 67 72 69 64 ; 
0000210A: 0A 00       ; 
0000210C: 4C 69 73 74 ; listgridmsg     defb "Listing all availible saved grids", nl, 0
00002110: 69 6E 67 20 ; 
00002114: 61 6C 6C 20 ; 
00002118: 61 76 61 69 ; 
0000211C: 6C 69 62 6C ; 
00002120: 65 20 73 61 ; 
00002124: 76 65 64 20 ; 
00002128: 67 72 69 64 ; 
0000212C: 73 0A 00    ; 
0000212F: 2D 2D 2D 2D ; cutoff          defb "-----------------", nl, 0
00002133: 2D 2D 2D 2D ; 
00002137: 2D 2D 2D 2D ; 
0000213B: 2D 2D 2D 2D ; 
0000213F: 2D 0A 00    ; 
00002142: 45 72 72 6F ; changearrverr_m defb "Error invalid value given (1-255) inclusive. Re-enter: ", nl, 0
00002146: 72 20 69 6E ; 
0000214A: 76 61 6C 69 ; 
0000214E: 64 20 76 61 ; 
00002152: 6C 75 65 20 ; 
00002156: 67 69 76 65 ; 
0000215A: 6E 20 28 31 ; 
0000215E: 2D 32 35 35 ; 
00002162: 29 20 69 6E ; 
00002166: 63 6C 75 73 ; 
0000216A: 69 76 65 2E ; 
0000216E: 20 52 65 2D ; 
00002172: 65 6E 74 65 ; 
00002176: 72 3A 20 0A ; 
0000217A: 00          ; 
0000217B:             ; 
0000217B: 53 65 74 74 ; s_m1            defb "Settings", nl, "|-[0] stepMode_d     - The following 4 settings are the d
0000217F: 69 6E 67 73 ; efault values for the options", nl, "|-[1] slowMode_d", nl, "|-[2] eraseMode_d", nl, "|-[3] Dim
00002183: 0A 7C 2D 5B ; s_d", nl, 0
00002187: 30 5D 20 73 ; 
0000218B: 74 65 70 4D ; 
0000218F: 6F 64 65 5F ; 
00002193: 64 20 20 20 ; 
00002197: 20 20 2D 20 ; 
0000219B: 54 68 65 20 ; 
0000219F: 66 6F 6C 6C ; 
000021A3: 6F 77 69 6E ; 
000021A7: 67 20 34 20 ; 
000021AB: 73 65 74 74 ; 
000021AF: 69 6E 67 73 ; 
000021B3: 20 61 72 65 ; 
000021B7: 20 74 68 65 ; 
000021BB: 20 64 65 66 ; 
000021BF: 61 75 6C 74 ; 
000021C3: 20 76 61 6C ; 
000021C7: 75 65 73 20 ; 
000021CB: 66 6F 72 20 ; 
000021CF: 74 68 65 20 ; 
000021D3: 6F 70 74 69 ; 
000021D7: 6F 6E 73 0A ; 
000021DB: 7C 2D 5B 31 ; 
000021DF: 5D 20 73 6C ; 
000021E3: 6F 77 4D 6F ; 
000021E7: 64 65 5F 64 ; 
000021EB: 0A 7C 2D 5B ; 
000021EF: 32 5D 20 65 ; 
000021F3: 72 61 73 65 ; 
000021F7: 4D 6F 64 65 ; 
000021FB: 5F 64 0A 7C ; 
000021FF: 2D 5B 33 5D ; 
00002203: 20 44 69 6D ; 
00002207: 73 5F 64 0A ; 
0000220B: 00          ; 
0000220C: 7C 2D 5B 34 ; s_m2            defb "|-[4] range          - The range of values that the dims can have (1-255 
00002210: 5D 20 72 61 ; && range_min < range_max)", nl, 0
00002214: 6E 67 65 20 ; 
00002218: 20 20 20 20 ; 
0000221C: 20 20 20 20 ; 
00002220: 20 2D 20 54 ; 
00002224: 68 65 20 72 ; 
00002228: 61 6E 67 65 ; 
0000222C: 20 6F 66 20 ; 
00002230: 76 61 6C 75 ; 
00002234: 65 73 20 74 ; 
00002238: 68 61 74 20 ; 
0000223C: 74 68 65 20 ; 
00002240: 64 69 6D 73 ; 
00002244: 20 63 61 6E ; 
00002248: 20 68 61 76 ; 
0000224C: 65 20 28 31 ; 
00002250: 2D 32 35 35 ; 
00002254: 20 26 26 20 ; 
00002258: 72 61 6E 67 ; 
0000225C: 65 5F 6D 69 ; 
00002260: 6E 20 3C 20 ; 
00002264: 72 61 6E 67 ; 
00002268: 65 5F 6D 61 ; 
0000226C: 78 29 0A 00 ; 
00002270: 7C 2D 5B 35 ; s_m3            defb "|-[5] Icons          - The characters printed for an alive/dead/ptr cell"
00002274: 5D 20 49 63 ; ,nl, "`-[6] itters         - The number of itterations in the non-step version before it will w
00002278: 6F 6E 73 20 ; ait for input", nl, 0
0000227C: 20 20 20 20 ; 
00002280: 20 20 20 20 ; 
00002284: 20 2D 20 54 ; 
00002288: 68 65 20 63 ; 
0000228C: 68 61 72 61 ; 
00002290: 63 74 65 72 ; 
00002294: 73 20 70 72 ; 
00002298: 69 6E 74 65 ; 
0000229C: 64 20 66 6F ; 
000022A0: 72 20 61 6E ; 
000022A4: 20 61 6C 69 ; 
000022A8: 76 65 2F 64 ; 
000022AC: 65 61 64 2F ; 
000022B0: 70 74 72 20 ; 
000022B4: 63 65 6C 6C ; 
000022B8: 0A 60 2D 5B ; 
000022BC: 36 5D 20 69 ; 
000022C0: 74 74 65 72 ; 
000022C4: 73 20 20 20 ; 
000022C8: 20 20 20 20 ; 
000022CC: 20 20 2D 20 ; 
000022D0: 54 68 65 20 ; 
000022D4: 6E 75 6D 62 ; 
000022D8: 65 72 20 6F ; 
000022DC: 66 20 69 74 ; 
000022E0: 74 65 72 61 ; 
000022E4: 74 69 6F 6E ; 
000022E8: 73 20 69 6E ; 
000022EC: 20 74 68 65 ; 
000022F0: 20 6E 6F 6E ; 
000022F4: 2D 73 74 65 ; 
000022F8: 70 20 76 65 ; 
000022FC: 72 73 69 6F ; 
00002300: 6E 20 62 65 ; 
00002304: 66 6F 72 65 ; 
00002308: 20 69 74 20 ; 
0000230C: 77 69 6C 6C ; 
00002310: 20 77 61 69 ; 
00002314: 74 20 66 6F ; 
00002318: 72 20 69 6E ; 
0000231C: 70 75 74 0A ; 
00002320: 00          ; 
00002321: 7C 2D 5B 37 ; s_m4            defb "|-[7] Drawing erase  - Bool for if when drawing the grid it should erase 
00002325: 5D 20 44 72 ; the previous one", nl, 0
00002329: 61 77 69 6E ; 
0000232D: 67 20 65 72 ; 
00002331: 61 73 65 20 ; 
00002335: 20 2D 20 42 ; 
00002339: 6F 6F 6C 20 ; 
0000233D: 66 6F 72 20 ; 
00002341: 69 66 20 77 ; 
00002345: 68 65 6E 20 ; 
00002349: 64 72 61 77 ; 
0000234D: 69 6E 67 20 ; 
00002351: 74 68 65 20 ; 
00002355: 67 72 69 64 ; 
00002359: 20 69 74 20 ; 
0000235D: 73 68 6F 75 ; 
00002361: 6C 64 20 65 ; 
00002365: 72 61 73 65 ; 
00002369: 20 74 68 65 ; 
0000236D: 20 70 72 65 ; 
00002371: 76 69 6F 75 ; 
00002375: 73 20 6F 6E ; 
00002379: 65 0A 00    ; 
0000237C: 45 6E 74 65 ; s_m             defb "Enter the index of the setting to edit or -1 to return to the menu (press
00002380: 72 20 74 68 ;  enter to input): ", 0
00002384: 65 20 69 6E ; 
00002388: 64 65 78 20 ; 
0000238C: 6F 66 20 74 ; 
00002390: 68 65 20 73 ; 
00002394: 65 74 74 69 ; 
00002398: 6E 67 20 74 ; 
0000239C: 6F 20 65 64 ; 
000023A0: 69 74 20 6F ; 
000023A4: 72 20 2D 31 ; 
000023A8: 20 74 6F 20 ; 
000023AC: 72 65 74 75 ; 
000023B0: 72 6E 20 74 ; 
000023B4: 6F 20 74 68 ; 
000023B8: 65 20 6D 65 ; 
000023BC: 6E 75 20 28 ; 
000023C0: 70 72 65 73 ; 
000023C4: 73 20 65 6E ; 
000023C8: 74 65 72 20 ; 
000023CC: 74 6F 20 69 ; 
000023D0: 6E 70 75 74 ; 
000023D4: 29 3A 20 00 ; 
000023D8: 45 72 72 6F ; s_m_err         defb "Error invalid index. Re-enter: ", 0
000023DC: 72 20 69 6E ; 
000023E0: 76 61 6C 69 ; 
000023E4: 64 20 69 6E ; 
000023E8: 64 65 78 2E ; 
000023EC: 20 52 65 2D ; 
000023F0: 65 6E 74 65 ; 
000023F4: 72 3A 20 00 ; 
000023F8:             ; 
000023F8: 53 6C 6F 77 ; currentslow     defb "Slow_d: ", 0
000023FC: 5F 64 3A 20 ; 
00002400: 00          ; 
00002401: 45 72 61 73 ; currenterase    defb "Erase_d: ", 0
00002405: 65 5F 64 3A ; 
00002409: 20 00       ; 
0000240B: 53 74 65 70 ; currentstep     defb "Step_d: ", 0
0000240F: 5F 64 3A 20 ; 
00002413: 00          ; 
00002414: 44 69 6D 73 ; currentDims     defb "Dims: ", 0
00002418: 3A 20 00    ; 
0000241B: 52 61 6E 67 ; currentRange    defb "Range: ", 0
0000241F: 65 3A 20 00 ; 
00002423: 49 74 74 65 ; currentItters   defb "Itters: ", 0
00002427: 72 73 3A 20 ; 
0000242B: 00          ; 
0000242C: 45 72 61 73 ; currentdraweras defb "Erase when drawing: ", 0
00002430: 65 20 77 68 ; 
00002434: 65 6E 20 64 ; 
00002438: 72 61 77 69 ; 
0000243C: 6E 67 3A 20 ; 
00002440: 00          ; 
00002441: 28 00       ; bracket_open    defb "(", 0
00002443: 2C 20 00    ; comma_space     defb ", ", 0
00002446: 29 00       ; bracket_close   defb ")", 0
00002448: 41 6C 69 76 ; currenticons_1  defb "Alive: ", 0
0000244C: 65 3A 20 00 ; 
00002450: 44 65 61 64 ; currenticons_2  defb "Dead: ", 0
00002454: 3A 20 00    ; 
00002457: 50 74 72 3A ; currenticons_3  defb "Ptr: ", 0
0000245B: 20 00       ; 
0000245D: 45 6E 74 65 ; currenticons_a  defb "Enter 3 character (not seperated) for the values of the alive/dead/ptr ch
00002461: 72 20 33 20 ; aracters: ", 0
00002465: 63 68 61 72 ; 
00002469: 61 63 74 65 ; 
0000246D: 72 20 28 6E ; 
00002471: 6F 74 20 73 ; 
00002475: 65 70 65 72 ; 
00002479: 61 74 65 64 ; 
0000247D: 29 20 66 6F ; 
00002481: 72 20 74 68 ; 
00002485: 65 20 76 61 ; 
00002489: 6C 75 65 73 ; 
0000248D: 20 6F 66 20 ; 
00002491: 74 68 65 20 ; 
00002495: 61 6C 69 76 ; 
00002499: 65 2F 64 65 ; 
0000249D: 61 64 2F 70 ; 
000024A1: 74 72 20 63 ; 
000024A5: 68 61 72 61 ; 
000024A9: 63 74 65 72 ; 
000024AD: 73 3A 20 00 ; 
000024B1: 45 72 72 6F ; mallocerr_m     defb "Error getting memory from malloc", nl, 0
000024B5: 72 20 67 65 ; 
000024B9: 74 74 69 6E ; 
000024BD: 67 20 6D 65 ; 
000024C1: 6D 6F 72 79 ; 
000024C5: 20 66 72 6F ; 
000024C9: 6D 20 6D 61 ; 
000024CD: 6C 6C 6F 63 ; 
000024D1: 0A 00       ; 
000024D3: 45 72 72 6F ; getstringerr_m  defb "Error getting string, could be malloc error", nl, 0
000024D7: 72 20 67 65 ; 
000024DB: 74 74 69 6E ; 
000024DF: 67 20 73 74 ; 
000024E3: 72 69 6E 67 ; 
000024E7: 2C 20 63 6F ; 
000024EB: 75 6C 64 20 ; 
000024EF: 62 65 20 6D ; 
000024F3: 61 6C 6C 6F ; 
000024F7: 63 20 65 72 ; 
000024FB: 72 6F 72 0A ; 
000024FF: 00          ; 
00002500: 49 74 74 65 ; currentitter    defb "Itters: ", 0
00002504: 72 73 3A 20 ; 
00002508: 00          ; 
00002509: 45 6E 74 65 ; currentaskx     defb "Enter value for x: ", 0
0000250D: 72 20 76 61 ; 
00002511: 6C 75 65 20 ; 
00002515: 66 6F 72 20 ; 
00002519: 78 3A 20 00 ; 
0000251D: 45 6E 74 65 ; currentasky     defb "Enter value for y: ", 0
00002521: 72 20 76 61 ; 
00002525: 6C 75 65 20 ; 
00002529: 66 6F 72 20 ; 
0000252D: 79 3A 20 00 ; 
00002531: 45 6E 74 65 ; currentasknew   defb "Enter new value: ", 0
00002535: 72 20 6E 65 ; 
00002539: 77 20 76 61 ; 
0000253D: 6C 75 65 3A ; 
00002541: 20 00       ; 
00002543: 45 6E 74 65 ; currentasknew_B defb "Enter new value (0 or 1): ", 0
00002547: 72 20 6E 65 ; 
0000254B: 77 20 76 61 ; 
0000254F: 6C 75 65 20 ; 
00002553: 28 30 20 6F ; 
00002557: 72 20 31 29 ; 
0000255B: 3A 20 00    ; 
0000255E: 45 72 72 6F ; currentasknew_E defb "Error invalid re-enter: ", 0
00002562: 72 20 69 6E ; 
00002566: 76 61 6C 69 ; 
0000256A: 64 20 72 65 ; 
0000256E: 2D 65 6E 74 ; 
00002572: 65 72 3A 20 ; 
00002576: 00          ; 
00002577: 49 6E 76 61 ; currentarrerr   defb "Invalid value entered re-enter: ", 0
0000257B: 6C 69 64 20 ; 
0000257F: 76 61 6C 75 ; 
00002583: 65 20 65 6E ; 
00002587: 74 65 72 65 ; 
0000258B: 64 20 72 65 ; 
0000258F: 2D 65 6E 74 ; 
00002593: 65 72 3A 20 ; 
00002597: 00          ; 
00002598: 49 6E 76 61 ; changearrsizmsg defb "Invalid, x >= y.", nl, 0
0000259C: 6C 69 64 2C ; 
000025A0: 20 78 20 3E ; 
000025A4: 3D 20 79 2E ; 
000025A8: 0A 00       ; 
000025AA: 49 6E 76 61 ; changeittere_m  defb "Invalid itter value. Re-enter: ", nl, 0
000025AE: 6C 69 64 20 ; 
000025B2: 69 74 74 65 ; 
000025B6: 72 20 76 61 ; 
000025BA: 6C 75 65 2E ; 
000025BE: 20 52 65 2D ; 
000025C2: 65 6E 74 65 ; 
000025C6: 72 3A 20 0A ; 
000025CA: 00          ; 
000025CB: 45 6E 74 65 ; getitters_m     defb "Enter the max itterations (1-255): ", 0
000025CF: 72 20 74 68 ; 
000025D3: 65 20 6D 61 ; 
000025D7: 78 20 69 74 ; 
000025DB: 74 65 72 61 ; 
000025DF: 74 69 6F 6E ; 
000025E3: 73 20 28 31 ; 
000025E7: 2D 32 35 35 ; 
000025EB: 29 3A 20 00 ; 
000025EF:             ; 
000025EF:             ; ;;debug for heap
000025EF: 50 72 69 6E ; printFree_m     defb "Printing free list", nl
000025F3: 74 69 6E 67 ; 
000025F7: 20 66 72 65 ; 
000025FB: 65 20 6C 69 ; 
000025FF: 73 74 0A    ; 
00002602: 46 6F 75 6E ; printfree_f_m   defb "Found a new free item", nl, 0
00002606: 64 20 61 20 ; 
0000260A: 6E 65 77 20 ; 
0000260E: 66 72 65 65 ; 
00002612: 20 69 74 65 ; 
00002616: 6D 0A 00    ; 
00002619: 41 64 64 72 ; printfree_f_mad defb "Address: ", 0
0000261D: 65 73 73 3A ; 
00002621: 20 00       ; 
00002623: 4E 65 78 74 ; printfree_f_mnx defb "Next   : ", 0
00002627: 20 20 20 3A ; 
0000262B: 20 00       ; 
0000262D: 50 72 65 76 ; printfree_f_mpr defb "Prev   : ", 0
00002631: 20 20 20 3A ; 
00002635: 20 00       ; 
00002637: 53 69 7A 65 ; printfree_f_msz defb "Size   : ", 0
0000263B: 20 20 20 3A ; 
0000263F: 20 00       ; 
00002641:             ; 
00002641: 50 72 69 6E ; printAll_m      defb "Printing all elements in the heap", nl, 0
00002645: 74 69 6E 67 ; 
00002649: 20 61 6C 6C ; 
0000264D: 20 65 6C 65 ; 
00002651: 6D 65 6E 74 ; 
00002655: 73 20 69 6E ; 
00002659: 20 74 68 65 ; 
0000265D: 20 68 65 61 ; 
00002661: 70 0A 00    ; 
00002664: 54 68 69 73 ; printAll_m_f    defb "This is a Free block", nl, 0
00002668: 20 69 73 20 ; 
0000266C: 61 20 46 72 ; 
00002670: 65 65 20 62 ; 
00002674: 6C 6F 63 6B ; 
00002678: 0A 00       ; 
0000267A: 54 68 69 73 ; printAll_m_t    defb "This is a Taken block", nl, 0
0000267E: 20 69 73 20 ; 
00002682: 61 20 54 61 ; 
00002686: 6B 65 6E 20 ; 
0000268A: 62 6C 6F 63 ; 
0000268E: 6B 0A 00    ; 
00002691:             ; 
00002691: 48 65 72 65 ; printHeap_end_m defb "Here's the heap at the end of the program!", nl, 0
00002695: 27 73 20 74 ; 
00002699: 68 65 20 68 ; 
0000269D: 65 61 70 20 ; 
000026A1: 61 74 20 74 ; 
000026A5: 68 65 20 65 ; 
000026A9: 6E 64 20 6F ; 
000026AD: 66 20 74 68 ; 
000026B1: 65 20 70 72 ; 
000026B5: 6F 67 72 61 ; 
000026B9: 6D 21 0A 00 ; 
000026BD:             ; 
000026BD: 4D 61 6C 6C ; malloc_panic    defb "Malloc failed, cannot recover. Please consider reporting this to your nea
000026C1: 6F 63 20 66 ; rest duck", nl, 0
000026C5: 61 69 6C 65 ; 
000026C9: 64 2C 20 63 ; 
000026CD: 61 6E 6E 6F ; 
000026D1: 74 20 72 65 ; 
000026D5: 63 6F 76 65 ; 
000026D9: 72 2E 20 50 ; 
000026DD: 6C 65 61 73 ; 
000026E1: 65 20 63 6F ; 
000026E5: 6E 73 69 64 ; 
000026E9: 65 72 20 72 ; 
000026ED: 65 70 6F 72 ; 
000026F1: 74 69 6E 67 ; 
000026F5: 20 74 68 69 ; 
000026F9: 73 20 74 6F ; 
000026FD: 20 79 6F 75 ; 
00002701: 72 20 6E 65 ; 
00002705: 61 72 65 73 ; 
00002709: 74 20 64 75 ; 
0000270D: 63 6B 0A 00 ; 
00002711:             ; 
00002711: 4F 4E 00    ; on_msg          defb "ON", 0
00002714: 4F 46 46 00 ; off_msg         defb "OFF", 0
00002718: 2C 00       ; comma           defb ",", 0
0000271A:             ; 
0000271C:             ; align
0000271C: 00000000    ; heapstart       defw 0 ;;points to the end of the data this is where the heap can then begin
00002720:             ; Remaining literals

Symbol Table: Labels
: max_addr                          00100000  Value
: stack_size                        00010000  Value
: nl                                0000000A  Value
: backspace                         00000008  Value
: minBuffSize                       00000008  Value
: enter                             0000000A  Value
: minSaveSize                       00000008  Value
: sizeofSaveI                       0000000C  Value
: heaphead                          00000004  Local -- ARM
: offsets                           00000008  Local -- ARM
: gridA                             00000048  Local -- ARM
: gridB                             0000004C  Local -- ARM
: erase_b                           00000050  Local -- ARM
: slow_b                            00000051  Local -- ARM
: step_b                            00000052  Local -- ARM
: width                             00000053  Local -- ARM
: height                            00000054  Local -- ARM
: range_min                         00000055  Local -- ARM
: range_max                         00000056  Local -- ARM
: maxitters                         00000057  Local -- ARM
: drawerase                         00000058  Local -- ARM
: alive_c                           00000059  Local -- ARM
: dead_c                            0000005A  Local -- ARM
: ptr_c                             0000005B  Local -- ARM
: erase_b_d                         0000005C  Local -- ARM
: slow_b_d                          0000005D  Local -- ARM
: step_b_d                          0000005E  Local -- ARM
: width_d                           0000005F  Local -- ARM
: height_d                          00000060  Local -- ARM
: _start                            00000064  Local -- ARM
: main                              00000094  Local -- ARM
: mainmenu                          000000C8  Local -- ARM
: mainchoice                        000000E0  Local -- ARM
: showHeap                          00000128  Local -- ARM
: mainloopstart                     00000130  Local -- ARM
: mainloop                          00000164  Local -- ARM
: mainloopcont                      00000188  Local -- ARM
: mainloopdostep                    000001A4  Local -- ARM
: mainloopskipstep                  000001CC  Local -- ARM
: gridFail                          000001F0  Local -- ARM
: mainMallocFail                    000001FC  Local -- ARM
: mainEnd                           0000020C  Local -- ARM
: mainEndEnd                        00000230  Local -- ARM
: mainfree                          0000023C  Local -- ARM
: mainfreeloop                      00000250  Local -- ARM
: mainfreelend                      00000278  Local -- ARM
: mainfreeend                       00000280  Local -- ARM
: settingsmenu                      00000288  Local -- ARM
: changesetting                     000002B8  Local -- ARM
: changesettingget                  000002C4  Local -- ARM
: changesettingserr                 00000308  Local -- ARM
: changesettingsmallocfail          00000318  Local -- ARM
: changesettingscont                00000328  Local -- ARM
: changearr                         00000370  Local -- ARM
: changearrget                      00000384  Local -- ARM
: changearrsizeerr                  000003D0  Local -- ARM
: changearrset                      000003E0  Local -- ARM
: changearrmallocerr                000003F4  Local -- ARM
: changearrend                      000003FC  Local -- ARM
: changearrendend                   00000400  Local -- ARM
: changearrgetvalidint              00000408  Local -- ARM
: changearrgetvalidintget           0000040C  Local -- ARM
: changearrgetvalidinterr           00000444  Local -- ARM
: changearrgetvalidintcont          00000458  Local -- ARM
: changearrgvmallocerr              00000468  Local -- ARM
: changearrgetvalidintend           00000470  Local -- ARM
: changearrgvendend                 00000478  Local -- ARM
: printdims                         00000480  Local -- ARM
: changestep                        000004D4  Local -- ARM
: changeslow                        000004EC  Local -- ARM
: changeerase                       00000504  Local -- ARM
: changebool                        00000518  Local -- ARM
: changebool_cont                   00000558  Local -- ARM
: changebool_set                    00000584  Local -- ARM
: changeboolend                     000005B4  Local -- ARM
: changedims                        000005BC  Local -- ARM
: changedimscont                    000005EC  Local -- ARM
: changerange                       000005F0  Local -- ARM
: changerangecont                   00000620  Local -- ARM
: changeicons                       00000624  Local -- ARM
: changeiconsmallerr                00000670  Local -- ARM
: printicons                        00000680  Local -- ARM
: printiconsend                     000006D4  Local -- ARM
: changeitter                       000006D8  Local -- ARM
: changeitterget                    000006FC  Local -- ARM
: changeittergetcont                00000724  Local -- ARM
: changeittererr                    0000075C  Local -- ARM
: changeitterend                    00000770  Local -- ARM
: changedrawerase                   0000078C  Local -- ARM
: changedraweraseend                000007A4  Local -- ARM
: newboard                          000007A8  Local -- ARM
: loadboard                         000007D8  Local -- ARM
: loadboardaskindex                 000007EC  Local -- ARM
: loadboardaskindexcont             00000820  Local -- ARM
: loadboardindex                    00000868  Local -- ARM
: loadboardmain                     00000884  Local -- ARM
: loadboardmallocB                  000008EC  Local -- ARM
: loadboardskipB                    00000908  Local -- ARM
: loadboardmallocfail               00000928  Local -- ARM
: loadboardret                      00000938  Local -- ARM
: loadboardempty                    00000944  Local -- ARM
: loadboarderr                      00000944  Local -- ARM
: loadboardsucc                     00000948  Local -- ARM
: newline                           0000094C  Local -- ARM
: step                              00000958  Local -- ARM
: stepcont                          000009AC  Local -- ARM
: stependfail                       000009E8  Local -- ARM
: stependsucc                       000009F0  Local -- ARM
: stepend                           000009F4  Local -- ARM
: listGrids                         000009FC  Local -- ARM
: listGridsLoop                     00000A30  Local -- ARM
: listGridsEmpty                    00000AC4  Local -- ARM
: listGridsLend                     00000AD0  Local -- ARM
: listGridsEnd                      00000AD0  Local -- ARM
: saveGrid                          00000AD8  Local -- ARM
: saveGridResize                    00000AFC  Local -- ARM
: saveGridAdd                       00000B34  Local -- ARM
: saveGridFailMalloc                00000B9C  Local -- ARM
: saveGridSucc                      00000BA4  Local -- ARM
: saveGridEnd                       00000BA8  Local -- ARM
: erase                             00000BB0  Local -- ARM
: eraseloop                         00000BB4  Local -- ARM
: eraseend                          00000BCC  Local -- ARM
: slow                              00000BD0  Local -- ARM
: slowloop                          00000BD8  Local -- ARM
: slowend                           00000BF8  Local -- ARM
: heapclean                         00000BFC  Local -- ARM
: heapcleanloop                     00000C18  Local -- ARM
: heapcleanend                      00000C2C  Local -- ARM
: strlen                            00000C30  Local -- ARM
: strlenloop                        00000C3C  Local -- ARM
: strlenend                         00000C50  Local -- ARM
: strtoi                            00000C58  Local -- ARM
: strtoiloop                        00000C98  Local -- ARM
: strtoilend                        00000CCC  Local -- ARM
: strtoifailminus                   00000CD4  Local -- ARM
: strtoifailoutrange                00000CDC  Local -- ARM
: strtoifailnonnum                  00000CE4  Local -- ARM
: strtoiendfail                     00000CE8  Local -- ARM
: strtoiendsucc                     00000CF0  Local -- ARM
: strtoiend                         00000CF4  Local -- ARM
: memcpy                            00000CFC  Local -- ARM
: memcpywordsloop                   00000D24  Local -- ARM
: memcpywordslend                   00000D3C  Local -- ARM
: memcpyallbytes                    00000D4C  Local -- ARM
: memcpybytes                       00000D58  Local -- ARM
: memcpybytesloop                   00000D5C  Local -- ARM
: memcpybyteslend                   00000D74  Local -- ARM
: memcpyend                         00000D78  Local -- ARM
: getstring                         00000D80  Local -- ARM
: getstringloop                     00000DB4  Local -- ARM
: getstringloopskipsize             00000DC4  Local -- ARM
: skipMax                           00000DD8  Local -- ARM
: getstringlcont                    00000DE4  Local -- ARM
: getstringresize                   00000DFC  Local -- ARM
: getstringlend                     00000E34  Local -- ARM
: getstringResizeEnd                00000E40  Local -- ARM
: getstringErr                      00000E78  Local -- ARM
: getstringEnd                      00000E80  Local -- ARM
: getstringEndEnd                   00000E8C  Local -- ARM
: tolower                           00000E94  Local -- ARM
: setupGrid                         00000E9C  Local -- ARM
: setupGridAsk                      00000EE4  Local -- ARM
: setupdrawing                      00000F14  Local -- ARM
: setuprandom                       00000F28  Local -- ARM
: setupstart                        00000F5C  Local -- ARM
: setuprowloop                      00000F60  Local -- ARM
: setupcolloop                      00000F6C  Local -- ARM
: dorandom                          00000F80  Local -- ARM
: dodrawstart                       00000F94  Local -- ARM
: dodraw                            00000FAC  Local -- ARM
: dodrawfail                        00001000  Local -- ARM
: dodrawsucc                        00001010  Local -- ARM
: dodrawsuccskiperase               00001034  Local -- ARM
: setupcollcont                     0000103C  Local -- ARM
: setupcollend                      0000104C  Local -- ARM
: setuprowlend                      00001054  Local -- ARM
: setupGridFail                     0000105C  Local -- ARM
: setupGridEnd                      0000106C  Local -- ARM
: drawgrid                          00001074  Local -- ARM
: drawgridrowloop                   00001098  Local -- ARM
: drawgridcolloop                   000010A4  Local -- ARM
: drawgridprintcurrent              000010E0  Local -- ARM
: drawgridcollcont                  000010F0  Local -- ARM
: drawgridcollend                   00001100  Local -- ARM
: drawgridrowlend                   00001114  Local -- ARM
: drawgridend                       0000111C  Local -- ARM
: printoptions                      00001124  Local -- ARM
: setupOptions                      000011F8  Local -- ARM
: setupOptionsDEnd                  000012A4  Local -- ARM
: setupCustom                       000012B0  Local -- ARM
: setupCustomskipslow               00001374  Local -- ARM
: printrange                        00001388  Local -- ARM
: setupCustomDimsCheck              000013D0  Local -- ARM
: getwid                            000013E8  Local -- ARM
: getwidFail                        00001454  Local -- ARM
: getheisetup                       00001468  Local -- ARM
: gethei                            00001478  Local -- ARM
: getheiFail                        000014E4  Local -- ARM
: customfail                        000014FC  Local -- ARM
: customend                         0000150C  Local -- ARM
: customret                         00001510  Local -- ARM
: updategrid                        00001518  Local -- ARM
: updategridrowloop                 00001540  Local -- ARM
: updategridcolloop                 0000154C  Local -- ARM
: updatealive                       00001574  Local -- ARM
: updatedead                        00001590  Local -- ARM
: updatelcont                       000015A0  Local -- ARM
: updategridccollend                000015A8  Local -- ARM
: updategridrowlend                 000015B4  Local -- ARM
: updategridend                     000015B4  Local -- ARM
: countneighbours                   000015BC  Local -- ARM
: countneighboursloop               000015E8  Local -- ARM
: countneighboursskipadd            0000162C  Local -- ARM
: countneighbourslend               00001630  Local -- ARM
: countneighboursend                00001630  Local -- ARM
: isinrange                         0000163C  Local -- ARM
: isinrangefail                     00001680  Local -- ARM
: isinrangeend                      00001684  Local -- ARM
: setupHeap                         00001688  Local -- ARM
: malloc                            000016BC  Local -- ARM
: mallignend                        000016D8  Local -- ARM
: checkcrate                        000016E4  Local -- ARM
: nocrates                          00001704  Local -- ARM
: foundcrate                        0000170C  Local -- ARM
: splitcrate                        0000171C  Local -- ARM
: usecrate                          00001750  Local -- ARM
: mallocEnd                         00001764  Local -- ARM
: printHeap                         0000176C  Local -- ARM
: printHeapend                      00001778  Local -- ARM
: printAll                          00001780  Local -- ARM
: printAllLoop                      000017A0  Local -- ARM
: printAllLoopCont                  000017CC  Local -- ARM
: printAllLend                      000017EC  Local -- ARM
: printAllEnd                       000017EC  Local -- ARM
: printFree                         000017F4  Local -- ARM
: printFreeloop                     00001810  Local -- ARM
: printFreelend                     00001840  Local -- ARM
: printFreeEnd                      00001840  Local -- ARM
: printblock                        00001848  Local -- ARM
: free                              000018E0  Local -- ARM
: freeloop                          000018F4  Local -- ARM
: freelend                          00001910  Local -- ARM
: freelendEnd                       00001930  Local -- ARM
: freeMergeCheck                    00001938  Local -- ARM
: verifyLeft                        00001948  Local -- ARM
: verifyRight                       0000195C  Local -- ARM
: merge                             00001970  Local -- ARM
: mergeNew                          0000199C  Local -- ARM
: freeEnd                           0000199C  Local -- ARM
: welcomemsg                        000019A4  Local -- ARM
: welcome2msg                       000019D8  Local -- ARM
: mainchoicefail                    00001A1D  Local -- ARM
: mainendmsg                        00001AB4  Local -- ARM
: askdefaults                       00001ADB  Local -- ARM
: askerase                          00001B0D  Local -- ARM
: askslow                           00001B26  Local -- ARM
: askstep                           00001B3E  Local -- ARM
: stepslowwarning                   00001B56  Local -- ARM
: savedchoice                       00001BA3  Local -- ARM
: askname                           00001BCE  Local -- ARM
: warneraseslow                     00001BF1  Local -- ARM
: askwid                            00001C2F  Local -- ARM
: dash                              00001C46  Local -- ARM
: b_close_colon                     00001C48  Local -- ARM
: askhei                            00001C4C  Local -- ARM
: getwidfailmsg                     00001C63  Local -- ARM
: getheifailmsg                     00001C8F  Local -- ARM
: optionsp_1                        00001CBC  Local -- ARM
: optionsp_2                        00001CD4  Local -- ARM
: optionsp_3                        00001CD7  Local -- ARM
: optionsp_4                        00001CE3  Local -- ARM
: optionsp_5                        00001CEF  Local -- ARM
: mainloopittsmsg                   00001CFA  Local -- ARM
: askgenoption                      00001D9A  Local -- ARM
: setupGrdFailmsg                   00001DD3  Local -- ARM
: askseed                           00001E34  Local -- ARM
: drawinfomsg                       00001E60  Local -- ARM
: drawfailmsg                       00001EB6  Local -- ARM
: gridfailmsg                       00001EF3  Local -- ARM
: gridsavefail                      00001F2D  Local -- ARM
: gridloadempty                     00001F65  Local -- ARM
: gridloadpindex                    00001FC0  Local -- ARM
: gridloadpname                     00001FC9  Local -- ARM
: gridloadpwidth                    00001FD1  Local -- ARM
: gridloadpheight                   00001FDA  Local -- ARM
: loadboardaski                     00001FE4  Local -- ARM
: loadboardretmsg                   00002056  Local -- ARM
: loadboardifail                    0000206E  Local -- ARM
: loadboardirerr                    00002091  Local -- ARM
: loadboardmlcerr                   000020AE  Local -- ARM
: loadboardsucmsg                   000020EE  Local -- ARM
: listgridmsg                       0000210C  Local -- ARM
: cutoff                            0000212F  Local -- ARM
: changearrverr_m                   00002142  Local -- ARM
: s_m1                              0000217B  Local -- ARM
: s_m2                              0000220C  Local -- ARM
: s_m3                              00002270  Local -- ARM
: s_m4                              00002321  Local -- ARM
: s_m                               0000237C  Local -- ARM
: s_m_err                           000023D8  Local -- ARM
: currentslow                       000023F8  Local -- ARM
: currenterase                      00002401  Local -- ARM
: currentstep                       0000240B  Local -- ARM
: currentDims                       00002414  Local -- ARM
: currentRange                      0000241B  Local -- ARM
: currentItters                     00002423  Local -- ARM
: currentdraweras                   0000242C  Local -- ARM
: bracket_open                      00002441  Local -- ARM
: comma_space                       00002443  Local -- ARM
: bracket_close                     00002446  Local -- ARM
: currenticons_1                    00002448  Local -- ARM
: currenticons_2                    00002450  Local -- ARM
: currenticons_3                    00002457  Local -- ARM
: currenticons_a                    0000245D  Local -- ARM
: mallocerr_m                       000024B1  Local -- ARM
: getstringerr_m                    000024D3  Local -- ARM
: currentitter                      00002500  Local -- ARM
: currentaskx                       00002509  Local -- ARM
: currentasky                       0000251D  Local -- ARM
: currentasknew                     00002531  Local -- ARM
: currentasknew_B                   00002543  Local -- ARM
: currentasknew_E                   0000255E  Local -- ARM
: currentarrerr                     00002577  Local -- ARM
: changearrsizmsg                   00002598  Local -- ARM
: changeittere_m                    000025AA  Local -- ARM
: getitters_m                       000025CB  Local -- ARM
: printFree_m                       000025EF  Local -- ARM
: printfree_f_m                     00002602  Local -- ARM
: printfree_f_mad                   00002619  Local -- ARM
: printfree_f_mnx                   00002623  Local -- ARM
: printfree_f_mpr                   0000262D  Local -- ARM
: printfree_f_msz                   00002637  Local -- ARM
: printAll_m                        00002641  Local -- ARM
: printAll_m_f                      00002664  Local -- ARM
: printAll_m_t                      0000267A  Local -- ARM
: printHeap_end_m                   00002691  Local -- ARM
: malloc_panic                      000026BD  Local -- ARM
: on_msg                            00002711  Local -- ARM
: off_msg                           00002714  Local -- ARM
: comma                             00002718  Local -- ARM
: heapstart                         0000271C  Local -- ARM
