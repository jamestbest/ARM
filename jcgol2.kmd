KMD
00000000:             ; ;;  This is my second rendition of JCGOL in ARM assembly for Komodo
00000000:             ; ;;  
00000000:             ; ;;  This will attempt to follow the ARM 32bit calling convention 
00000000:             ; ;;      R0-3 are argument registers, scratch
00000000:             ; ;;      R4-10 are local variable registers and should be saved before use in a function
00000000:             ; ;;      R11 - FP
00000000:             ; ;;      R12 - IPC
00000000:             ; ;;      R13 - SP
00000000:             ; ;;      R14 - LR
00000000:             ; ;;      R15 - PC
00000000:             ; ;;
00000000:             ; ;;  The plan
00000000:             ; ;;  - Create a simple `heap` allocator for the grid and input
00000000:             ; ;;  - Ask the user
00000000:             ; ;;      |-Use default? Y - skip below
00000000:             ; ;;      |-dims of the grid
00000000:             ; ;;      |   `-Will need a way to get a string input and convert to an integer (make sure to cat
                      ; ch -ve)
00000000:             ; ;;      |-slow mode
00000000:             ; ;;      `-erase mode
00000000:             ; ;;  - ask for generation mode
00000000:             ; ;;      |-If random ask for seed
00000000:             ; ;;      |   `-For generation roll the seed to create a pseudorandom value for each `pixel`
00000000:             ; ;;      `-If draw then get them to draw the grid one `pixel` at a time
00000000:             ; ;;  - Allocate two grids, the pointers to which will swap after a frame. One is used to count t
                      ; he neighbours the other for the new cell value.
00000000:             ; ;;  - loop
00000000:             ; ;;      |-count neighbours
00000000:             ; ;;      |-update inactive grid
00000000:             ; ;;      |-swap grids
00000000:             ; ;;      |-draw active grid
00000000:             ; ;;      `-goto loop
00000000:             ; 
00000000:             ; 
00000000:             ; ;;SINGLE STEP mode allows you to save the current state of the board into a list, also give it 
                      ; a name
00000000:             ; ;;At the main menu you can load a saved grid
00000000:             ; 
00000000:             ; ;;Grid info struct
00000000:             ; ;;  - SaveInfoStruct* array
00000000:             ; ;;  - int max size of arr
00000000:             ; ;;  - int current position in arr
00000000:             ; 
00000000:             ; ;;Save info struct
00000000:             ; ;;  -address of grid [4 BYTES]
00000000:             ; ;;  -char* to the name [4 BYTES]
00000000:             ; ;;  -width of grid (1 BYTE)
00000000:             ; ;;  -height of grid (1 BYTE)
00000000:             ; 
00000000:             ; 
00000000:             ; ;;  CURRENT ISSUES/TODOS
00000000:             ; ;;  |-More testing of malloc & free need to be done
00000000:             ; ;;  |-Think about minimising the fragmentation of the heap - find the best free block instead o
                      ; f the first
00000000:             ; ;;  |
00000000:             ; ;;  |-Need to add the saveGrid and LoadGrids methods
00000000:             ; ;;  |-Need to restructure the gridInfo struct - it needs the ptr to arr, maxsize, and current i
                      ; ndex - this will shift the sp offset to not n + m + 4 % 8 == 0
00000000:             ; ;;  |-Need to copy the grid when saving to allow the current grid to be used again
00000000:             ; ;;  `-When we're in the menu should the current grids be freed?
00000000:             ; max_addr    EQU  0x100000
00000000:             ; stack_size  EQU  0x10000
00000000:             ; nl      EQU  10
00000000:             ; backspace   EQU  8
00000000:             ; minBuffSize EQU  8
00000000:             ; enter       EQU  nl
00000000:             ; minSaveSize EQU  8
00000000:             ; sizeofSaveI EQU  12 ;;10 bytes + 2 bytes of padding
00000000:             ; 
00000000:             ; _start
00000000:             ;     ;;prepare the stack
00000000: E3A0D601    ;     ldr R13, =max_addr
00000004: E3A0E000    ;     mov R14, #0 ;; allow for `returning` from _start
00000008: E92D4000    ;     push {R14}
0000000C:             ; 
0000000C:             ;     ;;[[temp]] clean the heap
0000000C: EB00013B    ;     bl heapclean
00000010:             ; 
00000010:             ;     ;;setup heap
00000010: E28F0E5A    ;     adrl R0, heapstart
00000014: E2800A01    ; 
00000018: E58F0DB8    ;     str R0, heaphead
0000001C: EB000307    ;     bl setupHeap
00000020:             ; 
00000020: E3A0000E    ;     mov R0, #14
00000024: EB000310    ;     bl malloc
00000028:             ; 
00000028: EB000002    ;     bl main
0000002C:             ; 
0000002C: E8BD4000    ;     pop {R14}
00000030: EF000002    ;     swi 2
00000034: E1A0F00E    ;     mov R15, R14
00000038:             ; 
00000038:             ; main
00000038: E92D4FF0    ;     push {fp, R14, R4-R10} ;;8 registers saved
0000003C:             ; 
0000003C: E28DB01C    ;     add fp, sp, #28 ;;(r - 1) * 4
00000040: E24DD010    ;     sub sp, sp, #16 ;;reserve 12 bytes (4 bytes to align?) on the stack for the pointer to the 
                      ; list of saved grids + the maxSize of the array
00000044:             ; 
00000044:             ;     ;;The gridInfo struct
00000044:             ;     ;;set the current position of the pointer
00000044: E3A00000    ;     mov R0, #0
00000048: E58D0008    ;     str R0, [sp, #8]
0000004C:             ; 
0000004C:             ;     ;;set the number of elements(save info structs) that can be stored in the array at the mome
                      ; nt
0000004C: E3A00008    ;     ldr R0, =minSaveSize
00000050: E58D0004    ;     str R0, [sp, #4]
00000054:             ; 
00000054:             ;     ;;minsize * sizeof(SaveInfo) = number of bytes needed for the array
00000054: E3A0100C    ;     ldr R1, =sizeofSaveI
00000058: E0000190    ;     mul R0, R0, R1
0000005C: EB000302    ;     bl malloc ;;allocate the array on the heap
00000060:             ; 
00000060: E58D0000    ;     str R0, [sp, #0] ;;store the address
00000064:             ; 
00000064:             ; mainmenu
00000064: E28F00BD    ;     adrl R0, welcomemsg
00000068: E2800C0D    ; 
0000006C: EF000003    ;     swi 3
00000070:             ; 
00000070: E28F00E2    ;     adrl R0, welcome2msg
00000074: E2800C0D    ; 
00000078: EF000003    ;     swi 3
0000007C:             ; 
0000007C:             ; mainchoice
0000007C: EF000001    ;     swi 1
00000080: E3800020    ;     orr R0, R0, #32
00000084: E1A04000    ;     mov R4, R0
00000088:             ; 
00000088: E354006E    ;     cmp R4, #'n' ;;new board generation
0000008C: 0A000008    ;     beq newboard
00000090:             ; 
00000090: E354006C    ;     cmp R4, #'l' ;;load a saved board
00000094: E1A0000D    ;     mov R0, sp ;;load the info ptr
00000098: 0A00000F    ;     beq loadboard
0000009C:             ; 
0000009C: E3540071    ;     cmp R4, #'q' ;;quit
000000A0: 0A00007D    ;     beq mainEnd
000000A4:             ; 
000000A4: E28F00FA    ;     adrl R0, mainchoicefail
000000A8: E2800C0D    ; 
000000AC: EF000003    ;     swi 3
000000B0:             ; 
000000B0: EAFFFFF1    ;     b mainchoice
000000B4:             ; 
000000B4:             ;     ;;R4 will hold the active grid, R5 will hold the passive grid
000000B4:             ;     ;;Active is used to count neighbours, passive is used to place updated values in 
000000B4:             ;     ;;either can be drawn, just drawn in a different position
000000B4:             ; 
000000B4:             ; newboard
000000B4: E3A00001    ;     mov R0, #1;;should get dims
000000B8: EB000216    ;     bl setupOptions
000000BC:             ; 
000000BC: EB0001AE    ;     bl setupGrid
000000C0:             ;     
000000C0: E59F4D54    ;     ldr R4, gridA
000000C4: E59F5D54    ;     ldr R5, gridB
000000C8:             ; 
000000C8: E3540000    ;     cmp R4, #0
000000CC: 0A00006F    ;     beq gridFail
000000D0: E3550000    ;     cmp R5, #0
000000D4: 0A00006D    ;     beq gridFail
000000D8:             ; 
000000D8: EA000046    ;     b mainloopstart
000000DC:             ; 
000000DC:             ; loadboard
000000DC:             ; ;;INP in R0 is the ptr to the SaveInfoHeader struct i.e. ptr to arr, current pos, max size
000000DC:             ; ;;RET in R0 0 for success in which case go to main loop, n/0 for err in which case return to ma
                      ; in menu
000000DC:             ; ;;display the saved grids
000000DC:             ; ;;ask for the index
000000DC:             ; ;;load the grids with the saved info
000000DC:             ; ;;ask the user for the settings
000000DC: E1A04000    ;     mov R4, R0 ;;save the struct ptr
000000E0:             ; 
000000E0:             ;     ;;pass ptr to listgrids
000000E0: EB000093    ;     bl listGrids
000000E4:             ; 
000000E4: E5940008    ;     ldr R0, [R4, #8] ;;get the current position
000000E8: E3500000    ;     cmp R0, #0
000000EC: 0A00003F    ;     beq loadboardempty
000000F0:             ; 
000000F0:             ; loadboardaskindex
000000F0:             ;     ;;The grid has now been printed out we need to get the index to load
000000F0: E28F00AE    ;     adrl R0, loadboardaski
000000F4: E2800C13    ; 
000000F8: EF000003    ;     swi 3
000000FC:             ; 
000000FC: E3A0000A    ;     ldr R0, =enter
00000100: E3E01000    ;     mov R1, #-1
00000104: E3A02001    ;     mov R2, #1
00000108: EB00015D    ;     bl getstring
0000010C: E1A05000    ;     mov R5, R0
00000110:             ; 
00000110: EB000111    ;     bl strtoi
00000114: E1A06000    ;     mov R6, R0
00000118: E1A07001    ;     mov R7, R1
0000011C:             ;     ;;ERR codes
0000011C:             ;     ;;  0 is success
0000011C:             ;     ;;  1 is attempted -ve
0000011C:             ;     ;;  2 is use of non-numeric characters
0000011C:             ;     ;;  3 is value out of range of integer
0000011C:             ;     ;;  4 is null string given
0000011C:             ; 
0000011C: E1A00005    ;     mov R0, R5
00000120: EB0002FB    ;     bl free
00000124:             ; 
00000124: E1A00006    ;     mov R0, R6
00000128: E1A01007    ;     mov R1, R7
0000012C:             ; 
0000012C: E3510001    ;     cmp R1, #1
00000130: 0A00002B    ;     beq loadboardret
00000134:             ; 
00000134: E3510000    ;     cmp R1, #0
00000138: 0A000003    ;     beq loadboardindex
0000013C:             ; 
0000013C: E28F0FF5    ;     adrl R0, loadboardifail
00000140: E2800A01    ; 
00000144: EF000003    ;     swi 3
00000148:             ; 
00000148: EAFFFFE8    ;     b loadboardaskindex
0000014C:             ; 
0000014C:             ; loadboardindex
0000014C:             ; ;;we now have an index lets check if its in range and then load the board
0000014C:             ;     ;;should be +ve so don't need to check < 0
0000014C: E5941008    ;     ldr R1, [R4, #8] ;;get the current position, this is where things get added so index < curr
                      ; entposition
00000150: E1500001    ;     cmp R0, R1
00000154: BA000003    ;     blt loadboardmain
00000158:             ; 
00000158: E28F00DB    ;     adrl R0, loadboardirerr
0000015C: E2800C13    ; 
00000160: EF000003    ;     swi 3
00000164: EAFFFFE1    ;     b loadboardaskindex
00000168:             ; 
00000168:             ; loadboardmain
00000168:             ; ;;now we know that the index is valid we can load the grid
00000168:             ; ;;
00000168:             ; ;;need to free current grid
00000168:             ; ;;need to create a copy of the snapshot and set gridA to it 
00000168:             ; ;;return to main menu
00000168: E5941000    ;     ldr R1, [R4, #0] ;;get the array of grids
0000016C: E3A0200C    ;     ldr R2, =sizeofSaveI
00000170: E0201290    ;     mla R0, R0, R2, R1 ;;R0 = index * sizeofSaveI + grid.addr
00000174:             ; 
00000174: E5905000    ;     ldr R5, [R0, #0] ;;get the address of that grid
00000178: E5D06008    ;     ldrb R6, [R0, #8] ;;get the width
0000017C: E5D07009    ;     ldrb R7, [R0, #9] ;;get the height
00000180:             ; 
00000180: E0000796    ;     mul R0, R6, R7 ;;get the required size
00000184: E1A09000    ;     mov R9, R0 ;;save the number of bytes
00000188:             ; 
00000188: EB0002B7    ;     bl malloc
0000018C:             ; 
0000018C: E3500000    ;     cmp R0, #0
00000190: 0A00000F    ;     beq loadboardmallocfail
00000194:             ; 
00000194: E1A08000    ;     mov R8, R0 ;;save the new grid arr
00000198:             ; 
00000198:             ;     ;;need to copy the saved grid into the new grid
00000198:             ; 
00000198: E1A00005    ;     mov R0, R5  ;;src is the saved grid
0000019C: E1A01008    ;     mov R1, R8  ;;dst is the new grid
000001A0: E1A02009    ;     mov R2, R9  ;;bytes is in R9 already from width and height
000001A4: EB000115    ;     bl memcpy
000001A8:             ; 
000001A8: E59F0C6C    ;     ldr R0, gridA
000001AC: EB0002D8    ;     bl free
000001B0:             ; 
000001B0: E58F8C64    ;     str R8, gridA
000001B4: E5CF6C6B    ;     strb R6, width
000001B8: E5CF7C68    ;     strb R7, height ;;overwrite the active grid information
000001BC:             ; 
000001BC: E28F0FF5    ;     adrl R0, loadboardsucmsg
000001C0: E2800A01    ; 
000001C4: EF000003    ;     swi 3
000001C8:             ; 
000001C8: E3A00000    ;     mov R0, #0 ;;skip asking dims as they've been loaded
000001CC: EB0001D1    ;     bl setupOptions
000001D0:             ; 
000001D0: EA000007    ;     b loadboardsucc
000001D4:             ; 
000001D4:             ; loadboardmallocfail
000001D4: E28F0FDF    ;     adrl R0, loadboardmlcerr
000001D8: E2800A01    ; 
000001DC: EF000003    ;     swi 3
000001E0:             ; 
000001E0: EA000002    ;     b loadboarderr
000001E4:             ; 
000001E4:             ; loadboardret
000001E4: E28F0FC5    ;     adrl R0, loadboardretmsg
000001E8: E2800A01    ; 
000001EC: EF000003    ;     swi 3
000001F0:             ; 
000001F0:             ; loadboardempty
000001F0:             ; loadboarderr
000001F0: EAFFFF9B    ;     b mainmenu
000001F4:             ; loadboardsucc
000001F4: EAFFFFFF    ;     b mainloopstart
000001F8:             ; 
000001F8:             ; 
000001F8:             ; ;;update loop
000001F8:             ; ;;    - loop
000001F8:             ; ;;      |-count neighbours
000001F8:             ; ;;      |-update inactive grid
000001F8:             ; ;;      |-swap grids
000001F8:             ; ;;      |-draw grid
000001F8:             ; ;;      |-[slow?] - slow() - loops for some time to increase waiting time
000001F8:             ; ;;      |-[step?] - step() - waits for input, s and q will have effects
000001F8:             ; ;;      |-[erase?] - erase() - \b until grid is gone
000001F8:             ; ;;      `-goto loop
000001F8:             ; mainloopstart
000001F8:             ;     ;;load the slow, step, and erase booleans
000001F8: E5DF6C25    ;     ldrb R6, slow_b
000001FC: E5DF7C20    ;     ldrb R7, erase_b
00000200: E5DF8C1E    ;     ldrb R8, step_b
00000204:             ; 
00000204: E59F4C10    ;     ldr R4, gridA
00000208: E59F5C10    ;     ldr R5, gridB
0000020C:             ; 
0000020C:             ;     ;;(width * height) * 2 + 1 + height
0000020C: E5DF0C13    ;     ldrb R0, width
00000210: E5DF1C10    ;     ldrb R1, height
00000214: E0000190    ;     mul R0, R0, R1
00000218: E1A00080    ;     mov R0, R0, lsl #1
0000021C: E2800001    ;     add R0, R0, #1
00000220: E0800001    ;     add R0, R0, R1
00000224: E1A09000    ;     mov R9, R0      ;;R9 holds the itterations for erase, so it doesn't have to calc it every t
                      ; ime
00000228:             ; 
00000228:             ; mainloop
00000228: E1A00004    ;     mov R0, R4
0000022C: E1A01005    ;     mov R1, R5
00000230: EB000231    ;     bl updategrid
00000234:             ; 
00000234: E1A00004    ;     mov R0, R4
00000238: EB000199    ;     bl drawgrid
0000023C:             ; 
0000023C: E3580001    ;     cmp R8, #1
00000240: 1A000009    ;     bne mainloopskipstep
00000244:             ; 
00000244: E1A0000D    ;     mov R0, sp
00000248: E1A01004    ;     mov R1, R4 ;;give the active grid
0000024C: EB00001B    ;     bl step
00000250: E3500000    ;     cmp R0, #0
00000254: 0A000004    ;     beq mainloopskipstep
00000258:             ;     
00000258:             ;     ;;free the current grid
00000258: E59F0BBC    ;     ldr R0, gridA
0000025C: EB0002AC    ;     bl free
00000260: E59F0BB8    ;     ldr R0, gridB
00000264: EB0002AA    ;     bl free
00000268:             ; 
00000268: EAFFFF7D    ;     b mainmenu
0000026C:             ; 
0000026C:             ; mainloopskipstep
0000026C: E3560001    ;     cmp R6, #1
00000270: 0B000097    ;     bleq slow
00000274:             ; 
00000274: E3570001    ;     cmp R7, #1
00000278: 01A00009    ;     moveq R0, R9
0000027C: 0B00008C    ;     bleq erase
00000280:             ; 
00000280: E1A00004    ;     mov R0, R4
00000284: E1A04005    ;     mov R4, R5
00000288: E1A05000    ;     mov R5, R0 ;;SWAP the active and passive
0000028C:             ; 
0000028C: EAFFFFE5    ;     b mainloop
00000290:             ; 
00000290:             ; gridFail
00000290: E28F0015    ;     adrl R0, gridfailmsg
00000294: E2800C11    ; 
00000298: EF000003    ;     swi 3
0000029C:             ; 
0000029C:             ; mainEnd
0000029C:             ;     ;;need to free all of the memory, saved grids (grids + names) + current grids
0000029C:             ; 
0000029C: E28F00A1    ;     adrl R0, mainendmsg
000002A0: E2800C0D    ; 
000002A4: EF000003    ;     swi 3
000002A8:             ; 
000002A8: E24BD018    ;     sub sp, fp, #24 ;;???
000002AC: E8BD47F0    ;     pop {R14, R4-R10}
000002B0: E1A0F00E    ;     mov R15, R14
000002B4:             ; 
000002B4:             ; newline
000002B4: E3A0000A    ;     ldr R0, =nl
000002B8: EF000000    ;     swi 0
000002BC:             ; 
000002BC: E1A0F00E    ;     mov R15, R14
000002C0:             ; 
000002C0:             ; step
000002C0:             ; ;;INP in R0 is the gridHeaderStruct ptr [[todo]]
000002C0:             ; ;;INP in R1 is the active grid ptr
000002C0:             ; ;;OUT in R0 is 1 if should return to main menu, else 0
000002C0:             ; 
000002C0:             ; ;;get user input
000002C0:             ; ;;if q -> jump to main menu
000002C0:             ; ;;if s -> ask for name, bl saveGrid with name
000002C0: E92D41F0    ;     push {R14, R4-R8}
000002C4: E1A04000    ;     mov R4, R0 ;;save the struct 
000002C8: E1A05001    ;     mov R5, R1
000002CC:             ; 
000002CC: EF000001    ;     swi 1
000002D0:             ; 
000002D0: E3500071    ;     cmp R0, #'q'
000002D4: 0A000011    ;     beq stependfail ;;bad name, shame I can't change it eh
000002D8:             ; 
000002D8: E3500073    ;     cmp R0, #'s'
000002DC: 1A000011    ;     bne stependsucc
000002E0:             ; 
000002E0: E28F0077    ;     adrl R0, askname
000002E4: E2800C0E    ; 
000002E8: EF000003    ;     swi 3
000002EC:             ; 
000002EC: E3A0000A    ;     ldr R0, =enter
000002F0: E3E01000    ;     mov R1, #-1
000002F4: E3A02001    ;     mov R2, #1
000002F8: EB0000E1    ;     bl getstring
000002FC:             ; 
000002FC: E1A01000    ;     mov R1, R0 ;;char* name
00000300: E1A00004    ;     mov R0, R4 ;;gridinfo* 
00000304: E1A02005    ;     mov R2, R5 ;;active grid
00000308: EB000033    ;     bl saveGrid
0000030C:             ; 
0000030C: E28F0EE2    ;     adrl R0, savedchoice
00000310: EF000003    ;     swi 3
00000314:             ; 
00000314: E3500059    ;     cmp R0, #'Y'
00000318: 0A000000    ;     beq stependfail
0000031C: EA000001    ;     b stependsucc
00000320:             ; 
00000320:             ; stependfail
00000320: E3A00001    ;     mov R0, #1
00000324: EA000000    ;     b stepend
00000328:             ; 
00000328:             ; stependsucc
00000328: E3A00000    ;     mov R0, #0
0000032C:             ; 
0000032C:             ; stepend
0000032C: E8BD41F0    ;     pop {R14, R4-R8}
00000330: E1A0F00E    ;     mov R15, R14
00000334:             ; 
00000334:             ; listGrids
00000334:             ; ;;INP in R0 is the ptr to the gridInfo struct
00000334:             ; ;;RET --
00000334:             ; ;;Grid info struct
00000334:             ; ;;  - SaveInfoStruct* array
00000334:             ; ;;  - int max size of arr
00000334:             ; ;;  - int current position in arr
00000334:             ; 
00000334:             ; ;;loops through the array of grids (if any) printing their names, and dims, ask to print grid
00000334: E92D47F0    ;     push {R14, R4-R10}
00000338:             ; 
00000338: E5904000    ;     ldr R4, [R0, #0] ;;get the array ptr
0000033C: E5905008    ;     ldr R5, [R0, #8] ;;current position
00000340:             ; 
00000340: E3550000    ;     cmp R5, #0
00000344: 0A00001F    ;     beq listGridsEmpty
00000348:             ; 
00000348:             ; ;;if current position == 1: print("There are no saved grids")
00000348:             ; ;;for i from 0 to current position
00000348:             ; ;;  getname(4)
00000348:             ; ;;  getwidth(8)
00000348:             ; ;;  getheight(9)
00000348:             ; ;;  print("There is a grid called %s with dims (%d, %d)")
00000348: E3A01000    ;     mov R1, #0 ;;i
0000034C: E3A0200C    ;     ldr R2, =sizeofSaveI
00000350:             ; listGridsLoop
00000350: E1510005    ;     cmp R1, R5
00000354: 0A00001E    ;     beq listGridsLend
00000358:             ; 
00000358: E0234291    ;     mla R3, R1, R2, R4 ;;R3 = i * sizeof(saveInfo) + array
0000035C: E5936004    ;     ldr R6, [R3, #4] ;;load the name ptr
00000360: E5D37008    ;     ldrb R7, [R3, #8] ;;load the width
00000364: E5D38009    ;     ldrb R8, [R3, #9] ;;load the height
00000368:             ; 
00000368: E1A00001    ;     mov R0, R1
0000036C: EF000004    ;     swi 4
00000370:             ; 
00000370: E3A0003A    ;     mov R0, #':'
00000374: EF000000    ;     swi 0
00000378:             ; 
00000378: E28F00FF    ;     adrl R0, gridloadpname
0000037C: E2800A01    ; 
00000380: EF000003    ;     swi 3
00000384:             ; 
00000384: E1A00006    ;     mov R0, R6
00000388: EF000003    ;     swi 3
0000038C:             ; 
0000038C: EBFFFFC8    ;     bl newline
00000390:             ; 
00000390: E28F00FD    ;     adrl R0, gridloadpwidth
00000394: E2800A01    ; 
00000398: EF000003    ;     swi 3
0000039C:             ; 
0000039C: E1A00007    ;     mov R0, R7
000003A0: EF000004    ;     swi 4
000003A4:             ; 
000003A4: EBFFFFC2    ;     bl newline
000003A8:             ; 
000003A8: E28F00ED    ;     adrl R0, gridloadpheight
000003AC: E2800A01    ; 
000003B0: EF000003    ;     swi 3
000003B4:             ; 
000003B4: E1A00008    ;     mov R0, R8
000003B8: EF000004    ;     swi 4
000003BC:             ; 
000003BC: EBFFFFBC    ;     bl newline
000003C0:             ; 
000003C0:             ;     ;;[[Prob]  Printing the grid uses the stored width and height, I could change it to use a p
                      ; assed in
000003C0:             ;     ;;             version but do the other areas have enough registers to cope? probably not.
000003C0:             ;     ;;             Would have to swap the width and height with the loaded versions - I really 
                      ; don't like this idea
000003C0:             ; 
000003C0: E2811001    ;     add R1, R1, #1
000003C4:             ; 
000003C4: EAFFFFE1    ;     b listGridsLoop
000003C8:             ; 
000003C8:             ; listGridsEmpty
000003C8: E28F004F    ;     adrl R0, gridloadempty
000003CC: E2800A01    ; 
000003D0: EF000003    ;     swi 3
000003D4:             ; 
000003D4:             ; listGridsLend
000003D4:             ; listGridsEnd
000003D4: E8BD47F0    ;     pop {R14, R4-R10}
000003D8: E1A0F00E    ;     mov R15, R14
000003DC:             ; 
000003DC:             ; saveGrid
000003DC:             ; ;;INP in R0 is the ptr gridInfo struct (in the main's stackframe)
000003DC:             ; ;;INP in R1 is the char* to the name
000003DC:             ; ;;INP in R2 is the active grid
000003DC:             ; ;;RET in R0 is an errcode or 0 for success. 1 for malloc error
000003DC:             ; 
000003DC:             ; ;;if reachedCap -> realloc + inc maxsize
000003DC:             ; ;;copy the current grid to another loc and place info in gridArr
000003DC:             ; ;;inc current index
000003DC: E92D47F0    ;     push {R14, R4-R10}
000003E0:             ; 
000003E0: E1A04000    ;     mov R4, R0
000003E4: E1A05001    ;     mov R5, R1
000003E8: E1A0A002    ;     mov R10, R2
000003EC:             ; 
000003EC: E5942008    ;     ldr R2, [R4, #8] ;;get the current index
000003F0: E5943004    ;     ldr R3, [R4, #4] ;;get the maxsize
000003F4:             ; 
000003F4: E1520003    ;     cmp R2, R3
000003F8: 0A000000    ;     beq saveGridResize
000003FC: EA00000D    ;     b saveGridAdd
00000400:             ; 
00000400:             ; saveGridResize
00000400:             ;     ;;maxsize in R3
00000400: E1A06083    ;     mov R6, R3, lsl #1 ;;double the capacity
00000404: E3A0700C    ;     ldr R7, =sizeofSaveI
00000408: E0070796    ;     mul R7, R6, R7 ;;get the number of bytes
0000040C:             ; 
0000040C: E1A00007    ;     mov R0, R7
00000410: EB000215    ;     bl malloc ;;get the new grid
00000414:             ; 
00000414: E3500000    ;     cmp R0, #0 ;;if malloc failed then don't do any saving
00000418: 0A000020    ;     beq saveGridFailMalloc
0000041C:             ; 
0000041C: E1A01000    ;     mov R1, R0
00000420: E1A08000    ;     mov R8, R0 ;;save of ptr
00000424:             ; 
00000424:             ;     ;;now that we have the new grid we need to memcpy the bytes from the original into the new 
                      ; one
00000424: E5940000    ;     ldr R0, [R4, #0] ;;get the array ptr
00000428:             ;     ;;R1 has the malloced address
00000428: E1A020A7    ;     mov R2, R7, lsr #1 ;;not great, this is the double cap halfed, means no mul again
0000042C: EB000073    ;     bl memcpy
00000430:             ; 
00000430:             ;     ;;assume success because I didn't give memcpy an err code :)
00000430:             ;     ;;need to store the new size and arr ptr in the gridinfo struct
00000430:             ; 
00000430: E5848000    ;     str R8, [R4, #0]
00000434: E5846004    ;     str R6, [R4, #4]
00000438:             ; 
00000438:             ; saveGridAdd
00000438:             ; ;;add the current grid to the array
00000438: E5946000    ;     ldr R6, [R4, #0] ;;get the arr ptr
0000043C: E5947008    ;     ldr R7, [R4, #8] ;;get current index
00000440:             ; 
00000440:             ;     ;;ptr is 4 bytes
00000440:             ;     ;;we're adding the struct of 
00000440:             ;     ;;  |-grid*     (ptr)
00000440:             ;     ;;  |-char*     (ptr)
00000440:             ;     ;;  |-width     (byte)
00000440:             ;     ;;  `-height    (byte)
00000440:             ; 
00000440:             ;     ;;we need to copy the current array
00000440: E5DF89DF    ;     ldrb R8, width
00000444: E5DF99DC    ;     ldrb R9, height
00000448: E0080998    ;     mul R8, R8, R9 ;;get the number of bytes in grid
0000044C:             ; 
0000044C: E1A00008    ;     mov R0, R8
00000450: EB000205    ;     bl malloc ;;allocate a new grid
00000454:             ; 
00000454: E3500000    ;     cmp R0, #0
00000458: 0A000010    ;     beq saveGridFailMalloc
0000045C:             ; 
0000045C: E92D0100    ;     push {R8} ;; :(
00000460:             ; 
00000460: E3A0800C    ;     ldr R8, =sizeofSaveI
00000464: E0266897    ;     mla R6, R7, R8, R6 ;;currentindex * sizeof(Gridinfo) + arrptr
00000468: E5860000    ;     str R0, [R6, #0] ;;store the grid*
0000046C: E5865004    ;     str R5, [R6, #4] ;;store the char*
00000470: E5DF89AF    ;     ldrb R8, width
00000474: E5C68008    ;     strb R8, [R6, #8]
00000478: E5C69009    ;     strb R9, [R6, #9]
0000047C:             ; 
0000047C: E8BD0100    ;     pop {R8}
00000480:             ; 
00000480: E1A01000    ;     mov R1, R0 ;;dst
00000484: E1A0000A    ;     mov R0, R10 ;;src
00000488: E1A02008    ;     mov R2, R8 ;;num bytes
0000048C: EB00005B    ;     bl memcpy ;;copy the grid into the new location
00000490:             ; 
00000490:             ;     ;;inc the position
00000490: E5940008    ;     ldr R0, [R4, #8]
00000494: E2800001    ;     add R0, R0, #1
00000498: E5840008    ;     str R0, [R4, #8]
0000049C:             ; 
0000049C: EA000001    ;     b saveGridSucc
000004A0:             ; 
000004A0:             ; saveGridFailMalloc
000004A0: E3A00001    ;     mov R0, #1
000004A4: EA000000    ;     b saveGridEnd
000004A8:             ; 
000004A8:             ; saveGridSucc
000004A8: E3A00000    ;     mov R0, #0
000004AC:             ; 
000004AC:             ; saveGridEnd
000004AC: E8BD47F0    ;     pop {R14, R4-R10}
000004B0: E1A0F00E    ;     mov R15, R14
000004B4:             ; 
000004B4:             ; erase
000004B4:             ; ;;INP in R0 is the itters
000004B4:             ; ;;for (width * height + 1) * 2 + 1
000004B4:             ; ;;      print('\b')
000004B4: E1A01000    ;     mov R1, R0
000004B8:             ; 
000004B8:             ; eraseloop
000004B8: E3510000    ;     cmp R1, #0
000004BC: 0A000003    ;     beq eraseend
000004C0:             ; 
000004C0: E3A00008    ;     ldr R0, =backspace
000004C4: EF000000    ;     swi 0
000004C8:             ; 
000004C8: E2411001    ;     sub R1, R1, #1
000004CC: EAFFFFF9    ;     b eraseloop
000004D0:             ; 
000004D0:             ; eraseend
000004D0: E1A0F00E    ;     mov R15, R14
000004D4:             ; 
000004D4:             ; slow
000004D4: E3A010FF    ;     mov R1, #0xFF
000004D8: E1A01081    ;     mov R1, R1, lsl #1
000004DC:             ; 
000004DC:             ; slowloop
000004DC: E3510000    ;     cmp R1, #0
000004E0: 0A000005    ;     beq slowend
000004E4:             ; 
000004E4: E3A00020    ;     mov R0, #' '
000004E8: EF000000    ;     swi 0
000004EC: E3A00008    ;     ldr R0, =backspace
000004F0: EF000000    ;     swi 0
000004F4:             ; 
000004F4: E2411001    ;     sub R1, R1, #1
000004F8: EAFFFFF7    ;     b slowloop
000004FC:             ; 
000004FC:             ; slowend
000004FC: E1A0F00E    ;     mov R15, R14
00000500:             ; 
00000500:             ; heapclean
00000500:             ; ;;zero out all memory in the heap (debugging uses)
00000500: E28F00B0    ;     adrl R0, heapstart
00000504: E2800A01    ; 
00000508: E3A01601    ;     ldr R1, =max_addr ;;stores the end of the heap
0000050C: E3A02801    ;     ldr R2, =stack_size
00000510: E0411002    ;     sub R1, R1, R2 ;; R1 = max_addr - stack_size which should be the heap end
00000514: E3C11003    ;     and R1, R1, #-4 ;;align to 4 byte boundry just in case
00000518: E3A03000    ;     mov R3, #0
0000051C:             ; heapcleanloop ;;starting at heapstart
0000051C: E1500001    ;     cmp R0, R1
00000520: 0A000002    ;     beq heapcleanend
00000524: E5003000    ;     str R3, [R0] ;;store 0 in loc
00000528: E2800004    ;     add R0, R0, #4 ;;inc by a word
0000052C: EAFFFFFA    ;     b heapcleanloop
00000530:             ; heapcleanend
00000530: E1A0F00E    ;     mov R15, R14
00000534:             ; 
00000534:             ; 
00000534:             ; strlen
00000534:             ; ;;INP in R0 is the address of the string
00000534:             ; ;;OUT in R0 is the length of the null terminated string
00000534:             ; 
00000534:             ; ;;len = 0
00000534:             ; ;;while(inp[len] != \0) {len++;}
00000534:             ; ;;return len
00000534:             ; 
00000534: E3A01000    ;     mov R1, #0 ;;len
00000538: E3500000    ;     cmp R0, #0
0000053C: 0A000004    ;     beq strlenend
00000540:             ; 
00000540:             ; strlenloop
00000540: E7D02001    ;     ldrb R2, [R0, R1]
00000544: E3520000    ;     cmp R2, #0
00000548: 0A000001    ;     beq strlenend
0000054C: E2811001    ;     add R1, R1, #1
00000550: EAFFFFFA    ;     b strlenloop
00000554:             ; 
00000554:             ; strlenend
00000554: E1A00001    ;     mov R0, R1
00000558: E1A0F00E    ;     mov R15, R14
0000055C:             ; 
0000055C:             ; strtoi
0000055C:             ; ;;INP in R0 is the address of the string
0000055C:             ; ;;OUT in R0 is the value created
0000055C:             ; ;;OUT in R1 is the err code
0000055C:             ; ;;
0000055C:             ; ;;ERR codes
0000055C:             ; ;;  0 is success
0000055C:             ; ;;  1 is attempted -ve
0000055C:             ; ;;  2 is use of non-numeric characters
0000055C:             ; ;;  3 is value out of range of integer
0000055C:             ; ;;  4 is null string given
0000055C:             ; 
0000055C:             ; ;;  example inp
0000055C:             ; ;;  12234       len = 5
0000055C:             ; ;;      ^-find end
0000055C:             ; ;;  tot = 0
0000055C:             ; ;;  for i from end to 0:
0000055C:             ; ;;      tot += inp[i] * (10 ** (len(inp) - i - 1))
0000055C:             ; ;;  +some checks for valid input
0000055C:             ; 
0000055C:             ; ;;This will take in an address to the start of a string and attempt to convert it into an integ
                      ; er
0000055C:             ; ;;String is only valid when all characters are numerical
0000055C:             ; ;;For now it does not accept -ve numbers
0000055C:             ; 
0000055C: E92D41F0    ;     push {R14, R4-R8}
00000560: E1A04000    ;     mov R4, R0  ;;R4 holds the addr
00000564:             ; 
00000564: E3500000    ;     cmp R0, #0
00000568: 03A01004    ;     moveq R1, #4
0000056C: 0A00001E    ;     beq strtoiendfail ;;null given so err code = 4 and end
00000570:             ; 
00000570: EBFFFFEF    ;     bl strlen
00000574: E1A05000    ;     mov R5, R0  ;;R5 holds the len of the string
00000578:             ; 
00000578: E3550000    ;     cmp R5, #0
0000057C: 0A00001C    ;     beq strtoiendsucc ;;if len(string) == 0 then return 0
00000580:             ; 
00000580: E5D46000    ;     ldrb R6, [R4, #0]
00000584: E356002D    ;     cmp R6, #45
00000588: 0A000012    ;     beq strtoifailminus
0000058C:             ; 
0000058C: E3A06000    ;     mov R6, #0  ;;R6 holds the total
00000590: E3A07001    ;     mov R7, #1  ;;R7 holds the **
00000594: E2458001    ;     sub R8, R5, #1  ;;R8 is i which starts at end (len - 1)
00000598: E3A0300A    ;     mov R3, #10 ;;mul to **
0000059C:             ; 
0000059C:             ; strtoiloop
0000059C: E3580000    ;     cmp R8, #0
000005A0: BA00000A    ;     blt strtoilend
000005A4:             ; 
000005A4: E7D42008    ;     ldrb R2, [R4, R8]
000005A8: E2422030    ;     sub R2, R2, #48
000005AC:             ; 
000005AC: E3520000    ;     cmp R2, #0
000005B0: BA00000C    ;     blt strtoifailnonnum
000005B4: E3520009    ;     cmp R2, #9
000005B8: CA00000A    ;     bgt strtoifailnonnum
000005BC:             ; 
000005BC: E0266792    ;     mla R6, R2, R7, R6 ;;total = (inp[i] * (**)) + total -> total += inp[i] * (**)
000005C0: 6A000006    ;     bvs strtoifailoutrange
000005C4: E0070397    ;     mul R7, R7, R3
000005C8:             ; 
000005C8: E2488001    ;     sub R8, R8, #1
000005CC:             ; 
000005CC: EAFFFFF2    ;     b strtoiloop
000005D0:             ; 
000005D0:             ; 
000005D0:             ; ;;branches are expensive - should this just be rep RET? probably doesn't matter at this scale
000005D0:             ; strtoilend
000005D0: E1A00006    ;     mov R0, R6
000005D4: EA000006    ;     b strtoiendsucc
000005D8:             ; 
000005D8:             ; strtoifailminus
000005D8: E3A01001    ;     mov R1, #1
000005DC: EA000002    ;     b strtoiendfail
000005E0:             ; 
000005E0:             ; strtoifailoutrange
000005E0: E3A01003    ;     mov R1, #3
000005E4: EA000000    ;     b strtoiendfail
000005E8:             ; 
000005E8:             ; strtoifailnonnum
000005E8: E3A01002    ;     mov R1, #2
000005EC:             ; 
000005EC:             ; strtoiendfail
000005EC: E3A00000    ;     mov R0, #0
000005F0: EA000000    ;     b strtoiend
000005F4:             ; 
000005F4:             ; strtoiendsucc
000005F4: E3A01000    ;     mov R1, #0
000005F8:             ; 
000005F8:             ; strtoiend
000005F8: E8BD41F0    ;     pop {R14, R4-R8}
000005FC: E1A0F00E    ;     mov R15, R14
00000600:             ; 
00000600:             ; memcpy
00000600:             ; ;;INP in R0 is the addr of src
00000600:             ; ;;INP in R1 is the addr of dst
00000600:             ; ;;INP in R2 is the number of bytes to copy
00000600:             ; 
00000600:             ; ;;check if src and dst are alliged
00000600:             ; ;;If different then write bytes
00000600:             ; ;;If same then go to 4byte boundry
00000600:             ; ;;  Write words of bytes2copy / 4
00000600:             ; ;;  Write remaining bytes
00000600: E92D41F0    ;     push {R14, R4-R8}
00000604:             ; 
00000604: E2004003    ;     and R4, R0, #0b11
00000608: E2015003    ;     and R5, R1, #0b11
0000060C:             ; 
0000060C: E1540005    ;     cmp R4, R5
00000610: 1A00000E    ;     bne memcpyallbytes
00000614:             ; 
00000614:             ;     ;;If they are the same then cpy R4 bytes and then do words
00000614: E0422004    ;     sub R2, R2, R4;; bytes2cpy -= bytes we are about to write
00000618: E1A03004    ;     mov R3, R4
0000061C: EB00000E    ;     bl memcpybytes
00000620:             ; 
00000620:             ;     ;;Now find the number of words that can be written i.e. bytes2cpy / 4 (bytes2cpy >> 2)
00000620: E3C23003    ;     and R3, R2, #-4 ;;the number of bytes to write that make up the words
00000624: E3A04000    ;     mov R4, #0 ;;i
00000628:             ; memcpywordsloop
00000628: E1540003    ;     cmp R4, R3
0000062C: 0A000003    ;     beq memcpywordslend
00000630:             ; 
00000630: E7906004    ;     ldr R6, [R0, R4]
00000634: E7816004    ;     str R6, [R1, R4]
00000638:             ;     
00000638: E2844004    ;     add R4, R4, #4
0000063C:             ; 
0000063C: EAFFFFF9    ;     b memcpywordsloop
00000640:             ;     
00000640:             ; memcpywordslend
00000640:             ; ;;Now copy the remaining bytes
00000640: E2022003    ;     and R2, R2, #0b11
00000644: E1A03002    ;     mov R3, R2
00000648: EB000003    ;     bl memcpybytes
0000064C: EA00000A    ;     b memcpyend
00000650:             ; 
00000650:             ; memcpyallbytes
00000650: E1A03002    ;     mov R3, R2
00000654: EB000000    ;     bl memcpybytes
00000658: EA000007    ;     b memcpyend
0000065C:             ; 
0000065C:             ; memcpybytes
0000065C:             ; ;;This is an internal function to memcpy and so doesn't follow the calling convention, it also 
                      ; assumes values are in place from memcpy
0000065C:             ; ;;for (int i = 0; i < byte2cpy; i++) {
0000065C:             ; ;;      *(dst + i) = *(src + i)
0000065C:             ; ;;INP in R3 is the number of bytes to copy
0000065C: E3A05000    ;     mov R5, #0 ;;i
00000660:             ; memcpybytesloop
00000660: E1550003    ;     cmp R5, R3
00000664: 0A000003    ;     beq memcpybyteslend ;;i < bytes2cpy
00000668:             ; 
00000668: E7D04005    ;     ldrb R4, [R0, R5]
0000066C: E7C14005    ;     strb R4, [R1, R5] ;;dst[i] = src[i]
00000670:             ; 
00000670: E2855001    ;     add R5, R5, #1 ;;i++
00000674:             ; 
00000674: EAFFFFF9    ;     b memcpybytesloop
00000678:             ; 
00000678:             ; memcpybyteslend
00000678: E1A0F00E    ;     mov R15, R14
0000067C:             ; 
0000067C:             ; memcpyend
0000067C: E8BD41F0    ;     pop {R14, R4-R8}
00000680: E1A0F00E    ;     mov R15, R14
00000684:             ; 
00000684:             ; getstring
00000684:             ; ;;INP in R0 the terminator character
00000684:             ; ;;INP in R1 the max number of characters or -1 for no max
00000684:             ; ;;INP in R2 boolean (non-0/0) for if letters should be printed out as well
00000684:             ; ;;RET in R0 a ptr to the memory address
00000684:             ; ;;
00000684:             ; ;;Dynamically allocate memory to support large string
00000684:             ; 
00000684:             ; ;;buff = malloc(minBytes)
00000684:             ; ;;while (input != terminator && pos < maxchars) 
00000684:             ; ;;  buff[pos] = input
00000684:             ; ;;  putchar(input)
00000684:             ; ;;  if (pos > buffSize)
00000684:             ; ;;      nBuff = malloc(buffSize << 1)
00000684:             ; ;;      memcpy from buff to nBuff
00000684:             ; ;;      free buff
00000684:             ; ;;      buff = nBuff
00000684:             ; 
00000684: E92D47F0    ;     push {R14, R4-R10}
00000688:             ; 
00000688: E1A08000    ;     mov R8, R0 ;;now holds terminator
0000068C: E1A09001    ;     mov R9, R1 ;;nax chars
00000690: E3590000    ;     cmp R9, #0
00000694: 0A000031    ;     beq getstringEnd
00000698:             ;     ;sub R9, R9, #1 ;;reduce by 1 to use later
00000698: E1A0A002    ;     mov R10, R2 ;;print bool
0000069C:             ; 
0000069C: E3A06008    ;     ldr R6, =minBuffSize ;;R6 will hold the current size of the buffer
000006A0: E1A00006    ;     mov R0, R6
000006A4: EB000170    ;     bl malloc
000006A8: E1A04000    ;     mov R4, R0 ;;R4 is the address of the buffer
000006AC:             ; 
000006AC: E3A05000    ;     mov R5, #0 ;;R5 is the loop counter/index into buffer
000006B0:             ; getstringloop
000006B0: E3790001    ;     cmp R9, #-1
000006B4: 0A000001    ;     beq getstringloopskipsize
000006B8: E1550009    ;     cmp R5, R9 ;;position - maxsize
000006BC:             ;                       ;;pos 2 means 3 characters written
000006BC: AA000019    ;     bge getstringlend ;;if position >= maxsize
000006C0:             ; getstringloopskipsize
000006C0: EF000001    ;     swi 1 ;;get input
000006C4: E1500008    ;     cmp R0, R8 ;;is input == terminator character
000006C8: 0A000016    ;     beq getstringlend
000006CC:             ; 
000006CC: E3790001    ;     cmp R9, #-1
000006D0: 0AFFFFFF    ;     beq skipMax
000006D4:             ;     
000006D4:             ; skipMax
000006D4: E1550006    ;     cmp R5, R6
000006D8: E92D0001    ;     push {R0}
000006DC: AA000005    ;     bge getstringresize
000006E0:             ; 
000006E0:             ; getstringlcont
000006E0: E8BD0001    ;     pop {R0}
000006E4: E7C40005    ;     strb R0, [R4, R5] ;;buff[pos] = input
000006E8:             ; 
000006E8: E35A0000    ;     cmp R10, #0
000006EC: 1F000000    ;     swine 0 ;;output the character to the screen if R10 is not 0
000006F0:             ; 
000006F0: E2855001    ;     add R5, R5, #1
000006F4:             ; 
000006F4: EAFFFFED    ;     b getstringloop
000006F8:             ; 
000006F8:             ; getstringresize
000006F8:             ;     ;;r6 will hold new buffer
000006F8: E1A00086    ;     mov R0, R6, lsl #1
000006FC: EB00015A    ;     bl malloc
00000700: E1A07000    ;     mov R7, R0
00000704:             ; 
00000704: E1A00004    ;     mov R0, R4 ;;old buff
00000708: E1A01007    ;     mov R1, R7 ;;newBuff
0000070C: E1A02005    ;     mov R2, R5 ;;bytes to write
00000710: EBFFFFBA    ;     bl memcpy
00000714:             ; 
00000714: E1A00004    ;     mov R0, R4
00000718: EB00017D    ;     bl free
0000071C: E1A04007    ;     mov R4, R7
00000720:             ; 
00000720: E1A06086    ;     mov R6, R6, lsl #1
00000724:             ; 
00000724: EAFFFFED    ;     b getstringlcont
00000728:             ; 
00000728:             ; getstringlend
00000728:             ;     ;;need to add a \0
00000728:             ;     ;;need to check if the buffer is completely full -> resize buffer to +1? (will be aligned t
                      ; o 8 in malloc!) then copy
00000728:             ;     ;;I could have the buffers always leave a space open for the \0? but this is kind of an edg
                      ; e case?
00000728: E1550006    ;     cmp R5, R6 ;;position to size of buffer
0000072C: 0A000000    ;     beq getstringResizeEnd
00000730:             ; 
00000730: EA00000A    ;     b getstringEnd
00000734:             ; 
00000734:             ; getstringResizeEnd
00000734: E2860001    ;     add R0, R6, #1
00000738: EB00014B    ;     bl malloc
0000073C: E1A07000    ;     mov R7, R0
00000740:             ; 
00000740: E1A00004    ;     mov R0, R4;;old buff
00000744: E1A01007    ;     mov R1, R7;;new buff
00000748: E1A02005    ;     mov R2, R5;;bytes2write
0000074C: EBFFFFAB    ;     bl memcpy
00000750:             ; 
00000750: E1A00004    ;     mov R0, R4
00000754: EB00016E    ;     bl free
00000758: E1A04007    ;     mov R4, R7
0000075C:             ; 
0000075C: E2866001    ;     add R6, R6, #1 ;;not needed
00000760:             ; 
00000760:             ; getstringEnd
00000760: E3A00000    ;     mov R0, #0
00000764: E7C40005    ;     strb R0, [R4, R5]
00000768:             ; 
00000768: E1A00004    ;     mov R0, R4
0000076C:             ; 
0000076C: E8BD47F0    ;     pop {R14, R4-R10}
00000770: E1A0F00E    ;     mov R15, R14
00000774:             ; 
00000774:             ; tolower
00000774:             ; ;;INP in R0 is a character
00000774:             ; ;;OUT in R0 is the character.lower()
00000774: E3800020    ;     orr R0, R0, #32
00000778: E1A0F00E    ;     mov R15, R14
0000077C:             ; 
0000077C:             ; setupGrid
0000077C:             ; ;;INP --
0000077C:             ; ;;RET --
0000077C:             ; ;;The values addresses of the grids will now be set, can still be 0
0000077C:             ; ;; ask for generation mode
0000077C:             ; ;;      |-If random ask for seed
0000077C:             ; ;;      |   `-For generation roll the seed to create a pseudorandom value for each `pixel`
0000077C:             ; ;;      `-If draw then get them to draw the grid one `pixel` at a time
0000077C: E92D47F0    ;     push {R14, R4-R10}
00000780:             ; 
00000780:             ;     ;;generate the main grid
00000780: E5DF669F    ;     ldrb R6, width
00000784: E5DF769C    ;     ldrb R7, height
00000788:             ; 
00000788: E0000796    ;     mul R0, R6, R7 ;;width * height = num of bytes to malloc
0000078C:             ; 
0000078C: E1A05000    ;     mov R5, R0
00000790: EB000135    ;     bl malloc
00000794: E1A04000    ;     mov R4, R0
00000798: E58F467C    ;     str R4, gridA
0000079C:             ; 
0000079C: E1A00005    ;     mov R0, R5
000007A0: EB000131    ;     bl malloc
000007A4: E58F0674    ;     str R0, gridB
000007A8:             ; 
000007A8: E3550000    ;     cmp R5, #0
000007AC: 0A00003A    ;     beq setupGridFail
000007B0: E3540000    ;     cmp R4, #0
000007B4: 0A000038    ;     beq setupGridFail
000007B8:             ; 
000007B8:             ;     ;;R4 holds the gridA addr
000007B8:             ;     ;;R6 holds the width
000007B8:             ;     ;;R7 holds the height
000007B8:             ; 
000007B8: E28F0002    ;     adrl R0, askgenoption
000007BC: E2800C0B    ; 
000007C0: EF000003    ;     swi 3
000007C4:             ; setupGridAsk
000007C4: EF000001    ;     swi 1
000007C8: E3800020    ;     orr R0, R0, #32
000007CC:             ; 
000007CC: E1A01000    ;     mov R1, R0
000007D0: EBFFFEB7    ;     bl newline
000007D4:             ; 
000007D4: E3510064    ;     cmp R1, #'d'
000007D8: 0A000005    ;     beq setupdrawing
000007DC:             ; 
000007DC: E3510072    ;     cmp R1, #'r'
000007E0: 0A000005    ;     beq setuprandom
000007E4:             ; 
000007E4: E28F000F    ;     adrl R0, setupGrdFailmsg
000007E8: E2800C0B    ; 
000007EC: EF000003    ;     swi 3
000007F0: EAFFFFF3    ;     b setupGridAsk
000007F4:             ; 
000007F4:             ; setupdrawing
000007F4: E3A09000    ;     mov R9, #0
000007F8: EA000006    ;     b setupstart
000007FC:             ; 
000007FC:             ; setuprandom
000007FC: E3A00000    ;     mov R0, #0
00000800: E3A01004    ;     mov R1, #4
00000804: E3A02001    ;     mov R2, #1
00000808: EBFFFF9D    ;     bl getstring
0000080C:             ; 
0000080C: E1A08000    ;     mov R8, R0
00000810:             ; 
00000810: EBFFFEA7    ;     bl newline
00000814:             ; 
00000814: E3A09001    ;     mov R9, #1
00000818:             ; 
00000818:             ; setupstart
00000818:             ; ;;This is probably not a good way to do it as there is more branching in the middle of a loop t
                      ; hat is executed alot
00000818:             ; ;;I'm doing it this way `not because it is easy, but because I though it would be easy`
00000818:             ; ;;Reduces the need for writing another loop :)
00000818:             ; ;;R9 holds the mode (1 for random, 0 for draw)
00000818:             ; ;;R8 will hold the seed for random
00000818:             ; ;;for row from 0 to height - 1
00000818:             ; ;;  for col from 0 to width - 1
00000818:             ; ;;      if (random)
00000818:             ; ;;          grid[row][col] = ((seed rol 1) || row) && 1
00000818:             ; ;;      else
00000818:             ; ;;          grid[row][col] = input() == 1
00000818: E3A05000    ;     mov R5, #0 ;; row
0000081C:             ; setuprowloop
0000081C: E1550007    ;     cmp R5, R7
00000820: 0A00001D    ;     beq setuprowlend
00000824:             ; 
00000824: E3A0A000    ;     mov R10, #0 ;;col
00000828:             ; setupcolloop
00000828: E15A0006    ;     cmp R10, R6
0000082C: 0A000018    ;     beq setupcollend
00000830:             ; 
00000830: E3590001    ;     cmp R9, #1
00000834: 0A000000    ;     beq dorandom
00000838: EA000004    ;     b dodraw
0000083C:             ; 
0000083C:             ; ;;dorandom and dodraw will get their value for this position and then place it in R2
0000083C:             ; ;;R3 is free at this point
0000083C:             ; dorandom
0000083C:             ;     ;;seed in R8
0000083C: E1A080E8    ;     mov R8, R8, ror #1
00000840: E00A3005    ;     and R3, R10, R5
00000844: E0288003    ;     eor R8, R8, R3
00000848: E2082001    ;     and R2, R8, #1
0000084C: EA000009    ;     b setupcollcont
00000850:             ; dodraw
00000850:             ;     ;;get input, validate 1 or 0
00000850:             ;     ;;if invalid print error loop back
00000850:             ;     ;;-_- I've just realised I want to print the grid each time as well R0-R3 are scratch
00000850: EF000001    ;     swi 1
00000854:             ; 
00000854: E3500031    ;     cmp R0, #'1'
00000858: 0A000005    ;     beq dodrawsucc
0000085C: E3500030    ;     cmp R0, #'0'
00000860: 0A000003    ;     beq dodrawsucc
00000864:             ; 
00000864: E28F0FC7    ;     adrl R0, drawfailmsg
00000868: E2800B02    ; 
0000086C: EF000003    ;     swi 3
00000870:             ; 
00000870: EAFFFFF6    ;     b dodraw
00000874:             ; 
00000874:             ; dodrawsucc
00000874: E2402030    ;     sub R2, R0, #48 ;;could be xor?
00000878:             ; 
00000878:             ; setupcollcont
00000878:             ;     ;;place the value in R2 into the grid[row][col]
00000878:             ;     ;;row * width + col
00000878:             ; 
00000878: E023A695    ;     mla R3, R5, R6, R10 ;;R3 = row * width + col
0000087C: E7C42003    ;     strb R2, [R4, R3] ;;grid offset by R3
00000880:             ; 
00000880: E3590000    ;     cmp R9, #0
00000884: 01A00004    ;     moveq R0, R4
00000888: 0B000005    ;     bleq drawgrid ;;print the new state of the grid if this is drawing mode
0000088C:             ; 
0000088C: E28AA001    ;     add R10, R10, #1
00000890: EAFFFFE4    ;     b setupcolloop
00000894:             ; setupcollend
00000894: E2855001    ;     add R5, R5, #1
00000898: EAFFFFDF    ;     b setuprowloop
0000089C:             ; setuprowlend
0000089C:             ;     ;;grid has been setup
0000089C:             ; 
0000089C:             ; setupGridFail
0000089C:             ; setupGridEnd
0000089C: E8BD47F0    ;     pop {R14, R4-R10}
000008A0: E1A0F00E    ;     mov R15, R14
000008A4:             ; 
000008A4:             ; 
000008A4:             ; ;;[[TODO]] the heap may not be blank (when heapclean is removed) and so need to 0 the mem. Mayb
                      ; e add option to malloc or add calloc (not the same)
000008A4:             ; drawgrid
000008A4:             ; ;;INP in R0 is the grid address to draw
000008A4:             ; 
000008A4:             ; ;;for row from 0 to height - 1
000008A4:             ; ;;  for col from 0 to width - 1
000008A4:             ; ;;      print('X' if grid[row][col] else '_')
000008A4:             ; ;;  print(newline)
000008A4:             ; ;;print(newline)
000008A4: E92D01F0    ;     push {R4-R8}
000008A8:             ; 
000008A8: E1A06000    ;     mov R6, R0
000008AC:             ; 
000008AC: E5DF4573    ;     ldrb R4, width
000008B0: E5DF5570    ;     ldrb R5, height
000008B4:             ; 
000008B4: E3A02000    ;     mov R2, #0 ;;row
000008B8:             ; drawgridrowloop
000008B8: E1520005    ;     cmp R2, R5
000008BC: 0A000011    ;     beq drawgridrowlend
000008C0:             ; 
000008C0: E3A01000    ;     mov R1, #0 ;;col
000008C4:             ; drawgridcolloop
000008C4: E1510004    ;     cmp R1, R4
000008C8: 0A000009    ;     beq drawgridcollend
000008CC:             ; 
000008CC: E0231492    ;     mla R3, R2, R4, R1 ;;R3 = row * width + col
000008D0: E7D63003    ;     ldrb R3, [R6, R3]
000008D4:             ; 
000008D4: E3530001    ;     cmp R3, #1
000008D8: 03A00058    ;     moveq R0, #'X'
000008DC: 13A0002D    ;     movne R0, #'-'
000008E0:             ; 
000008E0: EF000000    ;     swi 0
000008E4:             ; 
000008E4: E3A00020    ;     mov R0, #' '
000008E8: EF000000    ;     swi 0
000008EC:             ; 
000008EC: E2811001    ;     add R1, R1, #1
000008F0: EAFFFFF3    ;     b drawgridcolloop
000008F4:             ; 
000008F4:             ; drawgridcollend
000008F4: E3A01000    ;     mov R1, #0
000008F8: E2822001    ;     add R2, R2, #1
000008FC: E3A0000A    ;     mov R0, #10
00000900: EF000000    ;     swi 0
00000904: EAFFFFEB    ;     b drawgridrowloop
00000908:             ; 
00000908:             ; drawgridrowlend
00000908: E3A0000A    ;     mov R0, #10
0000090C: EF000000    ;     swi 0
00000910:             ; drawgridend
00000910: E8BD01F0    ;     pop {R4-R8}
00000914: E1A0F00E    ;     mov R15, R14
00000918:             ; 
00000918:             ; 
00000918:             ; setupOptions
00000918:             ; ;;INP in R0 is 1 if should ask for dims 0 for skip
00000918: E92D4010    ;     push {R14, R4}
0000091C: E1A04000    ;     mov R4, R0
00000920:             ; 
00000920: E28F0FD1    ;     adrl R0, askdefaults ;;ask q
00000924: E2800B01    ; 
00000928: EF000003    ;     swi 3
0000092C: EF000001    ;     swi 1   ;;get character answer
00000930: EF000000    ;     swi 0
00000934: E3500059    ;     cmp R0, #'Y'
00000938: E3A0000A    ;     ldr R0, =nl
0000093C: EF000000    ;     swi 0
00000940:             ; 
00000940: 1A00000E    ;     bne setupCustom
00000944:             ; 
00000944: E28F002A    ;     adrl R0, usingDefault
00000948: E2800C09    ; 
0000094C: EF000003    ;     swi 3
00000950:             ; 
00000950: E3A00000    ;     mov R0, #0
00000954: E5CF04C8    ;     strb R0, erase_b
00000958: E5CF04C5    ;     strb R0, slow_b
0000095C: E3A00001    ;     mov R0, #1
00000960: E5CF04BE    ;     strb R0, step_b
00000964:             ; 
00000964: E3540000    ;     cmp R4, #0
00000968: 0A000002    ;     beq setupOptionsDSkipDims
0000096C:             ; 
0000096C: E3A00012    ;     mov R0, #18
00000970: E5CF04AF    ;     strb R0, width
00000974: E5CF04AC    ;     strb R0, height
00000978:             ; 
00000978:             ; setupOptionsDSkipDims
00000978: E8BD4010    ;     pop {R14, R4}
0000097C: E1A0F00E    ;     mov R15, R14 ;;RET
00000980:             ; 
00000980:             ; setupCustom
00000980:             ; ;;ask for erase, slow, step, and conditionally dims
00000980:             ; 
00000980:             ; ;;ask step
00000980:             ; ;;ask erase
00000980:             ; ;;if (!step)
00000980:             ; ;;  if erase
00000980:             ; ;;      print(recommend slow)
00000980:             ; ;;  ask slow
00000980:             ; 
00000980: E3A01001    ;     mov R1, #1
00000984:             ; 
00000984: E28F0043    ;     adrl R0, askstep
00000988: E2800C07    ; 
0000098C: EF000003    ;     swi 3
00000990: EF000001    ;     swi 1
00000994: EF000000    ;     swi 0 
00000998: E3500059    ;     cmp R0, #'Y' 
0000099C: E3A0000A    ;     ldr R0, =nl
000009A0: EF000000    ;     swi 0
000009A4: 13A01000    ;     movne R1, #0
000009A8: E5CF1476    ;     strb R1, step_b
000009AC:             ; 
000009AC: E3A01001    ;     mov R1, #1
000009B0:             ; 
000009B0: E28F00E6    ;     adrl R0, askerase
000009B4: E2800C06    ; 
000009B8: EF000003    ;     swi 3
000009BC: EF000001    ;     swi 1
000009C0: EF000000    ;     swi 0
000009C4: E3500059    ;     cmp R0, #'Y'
000009C8: E3A0000A    ;     ldr R0, =nl
000009CC: EF000000    ;     swi 0
000009D0: 13A01000    ;     movne R1, #0
000009D4: E5CF1448    ;     strb R1, erase_b
000009D8:             ; 
000009D8: E5DF0446    ;     ldrb R0, step_b
000009DC: E3500001    ;     cmp R0, #1
000009E0: 0A00000F    ;     beq setupCustomskipslow
000009E4:             ; 
000009E4: E3510001    ;     cmp R1, #1 ;;if erase is on
000009E8: E28F0092    ;     adrl R0, warneraseslow
000009EC: E2800C07    ; 
000009F0: 0F000003    ;     swieq 3
000009F4:             ; 
000009F4: E3A01001    ;     mov R1, #1
000009F8:             ;  
000009F8: E28F00B7    ;     adrl R0, askslow
000009FC: E2800C06    ; 
00000A00: EF000003    ;     swi 3
00000A04: EF000001    ;     swi 1
00000A08: EF000000    ;     swi 0 
00000A0C: E3500059    ;     cmp R0, #'Y' 
00000A10: E3A0000A    ;     ldr R0, =nl
00000A14: EF000000    ;     swi 0
00000A18: 13A01000    ;     movne R1, #0
00000A1C: E5CF1401    ;     strb R1, slow_b
00000A20:             ; 
00000A20: EA000001    ;     b setupCustomDimsCheck
00000A24:             ; 
00000A24:             ; setupCustomskipslow
00000A24: E3A00000    ;     mov R0, #0
00000A28: E5CF03F5    ;     strb R0, slow_b
00000A2C:             ; 
00000A2C:             ; setupCustomDimsCheck
00000A2C: E3540000    ;     cmp R4, #0
00000A30: 0A00002F    ;     beq customend
00000A34:             ; 
00000A34: E28F0FE1    ;     adrl R0, askwid
00000A38: E2800B01    ; 
00000A3C: EF000003    ;     swi 3
00000A40:             ;     
00000A40:             ; getwid
00000A40: E3A0000A    ;     ldr R0, =enter
00000A44: E3A01002    ;     mov R1, #2
00000A48: E3A02001    ;     mov R2, #1
00000A4C: EBFFFF0C    ;     bl getstring
00000A50: E1A04000    ;     mov R4, R0
00000A54:             ; 
00000A54: EBFFFEC0    ;     bl strtoi
00000A58: E1A05000    ;     mov R5, R0
00000A5C:             ;     
00000A5C: E1A00004    ;     mov R0, R4
00000A60: EB0000AB    ;     bl free ;;free the collected string
00000A64:             ; 
00000A64: E1A01005    ;     mov R1, R5
00000A68:             ; 
00000A68: EBFFFE11    ;     bl newline
00000A6C:             ; 
00000A6C: E351001E    ;     cmp R1, #30
00000A70: CA000003    ;     bgt getwidFail
00000A74: E3510000    ;     cmp R1, #0
00000A78: DA000001    ;     ble getwidFail
00000A7C:             ; 
00000A7C: E5CF13A3    ;     strb R1, width
00000A80:             ; 
00000A80: EA000003    ;     b getheisetup
00000A84:             ; 
00000A84:             ; getwidFail
00000A84: E28F0071    ;     adrl R0, getwidfailmsg
00000A88: E2800C07    ; 
00000A8C: EF000003    ;     swi 3
00000A90:             ; 
00000A90: EAFFFFEA    ;     b getwid
00000A94:             ; 
00000A94:             ; getheisetup
00000A94: E28F0042    ;     adrl R0, askhei
00000A98: E2800C07    ; 
00000A9C: EF000003    ;     swi 3
00000AA0:             ; 
00000AA0:             ; gethei
00000AA0: E3A0000A    ;     ldr R0, =enter
00000AA4: E3A01002    ;     mov R1, #2
00000AA8: E3A02001    ;     mov R2, #1
00000AAC: EBFFFEF4    ;     bl getstring
00000AB0: E1A04000    ;     mov R4, R0
00000AB4:             ; 
00000AB4: EBFFFEA8    ;     bl strtoi
00000AB8: E1A05000    ;     mov R5, R0
00000ABC:             ; 
00000ABC: E1A00004    ;     mov R0, R4
00000AC0: EB000093    ;     bl free
00000AC4:             ; 
00000AC4: E1A01005    ;     mov R1, R5
00000AC8:             ; 
00000AC8: EBFFFDF9    ;     bl newline
00000ACC:             ; 
00000ACC: E351001E    ;     cmp R1, #30
00000AD0: CA000003    ;     bgt getheiFail
00000AD4: E3510000    ;     cmp R1, #0
00000AD8: DA000001    ;     ble getheiFail
00000ADC:             ; 
00000ADC: E5CF1344    ;     strb R1, height
00000AE0:             ; 
00000AE0: EA000003    ;     b customend
00000AE4:             ; 
00000AE4:             ; getheiFail
00000AE4: E28F004D    ;     adrl R0, getheifailmsg
00000AE8: E2800C07    ; 
00000AEC: EF000003    ;     swi 3
00000AF0:             ; 
00000AF0: EAFFFFEA    ;     b gethei
00000AF4:             ; 
00000AF4:             ; customend
00000AF4: E8BD4010    ;     pop {R14, R4}
00000AF8: E1A0F00E    ;     mov R15, R14 ;;RET
00000AFC:             ; 
00000AFC:             ; 
00000AFC:             ; updategrid
00000AFC:             ; ;;INP in R0 is the active grid
00000AFC:             ; ;;INP in R1 is the passive grid
00000AFC:             ; ;;passive grid is the one being updated based on the value in the activeGrid
00000AFC:             ; ;;RET --
00000AFC:             ; ;;for row from 0 to height - 1
00000AFC:             ; ;;  for col from 0 to width - 1
00000AFC:             ; ;;      int n = countNeighbours(activeGrid, row, col)
00000AFC:             ; ;;      int s = activeGrid[row][col]
00000AFC:             ; ;;      
00000AFC:             ; ;;      if (s == alive)
00000AFC:             ; ;;          passiveGrid[row][col] = n == 3 or n == 2
00000AFC:             ; ;;      else
00000AFC:             ; ;;          passiveGrid[row][col] = n == 3
00000AFC:             ; 
00000AFC:             ; ;;  R4 holds the row
00000AFC:             ; ;;  R5 holds the col
00000AFC:             ; ;;  R6 holds the width
00000AFC:             ; ;;  R7 holds the height
00000AFC:             ; ;;  R8 holds the active grid
00000AFC:             ; ;;  R9 holds the passive grid
00000AFC:             ; 
00000AFC: E92D47F0    ;     push {R14, R4-R10}
00000B00:             ; 
00000B00: E5DF631F    ;     ldrb R6, width
00000B04: E5DF731C    ;     ldrb R7, height
00000B08:             ; 
00000B08: E1A08000    ;     mov R8, R0
00000B0C: E1A09001    ;     mov R9, R1
00000B10:             ; 
00000B10: E3A04000    ;     mov R4, #0 ;;row
00000B14:             ; updategridrowloop
00000B14: E1540007    ;     cmp R4, R7
00000B18: 0A00001A    ;     beq updategridrowlend
00000B1C:             ; 
00000B1C: E3A05000    ;     mov R5, #0 ;;col
00000B20:             ; updategridcolloop
00000B20: E1550006    ;     cmp R5, R6
00000B24: 0A000014    ;     beq updategridccollend
00000B28:             ; 
00000B28: E1A00008    ;     mov R0, R8
00000B2C: E1A01004    ;     mov R1, R4
00000B30: E1A02005    ;     mov R2, R5
00000B34: EB000015    ;     bl countneighbours
00000B38:             ; 
00000B38: E0215694    ;     mla R1, R4, R6, R5 ;;R1 = row * width + col
00000B3C: E7D82001    ;     ldrb R2, [R8, R1] ;;grid[R1]
00000B40:             ;     ;;R0 holds the n count
00000B40: E3520000    ;     cmp R2, #0
00000B44: 0A000006    ;     beq updatedead
00000B48:             ; 
00000B48:             ; updatealive
00000B48: E3A03000    ;     mov R3, #0
00000B4C: E3500003    ;     cmp R0, #3
00000B50: 03A03001    ;     moveq R3, #1
00000B54: E3500002    ;     cmp R0, #2
00000B58: 03A03001    ;     moveq R3, #1
00000B5C: E7C93001    ;     strb R3, [R9, R1]
00000B60: EA000003    ;     b updatelcont
00000B64:             ; 
00000B64:             ; updatedead
00000B64: E3A03001    ;     mov R3, #1
00000B68: E3500003    ;     cmp R0, #3
00000B6C: 13A03000    ;     movne R3, #0
00000B70: E7C93001    ;     strb R3, [R9, R1]
00000B74:             ; 
00000B74:             ; updatelcont
00000B74: E2855001    ;     add R5, R5, #1
00000B78: EAFFFFE8    ;     b updategridcolloop
00000B7C:             ; 
00000B7C:             ; updategridccollend
00000B7C: E3A05000    ;     mov R5, #0
00000B80: E2844001    ;     add R4, R4, #1
00000B84: EAFFFFE2    ;     b updategridrowloop
00000B88:             ; 
00000B88:             ; updategridrowlend
00000B88:             ; updategridend
00000B88: E8BD47F0    ;     pop {R14, R4-R10}
00000B8C: E1A0F00E    ;     mov R15, R14
00000B90:             ; 
00000B90:             ; 
00000B90:             ; countneighbours
00000B90:             ; ;;INP in R0 is the activeGrid
00000B90:             ; ;;INP in R1 is the row
00000B90:             ; ;;INP in R2 is the col
00000B90:             ; ;;OUT in R0 is the number of neighbours
00000B90:             ; 
00000B90:             ; ;;offsets = [[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]]
00000B90:             ; ;;tot = 0
00000B90:             ; ;;for offset in offsets
00000B90:             ; ;;  if (isinrange(row + offset[0], col + offset[1]))
00000B90:             ; ;;      tot += grid[row + offset[0]][col + offset[1]]
00000B90:             ; ;;return tot
00000B90: E92D4FF0    ;     push {R14, R4-R11} ;;I used the fp before I knew it wasn't a general purpose one, its fine 
                      ; in this context anyway
00000B94:             ; 
00000B94: E28F4D09    ;     adrl R4, offsets ;;holds the offset
00000B98:             ; 
00000B98: E1A07000    ;     mov R7, R0
00000B9C: E1A08001    ;     mov R8, R1
00000BA0: E1A09002    ;     mov R9, R2
00000BA4: E3A0A000    ;     mov R10, #0 ;;R10 holds the total
00000BA8: E5DFB277    ;     ldrb R11, width;;R11 holds the width of the grid
00000BAC:             ; 
00000BAC: E3A03000    ;     mov R3, #0
00000BB0:             ; 
00000BB0:             ; countneighboursloop
00000BB0: E3530008    ;     cmp R3, #8 ;;change this ccheck to be for R4
00000BB4: 0A00000F    ;     beq countneighbourslend
00000BB8:             ; 
00000BB8: E4945004    ;     ldr R5, [R4], #4
00000BBC: E4946004    ;     ldr R6, [R4], #4
00000BC0:             ; 
00000BC0: E0880005    ;     add R0, R8, R5
00000BC4: E0891006    ;     add R1, R9, R6
00000BC8:             ; 
00000BC8: E2833001    ;     add R3, R3, #1
00000BCC:             ; 
00000BCC: E92D0008    ;     push {R3} ;;I should probably be using a local var on the stack, but I don't yet know how t
                      ; o setup a stack frame properly
00000BD0: EB00000B    ;     bl isinrange
00000BD4: E8BD0008    ;     pop {R3}
00000BD8:             ; 
00000BD8: E3500000    ;     cmp R0, #0
00000BDC: 0A000004    ;     beq countneighboursskipadd
00000BE0:             ; 
00000BE0: E0880005    ;     add R0, R8, R5 ;;new row
00000BE4: E0891006    ;     add R1, R9, R6 ;;new col ;;can assume that R0, R1 haven't changed as isinrange doesn't edit
                      ;  them, but I'm going to for now
00000BE8:             ; 
00000BE8: E0201B90    ;     mla R0, R0, R11, R1 ;;find offset
00000BEC: E7D70000    ;     ldrb R0, [R7, R0]
00000BF0: E08AA000    ;     add R10, R10, R0 ;;tot += grid[newrow][newcol]
00000BF4:             ; 
00000BF4:             ; countneighboursskipadd
00000BF4: EAFFFFED    ;     b countneighboursloop
00000BF8:             ; 
00000BF8:             ; countneighbourslend
00000BF8:             ; countneighboursend
00000BF8: E1A0000A    ;     mov R0, R10
00000BFC: E8BD4FF0    ;     pop {R14, R4-R11}
00000C00: E1A0F00E    ;     mov R15, R14
00000C04:             ; 
00000C04:             ; 
00000C04:             ; isinrange
00000C04:             ; ;;INP in R0 is the row
00000C04:             ; ;;INP in R1 is the col
00000C04:             ; ;;Uses defined width and height
00000C04:             ; ;;RET in R0 is 1 if is in range else 0
00000C04: E3A02001    ;     mov R2, #1 ;;is valid unless...
00000C08:             ; 
00000C08: E3500000    ;     cmp R0, #0
00000C0C: BA000009    ;     blt isinrangefail
00000C10:             ; 
00000C10: E3510000    ;     cmp R1, #0
00000C14: BA000007    ;     blt isinrangefail
00000C18:             ; 
00000C18: E5DF3207    ;     ldrb R3, width
00000C1C: E1510003    ;     cmp R1, R3
00000C20: AA000004    ;     bge isinrangefail
00000C24:             ; 
00000C24: E5DF31FC    ;     ldrb R3, height
00000C28: E1500003    ;     cmp R0, R3
00000C2C: AA000001    ;     bge isinrangefail
00000C30:             ; 
00000C30: E3A00001    ;     mov R0, #1
00000C34: EA000000    ;     b isinrangeend
00000C38:             ; 
00000C38:             ; isinrangefail
00000C38: E3A00000    ;     mov R0, #0
00000C3C:             ; 
00000C3C:             ; isinrangeend
00000C3C: E1A0F00E    ;     mov R15, R14
00000C40:             ; 
00000C40:             ; 
00000C40:             ; ;; The heap will be a linked list of free blocks - unlike the Comodo version which stores both 
                      ; free & taken blocks 
00000C40:             ; ;; This is an idea I'm stealing from the C programming book
00000C40:             ; ;; Crate structure
00000C40:             ; ;;  |-ptr to next crate (1 word)
00000C40:             ; ;;  |-ptr to prev crate (1 word)
00000C40:             ; ;;  `-Size (bytes)      (1 word)
00000C40:             ; ;; 
00000C40:             ; 
00000C40:             ; ;;  Traversal of the heap
00000C40:             ; ;;  Unlink in my Comodo implimentation the heap is not a linked list of all Crates (free or not
                      ; )
00000C40:             ; ;;  That made traversing the heap for debugging purposes very easy, in this case taken crates d
                      ; o not point to the next
00000C40:             ; ;;  Instead could start at head and then just go to addr + sizeof(Crate) + size. This should ta
                      ; ke us to the next crate, free or not
00000C40:             ; ;;  
00000C40:             ; setupHeap
00000C40:             ; ;;NO INP
00000C40:             ; ;;NO OUT
00000C40:             ;     ;;we have the heapstart
00000C40:             ;     ;;the end of the heap will be 0x100000 (it will overlap with the stack :) )
00000C40: E59F0190    ;     ldr R0, heaphead ;;stores the mem addr of the start of the heap
00000C44: E3A01601    ;     ldr R1, =max_addr ;;stores the end of the heap
00000C48: E3A02801    ;     ldr R2, =stack_size
00000C4C: E0411002    ;     sub R1, R1, R2
00000C50:             ; 
00000C50: E0411000    ;     sub R1, R1, R0  ;;HEAPEND - HEAPSTART = TOTAL STORAGE (bytes)
00000C54: E241100C    ;     sub R1, R1, #12 ;;SIZE -= SIZEOF(CRATE) (12 bytes)
00000C58: E5801008    ;     str R1, [R0, #8] ;;set the size of the crate
00000C5C: E3A01000    ;     mov R1, #0
00000C60: E5801004    ;     str R1, [R0, #4] ;;set the prev ptr
00000C64: E5801000    ;     str R1, [R0, #0] ;;set the next ptr
00000C68:             ; 
00000C68: E1A0F00E    ;     mov R15, R14
00000C6C:             ; 
00000C6C:             ; ;; The heap is a linked list of free Crates and so find the header and then go though until one
                      ;  satifies the size requirement
00000C6C:             ; ;;  end if next is 0
00000C6C:             ; ;;  once found either take over the crate or split it into two new crates
00000C6C:             ; ;;  align the bytes amount to 8 byte boundry
00000C6C:             ; malloc
00000C6C:             ; ;;INP into R0 bytes to allocate
00000C6C:             ; ;;OUT into R0 the ptr to the memory or 0 for no memory allocated
00000C6C:             ;     ;;step 1 align the bytes
00000C6C:             ;     ;;1001010 & 0111 = 0000010 ;2
00000C6C:             ;     ;;if 0 goto alignend
00000C6C:             ;     ;;1001010 + (8 - 2)
00000C6C: E92D0010    ;     push {R4}
00000C70:             ; 
00000C70: E2001007    ;     and R1, R0, #0b0111
00000C74: E3510000    ;     cmp R1, #0
00000C78: 0A000002    ;     beq mallignend
00000C7C: E3A03008    ;     mov R3, #0b1000
00000C80: E0432001    ;     sub R2, R3, R1
00000C84: E0800002    ;     add R0, R0, R2
00000C88:             ; 
00000C88:             ; mallignend
00000C88: E59F1148    ;     ldr R1, heaphead ;;stores a ptr to the first block
00000C8C:             ;     
00000C8C:             ; checkcrate
00000C8C: E5912008    ;     ldr R2, [R1, #8] ;;Size of the crate
00000C90: E1500002    ;     cmp R0, R2 ;;bytes needed - bytes in crate
00000C94: DA000006    ;     ble foundcrate
00000C98: E5912000    ;     ldr R2, [R1, #0] ;;get the next ptr
00000C9C: E3520000    ;     cmp R2, #0
00000CA0: 0A000001    ;     beq nocrates
00000CA4: E1A01002    ;     mov R1, R2 ;;swap the current crate with the next crate
00000CA8: EAFFFFF7    ;     b checkcrate
00000CAC:             ; nocrates
00000CAC: E3A00000    ;     mov R0, #0
00000CB0: EA000015    ;     b mallocEnd
00000CB4:             ; 
00000CB4:             ; foundcrate
00000CB4:             ;     ;;Once a crate that we can use has been found we need to either split the crate or use the 
                      ; crate
00000CB4:             ;     ;;We should use the whole crate only when its size < bytesneeded + CrateHeader + 8
00000CB4:             ;     ;;This would give the edge case crate 8 bytes
00000CB4:             ;     
00000CB4:             ;     ;;R1 holds the found crate ptr
00000CB4:             ;     ;;R0 is the bytes requested and aligned
00000CB4: E2802014    ;     add R2, R0, #20 ;;A crate header is 12 bytes + the extra 8 bytes minimum
00000CB8: E5913008    ;     ldr R3, [R1, #8]
00000CBC: E1530002    ;     cmp R3, R2
00000CC0: BA00000C    ;     blt usecrate
00000CC4:             ; splitcrate
00000CC4:             ;     ;;In this case we have a large crate that should be split up.
00000CC4:             ;     ;;ATM the crate will just be split up to where the requested memory is at the end of the fr
                      ; ee Crate.
00000CC4:             ; 
00000CC4: E5913008    ;     ldr R3, [R1, #8] ;;The size of the toSplit Crate
00000CC8: E0433000    ;     sub R3, R3, R0 ;; size - bytesRequested
00000CCC: E243300C    ;     sub R3, R3, #12 ;; size - bytesRequested - sizeof(Crate)
00000CD0: E5813008    ;     str R3, [R1, #8] ;;toSplit->size = newSize
00000CD4:             ; 
00000CD4: E0833001    ;     add R3, R3, R1 ;; newSize + toSplit.addr
00000CD8: E283400C    ;     add R4, R3, #12 ;; newSize + toSplit.addr + sizeof(Crate) = position of new Crate
00000CDC:             ; 
00000CDC:             ;     ;;Setup the header for the newCrate
00000CDC: E3A02000    ;     mov R2, #0
00000CE0: E5842000    ;     str R2, [R4, #0] ;;next = 0
00000CE4: E5842004    ;     str R2, [R4, #4] ;;prev = 0
00000CE8: E5840008    ;     str R0, [R4, #8] ;;size = requested and aligned
00000CEC:             ; 
00000CEC:             ;     ;;MAYBE: can the crates that are taken have a smaller header than those that are free. Take
                      ; n crates need not store the next, prev free nodes
00000CEC:             ;     ;;This may complicate things as size would need to be moved around and the size from taken 
                      ; to free would be different. 
00000CEC:             ; 
00000CEC: E284400C    ;     add R4, R4, #12
00000CF0:             ; 
00000CF0: E1A00004    ;     mov R0, R4
00000CF4:             ; 
00000CF4: EA000004    ;     b mallocEnd
00000CF8:             ; 
00000CF8:             ; usecrate
00000CF8:             ;     ;; Simplest option as we can just remove it from the list
00000CF8:             ;     ;; c1 <-> c2 <-> c3 ==> c1 <-> c3
00000CF8: E5912000    ;     ldr R2, [R1, #0] ;;next ptr
00000CFC: E5913004    ;     ldr R3, [R1, #4] ;;prev ptr
00000D00: E5823004    ;     str R3, [R2, #4] ;;Store c1 into c3's previous
00000D04: E5832000    ;     str R2, [R3, #0] ;;Store c3 into c1's next
00000D08:             ; 
00000D08: E1A00001    ;     mov R0, R1 ;;move the found crate's address into the return register ;;The crate header is 
                      ; no longer needed
00000D0C:             ; 
00000D0C:             ; mallocEnd
00000D0C: E8BD0010    ;     pop {R4}
00000D10: E1A0F00E    ;     mov R15, R14
00000D14:             ; 
00000D14:             ; free
00000D14:             ; ;;INP in R0 is the mem addr of the data to be freed
00000D14:             ; ;;OUT in R0 is the success code - 0 for mem freed, ¬0 for error ;;probably won't be currently 
                      ; used `=(- -)=' 
00000D14:             ;     ;;In order to free memory we need to add it back to the linked list
00000D14:             ;     ;;Following K&R's version the linked list will be ordered by address this will make finding
                      ;  consecutive memory locations that should be combined easier
00000D14:             ; 
00000D14:             ;     ;;The inputted address of the crate is the address given in malloc and so the start of the 
                      ; crate is that addr - sizeof(Crate) (#12)
00000D14:             ; 
00000D14:             ;     ;;heapHead = first Crate
00000D14:             ;     ;;current = heapHead
00000D14:             ;     ;;while (toFree.addr > current.addr)
00000D14:             ;     ;;  current = current.next
00000D14:             ;     ;;
00000D14:             ;     ;;//Add the toFree Crate inbetween the current and its previous i.e.  A<->B<->C, toFree = D
                      ;  (addr < C, addr > B) ==> A<->B<->D<->C
00000D14:             ;     ;;current->prev->next = toFree
00000D14:             ;     ;;toFree->prev = current.prev
00000D14:             ;     ;;current->prev = toFree
00000D14:             ;     ;;toFree->next = current
00000D14:             ; 
00000D14:             ;     ;; Crate structure
00000D14:             ;     ;;  |-ptr to next crate (1 word)
00000D14:             ;     ;;  |-ptr to prev crate (1 word)
00000D14:             ;     ;;  `-Size (bytes)      (1 word)
00000D14:             ; 
00000D14: E92D01F0    ;     push {R4-R8}
00000D18:             ; 
00000D18: E59F10B8    ;     ldr R1, heaphead ;;R1 will hold the current
00000D1C: E240000C    ;     sub R0, R0, #12 ;;subtract sizeof(Crate) to get header pointer
00000D20:             ; freeloop
00000D20: E5912000    ;     ldr R2, [R1, #0] ;;load the ptr to the next
00000D24: E1520000    ;     cmp R2, R0 ;;compare the address of the toFree to the address of current->next
00000D28:             ; 
00000D28: AA000003    ;     bge freelend ;;current->next.addr >= toFree.addr
00000D2C:             ; 
00000D2C: E3520000    ;     cmp R2, #0 ;;If there are no more Crates to the right then this could be a new Crate at the
                      ;  end or |F|T| it should merge left 
00000D30: 0A000009    ;     beq freelendEnd
00000D34:             ; 
00000D34: E1A01002    ;     mov R1, R2 ;;current = current.next
00000D38:             ; 
00000D38: EAFFFFF8    ;     b freeloop
00000D3C:             ; 
00000D3C:             ; freelend
00000D3C:             ;     ;; R1 holds the current (left)
00000D3C:             ;     ;; R2 holds the c->next (right)
00000D3C: E5912000    ;     ldr R2, [R1, #0]
00000D40:             ; 
00000D40:             ;     ;;Setup the ptrs for the crates this will help later on   left<->toFree<->right ;;left,righ
                      ; t can be 0
00000D40:             ;     ;;We're just adding the new crate to the linked list
00000D40:             ;     ;;current->next->prev = toFree
00000D40:             ;     ;;toFree->next = current->next
00000D40:             ;     ;;current->next = toFree
00000D40:             ;     ;;toFree->prev = current
00000D40:             ; 
00000D40: E5913000    ;     ldr R3, [R1, #0] ;;holds current->next
00000D44: E3530000    ;     cmp R3, #0
00000D48: 15830004    ;     strne R0, [R3, #4] ;;current->next->prev = toFree
00000D4C: E5803000    ;     str R3, [R0, #0] ;;toFree->next = current->next
00000D50: E5810000    ;     str R0, [R1, #0] ;;current->next = toFree
00000D54: E5801004    ;     str R1, [R0, #4] ;;toFree->prev = current
00000D58:             ; 
00000D58: EA000001    ;     b freeMergeCheck
00000D5C:             ; 
00000D5C:             ; freelendEnd
00000D5C:             ; ;;If there are no more Crates to the right then this could be a new Crate at the end or |F|T| i
                      ; t should merge left 
00000D5C:             ; ;;Found a crate (current) that is to the left of the crate as we ran out of ->next ptrs
00000D5C:             ; ;;Need to set current->next = toFree
00000D5C:             ; ;;            toFree->prev = current
00000D5C: E5801004    ;     str R1, [R0, #4] ;;toFree->prev = current
00000D60: E5810000    ;     str R0, [R1, #0] ;;current->next = toFree
00000D64:             ; 
00000D64:             ; freeMergeCheck
00000D64:             ;     ;;We have a ptr to current. This should be the closest Crate to the left of toFree
00000D64:             ;     ;;We also have the next Crate (null or not) which is to the right of toFree
00000D64:             ;     ;;Both of these crates MAY need to be merged but could also have taken crates in between
00000D64:             ;     ;;First is to check if the crates are adjacent
00000D64:             ;     ;;  If they are NOT then create a newCrate
00000D64:             ;     ;;  If they are     then merge both
00000D64:             ;     ;;  If only one     then merge either left or right
00000D64:             ; 
00000D64:             ;     ;;R1 will be left
00000D64:             ;     ;;R2 will be right
00000D64:             ; 
00000D64: E3510000    ;     cmp R1, #0
00000D68: 01A01000    ;     moveq R1, R0 ;;If there is no left crate then left=toFree
00000D6C: E3520000    ;     cmp R2, #0
00000D70: 01A02000    ;     moveq R2, R0 ;;If there is no right crate (more likely) then right=toFree
00000D74:             ; 
00000D74:             ; verifyLeft
00000D74:             ;     ;;Check if the left is adjacent
00000D74:             ;     ;;It will be if (left.addr + sizeof(Crate) + left.size == toFree.addr)
00000D74:             ; 
00000D74: E5913008    ;     ldr R3, [R1, #8]
00000D78: E283300C    ;     add R3, R3, #12 ;;12 is sizeof(Crate) + toFree.size
00000D7C: E0833001    ;     add R3, R3, R1 ;;left.addr + left->size ??
00000D80:             ; 
00000D80: E1530000    ;     cmp R3, R0
00000D84: 11A01000    ;     movne R1, R0
00000D88:             ; 
00000D88:             ; verifyRight
00000D88:             ;     ;;Going from toFree to Right
00000D88: E5903008    ;     ldr R3, [R0, #8] ;;get size of toFree
00000D8C: E283300C    ;     add R3, R3, #12 ;;12 is sizeof(Crate) + toFree.size
00000D90: E0833000    ;     add R3, R3, R0 ;; + toFree.addr
00000D94:             ; 
00000D94: E1530002    ;     cmp R3, R2
00000D98: 11A02000    ;     movne R2, R0
00000D9C:             ; 
00000D9C:             ; merge
00000D9C:             ;     ;;Merge the two Crates given in R1 and R2
00000D9C:             ;     ;;left can be (left) or (toFree)
00000D9C:             ;     ;;right can be (right) or (toFree)
00000D9C:             ;     ;;If left == right: don't merge; create new Crate
00000D9C:             ;     ;;If left != right: then add to left's size
00000D9C:             ; 
00000D9C: E1510002    ;     cmp R1, R2
00000DA0: 0A00000A    ;     beq mergeNew
00000DA4:             ; 
00000DA4:             ;     ;;The new size is right.addr - left.addr + right->size    from right.addr - left.addr - siz
                      ; eof(Crate) + sizeof(Crate) + right->size
00000DA4:             ;     ;;                                                               |left      |right
00000DA4:             ;     ;;                                                               |<12>|size||<12>|size|
00000DA4:             ;     ;;
00000DA4:             ;     ;;                                                               |left      
00000DA4:             ;     ;;                                                               |<12>|size           |
00000DA4:             ;     ;;
00000DA4:             ;     ;;I'm doing it this way as the left and right may not be contiguous i.e. if toFree has a fr
                      ; ee crate on either side
00000DA4:             ; 
00000DA4: E0423001    ;     sub R3, R2, R1
00000DA8: E5924008    ;     ldr R4, [R2, #8]
00000DAC: E0833004    ;     add R3, R3, R4
00000DB0: E5813008    ;     str R3, [R1, #8]
00000DB4:             ; 
00000DB4:             ;     ;;Time to switch some ptrs
00000DB4:             ;     ;;Current state left.prev<->left<->right<->right.next (with left or right = toFree) or left
                      ; .prev<->left<->toFree<->right<->right.next
00000DB4:             ;     ;;New state would be left.prev<->left<->right.next (with left or right = toFree) or left.pr
                      ; ev<->left<->right.next
00000DB4:             ;     ;;Both cases end the same, so get right.next. These could be 0 but it doesn't matter
00000DB4:             ;     ;;Next need to change the prev and next ptrs for adjacent Crates
00000DB4:             ;     ;;i.e. right->next->prev = left
00000DB4:             ; 
00000DB4: E5924000    ;     ldr R4, [R2, #0] ;;right->next
00000DB8: E1540001    ;     cmp R4, R1
00000DBC: 15814000    ;     strne R4, [R1, #0] ;;left->next = right->next
00000DC0: 13A04000    ;     movne R4, #0
00000DC4: 15814000    ;     strne R4, [R1, #0]
00000DC8:             ; 
00000DC8: E3540000    ;     cmp R4, #0
00000DCC: 15841004    ;     strne R1, [R4, #4] ;;right->next->prev = left
00000DD0:             ; 
00000DD0:             ; mergeNew
00000DD0:             ;     ;;The crate has already been setup with its ptrs and had its size as well so don't need to 
                      ; do anything
00000DD0:             ; 
00000DD0:             ; freeEnd
00000DD0: E8BD01F0    ;     pop {R4-R8}
00000DD4: E1A0F00E    ;     mov R15, R14
00000DD8:             ; 
00000DD8:             ; align
00000DD8:             ; ;;Integer defs
00000DD8: 00010000    ; heaphead        defw 0x10000 ;;default start changed to addr of heapstart
00000DDC: FFFFFFFF    ; offsets         defw -1,-1,-1,0,-1,1,0,-1,0,1,1,-1,1,0,1,1 ;;[[-1,-1],[-1,0],[-1,1],[0,-1],[0,1
00000DE0: FFFFFFFF    ; ],[1,-1],[1,0],[1,1]]
00000DE4: FFFFFFFF    ; 
00000DE8: 00000000    ; 
00000DEC: FFFFFFFF    ; 
00000DF0: 00000001    ; 
00000DF4: 00000000    ; 
00000DF8: FFFFFFFF    ; 
00000DFC: 00000000    ; 
00000E00: 00000001    ; 
00000E04: 00000001    ; 
00000E08: FFFFFFFF    ; 
00000E0C: 00000001    ; 
00000E10: 00000000    ; 
00000E14: 00000001    ; 
00000E18: 00000001    ; 
00000E1C:             ; 
00000E1C:             ; ;;Grid addresses
00000E1C: 00000000    ; gridA           defw 0
00000E20: 00000000    ; gridB           defw 0
00000E24:             ; 
00000E24:             ; ;;options
00000E24: 00          ; erase_b         defb 0
00000E25: 00          ; slow_b          defb 0
00000E26: 00          ; step_b          defb 0
00000E27: 12          ; width           defb 18
00000E28: 12          ; height          defb 18
00000E29:             ; 
00000E29:             ; ;;String defs -- The naming scheme is bad :(
00000E29: 2D 2D 2D 2D ; welcomemsg      defb "-----------Welcome to JCGOL in ARM32-----------", nl, 0
00000E2D: 2D 2D 2D 2D ; 
00000E31: 2D 2D 2D 57 ; 
00000E35: 65 6C 63 6F ; 
00000E39: 6D 65 20 74 ; 
00000E3D: 6F 20 4A 43 ; 
00000E41: 47 4F 4C 20 ; 
00000E45: 69 6E 20 41 ; 
00000E49: 52 4D 33 32 ; 
00000E4D: 2D 2D 2D 2D ; 
00000E51: 2D 2D 2D 2D ; 
00000E55: 2D 2D 2D 0A ; 
00000E59: 00          ; 
00000E5A: 54 6F 20 73 ; welcome2msg     defb "To start a new board press n\nTo load a saved board press l\nTo quit pres
00000E5E: 74 61 72 74 ; s q", nl, 0
00000E62: 20 61 20 6E ; 
00000E66: 65 77 20 62 ; 
00000E6A: 6F 61 72 64 ; 
00000E6E: 20 70 72 65 ; 
00000E72: 73 73 20 6E ; 
00000E76: 0A 54 6F 20 ; 
00000E7A: 6C 6F 61 64 ; 
00000E7E: 20 61 20 73 ; 
00000E82: 61 76 65 64 ; 
00000E86: 20 62 6F 61 ; 
00000E8A: 72 64 20 70 ; 
00000E8E: 72 65 73 73 ; 
00000E92: 20 6C 0A 54 ; 
00000E96: 6F 20 71 75 ; 
00000E9A: 69 74 20 70 ; 
00000E9E: 72 65 73 73 ; 
00000EA2: 20 71 0A 00 ; 
00000EA6: 49 6E 76 61 ; mainchoicefail  defb "Invalid choice please enter 'n' for new board or 'l' for load a board or 
00000EAA: 6C 69 64 20 ; 'q' to close. Not cases sensative", nl, 0
00000EAE: 63 68 6F 69 ; 
00000EB2: 63 65 20 70 ; 
00000EB6: 6C 65 61 73 ; 
00000EBA: 65 20 65 6E ; 
00000EBE: 74 65 72 20 ; 
00000EC2: 27 6E 27 20 ; 
00000EC6: 66 6F 72 20 ; 
00000ECA: 6E 65 77 20 ; 
00000ECE: 62 6F 61 72 ; 
00000ED2: 64 20 6F 72 ; 
00000ED6: 20 27 6C 27 ; 
00000EDA: 20 66 6F 72 ; 
00000EDE: 20 6C 6F 61 ; 
00000EE2: 64 20 61 20 ; 
00000EE6: 62 6F 61 72 ; 
00000EEA: 64 20 6F 72 ; 
00000EEE: 20 27 71 27 ; 
00000EF2: 20 74 6F 20 ; 
00000EF6: 63 6C 6F 73 ; 
00000EFA: 65 2E 20 4E ; 
00000EFE: 6F 74 20 63 ; 
00000F02: 61 73 65 73 ; 
00000F06: 20 73 65 6E ; 
00000F0A: 73 61 74 69 ; 
00000F0E: 76 65 0A 00 ; 
00000F12: 53 6C 6F 77 ; helpmsg         defb "Slow mode will create a pause between each grid print to make it more rea
00000F16: 20 6D 6F 64 ; dable - can't use with step mode\nErase mode will erase the previous board before printing the 
00000F1A: 65 20 77 69 ; next - [is 2x slower]\n", 0
00000F1E: 6C 6C 20 63 ; 
00000F22: 72 65 61 74 ; 
00000F26: 65 20 61 20 ; 
00000F2A: 70 61 75 73 ; 
00000F2E: 65 20 62 65 ; 
00000F32: 74 77 65 65 ; 
00000F36: 6E 20 65 61 ; 
00000F3A: 63 68 20 67 ; 
00000F3E: 72 69 64 20 ; 
00000F42: 70 72 69 6E ; 
00000F46: 74 20 74 6F ; 
00000F4A: 20 6D 61 6B ; 
00000F4E: 65 20 69 74 ; 
00000F52: 20 6D 6F 72 ; 
00000F56: 65 20 72 65 ; 
00000F5A: 61 64 61 62 ; 
00000F5E: 6C 65 20 2D ; 
00000F62: 20 63 61 6E ; 
00000F66: 27 74 20 75 ; 
00000F6A: 73 65 20 77 ; 
00000F6E: 69 74 68 20 ; 
00000F72: 73 74 65 70 ; 
00000F76: 20 6D 6F 64 ; 
00000F7A: 65 0A 45 72 ; 
00000F7E: 61 73 65 20 ; 
00000F82: 6D 6F 64 65 ; 
00000F86: 20 77 69 6C ; 
00000F8A: 6C 20 65 72 ; 
00000F8E: 61 73 65 20 ; 
00000F92: 74 68 65 20 ; 
00000F96: 70 72 65 76 ; 
00000F9A: 69 6F 75 73 ; 
00000F9E: 20 62 6F 61 ; 
00000FA2: 72 64 20 62 ; 
00000FA6: 65 66 6F 72 ; 
00000FAA: 65 20 70 72 ; 
00000FAE: 69 6E 74 69 ; 
00000FB2: 6E 67 20 74 ; 
00000FB6: 68 65 20 6E ; 
00000FBA: 65 78 74 20 ; 
00000FBE: 2D 20 5B 69 ; 
00000FC2: 73 20 32 78 ; 
00000FC6: 20 73 6C 6F ; 
00000FCA: 77 65 72 5D ; 
00000FCE: 0A 00       ; 
00000FD0: 53 69 6E 67 ; help2msg        defb "Single step mode will prompt for input each time a grid is drawn, you can
00000FD4: 6C 65 20 73 ;  (s)ave the current state or (q)uit to menu", 0
00000FD8: 74 65 70 20 ; 
00000FDC: 6D 6F 64 65 ; 
00000FE0: 20 77 69 6C ; 
00000FE4: 6C 20 70 72 ; 
00000FE8: 6F 6D 70 74 ; 
00000FEC: 20 66 6F 72 ; 
00000FF0: 20 69 6E 70 ; 
00000FF4: 75 74 20 65 ; 
00000FF8: 61 63 68 20 ; 
00000FFC: 74 69 6D 65 ; 
00001000: 20 61 20 67 ; 
00001004: 72 69 64 20 ; 
00001008: 69 73 20 64 ; 
0000100C: 72 61 77 6E ; 
00001010: 2C 20 79 6F ; 
00001014: 75 20 63 61 ; 
00001018: 6E 20 28 73 ; 
0000101C: 29 61 76 65 ; 
00001020: 20 74 68 65 ; 
00001024: 20 63 75 72 ; 
00001028: 72 65 6E 74 ; 
0000102C: 20 73 74 61 ; 
00001030: 74 65 20 6F ; 
00001034: 72 20 28 71 ; 
00001038: 29 75 69 74 ; 
0000103C: 20 74 6F 20 ; 
00001040: 6D 65 6E 75 ; 
00001044: 00          ; 
00001045: 54 68 61 6E ; mainendmsg      defb "Thank you for playing JCGOL for ARM32", nl, 0
00001049: 6B 20 79 6F ; 
0000104D: 75 20 66 6F ; 
00001051: 72 20 70 6C ; 
00001055: 61 79 69 6E ; 
00001059: 67 20 4A 43 ; 
0000105D: 47 4F 4C 20 ; 
00001061: 66 6F 72 20 ; 
00001065: 41 52 4D 33 ; 
00001069: 32 0A 00    ; 
0000106C: 57 6F 75 6C ; askdefaults     defb "Would you like to use the default settings? Y/n: ", 0
00001070: 64 20 79 6F ; 
00001074: 75 20 6C 69 ; 
00001078: 6B 65 20 74 ; 
0000107C: 6F 20 75 73 ; 
00001080: 65 20 74 68 ; 
00001084: 65 20 64 65 ; 
00001088: 66 61 75 6C ; 
0000108C: 74 20 73 65 ; 
00001090: 74 74 69 6E ; 
00001094: 67 73 3F 20 ; 
00001098: 59 2F 6E 3A ; 
0000109C: 20 00       ; 
0000109E: 45 6E 61 62 ; askerase        defb "Enable erase mode? Y/n: ", 0
000010A2: 6C 65 20 65 ; 
000010A6: 72 61 73 65 ; 
000010AA: 20 6D 6F 64 ; 
000010AE: 65 3F 20 59 ; 
000010B2: 2F 6E 3A 20 ; 
000010B6: 00          ; 
000010B7: 45 6E 61 62 ; askslow         defb "Enable slow mode? Y/n: ", 0
000010BB: 6C 65 20 73 ; 
000010BF: 6C 6F 77 20 ; 
000010C3: 6D 6F 64 65 ; 
000010C7: 3F 20 59 2F ; 
000010CB: 6E 3A 20 00 ; 
000010CF: 45 6E 61 62 ; askstep         defb "Enable step mode? Y/n: ", 0
000010D3: 6C 65 20 73 ; 
000010D7: 74 65 70 20 ; 
000010DB: 6D 6F 64 65 ; 
000010DF: 3F 20 59 2F ; 
000010E3: 6E 3A 20 00 ; 
000010E7: 43 61 6E 6E ; stepslowwarning defb "Cannot have slow and step mode active at the same time, disabling slow mo
000010EB: 6F 74 20 68 ; de", nl, 0
000010EF: 61 76 65 20 ; 
000010F3: 73 6C 6F 77 ; 
000010F7: 20 61 6E 64 ; 
000010FB: 20 73 74 65 ; 
000010FF: 70 20 6D 6F ; 
00001103: 64 65 20 61 ; 
00001107: 63 74 69 76 ; 
0000110B: 65 20 61 74 ; 
0000110F: 20 74 68 65 ; 
00001113: 20 73 61 6D ; 
00001117: 65 20 74 69 ; 
0000111B: 6D 65 2C 20 ; 
0000111F: 64 69 73 61 ; 
00001123: 62 6C 69 6E ; 
00001127: 67 20 73 6C ; 
0000112B: 6F 77 20 6D ; 
0000112F: 6F 64 65 0A ; 
00001133: 00          ; 
00001134: 52 65 74 75 ; savedchoice     defb "Return to menu? (n for continue sim) Y/n: ", 0
00001138: 72 6E 20 74 ; 
0000113C: 6F 20 6D 65 ; 
00001140: 6E 75 3F 20 ; 
00001144: 28 6E 20 66 ; 
00001148: 6F 72 20 63 ; 
0000114C: 6F 6E 74 69 ; 
00001150: 6E 75 65 20 ; 
00001154: 73 69 6D 29 ; 
00001158: 20 59 2F 6E ; 
0000115C: 3A 20 00    ; 
0000115F: 50 6C 65 61 ; askname         defb "Please enter a name for the grid: ", 0
00001163: 73 65 20 65 ; 
00001167: 6E 74 65 72 ; 
0000116B: 20 61 20 6E ; 
0000116F: 61 6D 65 20 ; 
00001173: 66 6F 72 20 ; 
00001177: 74 68 65 20 ; 
0000117B: 67 72 69 64 ; 
0000117F: 3A 20 00    ; 
00001182: 45 72 61 73 ; warneraseslow   defb "Erase mode is active it is recommended to also use slow mode", nl, 0
00001186: 65 20 6D 6F ; 
0000118A: 64 65 20 69 ; 
0000118E: 73 20 61 63 ; 
00001192: 74 69 76 65 ; 
00001196: 20 69 74 20 ; 
0000119A: 69 73 20 72 ; 
0000119E: 65 63 6F 6D ; 
000011A2: 6D 65 6E 64 ; 
000011A6: 65 64 20 74 ; 
000011AA: 6F 20 61 6C ; 
000011AE: 73 6F 20 75 ; 
000011B2: 73 65 20 73 ; 
000011B6: 6C 6F 77 20 ; 
000011BA: 6D 6F 64 65 ; 
000011BE: 0A 00       ; 
000011C0: 50 6C 65 61 ; askwid          defb "Please enter a width (1-30): ", 0
000011C4: 73 65 20 65 ; 
000011C8: 6E 74 65 72 ; 
000011CC: 20 61 20 77 ; 
000011D0: 69 64 74 68 ; 
000011D4: 20 28 31 2D ; 
000011D8: 33 30 29 3A ; 
000011DC: 20 00       ; 
000011DE: 50 6C 65 61 ; askhei          defb "Please enter a height (1-30): ", 0
000011E2: 73 65 20 65 ; 
000011E6: 6E 74 65 72 ; 
000011EA: 20 61 20 68 ; 
000011EE: 65 69 67 68 ; 
000011F2: 74 20 28 31 ; 
000011F6: 2D 33 30 29 ; 
000011FA: 3A 20 00    ; 
000011FD: 49 6E 76 61 ; getwidfailmsg   defb "Invalid width please enter a value between 1-30 inclusive: ", 0
00001201: 6C 69 64 20 ; 
00001205: 77 69 64 74 ; 
00001209: 68 20 70 6C ; 
0000120D: 65 61 73 65 ; 
00001211: 20 65 6E 74 ; 
00001215: 65 72 20 61 ; 
00001219: 20 76 61 6C ; 
0000121D: 75 65 20 62 ; 
00001221: 65 74 77 65 ; 
00001225: 65 6E 20 31 ; 
00001229: 2D 33 30 20 ; 
0000122D: 69 6E 63 6C ; 
00001231: 75 73 69 76 ; 
00001235: 65 3A 20 00 ; 
00001239: 49 6E 76 61 ; getheifailmsg   defb "Invalid height please enter a value between 1-30 inclusive: ", 0
0000123D: 6C 69 64 20 ; 
00001241: 68 65 69 67 ; 
00001245: 68 74 20 70 ; 
00001249: 6C 65 61 73 ; 
0000124D: 65 20 65 6E ; 
00001251: 74 65 72 20 ; 
00001255: 61 20 76 61 ; 
00001259: 6C 75 65 20 ; 
0000125D: 62 65 74 77 ; 
00001261: 65 65 6E 20 ; 
00001265: 31 2D 33 30 ; 
00001269: 20 69 6E 63 ; 
0000126D: 6C 75 73 69 ; 
00001271: 76 65 3A 20 ; 
00001275: 00          ; 
00001276: 55 73 69 6E ; usingDefault    defb "Using default values: dims=(18, 18) slowMode=Off eraseMode=Off stepMode=O
0000127A: 67 20 64 65 ; n", nl, 0
0000127E: 66 61 75 6C ; 
00001282: 74 20 76 61 ; 
00001286: 6C 75 65 73 ; 
0000128A: 3A 20 64 69 ; 
0000128E: 6D 73 3D 28 ; 
00001292: 31 38 2C 20 ; 
00001296: 31 38 29 20 ; 
0000129A: 73 6C 6F 77 ; 
0000129E: 4D 6F 64 65 ; 
000012A2: 3D 4F 66 66 ; 
000012A6: 20 65 72 61 ; 
000012AA: 73 65 4D 6F ; 
000012AE: 64 65 3D 4F ; 
000012B2: 66 66 20 73 ; 
000012B6: 74 65 70 4D ; 
000012BA: 6F 64 65 3D ; 
000012BE: 4F 6E 0A 00 ; 
000012C2: 43 68 6F 6F ; askgenoption    defb "Choose between (R)andom generation or (D)rawing the grid", 0
000012C6: 73 65 20 62 ; 
000012CA: 65 74 77 65 ; 
000012CE: 65 6E 20 28 ; 
000012D2: 52 29 61 6E ; 
000012D6: 64 6F 6D 20 ; 
000012DA: 67 65 6E 65 ; 
000012DE: 72 61 74 69 ; 
000012E2: 6F 6E 20 6F ; 
000012E6: 72 20 28 44 ; 
000012EA: 29 72 61 77 ; 
000012EE: 69 6E 67 20 ; 
000012F2: 74 68 65 20 ; 
000012F6: 67 72 69 64 ; 
000012FA: 00          ; 
000012FB: 49 6E 76 61 ; setupGrdFailmsg defb "Invalid choice, use `R` for random generation and `d` for drawing the gri
000012FF: 6C 69 64 20 ; d. Not case sensative: ", 0
00001303: 63 68 6F 69 ; 
00001307: 63 65 2C 20 ; 
0000130B: 75 73 65 20 ; 
0000130F: 60 52 60 20 ; 
00001313: 66 6F 72 20 ; 
00001317: 72 61 6E 64 ; 
0000131B: 6F 6D 20 67 ; 
0000131F: 65 6E 65 72 ; 
00001323: 61 74 69 6F ; 
00001327: 6E 20 61 6E ; 
0000132B: 64 20 60 64 ; 
0000132F: 60 20 66 6F ; 
00001333: 72 20 64 72 ; 
00001337: 61 77 69 6E ; 
0000133B: 67 20 74 68 ; 
0000133F: 65 20 67 72 ; 
00001343: 69 64 2E 20 ; 
00001347: 4E 6F 74 20 ; 
0000134B: 63 61 73 65 ; 
0000134F: 20 73 65 6E ; 
00001353: 73 61 74 69 ; 
00001357: 76 65 3A 20 ; 
0000135B: 00          ; 
0000135C: 45 6E 74 65 ; askseed         defb "Enter 4 characters to be used as the seed: ", 0
00001360: 72 20 34 20 ; 
00001364: 63 68 61 72 ; 
00001368: 61 63 74 65 ; 
0000136C: 72 73 20 74 ; 
00001370: 6F 20 62 65 ; 
00001374: 20 75 73 65 ; 
00001378: 64 20 61 73 ; 
0000137C: 20 74 68 65 ; 
00001380: 20 73 65 65 ; 
00001384: 64 3A 20 00 ; 
00001388: 49 6E 76 61 ; drawfailmsg     defb "Invalid input please enter 1 or 0: ", nl, 0
0000138C: 6C 69 64 20 ; 
00001390: 69 6E 70 75 ; 
00001394: 74 20 70 6C ; 
00001398: 65 61 73 65 ; 
0000139C: 20 65 6E 74 ; 
000013A0: 65 72 20 31 ; 
000013A4: 20 6F 72 20 ; 
000013A8: 30 3A 20 0A ; 
000013AC: 00          ; 
000013AD: 47 72 69 64 ; gridfailmsg     defb "Grid was not properly initialised, consider smaller dims", nl, 0
000013B1: 20 77 61 73 ; 
000013B5: 20 6E 6F 74 ; 
000013B9: 20 70 72 6F ; 
000013BD: 70 65 72 6C ; 
000013C1: 79 20 69 6E ; 
000013C5: 69 74 69 61 ; 
000013C9: 6C 69 73 65 ; 
000013CD: 64 2C 20 63 ; 
000013D1: 6F 6E 73 69 ; 
000013D5: 64 65 72 20 ; 
000013D9: 73 6D 61 6C ; 
000013DD: 6C 65 72 20 ; 
000013E1: 64 69 6D 73 ; 
000013E5: 0A 00       ; 
000013E7: 54 68 65 72 ; gridsavefail    defb "There was an error allocating memory for the grid save", nl, 0
000013EB: 65 20 77 61 ; 
000013EF: 73 20 61 6E ; 
000013F3: 20 65 72 72 ; 
000013F7: 6F 72 20 61 ; 
000013FB: 6C 6C 6F 63 ; 
000013FF: 61 74 69 6E ; 
00001403: 67 20 6D 65 ; 
00001407: 6D 6F 72 79 ; 
0000140B: 20 66 6F 72 ; 
0000140F: 20 74 68 65 ; 
00001413: 20 67 72 69 ; 
00001417: 64 20 73 61 ; 
0000141B: 76 65 0A 00 ; 
0000141F: 54 68 65 72 ; gridloadempty   defb "There are no saved grids, start a step mode sim and save the grid, return
00001423: 65 20 61 72 ;  to main menu to load", nl, 0
00001427: 65 20 6E 6F ; 
0000142B: 20 73 61 76 ; 
0000142F: 65 64 20 67 ; 
00001433: 72 69 64 73 ; 
00001437: 2C 20 73 74 ; 
0000143B: 61 72 74 20 ; 
0000143F: 61 20 73 74 ; 
00001443: 65 70 20 6D ; 
00001447: 6F 64 65 20 ; 
0000144B: 73 69 6D 20 ; 
0000144F: 61 6E 64 20 ; 
00001453: 73 61 76 65 ; 
00001457: 20 74 68 65 ; 
0000145B: 20 67 72 69 ; 
0000145F: 64 2C 20 72 ; 
00001463: 65 74 75 72 ; 
00001467: 6E 20 74 6F ; 
0000146B: 20 6D 61 69 ; 
0000146F: 6E 20 6D 65 ; 
00001473: 6E 75 20 74 ; 
00001477: 6F 20 6C 6F ; 
0000147B: 61 64 0A 00 ; 
0000147F: 46 6F 75 6E ; gridloadpname   defb "Found a grid called: ", 0
00001483: 64 20 61 20 ; 
00001487: 67 72 69 64 ; 
0000148B: 20 63 61 6C ; 
0000148F: 6C 65 64 3A ; 
00001493: 20 00       ; 
00001495: 77 69 64 74 ; gridloadpwidth  defb "width: ", 0
00001499: 68 3A 20 00 ; 
0000149D: 68 65 69 67 ; gridloadpheight defb "height: ", 0
000014A1: 68 74 3A 20 ; 
000014A5: 00          ; 
000014A6: 50 6C 65 61 ; loadboardaski   defb "Please enter the index of the grid to load, or enter a negative index to 
000014AA: 73 65 20 65 ; not load a grid", nl, 0
000014AE: 6E 74 65 72 ; 
000014B2: 20 74 68 65 ; 
000014B6: 20 69 6E 64 ; 
000014BA: 65 78 20 6F ; 
000014BE: 66 20 74 68 ; 
000014C2: 65 20 67 72 ; 
000014C6: 69 64 20 74 ; 
000014CA: 6F 20 6C 6F ; 
000014CE: 61 64 2C 20 ; 
000014D2: 6F 72 20 65 ; 
000014D6: 6E 74 65 72 ; 
000014DA: 20 61 20 6E ; 
000014DE: 65 67 61 74 ; 
000014E2: 69 76 65 20 ; 
000014E6: 69 6E 64 65 ; 
000014EA: 78 20 74 6F ; 
000014EE: 20 6E 6F 74 ; 
000014F2: 20 6C 6F 61 ; 
000014F6: 64 20 61 20 ; 
000014FA: 67 72 69 64 ; 
000014FE: 0A 00       ; 
00001500: 52 65 74 75 ; loadboardretmsg defb "Returning to main menu", nl, 0
00001504: 72 6E 69 6E ; 
00001508: 67 20 74 6F ; 
0000150C: 20 6D 61 69 ; 
00001510: 6E 20 6D 65 ; 
00001514: 6E 75 0A 00 ; 
00001518: 49 6E 76 61 ; loadboardifail  defb "Invalid input given for the index", nl, 0
0000151C: 6C 69 64 20 ; 
00001520: 69 6E 70 75 ; 
00001524: 74 20 67 69 ; 
00001528: 76 65 6E 20 ; 
0000152C: 66 6F 72 20 ; 
00001530: 74 68 65 20 ; 
00001534: 69 6E 64 65 ; 
00001538: 78 0A 00    ; 
0000153B: 49 6E 76 61 ; loadboardirerr  defb "Invalid index, out of range", nl, 0
0000153F: 6C 69 64 20 ; 
00001543: 69 6E 64 65 ; 
00001547: 78 2C 20 6F ; 
0000154B: 75 74 20 6F ; 
0000154F: 66 20 72 61 ; 
00001553: 6E 67 65 0A ; 
00001557: 00          ; 
00001558: 45 72 72 6F ; loadboardmlcerr defb "Error allocating memory for loaded grid. Returing to main menu", nl, 0
0000155C: 72 20 61 6C ; 
00001560: 6C 6F 63 61 ; 
00001564: 74 69 6E 67 ; 
00001568: 20 6D 65 6D ; 
0000156C: 6F 72 79 20 ; 
00001570: 66 6F 72 20 ; 
00001574: 6C 6F 61 64 ; 
00001578: 65 64 20 67 ; 
0000157C: 72 69 64 2E ; 
00001580: 20 52 65 74 ; 
00001584: 75 72 69 6E ; 
00001588: 67 20 74 6F ; 
0000158C: 20 6D 61 69 ; 
00001590: 6E 20 6D 65 ; 
00001594: 6E 75 0A 00 ; 
00001598: 53 75 63 63 ; loadboardsucmsg defb "Successfully loaded the grid", nl, 0
0000159C: 65 73 73 66 ; 
000015A0: 75 6C 6C 79 ; 
000015A4: 20 6C 6F 61 ; 
000015A8: 64 65 64 20 ; 
000015AC: 74 68 65 20 ; 
000015B0: 67 72 69 64 ; 
000015B4: 0A 00       ; 
000015B6:             ; 
000015B8:             ; align
000015B8: 00000000    ; heapstart       defw 0 ;;points to the end of the data this is where the heap can then begin
000015BC:             ; Remaining literals

Symbol Table: Labels
: max_addr                          00100000  Value
: stack_size                        00010000  Value
: nl                                0000000A  Value
: backspace                         00000008  Value
: minBuffSize                       00000008  Value
: enter                             0000000A  Value
: minSaveSize                       00000008  Value
: sizeofSaveI                       0000000C  Value
: _start                            00000000  Local -- ARM
: main                              00000038  Local -- ARM
: mainmenu                          00000064  Local -- ARM
: mainchoice                        0000007C  Local -- ARM
: newboard                          000000B4  Local -- ARM
: loadboard                         000000DC  Local -- ARM
: loadboardaskindex                 000000F0  Local -- ARM
: loadboardindex                    0000014C  Local -- ARM
: loadboardmain                     00000168  Local -- ARM
: loadboardmallocfail               000001D4  Local -- ARM
: loadboardret                      000001E4  Local -- ARM
: loadboardempty                    000001F0  Local -- ARM
: loadboarderr                      000001F0  Local -- ARM
: loadboardsucc                     000001F4  Local -- ARM
: mainloopstart                     000001F8  Local -- ARM
: mainloop                          00000228  Local -- ARM
: mainloopskipstep                  0000026C  Local -- ARM
: gridFail                          00000290  Local -- ARM
: mainEnd                           0000029C  Local -- ARM
: newline                           000002B4  Local -- ARM
: step                              000002C0  Local -- ARM
: stependfail                       00000320  Local -- ARM
: stependsucc                       00000328  Local -- ARM
: stepend                           0000032C  Local -- ARM
: listGrids                         00000334  Local -- ARM
: listGridsLoop                     00000350  Local -- ARM
: listGridsEmpty                    000003C8  Local -- ARM
: listGridsLend                     000003D4  Local -- ARM
: listGridsEnd                      000003D4  Local -- ARM
: saveGrid                          000003DC  Local -- ARM
: saveGridResize                    00000400  Local -- ARM
: saveGridAdd                       00000438  Local -- ARM
: saveGridFailMalloc                000004A0  Local -- ARM
: saveGridSucc                      000004A8  Local -- ARM
: saveGridEnd                       000004AC  Local -- ARM
: erase                             000004B4  Local -- ARM
: eraseloop                         000004B8  Local -- ARM
: eraseend                          000004D0  Local -- ARM
: slow                              000004D4  Local -- ARM
: slowloop                          000004DC  Local -- ARM
: slowend                           000004FC  Local -- ARM
: heapclean                         00000500  Local -- ARM
: heapcleanloop                     0000051C  Local -- ARM
: heapcleanend                      00000530  Local -- ARM
: strlen                            00000534  Local -- ARM
: strlenloop                        00000540  Local -- ARM
: strlenend                         00000554  Local -- ARM
: strtoi                            0000055C  Local -- ARM
: strtoiloop                        0000059C  Local -- ARM
: strtoilend                        000005D0  Local -- ARM
: strtoifailminus                   000005D8  Local -- ARM
: strtoifailoutrange                000005E0  Local -- ARM
: strtoifailnonnum                  000005E8  Local -- ARM
: strtoiendfail                     000005EC  Local -- ARM
: strtoiendsucc                     000005F4  Local -- ARM
: strtoiend                         000005F8  Local -- ARM
: memcpy                            00000600  Local -- ARM
: memcpywordsloop                   00000628  Local -- ARM
: memcpywordslend                   00000640  Local -- ARM
: memcpyallbytes                    00000650  Local -- ARM
: memcpybytes                       0000065C  Local -- ARM
: memcpybytesloop                   00000660  Local -- ARM
: memcpybyteslend                   00000678  Local -- ARM
: memcpyend                         0000067C  Local -- ARM
: getstring                         00000684  Local -- ARM
: getstringloop                     000006B0  Local -- ARM
: getstringloopskipsize             000006C0  Local -- ARM
: skipMax                           000006D4  Local -- ARM
: getstringlcont                    000006E0  Local -- ARM
: getstringresize                   000006F8  Local -- ARM
: getstringlend                     00000728  Local -- ARM
: getstringResizeEnd                00000734  Local -- ARM
: getstringEnd                      00000760  Local -- ARM
: tolower                           00000774  Local -- ARM
: setupGrid                         0000077C  Local -- ARM
: setupGridAsk                      000007C4  Local -- ARM
: setupdrawing                      000007F4  Local -- ARM
: setuprandom                       000007FC  Local -- ARM
: setupstart                        00000818  Local -- ARM
: setuprowloop                      0000081C  Local -- ARM
: setupcolloop                      00000828  Local -- ARM
: dorandom                          0000083C  Local -- ARM
: dodraw                            00000850  Local -- ARM
: dodrawsucc                        00000874  Local -- ARM
: setupcollcont                     00000878  Local -- ARM
: setupcollend                      00000894  Local -- ARM
: setuprowlend                      0000089C  Local -- ARM
: setupGridFail                     0000089C  Local -- ARM
: setupGridEnd                      0000089C  Local -- ARM
: drawgrid                          000008A4  Local -- ARM
: drawgridrowloop                   000008B8  Local -- ARM
: drawgridcolloop                   000008C4  Local -- ARM
: drawgridcollend                   000008F4  Local -- ARM
: drawgridrowlend                   00000908  Local -- ARM
: drawgridend                       00000910  Local -- ARM
: setupOptions                      00000918  Local -- ARM
: setupOptionsDSkipDims             00000978  Local -- ARM
: setupCustom                       00000980  Local -- ARM
: setupCustomskipslow               00000A24  Local -- ARM
: setupCustomDimsCheck              00000A2C  Local -- ARM
: getwid                            00000A40  Local -- ARM
: getwidFail                        00000A84  Local -- ARM
: getheisetup                       00000A94  Local -- ARM
: gethei                            00000AA0  Local -- ARM
: getheiFail                        00000AE4  Local -- ARM
: customend                         00000AF4  Local -- ARM
: updategrid                        00000AFC  Local -- ARM
: updategridrowloop                 00000B14  Local -- ARM
: updategridcolloop                 00000B20  Local -- ARM
: updatealive                       00000B48  Local -- ARM
: updatedead                        00000B64  Local -- ARM
: updatelcont                       00000B74  Local -- ARM
: updategridccollend                00000B7C  Local -- ARM
: updategridrowlend                 00000B88  Local -- ARM
: updategridend                     00000B88  Local -- ARM
: countneighbours                   00000B90  Local -- ARM
: countneighboursloop               00000BB0  Local -- ARM
: countneighboursskipadd            00000BF4  Local -- ARM
: countneighbourslend               00000BF8  Local -- ARM
: countneighboursend                00000BF8  Local -- ARM
: isinrange                         00000C04  Local -- ARM
: isinrangefail                     00000C38  Local -- ARM
: isinrangeend                      00000C3C  Local -- ARM
: setupHeap                         00000C40  Local -- ARM
: malloc                            00000C6C  Local -- ARM
: mallignend                        00000C88  Local -- ARM
: checkcrate                        00000C8C  Local -- ARM
: nocrates                          00000CAC  Local -- ARM
: foundcrate                        00000CB4  Local -- ARM
: splitcrate                        00000CC4  Local -- ARM
: usecrate                          00000CF8  Local -- ARM
: mallocEnd                         00000D0C  Local -- ARM
: free                              00000D14  Local -- ARM
: freeloop                          00000D20  Local -- ARM
: freelend                          00000D3C  Local -- ARM
: freelendEnd                       00000D5C  Local -- ARM
: freeMergeCheck                    00000D64  Local -- ARM
: verifyLeft                        00000D74  Local -- ARM
: verifyRight                       00000D88  Local -- ARM
: merge                             00000D9C  Local -- ARM
: mergeNew                          00000DD0  Local -- ARM
: freeEnd                           00000DD0  Local -- ARM
: heaphead                          00000DD8  Local -- ARM
: offsets                           00000DDC  Local -- ARM
: gridA                             00000E1C  Local -- ARM
: gridB                             00000E20  Local -- ARM
: erase_b                           00000E24  Local -- ARM
: slow_b                            00000E25  Local -- ARM
: step_b                            00000E26  Local -- ARM
: width                             00000E27  Local -- ARM
: height                            00000E28  Local -- ARM
: welcomemsg                        00000E29  Local -- ARM
: welcome2msg                       00000E5A  Local -- ARM
: mainchoicefail                    00000EA6  Local -- ARM
: helpmsg                           00000F12  Local -- ARM
: help2msg                          00000FD0  Local -- ARM
: mainendmsg                        00001045  Local -- ARM
: askdefaults                       0000106C  Local -- ARM
: askerase                          0000109E  Local -- ARM
: askslow                           000010B7  Local -- ARM
: askstep                           000010CF  Local -- ARM
: stepslowwarning                   000010E7  Local -- ARM
: savedchoice                       00001134  Local -- ARM
: askname                           0000115F  Local -- ARM
: warneraseslow                     00001182  Local -- ARM
: askwid                            000011C0  Local -- ARM
: askhei                            000011DE  Local -- ARM
: getwidfailmsg                     000011FD  Local -- ARM
: getheifailmsg                     00001239  Local -- ARM
: usingDefault                      00001276  Local -- ARM
: askgenoption                      000012C2  Local -- ARM
: setupGrdFailmsg                   000012FB  Local -- ARM
: askseed                           0000135C  Local -- ARM
: drawfailmsg                       00001388  Local -- ARM
: gridfailmsg                       000013AD  Local -- ARM
: gridsavefail                      000013E7  Local -- ARM
: gridloadempty                     0000141F  Local -- ARM
: gridloadpname                     0000147F  Local -- ARM
: gridloadpwidth                    00001495  Local -- ARM
: gridloadpheight                   0000149D  Local -- ARM
: loadboardaski                     000014A6  Local -- ARM
: loadboardretmsg                   00001500  Local -- ARM
: loadboardifail                    00001518  Local -- ARM
: loadboardirerr                    0000153B  Local -- ARM
: loadboardmlcerr                   00001558  Local -- ARM
: loadboardsucmsg                   00001598  Local -- ARM
: heapstart                         000015B8  Local -- ARM
