KMD
00000000:             ; ;;  This is my second rendition of JCGOL in ARM assembly for Komodo
00000000:             ; ;;  
00000000:             ; ;;  This will attempt to follow the ARM 32bit calling convention 
00000000:             ; ;;      R0-3 are argument registers, scratch
00000000:             ; ;;      R4-10 are local variable registers and should be saved before use in a function
00000000:             ; ;;      R11 - FP
00000000:             ; ;;      R12 - IPC
00000000:             ; ;;      R13 - SP
00000000:             ; ;;      R14 - LR
00000000:             ; ;;      R15 - PC
00000000:             ; ;;
00000000:             ; ;;  The plan
00000000:             ; ;;  - Create a simple `heap` allocator for the grid and input
00000000:             ; ;;  - Ask the user
00000000:             ; ;;      |-Use default? Y - skip below
00000000:             ; ;;      |-dims of the grid
00000000:             ; ;;      |   `-Will need a way to get a string input and convert to an integer (make sure to cat
                      ; ch -ve)
00000000:             ; ;;      |-slow mode
00000000:             ; ;;      `-erase mode
00000000:             ; ;;  - ask for generation mode
00000000:             ; ;;      |-If random ask for seed
00000000:             ; ;;      |   `-For generation roll the seed to create a pseudorandom value for each `pixel`
00000000:             ; ;;      `-If draw then get them to draw the grid one `pixel` at a time
00000000:             ; ;;  - Allocate two grids, the pointers to which will swap after a frame. One is used to count t
                      ; he neighbours the other for the new cell value.
00000000:             ; ;;  - loop
00000000:             ; ;;      |-count neighbours
00000000:             ; ;;      |-update inactive grid
00000000:             ; ;;      |-swap grids
00000000:             ; ;;      |-draw active grid
00000000:             ; ;;      `-goto loop
00000000:             ; 
00000000:             ; ;;SINGLE STEP mode allows you to save the current state of the board into a list, also give it 
                      ; a name
00000000:             ; ;;At the main menu you can load a saved grid
00000000:             ; 
00000000:             ; ;;Grid info struct
00000000:             ; ;;  - SaveInfoStruct* array
00000000:             ; ;;  - int max size of arr
00000000:             ; ;;  - int current position in arr
00000000:             ; 
00000000:             ; ;;Save info struct
00000000:             ; ;;  -address of grid [4 BYTES]
00000000:             ; ;;  -char* to the name [4 BYTES]
00000000:             ; ;;  -width of grid (1 BYTE)
00000000:             ; ;;  -height of grid (1 BYTE)
00000000:             ; 
00000000:             ; 
00000000:             ; ;;  CURRENT ISSUES/TODOS
00000000:             ; ;;  |-More testing of malloc & free need to be done
00000000:             ; ;;  `-Think about minimising the fragmentation of the heap - find the best free block instead o
                      ; f the first
00000000:             ;   
00000000:             ; max_addr    EQU  0x100000
00000000:             ; stack_size  EQU  0x10000
00000000:             ; nl          EQU  10
00000000:             ; backspace   EQU  8
00000000:             ; minBuffSize EQU  8
00000000:             ; enter       EQU  nl
00000000:             ; minSaveSize EQU  8
00000000:             ; sizeofSaveI EQU  12 ;;10 bytes + 2 bytes of padding to align to 4 byte boundry for arr
00000000:             ; 
00000000: EA000017    ; b _start
00000004:             ; 
00000004:             ; align
00000004:             ; ;;[[note]]
00000004:             ; ;;ldr instructions out of range (for pc-relative offsets?) of ldr (-4096/+4095?) use below
00000004:             ; ;;  adrl Rx, label
00000004:             ; ;;  ldr  Rx, [Rx]
00000004: 00010000    ; heaphead        defw 0x10000 ;;default start changed to addr of heapstart 
00000008:             ; 
00000008:             ; ;;Integer defs
00000008: FFFFFFFF    ; offsets         defw -1,-1,-1,0,-1,1,0,-1,0,1,1,-1,1,0,1,1 ;;[[-1,-1],[-1,0],[-1,1],[0,-1],[0,1
0000000C: FFFFFFFF    ; ],[1,-1],[1,0],[1,1]]
00000010: FFFFFFFF    ; 
00000014: 00000000    ; 
00000018: FFFFFFFF    ; 
0000001C: 00000001    ; 
00000020: 00000000    ; 
00000024: FFFFFFFF    ; 
00000028: 00000000    ; 
0000002C: 00000001    ; 
00000030: 00000001    ; 
00000034: FFFFFFFF    ; 
00000038: 00000001    ; 
0000003C: 00000000    ; 
00000040: 00000001    ; 
00000044: 00000001    ; 
00000048:             ; 
00000048:             ; ;;Grid addresses
00000048: 00000000    ; gridA           defw 0
0000004C: 00000000    ; gridB           defw 0
00000050:             ; 
00000050:             ; ;;options
00000050: 00          ; erase_b         defb 0
00000051: 00          ; slow_b          defb 0
00000052: 00          ; step_b          defb 0
00000053: 12          ; width           defb 18
00000054: 12          ; height          defb 18
00000055: 01          ; range_min       defb 1
00000056: 1E          ; range_max       defb 30
00000057: 19          ; maxitters       defb 25
00000058: 01          ; drawerase       defb 1  ;;Should the draw mode erase previous
00000059:             ; 
00000059: 58          ; alive_c         defb 'X'
0000005A: 2D          ; dead_c          defb '-'
0000005B: 23          ; ptr_c           defb '#'
0000005C:             ; 
0000005C:             ; ;;default options
0000005C: 00          ; erase_b_d       defb 0
0000005D: 00          ; slow_b_d        defb 0
0000005E: 01          ; step_b_d        defb 1
0000005F: 12          ; width_d         defb 18
00000060: 12          ; height_d        defb 18
00000061:             ; 
00000064:             ; align
00000064:             ; 
00000064:             ; _start
00000064:             ;     ;;prepare the stack
00000064: E3A0D601    ;     ldr R13, =max_addr
00000068: E3A0E000    ;     mov R14, #0 ;; allow for `returning` from _start
0000006C: E92D4000    ;     push {R14}
00000070:             ; 
00000070:             ;     ;;[[temp]] clean the heap (zero out)
00000070: EB000294    ;     bl heapclean
00000074:             ; 
00000074:             ;     ;;setup heap
00000074: E28F0FC9    ;     adrl R0, heapstart
00000078: E2800A02    ; 
0000007C: E50F0080    ;     str R0, heaphead    ;;place address of last instruction (heapstart label) into the heaphead
                      ;  variable
00000080: EB0004DF    ;     bl setupHeap
00000084:             ; 
00000084: EB000002    ;     bl main
00000088:             ; 
00000088: E8BD4000    ;     pop {R14}
0000008C: EF000002    ;     swi 2
00000090: E1A0F00E    ;     mov R15, R14
00000094:             ; 
00000094:             ; main
00000094: E92D4FF0    ;     push {fp, R14, R4-R10} ;;8 registers saved
00000098:             ; 
00000098: E28DB01C    ;     add fp, sp, #28 ;;(r - 1) * 4
0000009C: E24DD010    ;     sub sp, sp, #16 ;;reserve 12 bytes (4 bytes to align?) on the stack for the pointer to the 
                      ; list of saved grids + the maxSize of the array
000000A0:             ; 
000000A0:             ;     ;;The gridInfo struct
000000A0:             ;     ;;set the current position of the pointer
000000A0: E3A00000    ;     mov R0, #0
000000A4: E58D0008    ;     str R0, [sp, #8]
000000A8:             ; 
000000A8:             ;     ;;set the number of elements(save info structs) that can be stored in the array at the mome
                      ; nt
000000A8: E3A00008    ;     ldr R0, =minSaveSize
000000AC: E58D0004    ;     str R0, [sp, #4]
000000B0:             ; 
000000B0:             ;     ;;minsize * sizeof(SaveInfo) = number of bytes needed for the array
000000B0: E3A0100C    ;     ldr R1, =sizeofSaveI
000000B4: E0000190    ;     mul R0, R0, R1
000000B8: EB0004DE    ;     bl malloc ;;allocate the array on the heap
000000BC:             ; 
000000BC: E58D0000    ;     str R0, [sp, #0] ;;store the address
000000C0:             ; 
000000C0:             ; mainmenu
000000C0: E28F00EC    ;     adrl R0, welcomemsg
000000C4: E2800B05    ; 
000000C8: EF000003    ;     swi 3
000000CC:             ; 
000000CC: E28F0011    ;     adrl R0, welcome2msg
000000D0: E2800C15    ; 
000000D4: EF000003    ;     swi 3
000000D8:             ; 
000000D8:             ; mainchoice
000000D8: EF000001    ;     swi 1
000000DC: E3800020    ;     orr R0, R0, #32
000000E0: E1A04000    ;     mov R4, R0
000000E4:             ; 
000000E4:             ;     ;;These should really be functions
000000E4:             ; 
000000E4: E354006E    ;     cmp R4, #'n' ;;new board generation
000000E8: 0A00016F    ;     beq newboard
000000EC:             ; 
000000EC: E354006C    ;     cmp R4, #'l' ;;load a saved board
000000F0: E1A0000D    ;     mov R0, sp ;;load the info ptr
000000F4: 0A000176    ;     beq loadboard
000000F8:             ; 
000000F8: E3540068    ;     cmp R4, #'h'
000000FC: 0A000165    ;     beq printhelp
00000100:             ; 
00000100: E3540073    ;     cmp R4, #'s'
00000104: 0A00003E    ;     beq settingsmenu
00000108:             ; 
00000108: E3540071    ;     cmp R4, #'q' ;;quit
0000010C: 0A000036    ;     beq mainEnd
00000110:             ; 
00000110: E28F0F43    ;     adrl R0, mainchoicefail
00000114: E2800B05    ; 
00000118: EF000003    ;     swi 3
0000011C:             ; 
0000011C: EAFFFFED    ;     b mainchoice
00000120:             ; 
00000120:             ;     ;;R4 will hold the active grid, R5 will hold the passive grid
00000120:             ;     ;;Active is used to count neighbours, passive is used to place updated values in 
00000120:             ;     ;;either can be drawn, just drawn in a different position
00000120:             ; 
00000120:             ; 
00000120:             ; ;;update loop
00000120:             ; ;;    - loop
00000120:             ; ;;      |-count neighbours
00000120:             ; ;;      |-update inactive grid
00000120:             ; ;;      |-swap grids
00000120:             ; ;;      |-draw grid
00000120:             ; ;;      |-[slow?] - slow() - loops for some time to increase waiting time
00000120:             ; ;;      |-[step?] - step() - waits for input, s and q will have effects
00000120:             ; ;;      |-[erase?] - erase() - \b until grid is gone
00000120:             ; ;;      `-goto loop
00000120:             ; mainloopstart
00000120:             ;     ;;load the slow, step, and erase booleans
00000120: E55F60D7    ;     ldrb R6, slow_b
00000124: E55F70DC    ;     ldrb R7, erase_b
00000128: E55F80DE    ;     ldrb R8, step_b
0000012C:             ; 
0000012C: E51F40EC    ;     ldr R4, gridA
00000130: E51F50EC    ;     ldr R5, gridB
00000134:             ; 
00000134:             ;     ;;(width * height) * 2 + 1 + height
00000134: E55F00E9    ;     ldrb R0, width
00000138: E55F10EC    ;     ldrb R1, height
0000013C: E0000190    ;     mul R0, R0, R1
00000140: E1A00080    ;     mov R0, R0, lsl #1
00000144: E2800001    ;     add R0, R0, #1
00000148: E0800001    ;     add R0, R0, R1
0000014C: E1A09000    ;     mov R9, R0      ;;R9 holds the itterations for erase, so it doesn't have to calc it every t
                      ; ime
00000150:             ; 
00000150: E3A0A000    ;     mov R10, #0 ;;This will hold the number of itterations, when it reaches 
00000154:             ; 
00000154:             ; mainloop
00000154: E55F0105    ;     ldrb R0, maxitters ;;run out of registers @-@
00000158: E15A0000    ;     cmp R10, R0
0000015C: E28AA001    ;     add R10, R10, #1
00000160: 1A000004    ;     bne mainloopcont
00000164:             ; 
00000164: E3A0A000    ;     mov R10, #0
00000168:             ; 
00000168: E28F0052    ;     adrl R0, mainloopittsmsg
0000016C: E2800C19    ; 
00000170: EF000003    ;     swi 3
00000174:             ; 
00000174: EA000006    ;     b mainloopdostep
00000178:             ; 
00000178:             ; mainloopcont
00000178: E1A00004    ;     mov R0, R4
0000017C: E1A01005    ;     mov R1, R5
00000180: EB000444    ;     bl updategrid
00000184:             ; 
00000184: E1A00004    ;     mov R0, R4
00000188: EB00034C    ;     bl drawgrid
0000018C:             ; 
0000018C: E3580001    ;     cmp R8, #1
00000190: 1A000009    ;     bne mainloopskipstep
00000194:             ; 
00000194:             ; mainloopdostep
00000194: E1A0000D    ;     mov R0, sp
00000198: E1A01004    ;     mov R1, R4 ;;give the active grid
0000019C: EB0001A6    ;     bl step
000001A0: E3500000    ;     cmp R0, #0
000001A4: 0A000004    ;     beq mainloopskipstep
000001A8:             ;     
000001A8:             ;     ;;If R0 is #1 then free and go to the main menu
000001A8:             ;     ;;free the current grid
000001A8: E51F0168    ;     ldr R0, gridA
000001AC: EB0004CD    ;     bl free
000001B0: E51F016C    ;     ldr R0, gridB
000001B4: EB0004CB    ;     bl free
000001B8:             ; 
000001B8: EAFFFFC0    ;     b mainmenu
000001BC:             ; 
000001BC:             ; mainloopskipstep
000001BC: E3560001    ;     cmp R6, #1
000001C0: 0B000235    ;     bleq slow
000001C4:             ; 
000001C4: E3570001    ;     cmp R7, #1
000001C8: 01A00009    ;     moveq R0, R9
000001CC: 0B00022A    ;     bleq erase
000001D0:             ; 
000001D0: E1A00004    ;     mov R0, R4
000001D4: E1A04005    ;     mov R4, R5
000001D8: E1A05000    ;     mov R5, R0 ;;SWAP the active and passive
000001DC:             ; 
000001DC: EAFFFFDC    ;     b mainloop
000001E0:             ; 
000001E0:             ; gridFail
000001E0: E28F009D    ;     adrl R0, gridfailmsg
000001E4: E2800C1A    ; 
000001E8: EF000003    ;     swi 3
000001EC:             ; 
000001EC:             ; mainEnd
000001EC:             ;     ;;[[todo]]need to free all of the memory, saved grids (grids + names) + current grids
000001EC:             ; 
000001EC: E28F00FE    ;     adrl R0, mainendmsg
000001F0: E2800C15    ; 
000001F4: EF000003    ;     swi 3
000001F8:             ; 
000001F8: E24BD018    ;     sub sp, fp, #24 ;;???
000001FC: E8BD47F0    ;     pop {R14, R4-R10}
00000200: E1A0F00E    ;     mov R15, R14
00000204:             ; 
00000204:             ; settingsmenu
00000204:             ; ;;https://media.giphy.com/media/jOpLbiGmHR9S0/giphy.gif
00000204:             ; ;;I think there's a limit on the defined string length
00000204: E28F0F45    ;     adrl R0, s_m1
00000208: E2800B07    ; 
0000020C: EF000003    ;     swi 3
00000210:             ; 
00000210: E28F0099    ;     adrl R0, s_m2
00000214: E2800C1D    ; 
00000218: EF000003    ;     swi 3
0000021C:             ;     
0000021C: E28F00F1    ;     adrl R0, s_m3
00000220: E2800C1D    ; 
00000224: EF000003    ;     swi 3
00000228:             ; 
00000228: E28F0096    ;     adrl R0, s_m4
0000022C: E2800C1E    ; 
00000230: EF000003    ;     swi 3
00000234:             ; 
00000234:             ; changesetting
00000234: E28F00E5    ;     adrl R0, s_m
00000238: E2800C1E    ; 
0000023C: EF000003    ;     swi 3
00000240:             ; 
00000240:             ; changesettingget
00000240: E3A0000A    ;     ldr R0, =enter
00000244: E3A01002    ;     mov R1, #2
00000248: E3A02001    ;     mov R2, #1
0000024C: EB00027E    ;     bl getstring
00000250:             ; 
00000250: E1A05000    ;     mov R5, R0
00000254:             ; 
00000254: EB000232    ;     bl strtoi
00000258:             ; 
00000258: E1A04000    ;     mov R4, R0
0000025C: E1A06001    ;     mov R6, R1
00000260: E1A00005    ;     mov R0, R5
00000264:             ; 
00000264: EB00049F    ;     bl free
00000268:             ; 
00000268: EB000170    ;     bl newline
0000026C:             ; 
0000026C: E3560001    ;     cmp R6, #1
00000270: 0AFFFF92    ;     beq mainmenu
00000274:             ; 
00000274: E3560000    ;     cmp R6, #0
00000278: 0A000003    ;     beq changesettingscont
0000027C:             ; 
0000027C:             ; changesettingserr
0000027C: E28F00F9    ;     adrl R0, s_m_err
00000280: E2800C1E    ; 
00000284: EF000003    ;     swi 3
00000288:             ; 
00000288: EAFFFFEC    ;     b changesettingget
0000028C:             ; 
0000028C:             ; changesettingscont
0000028C: E3540007    ;     cmp R4, #7
00000290: CAFFFFF9    ;     bgt changesettingserr
00000294:             ; 
00000294:             ;     ;;now we have the index we can print the current value and prompt for a new one then loop b
                      ; ack up to the getsetting
00000294: E3540000    ;     cmp R4, #0
00000298: 0A00005C    ;     beq changestep
0000029C:             ; 
0000029C: E3540001    ;     cmp R4, #1
000002A0: 0A000060    ;     beq changeslow
000002A4:             ; 
000002A4: E3540002    ;     cmp R4, #2
000002A8: 0A000064    ;     beq changeerase
000002AC:             ; 
000002AC: E3540003    ;     cmp R4, #3
000002B0: 0A000090    ;     beq changedims
000002B4:             ; 
000002B4: E3540004    ;     cmp R4, #4
000002B8: 0A000095    ;     beq changerange
000002BC:             ; 
000002BC: E3540005    ;     cmp R4, #5
000002C0: 0A00009A    ;     beq changeicons
000002C4:             ; 
000002C4: E3540006    ;     cmp R4, #6
000002C8: 0A0000C5    ;     beq changeitter
000002CC:             ; 
000002CC: E3540007    ;     cmp R4, #7
000002D0: 0A0000EA    ;     beq changedrawerase
000002D4:             ; 
000002D4:             ; changearr
000002D4:             ; ;;generic for changedims and change range
000002D4:             ; ;;INP in R0 is addr. for x
000002D4:             ; ;;INP in R1 is addr. for y
000002D4:             ; ;;INP in R2 is boolean for require x < y. 1 for require
000002D4: E92D41F0    ;     push {R14, R4-R8}
000002D8:             ; 
000002D8: E1A06000    ;     mov R6, R0
000002DC: E1A07001    ;     mov R7, R1
000002E0: E1A08002    ;     mov R8, R2
000002E4:             ; 
000002E4: EB000034    ;     bl printdims
000002E8:             ; 
000002E8:             ; changearrget
000002E8: E28F00BE    ;     adrl R0, currentaskx
000002EC: E2800C1F    ; 
000002F0: EF000003    ;     swi 3
000002F4:             ; 
000002F4: EB000017    ;     bl changearrgetvalidint
000002F8: E1A04000    ;     mov R4, R0
000002FC:             ; 
000002FC: EB00014B    ;     bl newline
00000300:             ; 
00000300: E28F00BA    ;     adrl R0, currentasky
00000304: E2800C1F    ; 
00000308: EF000003    ;     swi 3
0000030C:             ; 
0000030C: EB000011    ;     bl changearrgetvalidint
00000310: E1A05000    ;     mov R5, R0
00000314:             ; 
00000314: EB000145    ;     bl newline
00000318:             ; 
00000318: E3580001    ;     cmp R8, #1
0000031C: 1A000006    ;     bne changearrset
00000320:             ; 
00000320: E1540005    ;     cmp R4, R5
00000324: AA000000    ;     bge changearrsizeerr
00000328:             ; 
00000328: EA000003    ;     b changearrset
0000032C:             ; 
0000032C:             ; changearrsizeerr
0000032C: E28F0009    ;     adrl R0, changearrsizmsg
00000330: E2800A02    ; 
00000334: EF000003    ;     swi 3
00000338:             ; 
00000338: EAFFFFEA    ;     b changearrget
0000033C:             ; 
0000033C:             ; changearrset
0000033C:             ;     ;;now we have the two valid values so str them back
0000033C: E5464000    ;     strb R4, [R6]
00000340: E5475000    ;     strb R5, [R7] 
00000344:             ; 
00000344: E1A00006    ;     mov R0, R6
00000348: E1A01007    ;     mov R1, R7
0000034C:             ; 
0000034C: EB00001A    ;     bl printdims
00000350:             ; 
00000350:             ; changearrend
00000350: E8BD41F0    ;     pop {R14, R4-R8}
00000354: E1A0F00E    ;     mov R15, R14
00000358:             ; 
00000358:             ; ;;And you thought the naming couldn't get worse \(*0*)/
00000358:             ; changearrgetvalidint ;;basically an inner function
00000358:             ; ;;INP --
00000358:             ; ;;OUT in R0 is the gotten value
00000358: E92D41F0    ;     push {R14, R4-R8}
0000035C:             ; changearrgetvalidintget
0000035C: E3A0000A    ;     ldr R0, =enter
00000360: E3A01003    ;     mov R1, #3
00000364: E3A02001    ;     mov R2, #1
00000368: EB000237    ;     bl getstring
0000036C:             ; 
0000036C: E1A04000    ;     mov R4, R0 ;;save the string to free
00000370:             ; 
00000370: EB0001EB    ;     bl strtoi
00000374:             ; 
00000374: E1A05000    ;     mov R5, R0 ;;save the int value
00000378: E1A06001    ;     mov R6, R1 ;;save err code
0000037C:             ; 
0000037C: E1A00004    ;     mov R0, R4
00000380: EB000458    ;     bl free
00000384:             ; 
00000384: E3560000    ;     cmp R6, #0
00000388: 0A000004    ;     beq changearrgetvalidintcont
0000038C:             ; 
0000038C:             ; changearrgetvalidinterr
0000038C: EB000127    ;     bl newline
00000390:             ; 
00000390: E28F004F    ;     adrl R0, changearrverr_m
00000394: E2800C1B    ; 
00000398: EF000003    ;     swi 3
0000039C:             ; 
0000039C: EAFFFFEE    ;     b changearrgetvalidintget
000003A0:             ; 
000003A0:             ; changearrgetvalidintcont
000003A0:             ;     ;;we now have an int value, need to do bounds checks
000003A0: E3550000    ;     cmp R5, #0
000003A4: DAFFFFF8    ;     ble changearrgetvalidinterr
000003A8:             ; 
000003A8: E35500FF    ;     cmp R5, #255
000003AC: CAFFFFF6    ;     bgt changearrgetvalidinterr
000003B0:             ; 
000003B0:             ; changearrgetvalidintend
000003B0: E1A00005    ;     mov R0, R5
000003B4:             ; 
000003B4: E8BD41F0    ;     pop {R14, R4-R8}
000003B8: E1A0F00E    ;     mov R15, R14
000003BC:             ; 
000003BC:             ; printdims
000003BC:             ; ;;INP in R0 is addr. for x
000003BC:             ; ;;INP in R1 is addr. for y
000003BC:             ; ;;(_, _)
000003BC:             ;     
000003BC: E1A02000    ;     mov R2, R0
000003C0: E1A03001    ;     mov R3, R1
000003C4:             ; 
000003C4: E28F00ED    ;     adrl R0, currentDims
000003C8: E2800C1D    ; 
000003CC: EF000003    ;     swi 3
000003D0:             ; 
000003D0: E28F000E    ;     adrl R0, bracket_open
000003D4: E2800C1E    ; 
000003D8: EF000003    ;     swi 3
000003DC:             ; 
000003DC: E5520000    ;     ldrb R0, [R2]
000003E0: EF000004    ;     swi 4
000003E4:             ; 
000003E4: E28F0F7F    ;     adrl R0, comma_space
000003E8: E2800B07    ; 
000003EC: EF000003    ;     swi 3
000003F0:             ; 
000003F0: E5530000    ;     ldrb R0, [R3]
000003F4: EF000004    ;     swi 4
000003F8:             ; 
000003F8: E28F00EB    ;     adrl R0, bracket_close
000003FC: E2800C1D    ; 
00000400: EF000003    ;     swi 3
00000404:             ; 
00000404: E3A0000A    ;     ldr R0, =nl
00000408: EF000000    ;     swi 0
0000040C:             ; 
0000040C: E1A0F00E    ;     mov R15, R14
00000410:             ; 
00000410:             ; changestep
00000410: E24F00BA    ;     adrl R0, step_b_d
00000414: E2400C03    ; 
00000418: E28F1ED9    ;     adrl R1, currentstep
0000041C: E2811A01    ; 
00000420:             ; 
00000420: EB00000B    ;     bl changebool
00000424:             ; 
00000424: EAFFFF82    ;     b changesetting
00000428:             ; 
00000428:             ; changeslow
00000428: E24F00D3    ;     adrl R0, slow_b_d
0000042C: E2400C03    ; 
00000430: E28F1065    ;     adrl R1, currentslow
00000434: E2811C1D    ; 
00000438:             ; 
00000438: EB000005    ;     bl changebool
0000043C:             ; 
0000043C: EAFFFF7C    ;     b changesetting
00000440:             ; 
00000440:             ; changeerase
00000440: E24F0FFB    ;     adrl R0, erase_b_d
00000444: E28F105A    ;     adrl R1, currenterase
00000448: E2811C1D    ; 
0000044C:             ; 
0000044C: EB000000    ;     bl changebool
00000450:             ; 
00000450: EAFFFF77    ;     b changesetting
00000454:             ; 
00000454:             ; changebool
00000454:             ; ;;INP in R0 is the address of ___b_d
00000454:             ; ;;INP in R1 is the address of the printing name
00000454:             ; ;;OUT --
00000454: E92D41F0    ;     push {R14, R4-R8}
00000458:             ; 
00000458: E1A04000    ;     mov R4, R0
0000045C: E1A05001    ;     mov R5, R1
00000460:             ; 
00000460: E1A00001    ;     mov R0, R1
00000464: EF000003    ;     swi 3
00000468:             ; 
00000468: E5540000    ;     ldrb R0, [R4]
0000046C: E3500001    ;     cmp R0, #1
00000470: 128F001F    ;     adrlne R0, off_msg
00000474: 12800C1F    ; 
00000478: 028F0FC5    ;     adrleq R0, on_msg
0000047C: 02800B07    ; 
00000480: EF000003    ;     swi 3
00000484:             ; 
00000484: EB0000E9    ;     bl newline
00000488:             ; 
00000488: E28F0F96    ;     adrl R0, currentasknew_B
0000048C: E2800B07    ; 
00000490: EF000003    ;     swi 3
00000494:             ; 
00000494:             ; changebool_cont
00000494: EF000001    ;     swi 1
00000498:             ; 
00000498: E2400030    ;     sub R0, R0, #48
0000049C: E3500001    ;     cmp R0, #1
000004A0: 0A000006    ;     beq changebool_set
000004A4: E3500000    ;     cmp R0, #0
000004A8: 0A000004    ;     beq changebool_set
000004AC:             ; 
000004AC: EB0000DF    ;     bl newline
000004B0:             ; 
000004B0: E28F004B    ;     adrl R0, currentasknew_E
000004B4: E2800C1E    ; 
000004B8: EF000003    ;     swi 3
000004BC:             ; 
000004BC: EAFFFFF4    ;     b changebool_cont
000004C0:             ; 
000004C0:             ; changebool_set
000004C0: E5440000    ;     strb R0, [R4]
000004C4:             ; 
000004C4: EB0000D9    ;     bl newline
000004C8:             ; 
000004C8: E1A00005    ;     mov R0, R5
000004CC: EF000003    ;     swi 3
000004D0:             ; 
000004D0: E5540000    ;     ldrb R0, [R4]
000004D4: E3500001    ;     cmp R0, #1
000004D8: 128F00B7    ;     adrlne R0, off_msg
000004DC: 12800C1E    ; 
000004E0: 028F0FAB    ;     adrleq R0, on_msg
000004E4: 02800B07    ; 
000004E8: EF000003    ;     swi 3
000004EC:             ; 
000004EC: EB0000CF    ;     bl newline
000004F0:             ; 
000004F0:             ; changeboolend
000004F0: E8BD41F0    ;     pop {R14, R4-R8}
000004F4: E1A0F00E    ;     mov R15, R14
000004F8:             ; 
000004F8:             ; changedims
000004F8:             ; ;;INP in R0 is addr. for x
000004F8:             ; ;;INP in R1 is addr. for y
000004F8:             ; ;;INP in R2 is boolean for require x < y. 1 for require
000004F8: E24F00A1    ;     adrl R0, width_d
000004FC: E2400B01    ; 
00000500: E24F10A8    ;     adrl R1, height_d
00000504: E2411B01    ; 
00000508: E3A02000    ;     mov R2, #0
0000050C: EBFFFF70    ;     bl changearr
00000510:             ; 
00000510: EAFFFF47    ;     b changesetting
00000514:             ; 
00000514:             ; changerange
00000514: E24F00C7    ;     adrl R0, range_min
00000518: E2400B01    ; 
0000051C: E24F10CE    ;     adrl R1, range_max
00000520: E2411B01    ; 
00000524: E3A02001    ;     mov R2, #1
00000528: EBFFFF69    ;     bl changearr
0000052C:             ; 
0000052C: EAFFFF40    ;     b changesetting
00000530:             ; 
00000530:             ; changeicons
00000530:             ; ;;print the current icons, ask for 3 characters in sequence for alive/dead/ptr
00000530: EB000015    ;     bl printicons
00000534:             ; 
00000534: E28F00C6    ;     adrl R0, currenticons_a
00000538: E2800B07    ; 
0000053C: EF000003    ;     swi 3
00000540:             ; 
00000540: E3A00000    ;     mov R0, #0
00000544: E3A01003    ;     mov R1, #3
00000548: E3A02001    ;     mov R2, #1
0000054C: EB0001BE    ;     bl getstring
00000550:             ; 
00000550: E3500000    ;     cmp R0, #0
00000554: 0A000008    ;     beq changeiconsmallerr
00000558:             ; 
00000558: E5D01000    ;     ldrb R1, [R0, #0]
0000055C: E5D02001    ;     ldrb R2, [R0, #1]
00000560: E5D03002    ;     ldrb R3, [R0, #2]
00000564:             ; 
00000564: E54F1513    ;     strb R1, alive_c
00000568: E54F2516    ;     strb R2, dead_c
0000056C: E54F3519    ;     strb R3, ptr_c
00000570:             ; 
00000570: EB0000AE    ;     bl newline
00000574:             ; 
00000574: EB000004    ;     bl printicons
00000578:             ; 
00000578: EAFFFF2D    ;     b changesetting
0000057C:             ; 
0000057C:             ; changeiconsmallerr
0000057C: E28F00F4    ;     adrl R0, getstringerr_m
00000580: E2800B07    ; 
00000584: EF000003    ;     swi 3
00000588:             ; 
00000588: EAFFFF29    ;     b changesetting
0000058C:             ; 
0000058C:             ; printicons
0000058C:             ; ;;INP --
0000058C:             ; ;;OUT --
0000058C: E28F0059    ;     adrl R0, currenticons_1
00000590: E2800B07    ; 
00000594: EF000003    ;     swi 3
00000598:             ; 
00000598: E55F0547    ;     ldrb R0, alive_c
0000059C: EF000000    ;     swi 0
000005A0:             ; 
000005A0: E3A0000A    ;     ldr R0, =nl
000005A4: EF000000    ;     swi 0
000005A8:             ; 
000005A8: E28F0045    ;     adrl R0, currenticons_2
000005AC: E2800B07    ; 
000005B0: EF000003    ;     swi 3
000005B4:             ; 
000005B4: E55F0562    ;     ldrb R0, dead_c
000005B8: EF000000    ;     swi 0
000005BC:             ; 
000005BC: E3A0000A    ;     ldr R0, =nl
000005C0: EF000000    ;     swi 0
000005C4:             ; 
000005C4: E28F0EC3    ;     adrl R0, currenticons_3
000005C8: E2800A01    ; 
000005CC: EF000003    ;     swi 3
000005D0:             ; 
000005D0: E55F057D    ;     ldrb R0, ptr_c
000005D4: EF000000    ;     swi 0
000005D8:             ; 
000005D8: E3A0000A    ;     ldr R0, =nl
000005DC: EF000000    ;     swi 0
000005E0:             ; 
000005E0:             ; printiconsend
000005E0: E1A0F00E    ;     mov R15, R14
000005E4:             ; 
000005E4:             ; changeitter
000005E4: E28F0FF7    ;     adrl R0, currentItters
000005E8: E2800B06    ; 
000005EC: EF000003    ;     swi 3
000005F0:             ; 
000005F0: E55F05A1    ;     ldrb R0, maxitters
000005F4: EF000004    ;     swi 4
000005F8:             ; 
000005F8: EB00008C    ;     bl newline
000005FC:             ; 
000005FC: E28F0F5B    ;     adrl R0, getitters_m
00000600: E2800B07    ; 
00000604: EF000003    ;     swi 3
00000608:             ; 
00000608:             ; changeitterget
00000608: E3A0000A    ;     ldr R0, =enter
0000060C: E3E01000    ;     mov R1, #-1
00000610: E3A02001    ;     mov R2, #1
00000614: EB00018C    ;     bl getstring
00000618:             ; 
00000618: E1A04000    ;     mov R4, R0
0000061C:             ; 
0000061C: EB000140    ;     bl strtoi
00000620: E1A03000    ;     mov R3, R0
00000624:             ; 
00000624: E1A05000    ;     mov R5, R0
00000628: E1A06001    ;     mov R6, R1
0000062C:             ; 
0000062C: E1A00004    ;     mov R0, R4
00000630: EB0003AC    ;     bl free
00000634:             ; 
00000634: EB00007D    ;     bl newline
00000638:             ; 
00000638: E3560000    ;     cmp R6, #0
0000063C: 1A000003    ;     bne changeittererr
00000640:             ; 
00000640: E24F00F1    ;     adrl R0, maxitters
00000644: E2400C05    ; 
00000648: E5405000    ;     strb R5, [R0]
0000064C:             ; 
0000064C: EA000004    ;     b changeitterend
00000650:             ; 
00000650:             ; changeittererr
00000650: EB000076    ;     bl newline
00000654:             ; 
00000654: E28F00F3    ;     adrl R0, changeittere_m
00000658: E2800B07    ; 
0000065C: EF000003    ;     swi 3
00000660: EAFFFFE8    ;     b changeitterget
00000664:             ; changeitterend
00000664: E28F0FD7    ;     adrl R0, currentItters
00000668: E2800B06    ; 
0000066C: EF000003    ;     swi 3
00000670:             ; 
00000670: E55F0621    ;     ldrb R0, maxitters
00000674: EF000004    ;     swi 4
00000678:             ; 
00000678: EB00006C    ;     bl newline
0000067C:             ; 
0000067C: EAFFFEEC    ;     b changesetting
00000680:             ; 
00000680:             ; changedrawerase
00000680: E24F0E63    ;     adrl R0, drawerase
00000684: E28F1045    ;     adrl R1, currentdraweras
00000688: E2811C1B    ; 
0000068C: EBFFFF70    ;     bl changebool
00000690:             ; 
00000690: EAFFFEE7    ;     b changesetting
00000694:             ; 
00000694:             ; changedraweraseend
00000694: EAFFFEE6    ;     b changesetting
00000698:             ; 
00000698:             ; printhelp
00000698: E28F0039    ;     adrl R0, helpinfomsg
0000069C: E2800B06    ; 
000006A0: EF000003    ;     swi 3
000006A4:             ; 
000006A4: EF000001    ;     swi 1
000006A8:             ; 
000006A8: EAFFFE84    ;     b mainmenu
000006AC:             ; 
000006AC:             ; newboard
000006AC: E3A00001    ;     mov R0, #1;;should get dims
000006B0: EB00024E    ;     bl setupOptions
000006B4:             ; 
000006B4: EB0001A2    ;     bl setupGrid
000006B8:             ;     
000006B8: E51F4678    ;     ldr R4, gridA
000006BC: E51F5678    ;     ldr R5, gridB
000006C0:             ; 
000006C0: E3540000    ;     cmp R4, #0
000006C4: 0AFFFEC5    ;     beq gridFail
000006C8: E3550000    ;     cmp R5, #0
000006CC: 0AFFFEC3    ;     beq gridFail
000006D0:             ; 
000006D0: EAFFFE92    ;     b mainloopstart
000006D4:             ; 
000006D4:             ; loadboard
000006D4:             ; ;;INP in R0 is the ptr to the SaveInfoHeader struct i.e. ptr to arr, current pos, max size
000006D4:             ; ;;RET in R0 0 for success in which case go to main loop, n/0 for err in which case return to ma
                      ; in menu
000006D4:             ; ;;display the saved grids
000006D4:             ; ;;ask for the index
000006D4:             ; ;;load the grids with the saved info
000006D4:             ; ;;ask the user for the settings
000006D4: E1A04000    ;     mov R4, R0 ;;save the struct ptr
000006D8:             ; 
000006D8:             ;     ;;pass ptr to listgrids
000006D8: EB00007A    ;     bl listGrids
000006DC:             ; 
000006DC: E5940008    ;     ldr R0, [R4, #8] ;;get the current position
000006E0: E3500000    ;     cmp R0, #0
000006E4: 0A00004F    ;     beq loadboardempty
000006E8:             ; 
000006E8:             ; loadboardaskindex
000006E8:             ;     ;;The grid has now been printed out we need to get the index to load
000006E8: E28F008B    ;     adrl R0, loadboardaski
000006EC: E2800C16    ; 
000006F0: EF000003    ;     swi 3
000006F4:             ; 
000006F4: E3A0000A    ;     ldr R0, =enter
000006F8: E3E01000    ;     mov R1, #-1
000006FC: E3A02001    ;     mov R2, #1
00000700: EB000151    ;     bl getstring
00000704: E1A05000    ;     mov R5, R0
00000708:             ; 
00000708: EB000048    ;     bl newline
0000070C:             ; 
0000070C: E1A00005    ;     mov R0, R5
00000710: EB000103    ;     bl strtoi
00000714: E1A06000    ;     mov R6, R0
00000718: E1A07001    ;     mov R7, R1
0000071C:             ;     ;;ERR codes
0000071C:             ;     ;;  0 is success
0000071C:             ;     ;;  1 is attempted -ve
0000071C:             ;     ;;  2 is use of non-numeric characters
0000071C:             ;     ;;  3 is value out of range of integer
0000071C:             ;     ;;  4 is null string given
0000071C:             ; 
0000071C: E1A00005    ;     mov R0, R5
00000720: EB000370    ;     bl free
00000724:             ; 
00000724: E1A00006    ;     mov R0, R6
00000728: E1A01007    ;     mov R1, R7
0000072C:             ; 
0000072C: E3510001    ;     cmp R1, #1
00000730: 0A000039    ;     beq loadboardret
00000734:             ; 
00000734: E3510000    ;     cmp R1, #0
00000738: 0A000003    ;     beq loadboardindex
0000073C:             ; 
0000073C: E28F00C1    ;     adrl R0, loadboardifail
00000740: E2800C16    ; 
00000744: EF000003    ;     swi 3
00000748:             ; 
00000748: EAFFFFE6    ;     b loadboardaskindex
0000074C:             ; 
0000074C:             ; loadboardindex
0000074C:             ; ;;we now have an index lets check if its in range and then load the board
0000074C:             ;     ;;should be +ve so don't need to check < 0
0000074C: E5941008    ;     ldr R1, [R4, #8] ;;get the current position, this is where things get added so index < curr
                      ; entposition
00000750: E1500001    ;     cmp R0, R1
00000754: BA000003    ;     blt loadboardmain
00000758:             ; 
00000758: E28F0FB2    ;     adrl R0, loadboardirerr
0000075C: E2800B05    ; 
00000760: EF000003    ;     swi 3
00000764: EAFFFFDF    ;     b loadboardaskindex
00000768:             ; 
00000768:             ; loadboardmain
00000768:             ; ;;now we know that the index is valid we can load the grid
00000768:             ; ;;
00000768:             ; ;;need to free current grid
00000768:             ; ;;need to create a copy of the snapshot and set gridA to it 
00000768:             ; ;;return to main menu
00000768: E5941000    ;     ldr R1, [R4, #0] ;;get the array of grids
0000076C: E3A0200C    ;     ldr R2, =sizeofSaveI
00000770: E0201290    ;     mla R0, R0, R2, R1 ;;R0 = index * sizeofSaveI + grid.addr
00000774:             ; 
00000774: E5905000    ;     ldr R5, [R0, #0] ;;get the address of that grid
00000778: E5D06008    ;     ldrb R6, [R0, #8] ;;get the width
0000077C: E5D07009    ;     ldrb R7, [R0, #9] ;;get the height
00000780:             ; 
00000780: E0000796    ;     mul R0, R6, R7 ;;get the required size
00000784: E1A09000    ;     mov R9, R0 ;;save the number of bytes
00000788:             ; 
00000788: EB00032A    ;     bl malloc
0000078C:             ; 
0000078C: E3500000    ;     cmp R0, #0
00000790: 0A00001D    ;     beq loadboardmallocfail
00000794:             ; 
00000794: E1A08000    ;     mov R8, R0 ;;save the new grid arr
00000798:             ; 
00000798:             ;     ;;need to copy the saved grid into the new grid
00000798:             ; 
00000798: E1A00005    ;     mov R0, R5  ;;src is the saved grid
0000079C: E1A01008    ;     mov R1, R8  ;;dst is the new grid
000007A0: E1A02009    ;     mov R2, R9  ;;bytes is in R9 already from width and height
000007A4: EB000107    ;     bl memcpy
000007A8:             ; 
000007A8: E51F0768    ;     ldr R0, gridA
000007AC: EB00034D    ;     bl free
000007B0:             ; 
000007B0: E50F8770    ;     str R8, gridA
000007B4:             ; 
000007B4:             ;     ;;also need to check if the old gridB is big enough
000007B4: E55F8769    ;     ldrb R8, width
000007B8: E55FA76C    ;     ldrb R10, height
000007BC: E1560008    ;     cmp R6, R8
000007C0: 1A000002    ;     bne loadboardmallocB
000007C4: E157000A    ;     cmp R7, R10
000007C8: 1A000000    ;     bne loadboardmallocB
000007CC:             ; 
000007CC: EA000006    ;     b loadboardskipB
000007D0:             ; 
000007D0:             ; loadboardmallocB
000007D0: E51F078C    ;     ldr R0, gridB
000007D4: EB000343    ;     bl free
000007D8:             ; 
000007D8: E1A00009    ;     mov R0, R9
000007DC: EB000315    ;     bl malloc
000007E0:             ; 
000007E0: E3500000    ;     cmp R0, #0
000007E4: 0A000008    ;     beq loadboardmallocfail
000007E8:             ; 
000007E8: E50F07A4    ;     str R0, gridB
000007EC:             ; 
000007EC:             ; loadboardskipB
000007EC: E54F67A1    ;     strb R6, width
000007F0: E54F77A4    ;     strb R7, height ;;overwrite the active grid information
000007F4:             ; 
000007F4: E28F0089    ;     adrl R0, loadboardsucmsg
000007F8: E2800C16    ; 
000007FC: EF000003    ;     swi 3
00000800:             ; 
00000800: E3A00000    ;     mov R0, #0 ;;skip asking dims as they've been loaded
00000804: EB0001F9    ;     bl setupOptions
00000808:             ; 
00000808: EA000007    ;     b loadboardsucc
0000080C:             ; 
0000080C:             ; loadboardmallocfail
0000080C: E28F0031    ;     adrl R0, loadboardmlcerr
00000810: E2800C16    ; 
00000814: EF000003    ;     swi 3
00000818:             ; 
00000818: EA000002    ;     b loadboarderr
0000081C:             ; 
0000081C:             ; loadboardret
0000081C: E28F00C9    ;     adrl R0, loadboardretmsg
00000820: E2800C15    ; 
00000824: EF000003    ;     swi 3
00000828:             ; 
00000828:             ; loadboardempty
00000828:             ; loadboarderr
00000828: EAFFFE24    ;     b mainmenu
0000082C:             ; loadboardsucc
0000082C: EAFFFE3B    ;     b mainloopstart
00000830:             ; 
00000830:             ; newline
00000830: E3A0000A    ;     ldr R0, =nl
00000834: EF000000    ;     swi 0
00000838:             ; 
00000838: E1A0F00E    ;     mov R15, R14
0000083C:             ; 
0000083C:             ; step
0000083C:             ; ;;INP in R0 is the gridHeaderStruct ptr [[todo]]
0000083C:             ; ;;INP in R1 is the active grid ptr
0000083C:             ; ;;OUT in R0 is 1 if should return to main menu, else 0.
0000083C:             ; 
0000083C:             ; ;;get user input
0000083C:             ; ;;if q -> jump to main menu
0000083C:             ; ;;if s -> ask for name, bl saveGrid with name
0000083C: E92D41F0    ;     push {R14, R4-R8}
00000840: E1A04000    ;     mov R4, R0 ;;save the struct 
00000844: E1A05001    ;     mov R5, R1
00000848:             ; 
00000848: EF000001    ;     swi 1
0000084C:             ; 
0000084C: E3500071    ;     cmp R0, #'q'
00000850: 0A000017    ;     beq stependfail ;;bad name, shame I can't change it eh
00000854:             ; 
00000854: E3500073    ;     cmp R0, #'s'
00000858: 1A000017    ;     bne stependsucc
0000085C:             ; 
0000085C: E28F00A8    ;     adrl R0, askname
00000860: E2800A01    ; 
00000864: EF000003    ;     swi 3
00000868:             ; 
00000868: E3A0000A    ;     ldr R0, =enter
0000086C: E3E01000    ;     mov R1, #-1
00000870: E3A02001    ;     mov R2, #1
00000874: EB0000F4    ;     bl getstring
00000878:             ; 
00000878: E1A01000    ;     mov R1, R0 ;;char* name
0000087C: E1A00004    ;     mov R0, R4 ;;gridinfo* 
00000880: E1A02005    ;     mov R2, R5 ;;active grid
00000884: EB000046    ;     bl saveGrid
00000888:             ; 
00000888: EBFFFFE8    ;     bl newline
0000088C:             ; 
0000088C: E28F004D    ;     adrl R0, savedchoice
00000890: E2800A01    ; 
00000894: EF000003    ;     swi 3
00000898:             ; 
00000898: EF000001    ;     swi 1
0000089C: EF000000    ;     swi 0
000008A0: E3500059    ;     cmp R0, #'Y'
000008A4:             ; 
000008A4: E3A0000A    ;     ldr R0, =nl
000008A8: EF000000    ;     swi 0
000008AC:             ; 
000008AC: 0A000000    ;     beq stependfail
000008B0: EA000001    ;     b stependsucc
000008B4:             ; 
000008B4:             ; stependfail
000008B4: E3A00001    ;     mov R0, #1
000008B8: EA000000    ;     b stepend
000008BC:             ; 
000008BC:             ; stependsucc
000008BC: E3A00000    ;     mov R0, #0
000008C0:             ; 
000008C0:             ; stepend
000008C0: E8BD41F0    ;     pop {R14, R4-R8}
000008C4: E1A0F00E    ;     mov R15, R14
000008C8:             ; 
000008C8:             ; listGrids
000008C8:             ; ;;INP in R0 is the ptr to the gridInfo struct
000008C8:             ; ;;RET --
000008C8:             ; ;;Grid info struct
000008C8:             ; ;;  - SaveInfoStruct* array
000008C8:             ; ;;  - int max size of arr
000008C8:             ; ;;  - int current position in arr
000008C8:             ; 
000008C8:             ; ;;loops through the array of grids (if any) printing their names, and dims, ask to print grid
000008C8: E92D47F0    ;     push {R14, R4-R10}
000008CC:             ; 
000008CC: E5904000    ;     ldr R4, [R0, #0] ;;get the array ptr
000008D0: E5905008    ;     ldr R5, [R0, #8] ;;current position
000008D4:             ; 
000008D4: E3550000    ;     cmp R5, #0
000008D8: 0A00002C    ;     beq listGridsEmpty
000008DC:             ; 
000008DC:             ; ;;if current position == 1: print("There are no saved grids")
000008DC:             ; ;;for i from 0 to current position
000008DC:             ; ;;  getname(4)
000008DC:             ; ;;  getwidth(8)
000008DC:             ; ;;  getheight(9)
000008DC:             ; ;;  print("There is a grid called %s with dims (%d, %d)")
000008DC: E3A01000    ;     mov R1, #0 ;;i
000008E0: E3A0200C    ;     ldr R2, =sizeofSaveI
000008E4:             ; 
000008E4: E28F00B7    ;     adrl R0, listgridmsg
000008E8: E2800C15    ; 
000008EC: EF000003    ;     swi 3
000008F0:             ; 
000008F0: E28F00CE    ;     adrl R0, cutoff
000008F4: E2800C15    ; 
000008F8: EF000003    ;     swi 3
000008FC:             ; 
000008FC:             ; listGridsLoop
000008FC: E1510005    ;     cmp R1, R5
00000900: 0A000025    ;     beq listGridsLend
00000904:             ; 
00000904: E0234291    ;     mla R3, R1, R2, R4 ;;R3 = i * sizeof(saveInfo) + array
00000908: E5936004    ;     ldr R6, [R3, #4] ;;load the name ptr
0000090C: E5D37008    ;     ldrb R7, [R3, #8] ;;load the width
00000910: E5D38009    ;     ldrb R8, [R3, #9] ;;load the height
00000914:             ; 
00000914: E28F003B    ;     adrl R0, gridloadpindex
00000918: E2800B05    ; 
0000091C: EF000003    ;     swi 3
00000920:             ; 
00000920: E3A0003A    ;     mov R0, #':'
00000924: EF000000    ;     swi 0
00000928:             ; 
00000928: E1A00001    ;     mov R0, R1
0000092C: EF000004    ;     swi 4
00000930:             ; 
00000930: EBFFFFBE    ;     bl newline
00000934:             ; 
00000934: E28F0024    ;     adrl R0, gridloadpname
00000938: E2800B05    ; 
0000093C: EF000003    ;     swi 3
00000940:             ; 
00000940: E1A00006    ;     mov R0, R6
00000944: EF000003    ;     swi 3
00000948:             ; 
00000948: EBFFFFB8    ;     bl newline
0000094C:             ; 
0000094C: E28F0014    ;     adrl R0, gridloadpwidth
00000950: E2800B05    ; 
00000954: EF000003    ;     swi 3
00000958:             ; 
00000958: E1A00007    ;     mov R0, R7
0000095C: EF000004    ;     swi 4
00000960:             ; 
00000960: EBFFFFB2    ;     bl newline
00000964:             ; 
00000964: E28F0005    ;     adrl R0, gridloadpheight
00000968: E2800B05    ; 
0000096C: EF000003    ;     swi 3
00000970:             ; 
00000970: E1A00008    ;     mov R0, R8
00000974: EF000004    ;     swi 4
00000978:             ; 
00000978: EBFFFFAC    ;     bl newline
0000097C:             ; 
0000097C:             ;     ;;[[Prob]  Printing the grid uses the stored width and height, I could change it to use a p
                      ; assed in
0000097C:             ;     ;;             version but do the other areas have enough registers to cope? probably not.
0000097C:             ;     ;;             Would have to swap the width and height with the loaded versions - I really 
                      ; don't like this idea
0000097C:             ; 
0000097C: E2811001    ;     add R1, R1, #1
00000980:             ; 
00000980: E28F003E    ;     adrl R0, cutoff
00000984: E2800C15    ; 
00000988: EF000003    ;     swi 3
0000098C:             ; 
0000098C: EAFFFFDA    ;     b listGridsLoop
00000990:             ; 
00000990:             ; listGridsEmpty
00000990: E28F005F    ;     adrl R0, gridloadempty
00000994: E2800C13    ; 
00000998: EF000003    ;     swi 3
0000099C:             ; 
0000099C:             ; listGridsLend
0000099C:             ; listGridsEnd
0000099C: E8BD47F0    ;     pop {R14, R4-R10}
000009A0: E1A0F00E    ;     mov R15, R14
000009A4:             ; 
000009A4:             ; saveGrid
000009A4:             ; ;;INP in R0 is the ptr gridInfo struct (in the main's stackframe)
000009A4:             ; ;;INP in R1 is the char* to the name
000009A4:             ; ;;INP in R2 is the active grid
000009A4:             ; ;;RET in R0 is an errcode or 0 for success. 1 for malloc error
000009A4:             ; 
000009A4:             ; ;;if reachedCap -> realloc + inc maxsize
000009A4:             ; ;;copy the current grid to another loc and place info in gridArr
000009A4:             ; ;;inc current index
000009A4: E92D47F0    ;     push {R14, R4-R10}
000009A8:             ; 
000009A8: E1A04000    ;     mov R4, R0
000009AC: E1A05001    ;     mov R5, R1
000009B0: E1A0A002    ;     mov R10, R2
000009B4:             ; 
000009B4: E5942008    ;     ldr R2, [R4, #8] ;;get the current index
000009B8: E5943004    ;     ldr R3, [R4, #4] ;;get the maxsize
000009BC:             ; 
000009BC: E1520003    ;     cmp R2, R3
000009C0: 0A000000    ;     beq saveGridResize
000009C4: EA00000D    ;     b saveGridAdd
000009C8:             ; 
000009C8:             ; saveGridResize
000009C8:             ;     ;;maxsize in R3
000009C8: E1A06083    ;     mov R6, R3, lsl #1 ;;double the capacity
000009CC: E3A0700C    ;     ldr R7, =sizeofSaveI
000009D0: E0070796    ;     mul R7, R6, R7 ;;get the number of bytes
000009D4:             ; 
000009D4: E1A00007    ;     mov R0, R7
000009D8: EB000296    ;     bl malloc ;;get the new grid
000009DC:             ; 
000009DC: E3500000    ;     cmp R0, #0 ;;if malloc failed then don't do any saving
000009E0: 0A000020    ;     beq saveGridFailMalloc
000009E4:             ; 
000009E4: E1A01000    ;     mov R1, R0
000009E8: E1A08000    ;     mov R8, R0 ;;save of ptr
000009EC:             ; 
000009EC:             ;     ;;now that we have the new grid we need to memcpy the bytes from the original into the new 
                      ; one
000009EC: E5940000    ;     ldr R0, [R4, #0] ;;get the array ptr
000009F0:             ;     ;;R1 has the malloced address
000009F0: E1A020A7    ;     mov R2, R7, lsr #1 ;;not great, this is the double cap halfed, means no mul again
000009F4: EB000073    ;     bl memcpy
000009F8:             ; 
000009F8:             ;     ;;assume success because I didn't give memcpy an err code :)
000009F8:             ;     ;;need to store the new size and arr ptr in the gridinfo struct
000009F8:             ; 
000009F8: E5848000    ;     str R8, [R4, #0]
000009FC: E5846004    ;     str R6, [R4, #4]
00000A00:             ; 
00000A00:             ; saveGridAdd
00000A00:             ; ;;add the current grid to the array
00000A00: E5946000    ;     ldr R6, [R4, #0] ;;get the arr ptr
00000A04: E5947008    ;     ldr R7, [R4, #8] ;;get current index
00000A08:             ; 
00000A08:             ;     ;;ptr is 4 bytes
00000A08:             ;     ;;we're adding the struct of 
00000A08:             ;     ;;  |-grid*     (ptr)
00000A08:             ;     ;;  |-char*     (ptr)
00000A08:             ;     ;;  |-width     (byte)
00000A08:             ;     ;;  `-height    (byte)
00000A08:             ; 
00000A08:             ;     ;;we need to copy the current array
00000A08: E55F89BD    ;     ldrb R8, width
00000A0C: E55F99C0    ;     ldrb R9, height
00000A10: E0080998    ;     mul R8, R8, R9 ;;get the number of bytes in grid
00000A14:             ; 
00000A14: E1A00008    ;     mov R0, R8
00000A18: EB000286    ;     bl malloc ;;allocate a new grid
00000A1C:             ; 
00000A1C: E3500000    ;     cmp R0, #0
00000A20: 0A000010    ;     beq saveGridFailMalloc
00000A24:             ; 
00000A24: E92D0100    ;     push {R8} ;; :(
00000A28:             ; 
00000A28: E3A0800C    ;     ldr R8, =sizeofSaveI
00000A2C: E0266897    ;     mla R6, R7, R8, R6 ;;currentindex * sizeof(Gridinfo) + arrptr
00000A30: E5860000    ;     str R0, [R6, #0] ;;store the grid*
00000A34: E5865004    ;     str R5, [R6, #4] ;;store the char*
00000A38: E55F89ED    ;     ldrb R8, width
00000A3C: E5C68008    ;     strb R8, [R6, #8]
00000A40: E5C69009    ;     strb R9, [R6, #9]
00000A44:             ; 
00000A44: E8BD0100    ;     pop {R8}
00000A48:             ; 
00000A48: E1A01000    ;     mov R1, R0 ;;dst
00000A4C: E1A0000A    ;     mov R0, R10 ;;src
00000A50: E1A02008    ;     mov R2, R8 ;;num bytes
00000A54: EB00005B    ;     bl memcpy ;;copy the grid into the new location
00000A58:             ; 
00000A58:             ;     ;;inc the position
00000A58: E5940008    ;     ldr R0, [R4, #8]
00000A5C: E2800001    ;     add R0, R0, #1
00000A60: E5840008    ;     str R0, [R4, #8]
00000A64:             ; 
00000A64: EA000001    ;     b saveGridSucc
00000A68:             ; 
00000A68:             ; saveGridFailMalloc
00000A68: E3A00001    ;     mov R0, #1
00000A6C: EA000000    ;     b saveGridEnd
00000A70:             ; 
00000A70:             ; saveGridSucc
00000A70: E3A00000    ;     mov R0, #0
00000A74:             ; 
00000A74:             ; saveGridEnd
00000A74: E8BD47F0    ;     pop {R14, R4-R10}
00000A78: E1A0F00E    ;     mov R15, R14
00000A7C:             ; 
00000A7C:             ; erase
00000A7C:             ; ;;INP in R0 is the itters
00000A7C:             ; ;;for (width * height + 1) * 2 + 1
00000A7C:             ; ;;      print('\b')
00000A7C: E1A01000    ;     mov R1, R0
00000A80:             ; 
00000A80:             ; eraseloop
00000A80: E3510000    ;     cmp R1, #0
00000A84: 0A000003    ;     beq eraseend
00000A88:             ; 
00000A88: E3A00008    ;     ldr R0, =backspace
00000A8C: EF000000    ;     swi 0
00000A90:             ; 
00000A90: E2411001    ;     sub R1, R1, #1
00000A94: EAFFFFF9    ;     b eraseloop
00000A98:             ; 
00000A98:             ; eraseend
00000A98: E1A0F00E    ;     mov R15, R14
00000A9C:             ; 
00000A9C:             ; slow
00000A9C: E3A010FF    ;     mov R1, #0xFF
00000AA0: E1A01081    ;     mov R1, R1, lsl #1
00000AA4:             ; 
00000AA4:             ; slowloop
00000AA4: E3510000    ;     cmp R1, #0
00000AA8: 0A000005    ;     beq slowend
00000AAC:             ; 
00000AAC: E3A00020    ;     mov R0, #' '
00000AB0: EF000000    ;     swi 0
00000AB4: E3A00008    ;     ldr R0, =backspace
00000AB8: EF000000    ;     swi 0
00000ABC:             ; 
00000ABC: E2411001    ;     sub R1, R1, #1
00000AC0: EAFFFFF7    ;     b slowloop
00000AC4:             ; 
00000AC4:             ; slowend
00000AC4: E1A0F00E    ;     mov R15, R14
00000AC8:             ; 
00000AC8:             ; heapclean
00000AC8:             ; ;;zero out all memory in the heap (debugging uses)
00000AC8: E28F0E8D    ;     adrl R0, heapstart
00000ACC: E2800A01    ; 
00000AD0: E3A01601    ;     ldr R1, =max_addr ;;stores the end of the heap
00000AD4: E3A02801    ;     ldr R2, =stack_size
00000AD8: E0411002    ;     sub R1, R1, R2 ;; R1 = max_addr - stack_size which should be the heap end
00000ADC: E3C11003    ;     and R1, R1, #-4 ;;align to 4 byte boundry just in case
00000AE0: E3A03000    ;     mov R3, #0
00000AE4:             ; heapcleanloop ;;starting at heapstart
00000AE4: E1500001    ;     cmp R0, R1
00000AE8: 0A000002    ;     beq heapcleanend
00000AEC: E5003000    ;     str R3, [R0] ;;store 0 in loc
00000AF0: E2800004    ;     add R0, R0, #4 ;;inc by a word
00000AF4: EAFFFFFA    ;     b heapcleanloop
00000AF8:             ; heapcleanend
00000AF8: E1A0F00E    ;     mov R15, R14
00000AFC:             ; 
00000AFC:             ; strlen
00000AFC:             ; ;;INP in R0 is the address of the string
00000AFC:             ; ;;OUT in R0 is the length of the null terminated string
00000AFC:             ; 
00000AFC:             ; ;;len = 0
00000AFC:             ; ;;while(inp[len] != \0) {len++;}
00000AFC:             ; ;;return len
00000AFC:             ; 
00000AFC: E3A01000    ;     mov R1, #0 ;;len
00000B00: E3500000    ;     cmp R0, #0
00000B04: 0A000004    ;     beq strlenend
00000B08:             ; 
00000B08:             ; strlenloop
00000B08: E7D02001    ;     ldrb R2, [R0, R1]
00000B0C: E3520000    ;     cmp R2, #0
00000B10: 0A000001    ;     beq strlenend
00000B14: E2811001    ;     add R1, R1, #1
00000B18: EAFFFFFA    ;     b strlenloop
00000B1C:             ; 
00000B1C:             ; strlenend
00000B1C: E1A00001    ;     mov R0, R1
00000B20: E1A0F00E    ;     mov R15, R14
00000B24:             ; 
00000B24:             ; 
00000B24:             ; strtoi
00000B24:             ; ;;INP in R0 is the address of the string
00000B24:             ; ;;OUT in R0 is the value created
00000B24:             ; ;;OUT in R1 is the err code
00000B24:             ; ;;
00000B24:             ; ;;ERR codes
00000B24:             ; ;;  0 is success
00000B24:             ; ;;  1 is attempted -ve
00000B24:             ; ;;  2 is use of non-numeric characters
00000B24:             ; ;;  3 is value out of range of integer
00000B24:             ; ;;  4 is null string given
00000B24:             ; 
00000B24:             ; ;;  example inp
00000B24:             ; ;;  12234       len = 5
00000B24:             ; ;;      ^-find end
00000B24:             ; ;;  tot = 0
00000B24:             ; ;;  for i from end to 0:
00000B24:             ; ;;      tot += inp[i] * (10 ** (len(inp) - i - 1))
00000B24:             ; ;;  +some checks for valid input
00000B24:             ; 
00000B24:             ; ;;This will take in an address to the start of a string and attempt to convert it into an integ
                      ; er
00000B24:             ; ;;String is only valid when all characters are numerical
00000B24:             ; ;;For now it does not accept -ve numbers
00000B24:             ; 
00000B24: E92D41F0    ;     push {R14, R4-R8}
00000B28: E1A04000    ;     mov R4, R0  ;;R4 holds the addr
00000B2C:             ; 
00000B2C: E3500000    ;     cmp R0, #0
00000B30: 03A01004    ;     moveq R1, #4
00000B34: 0A00001E    ;     beq strtoiendfail ;;null given so err code = 4 and end
00000B38:             ; 
00000B38: EBFFFFEF    ;     bl strlen
00000B3C: E1A05000    ;     mov R5, R0  ;;R5 holds the len of the string
00000B40:             ; 
00000B40: E3550000    ;     cmp R5, #0
00000B44: 0A00001C    ;     beq strtoiendsucc ;;if len(string) == 0 then return 0
00000B48:             ; 
00000B48: E5D46000    ;     ldrb R6, [R4, #0]
00000B4C: E356002D    ;     cmp R6, #45
00000B50: 0A000012    ;     beq strtoifailminus
00000B54:             ; 
00000B54: E3A06000    ;     mov R6, #0  ;;R6 holds the total
00000B58: E3A07001    ;     mov R7, #1  ;;R7 holds the **
00000B5C: E2458001    ;     sub R8, R5, #1  ;;R8 is i which starts at end (len - 1)
00000B60: E3A0300A    ;     mov R3, #10 ;;mul to **
00000B64:             ; 
00000B64:             ; strtoiloop
00000B64: E3580000    ;     cmp R8, #0
00000B68: BA00000A    ;     blt strtoilend
00000B6C:             ; 
00000B6C: E7D42008    ;     ldrb R2, [R4, R8]
00000B70: E2422030    ;     sub R2, R2, #48
00000B74:             ; 
00000B74: E3520000    ;     cmp R2, #0
00000B78: BA00000C    ;     blt strtoifailnonnum
00000B7C: E3520009    ;     cmp R2, #9
00000B80: CA00000A    ;     bgt strtoifailnonnum
00000B84:             ; 
00000B84: E0266792    ;     mla R6, R2, R7, R6 ;;total = (inp[i] * (**)) + total -> total += inp[i] * (**)
00000B88: 6A000006    ;     bvs strtoifailoutrange
00000B8C: E0070397    ;     mul R7, R7, R3
00000B90:             ; 
00000B90: E2488001    ;     sub R8, R8, #1
00000B94:             ; 
00000B94: EAFFFFF2    ;     b strtoiloop
00000B98:             ; 
00000B98:             ; 
00000B98:             ; ;;branches are expensive - should this just be rep RET? probably doesn't matter at this scale
00000B98:             ; strtoilend
00000B98: E1A00006    ;     mov R0, R6
00000B9C: EA000006    ;     b strtoiendsucc
00000BA0:             ; 
00000BA0:             ; strtoifailminus
00000BA0: E3A01001    ;     mov R1, #1
00000BA4: EA000002    ;     b strtoiendfail
00000BA8:             ; 
00000BA8:             ; strtoifailoutrange
00000BA8: E3A01003    ;     mov R1, #3
00000BAC: EA000000    ;     b strtoiendfail
00000BB0:             ; 
00000BB0:             ; strtoifailnonnum
00000BB0: E3A01002    ;     mov R1, #2
00000BB4:             ; 
00000BB4:             ; strtoiendfail
00000BB4: E3A00000    ;     mov R0, #0
00000BB8: EA000000    ;     b strtoiend
00000BBC:             ; 
00000BBC:             ; strtoiendsucc
00000BBC: E3A01000    ;     mov R1, #0
00000BC0:             ; 
00000BC0:             ; strtoiend
00000BC0: E8BD41F0    ;     pop {R14, R4-R8}
00000BC4: E1A0F00E    ;     mov R15, R14
00000BC8:             ; 
00000BC8:             ; memcpy
00000BC8:             ; ;;INP in R0 is the addr of src
00000BC8:             ; ;;INP in R1 is the addr of dst
00000BC8:             ; ;;INP in R2 is the number of bytes to copy
00000BC8:             ; 
00000BC8:             ; ;;check if src and dst are alliged
00000BC8:             ; ;;If different then write bytes
00000BC8:             ; ;;If same then go to 4byte boundry
00000BC8:             ; ;;  Write words of bytes2copy / 4
00000BC8:             ; ;;  Write remaining bytes
00000BC8: E92D41F0    ;     push {R14, R4-R8}
00000BCC:             ; 
00000BCC: E2004003    ;     and R4, R0, #0b11
00000BD0: E2015003    ;     and R5, R1, #0b11
00000BD4:             ; 
00000BD4: E1540005    ;     cmp R4, R5
00000BD8: 1A00000E    ;     bne memcpyallbytes
00000BDC:             ; 
00000BDC:             ;     ;;If they are the same then cpy R4 bytes and then do words
00000BDC: E0422004    ;     sub R2, R2, R4;; bytes2cpy -= bytes we are about to write
00000BE0: E1A03004    ;     mov R3, R4
00000BE4: EB00000E    ;     bl memcpybytes
00000BE8:             ; 
00000BE8:             ;     ;;Now find the number of words that can be written i.e. bytes2cpy / 4 (bytes2cpy >> 2)
00000BE8: E3C23003    ;     and R3, R2, #-4 ;;the number of bytes to write that make up the words
00000BEC: E3A04000    ;     mov R4, #0 ;;i
00000BF0:             ; memcpywordsloop
00000BF0: E1540003    ;     cmp R4, R3
00000BF4: 0A000003    ;     beq memcpywordslend
00000BF8:             ; 
00000BF8: E7906004    ;     ldr R6, [R0, R4]
00000BFC: E7816004    ;     str R6, [R1, R4]
00000C00:             ;     
00000C00: E2844004    ;     add R4, R4, #4
00000C04:             ; 
00000C04: EAFFFFF9    ;     b memcpywordsloop
00000C08:             ;     
00000C08:             ; memcpywordslend
00000C08:             ; ;;Now copy the remaining bytes
00000C08: E2022003    ;     and R2, R2, #0b11
00000C0C: E1A03002    ;     mov R3, R2
00000C10: EB000003    ;     bl memcpybytes
00000C14: EA00000A    ;     b memcpyend
00000C18:             ; 
00000C18:             ; memcpyallbytes
00000C18: E1A03002    ;     mov R3, R2
00000C1C: EB000000    ;     bl memcpybytes
00000C20: EA000007    ;     b memcpyend
00000C24:             ; 
00000C24:             ; memcpybytes
00000C24:             ; ;;This is an internal function to memcpy and so doesn't follow the calling convention, it also 
                      ; assumes values are in place from memcpy
00000C24:             ; ;;for (int i = 0; i < byte2cpy; i++) {
00000C24:             ; ;;      *(dst + i) = *(src + i)
00000C24:             ; ;;INP in R3 is the number of bytes to copy
00000C24: E3A05000    ;     mov R5, #0 ;;i
00000C28:             ; memcpybytesloop
00000C28: E1550003    ;     cmp R5, R3
00000C2C: 0A000003    ;     beq memcpybyteslend ;;i < bytes2cpy
00000C30:             ; 
00000C30: E7D04005    ;     ldrb R4, [R0, R5]
00000C34: E7C14005    ;     strb R4, [R1, R5] ;;dst[i] = src[i]
00000C38:             ; 
00000C38: E2855001    ;     add R5, R5, #1 ;;i++
00000C3C:             ; 
00000C3C: EAFFFFF9    ;     b memcpybytesloop
00000C40:             ; 
00000C40:             ; memcpybyteslend
00000C40: E1A0F00E    ;     mov R15, R14
00000C44:             ; 
00000C44:             ; memcpyend
00000C44: E8BD41F0    ;     pop {R14, R4-R8}
00000C48: E1A0F00E    ;     mov R15, R14
00000C4C:             ; 
00000C4C:             ; getstring
00000C4C:             ; ;;INP in R0 the terminator character
00000C4C:             ; ;;INP in R1 the max number of characters or -1 for no max
00000C4C:             ; ;;INP in R2 boolean (non-0/0) for if letters should be printed out as well
00000C4C:             ; ;;RET in R0 a ptr to the memory address
00000C4C:             ; ;;
00000C4C:             ; ;;Dynamically allocate memory to support large string
00000C4C:             ; 
00000C4C:             ; ;;buff = malloc(minBytes)
00000C4C:             ; ;;while (input != terminator && pos < maxchars) 
00000C4C:             ; ;;  buff[pos] = input
00000C4C:             ; ;;  putchar(input)
00000C4C:             ; ;;  if (pos > buffSize)
00000C4C:             ; ;;      nBuff = malloc(buffSize << 1)
00000C4C:             ; ;;      memcpy from buff to nBuff
00000C4C:             ; ;;      free buff
00000C4C:             ; ;;      buff = nBuff
00000C4C:             ; 
00000C4C: E92D47F0    ;     push {R14, R4-R10}
00000C50:             ; 
00000C50: E1A08000    ;     mov R8, R0 ;;now holds terminator
00000C54: E1A09001    ;     mov R9, R1 ;;nax chars
00000C58: E3590000    ;     cmp R9, #0
00000C5C: 0A000031    ;     beq getstringEnd
00000C60:             ;     ;sub R9, R9, #1 ;;reduce by 1 to use later
00000C60: E1A0A002    ;     mov R10, R2 ;;print bool
00000C64:             ; 
00000C64: E3A06008    ;     ldr R6, =minBuffSize ;;R6 will hold the current size of the buffer
00000C68: E1A00006    ;     mov R0, R6
00000C6C: EB0001F1    ;     bl malloc
00000C70: E1A04000    ;     mov R4, R0 ;;R4 is the address of the buffer
00000C74:             ; 
00000C74: E3A05000    ;     mov R5, #0 ;;R5 is the loop counter/index into buffer
00000C78:             ; getstringloop
00000C78: E3790001    ;     cmp R9, #-1
00000C7C: 0A000001    ;     beq getstringloopskipsize
00000C80: E1550009    ;     cmp R5, R9 ;;position - maxsize
00000C84:             ;                       ;;pos 2 means 3 characters written
00000C84: AA000019    ;     bge getstringlend ;;if position >= maxsize
00000C88:             ; getstringloopskipsize
00000C88: EF000001    ;     swi 1 ;;get input
00000C8C: E1500008    ;     cmp R0, R8 ;;is input == terminator character
00000C90: 0A000016    ;     beq getstringlend
00000C94:             ; 
00000C94: E3790001    ;     cmp R9, #-1
00000C98: 0AFFFFFF    ;     beq skipMax
00000C9C:             ;     
00000C9C:             ; skipMax
00000C9C: E1550006    ;     cmp R5, R6
00000CA0: E92D0001    ;     push {R0}
00000CA4: AA000005    ;     bge getstringresize
00000CA8:             ; 
00000CA8:             ; getstringlcont
00000CA8: E8BD0001    ;     pop {R0}
00000CAC: E7C40005    ;     strb R0, [R4, R5] ;;buff[pos] = input
00000CB0:             ; 
00000CB0: E35A0000    ;     cmp R10, #0
00000CB4: 1F000000    ;     swine 0 ;;output the character to the screen if R10 is not 0
00000CB8:             ; 
00000CB8: E2855001    ;     add R5, R5, #1
00000CBC:             ; 
00000CBC: EAFFFFED    ;     b getstringloop
00000CC0:             ; 
00000CC0:             ; getstringresize
00000CC0:             ;     ;;r6 will hold new buffer
00000CC0: E1A00086    ;     mov R0, R6, lsl #1
00000CC4: EB0001DB    ;     bl malloc
00000CC8: E1A07000    ;     mov R7, R0
00000CCC:             ; 
00000CCC: E1A00004    ;     mov R0, R4 ;;old buff
00000CD0: E1A01007    ;     mov R1, R7 ;;newBuff
00000CD4: E1A02005    ;     mov R2, R5 ;;bytes to write
00000CD8: EBFFFFBA    ;     bl memcpy
00000CDC:             ; 
00000CDC: E1A00004    ;     mov R0, R4
00000CE0: EB000200    ;     bl free
00000CE4: E1A04007    ;     mov R4, R7
00000CE8:             ; 
00000CE8: E1A06086    ;     mov R6, R6, lsl #1
00000CEC:             ; 
00000CEC: EAFFFFED    ;     b getstringlcont
00000CF0:             ; 
00000CF0:             ; getstringlend
00000CF0:             ;     ;;need to add a \0
00000CF0:             ;     ;;need to check if the buffer is completely full -> resize buffer to +1? (will be aligned t
                      ; o 8 in malloc!) then copy
00000CF0:             ;     ;;I could have the buffers always leave a space open for the \0? but this is kind of an edg
                      ; e case?
00000CF0: E1550006    ;     cmp R5, R6 ;;position to size of buffer
00000CF4: 0A000000    ;     beq getstringResizeEnd
00000CF8:             ; 
00000CF8: EA00000A    ;     b getstringEnd
00000CFC:             ; 
00000CFC:             ; getstringResizeEnd
00000CFC: E2860001    ;     add R0, R6, #1
00000D00: EB0001CC    ;     bl malloc
00000D04: E1A07000    ;     mov R7, R0
00000D08:             ; 
00000D08: E1A00004    ;     mov R0, R4;;old buff
00000D0C: E1A01007    ;     mov R1, R7;;new buff
00000D10: E1A02005    ;     mov R2, R5;;bytes2write
00000D14: EBFFFFAB    ;     bl memcpy
00000D18:             ; 
00000D18: E1A00004    ;     mov R0, R4
00000D1C: EB0001F1    ;     bl free
00000D20: E1A04007    ;     mov R4, R7
00000D24:             ; 
00000D24: E2866001    ;     add R6, R6, #1 ;;not needed
00000D28:             ; 
00000D28:             ; getstringEnd
00000D28: E3A00000    ;     mov R0, #0
00000D2C: E7C40005    ;     strb R0, [R4, R5]
00000D30:             ; 
00000D30: E1A00004    ;     mov R0, R4
00000D34:             ; 
00000D34: E8BD47F0    ;     pop {R14, R4-R10}
00000D38: E1A0F00E    ;     mov R15, R14
00000D3C:             ; 
00000D3C:             ; tolower
00000D3C:             ; ;;INP in R0 is a character
00000D3C:             ; ;;OUT in R0 is the character.lower()
00000D3C: E3800020    ;     orr R0, R0, #32
00000D40: E1A0F00E    ;     mov R15, R14
00000D44:             ; 
00000D44:             ; setupGrid
00000D44:             ; ;;INP --
00000D44:             ; ;;RET --
00000D44:             ; ;;The values addresses of the grids will now be set, can still be 0
00000D44:             ; ;; ask for generation mode
00000D44:             ; ;;      |-If random ask for seed
00000D44:             ; ;;      |   `-For generation roll the seed to create a pseudorandom value for each `pixel`
00000D44:             ; ;;      `-If draw then get them to draw the grid one `pixel` at a time
00000D44: E92D47F0    ;     push {R14, R4-R10}
00000D48:             ; 
00000D48:             ;     ;;generate the main grid
00000D48: E55F6CFD    ;     ldrb R6, width
00000D4C: E55F7D00    ;     ldrb R7, height
00000D50:             ; 
00000D50: E0000796    ;     mul R0, R6, R7 ;;width * height = num of bytes to malloc
00000D54:             ; 
00000D54: E1A05000    ;     mov R5, R0
00000D58: EB0001B6    ;     bl malloc
00000D5C: E1A04000    ;     mov R4, R0
00000D60: E50F4D20    ;     str R4, gridA
00000D64:             ; 
00000D64: E1A00005    ;     mov R0, R5
00000D68: EB0001B2    ;     bl malloc
00000D6C: E50F0D28    ;     str R0, gridB
00000D70:             ; 
00000D70: E3550000    ;     cmp R5, #0
00000D74: 0A00004F    ;     beq setupGridFail
00000D78: E3540000    ;     cmp R4, #0
00000D7C: 0A00004D    ;     beq setupGridFail
00000D80:             ; 
00000D80:             ;     ;;R4 holds the gridA addr
00000D80:             ;     ;;R6 holds the width
00000D80:             ;     ;;R7 holds the height
00000D80:             ; 
00000D80: E28F00DA    ;     adrl R0, askgenoption
00000D84: E2800C0D    ; 
00000D88: EF000003    ;     swi 3
00000D8C:             ; setupGridAsk
00000D8C: EF000001    ;     swi 1
00000D90: E3800020    ;     orr R0, R0, #32
00000D94:             ; 
00000D94: E1A01000    ;     mov R1, R0
00000D98: EBFFFEA4    ;     bl newline
00000D9C:             ; 
00000D9C: E3510064    ;     cmp R1, #'d'
00000DA0: 0A000005    ;     beq setupdrawing
00000DA4:             ; 
00000DA4: E3510072    ;     cmp R1, #'r'
00000DA8: 0A000007    ;     beq setuprandom
00000DAC:             ; 
00000DAC: E28F00E7    ;     adrl R0, setupGrdFailmsg
00000DB0: E2800C0D    ; 
00000DB4: EF000003    ;     swi 3
00000DB8: EAFFFFF3    ;     b setupGridAsk
00000DBC:             ; 
00000DBC:             ; setupdrawing
00000DBC: E3A09000    ;     mov R9, #0
00000DC0:             ; 
00000DC0: E28F0EE6    ;     adrl R0, drawinfomsg
00000DC4: EF000003    ;     swi 3
00000DC8:             ; 
00000DC8: EA000009    ;     b setupstart
00000DCC:             ; 
00000DCC:             ; setuprandom
00000DCC: E28F0F8A    ;     adrl R0, askseed
00000DD0: E2800B03    ; 
00000DD4: EF000003    ;     swi 3
00000DD8:             ; 
00000DD8: E3A00000    ;     mov R0, #0
00000DDC: E3A01004    ;     mov R1, #4
00000DE0: E3A02001    ;     mov R2, #1
00000DE4: EBFFFF98    ;     bl getstring
00000DE8:             ; 
00000DE8: E1A08000    ;     mov R8, R0
00000DEC:             ; 
00000DEC: EBFFFE8F    ;     bl newline
00000DF0:             ; 
00000DF0: E3A09001    ;     mov R9, #1
00000DF4:             ; 
00000DF4:             ; setupstart
00000DF4:             ; ;;This is probably not a good way to do it as there is more branching in the middle of a loop t
                      ; hat is executed alot
00000DF4:             ; ;;I'm doing it this way `not because it is easy, but because I though it would be easy`
00000DF4:             ; ;;Reduces the need for writing another loop :)
00000DF4:             ; ;;R9 holds the mode (1 for random, 0 for draw)
00000DF4:             ; ;;R8 will hold the seed for random
00000DF4:             ; ;;for row from 0 to height - 1
00000DF4:             ; ;;  for col from 0 to width - 1
00000DF4:             ; ;;      if (random)
00000DF4:             ; ;;          grid[row][col] = ((seed rol 1) || row) && 1
00000DF4:             ; ;;      else
00000DF4:             ; ;;          grid[row][col] = input() == 1
00000DF4: E3A05000    ;     mov R5, #0 ;; row
00000DF8:             ; setuprowloop
00000DF8: E1550007    ;     cmp R5, R7
00000DFC: 0A000029    ;     beq setuprowlend
00000E00:             ; 
00000E00: E3A0A000    ;     mov R10, #0 ;;col
00000E04:             ; setupcolloop
00000E04: E15A0006    ;     cmp R10, R6
00000E08: 0A000024    ;     beq setupcollend
00000E0C:             ; 
00000E0C: E3590001    ;     cmp R9, #1
00000E10: 0A000000    ;     beq dorandom
00000E14: EA000004    ;     b dodrawstart
00000E18:             ; 
00000E18:             ; ;;dorandom and dodraw will get their value for this position and then place it in R2
00000E18:             ; ;;R3 is free at this point
00000E18:             ; dorandom
00000E18:             ;     ;;seed in R8
00000E18: E1A080E8    ;     mov R8, R8, ror #1
00000E1C: E00A3005    ;     and R3, R10, R5
00000E20: E0288003    ;     eor R8, R8, R3
00000E24: E2082001    ;     and R2, R8, #1
00000E28: EA000018    ;     b setupcollcont
00000E2C:             ; 
00000E2C:             ; dodrawstart
00000E2C: E023A695    ;     mla R3, R5, R6, R10 ;;R3 = row * width + col
00000E30:             ; 
00000E30: E3A00002    ;     mov R0, #2
00000E34: E7C40003    ;     strb R0, [R4, R3]
00000E38:             ; 
00000E38: E3590000    ;     cmp R9, #0
00000E3C: 01A00004    ;     moveq R0, R4
00000E40: 0B00001E    ;     bleq drawgrid ;;print the new state of the grid if this is drawing mode
00000E44:             ; 
00000E44:             ; dodraw
00000E44:             ;     ;;get input, validate 1 or 0
00000E44:             ;     ;;if invalid print error loop back
00000E44:             ;     ;;-_- I've just realised I want to print the grid each time as well R0-R3 are scratch
00000E44: EF000001    ;     swi 1
00000E48:             ; 
00000E48: E3500031    ;     cmp R0, #'1'
00000E4C: 0A000004    ;     beq dodrawsucc
00000E50: E3500030    ;     cmp R0, #'0'
00000E54: 0A000002    ;     beq dodrawsucc
00000E58:             ; 
00000E58: E28F0C0E    ;     adrl R0, drawfailmsg
00000E5C: EF000003    ;     swi 3
00000E60:             ; 
00000E60: EAFFFFF7    ;     b dodraw
00000E64:             ; 
00000E64:             ; dodrawsucc
00000E64: E92D0001    ;     push {R0}
00000E68: E55F0E18    ;     ldrb R0, drawerase
00000E6C: E3500000    ;     cmp R0, #0
00000E70: 0A000004    ;     beq dodrawsuccskiperase
00000E74:             ; 
00000E74: E0000796    ;     mul R0, R6, R7      ;;I don't like having to do this every time :(
00000E78: E1A00080    ;     mov R0, R0, lsl #1
00000E7C: E2800001    ;     add R0, R0, #1
00000E80: E0800007    ;     add R0, R0, R7
00000E84: EBFFFEFC    ;     bl erase
00000E88:             ;     
00000E88:             ; dodrawsuccskiperase
00000E88: E8BD0001    ;     pop {R0}
00000E8C:             ; 
00000E8C: E2402030    ;     sub R2, R0, #48 ;;could be xor?
00000E90:             ; 
00000E90:             ; setupcollcont
00000E90:             ;     ;;place the value in R2 into the grid[row][col]
00000E90:             ;     ;;row * width + col
00000E90: E023A695    ;     mla R3, R5, R6, R10 ;;R3 = row * width + col ;;I'm doing this twice \-(*v*)-/
00000E94: E7C42003    ;     strb R2, [R4, R3] ;;grid offset by R3
00000E98:             ; 
00000E98: E28AA001    ;     add R10, R10, #1
00000E9C: EAFFFFD8    ;     b setupcolloop
00000EA0:             ; setupcollend
00000EA0: E2855001    ;     add R5, R5, #1
00000EA4: EAFFFFD3    ;     b setuprowloop
00000EA8:             ; setuprowlend
00000EA8:             ;     ;;grid has been setup
00000EA8: E3590001    ;     cmp R9, #1
00000EAC: 1A000001    ;     bne setupGridEnd
00000EB0: E1A00008    ;     mov R0, R8 ;;free the seed
00000EB4: EB00018B    ;     bl free
00000EB8:             ; 
00000EB8:             ; setupGridFail
00000EB8:             ; setupGridEnd
00000EB8: E8BD47F0    ;     pop {R14, R4-R10}
00000EBC: E1A0F00E    ;     mov R15, R14
00000EC0:             ; 
00000EC0:             ; 
00000EC0:             ; ;;[[TODO]] the heap may not be blank (when heapclean is removed) and so need to 0 the mem. Mayb
                      ; e add option to malloc or add calloc (not the same)
00000EC0:             ; drawgrid
00000EC0:             ; ;;INP in R0 is the grid address to draw
00000EC0:             ; 
00000EC0:             ; ;;for row from 0 to height - 1
00000EC0:             ; ;;  for col from 0 to width - 1
00000EC0:             ; ;;      print('X' if grid[row][col] else '_')
00000EC0:             ; ;;  print(newline)
00000EC0:             ; ;;print(newline)
00000EC0: E92D01F0    ;     push {R4-R8}
00000EC4:             ; 
00000EC4: E1A06000    ;     mov R6, R0
00000EC8:             ; 
00000EC8: E55F4E7D    ;     ldrb R4, width
00000ECC: E55F5E80    ;     ldrb R5, height
00000ED0:             ; 
00000ED0: E3A02000    ;     mov R2, #0 ;;row
00000ED4:             ; drawgridrowloop
00000ED4: E1520005    ;     cmp R2, R5
00000ED8: 0A000016    ;     beq drawgridrowlend
00000EDC:             ; 
00000EDC: E3A01000    ;     mov R1, #0 ;;col
00000EE0:             ; drawgridcolloop
00000EE0: E1510004    ;     cmp R1, R4
00000EE4: 0A00000E    ;     beq drawgridcollend
00000EE8:             ; 
00000EE8: E0231492    ;     mla R3, R2, R4, R1 ;;R3 = row * width + col
00000EEC: E7D63003    ;     ldrb R3, [R6, R3]
00000EF0:             ; 
00000EF0: E3530002    ;     cmp R3, #2
00000EF4: 0A000004    ;     beq drawgridprintcurrent
00000EF8: E3530001    ;     cmp R3, #1
00000EFC: 051F0EAB    ;     ldreq R0, alive_c
00000F00: 151F0EAE    ;     ldrne R0, dead_c
00000F04:             ; 
00000F04: EF000000    ;     swi 0
00000F08:             ; 
00000F08: EA000001    ;     b drawgridcollcont
00000F0C:             ; 
00000F0C:             ; drawgridprintcurrent
00000F0C: E51F0EB9    ;     ldr R0, ptr_c
00000F10: EF000000    ;     swi 0
00000F14:             ; 
00000F14:             ; drawgridcollcont
00000F14: E3A00020    ;     mov R0, #' '
00000F18: EF000000    ;     swi 0
00000F1C:             ; 
00000F1C: E2811001    ;     add R1, R1, #1
00000F20: EAFFFFEE    ;     b drawgridcolloop
00000F24:             ; 
00000F24:             ; drawgridcollend
00000F24: E3A01000    ;     mov R1, #0
00000F28: E2822001    ;     add R2, R2, #1
00000F2C: E3A0000A    ;     mov R0, #10
00000F30: EF000000    ;     swi 0
00000F34: EAFFFFE6    ;     b drawgridrowloop
00000F38:             ; 
00000F38:             ; drawgridrowlend
00000F38: E3A0000A    ;     mov R0, #10
00000F3C: EF000000    ;     swi 0
00000F40:             ; drawgridend
00000F40: E8BD01F0    ;     pop {R4-R8}
00000F44: E1A0F00E    ;     mov R15, R14
00000F48:             ; 
00000F48:             ; 
00000F48:             ; printoptions
00000F48:             ; ;;INP --
00000F48:             ; ;;OUT --
00000F48:             ; ;;optionsp_1-5
00000F48: E28F0FCD    ;     adrl R0, optionsp_1
00000F4C: E2800B02    ; 
00000F50: EF000003    ;     swi 3
00000F54:             ; 
00000F54: E55F0F09    ;     ldrb R0, width
00000F58: EF000004    ;     swi 4
00000F5C:             ; 
00000F5C: E28F0FCE    ;     adrl R0, optionsp_2
00000F60: E2800B02    ; 
00000F64: EF000003    ;     swi 3
00000F68:             ; 
00000F68: E55F0F1C    ;     ldrb R0, height
00000F6C: EF000004    ;     swi 4
00000F70:             ; 
00000F70: E28F0027    ;     adrl R0, optionsp_3
00000F74: E2800C0B    ; 
00000F78: EF000003    ;     swi 3
00000F7C:             ; 
00000F7C: E55F0F33    ;     ldrb R0, slow_b
00000F80: E3500001    ;     cmp R0, #1
00000F84: 128F000B    ;     adrlne R0, off_msg
00000F88: 12800B05    ; 
00000F8C: 028F0B05    ;     adrleq R0, on_msg
00000F90: EF000003    ;     swi 3
00000F94:             ; 
00000F94: E28F000F    ;     adrl R0, optionsp_4
00000F98: E2800C0B    ; 
00000F9C: EF000003    ;     swi 3
00000FA0:             ; 
00000FA0: E55F0F58    ;     ldrb R0, erase_b
00000FA4: E3500001    ;     cmp R0, #1
00000FA8: 128F00E7    ;     adrlne R0, off_msg
00000FAC: 12800C13    ; 
00000FB0: 028F0FF7    ;     adrleq R0, on_msg
00000FB4: 02800A01    ; 
00000FB8: EF000003    ;     swi 3
00000FBC:             ; 
00000FBC: E28F00F3    ;     adrl R0, optionsp_5
00000FC0: E2800C0A    ; 
00000FC4: EF000003    ;     swi 3
00000FC8:             ; 
00000FC8: E55F0F7E    ;     ldrb R0, step_b
00000FCC: E3500001    ;     cmp R0, #1
00000FD0: 128F00BF    ;     adrlne R0, off_msg
00000FD4: 12800C13    ; 
00000FD8: 028F0FED    ;     adrleq R0, on_msg
00000FDC: 02800A01    ; 
00000FE0: EF000003    ;     swi 3
00000FE4:             ; 
00000FE4: E3A0000A    ;     ldr R0, =nl
00000FE8: EF000000    ;     swi 0
00000FEC:             ; 
00000FEC: E1A0F00E    ;     mov R15, R14
00000FF0:             ; 
00000FF0:             ; setupOptions
00000FF0:             ; ;;INP in R0 is 1 if should ask for dims 0 for skip
00000FF0: E92D4010    ;     push {R14, R4}
00000FF4: E1A04000    ;     mov R4, R0
00000FF8:             ; 
00000FF8: E28F0019    ;     adrl R0, askdefaults ;;ask q
00000FFC: E2800B02    ; 
00001000: EF000003    ;     swi 3
00001004: EF000001    ;     swi 1   ;;get character answer
00001008: EF000000    ;     swi 0
0000100C: E3500059    ;     cmp R0, #'Y'
00001010: E3A0000A    ;     ldr R0, =nl
00001014: EF000000    ;     swi 0
00001018:             ; 
00001018: 1A00000E    ;     bne setupCustom
0000101C:             ; 
0000101C: E55F0FC8    ;     ldrb R0, erase_b_d
00001020: E54F0FD8    ;     strb R0, erase_b
00001024: E55F0FCF    ;     ldrb R0, slow_b_d
00001028: E54F0FDF    ;     strb R0, slow_b
0000102C: E55F0FD6    ;     ldrb R0, step_b_d
00001030: E54F0FE6    ;     strb R0, step_b
00001034:             ; 
00001034: E3540000    ;     cmp R4, #0
00001038: 0A000003    ;     beq setupOptionsDEnd
0000103C:             ; 
0000103C: E55F0FE5    ;     ldrb R0, width_d
00001040: E54F0FF5    ;     strb R0, width
00001044: E55F0FEC    ;     ldrb R0, height_d
00001048: E54F0FFC    ;     strb R0, height
0000104C:             ; 
0000104C:             ; setupOptionsDEnd
0000104C: EBFFFFBD    ;     bl printoptions
00001050:             ; 
00001050: E8BD4010    ;     pop {R14, R4}
00001054: E1A0F00E    ;     mov R15, R14 ;;RET
00001058:             ; 
00001058:             ; setupCustom
00001058:             ; ;;ask for erase, slow, step, and conditionally dims
00001058:             ; 
00001058:             ; ;;ask step
00001058:             ; ;;ask erase
00001058:             ; ;;if (!step)
00001058:             ; ;;  if erase
00001058:             ; ;;      print(recommend slow)
00001058:             ; ;;  ask slow
00001058:             ; 
00001058: E3A01001    ;     mov R1, #1
0000105C:             ; 
0000105C: E28F0018    ;     adrl R0, askstep
00001060: E2800B02    ; 
00001064: EF000003    ;     swi 3
00001068: EF000001    ;     swi 1
0000106C: EF000000    ;     swi 0 
00001070: E3500059    ;     cmp R0, #'Y' 
00001074: E3A0000A    ;     ldr R0, =nl
00001078: EF000000    ;     swi 0
0000107C: 13A01000    ;     movne R1, #0
00001080: E24F0036    ;     adrl R0, step_b
00001084: E2400A01    ; 
00001088: E5401000    ;     strb R1, [R0]
0000108C:             ; 
0000108C: E3A01001    ;     mov R1, #1
00001090:             ; 
00001090: E28F00B3    ;     adrl R0, askerase
00001094: E2800C07    ; 
00001098: EF000003    ;     swi 3
0000109C: EF000001    ;     swi 1
000010A0: EF000000    ;     swi 0
000010A4: E3500059    ;     cmp R0, #'Y'
000010A8: E3A0000A    ;     ldr R0, =nl
000010AC: EF000000    ;     swi 0
000010B0: 13A01000    ;     movne R1, #0
000010B4: E24F006C    ;     adrl R0, erase_b
000010B8: E2400A01    ; 
000010BC: E5401000    ;     strb R1, [R0]
000010C0:             ; 
000010C0: E24F0076    ;     adrl R0, step_b
000010C4: E2400A01    ; 
000010C8: E5500000    ;     ldrb R0, [R0]
000010CC: E3500001    ;     cmp R0, #1
000010D0: 0A000011    ;     beq setupCustomskipslow
000010D4:             ; 
000010D4: E3510001    ;     cmp R1, #1 ;;if erase is on
000010D8: E28F004F    ;     adrl R0, warneraseslow
000010DC: E2800B02    ; 
000010E0: 0F000003    ;     swieq 3
000010E4:             ; 
000010E4: E3A01001    ;     mov R1, #1
000010E8:             ;  
000010E8: E28F0FDD    ;     adrl R0, askslow
000010EC: E2800B01    ; 
000010F0: EF000003    ;     swi 3
000010F4: EF000001    ;     swi 1
000010F8: EF000000    ;     swi 0 
000010FC: E3500059    ;     cmp R0, #'Y' 
00001100: E3A0000A    ;     ldr R0, =nl
00001104: EF000000    ;     swi 0
00001108: 13A01000    ;     movne R1, #0
0000110C: E24F00C3    ;     adrl R0, slow_b
00001110: E2400A01    ; 
00001114: E5401000    ;     strb R1, [R0] ;;[[maybe]] changed but not checked, go here if error
00001118:             ; 
00001118: EA000015    ;     b setupCustomDimsCheck
0000111C:             ; 
0000111C:             ; setupCustomskipslow
0000111C: E3A00000    ;     mov R0, #0
00001120: E24F10D7    ;     adrl R1, slow_b
00001124: E2411A01    ; 
00001128: E5410000    ;     strb R0, [R1]
0000112C:             ; 
0000112C: EA000010    ;     b setupCustomDimsCheck
00001130:             ; 
00001130:             ; printrange
00001130:             ; ;;INP --
00001130:             ; ;;OUT --
00001130: E28F00AE    ;     adrl R0, bracket_open
00001134: E2800A01    ; 
00001138: EF000003    ;     swi 3
0000113C:             ; 
0000113C: E24F00EF    ;     adrl R0, range_min
00001140: E2400A01    ; 
00001144: E5500000    ;     ldrb R0, [R0]
00001148: EF000004    ;     swi 4
0000114C:             ; 
0000114C: E28F0E83    ;     adrl R0, dash
00001150: EF000003    ;     swi 3
00001154:             ; 
00001154: E24F0006    ;     adrl R0, range_max
00001158: E2400C11    ; 
0000115C: E5500000    ;     ldrb R0, [R0]
00001160: EF000004    ;     swi 4
00001164:             ; 
00001164: E28F001A    ;     adrl R0, b_close_colon
00001168: E2800B02    ; 
0000116C: EF000003    ;     swi 3
00001170:             ; 
00001170: E1A0F00E    ;     mov R15, R14
00001174:             ; 
00001174:             ; setupCustomDimsCheck
00001174: E3540000    ;     cmp R4, #0
00001178: 0A000043    ;     beq customend
0000117C:             ; 
0000117C: E28F00E9    ;     adrl R0, askwid
00001180: E2800C07    ; 
00001184: EF000003    ;     swi 3
00001188:             ; 
00001188: EBFFFFE8    ;     bl printrange
0000118C:             ; 
0000118C:             ; getwid
0000118C: E3A0000A    ;     ldr R0, =enter
00001190: E3A01003    ;     mov R1, #3
00001194: E3A02001    ;     mov R2, #1
00001198: EBFFFEAB    ;     bl getstring
0000119C: E1A04000    ;     mov R4, R0
000011A0:             ; 
000011A0: EBFFFE5F    ;     bl strtoi
000011A4: E1A05000    ;     mov R5, R0
000011A8:             ;     
000011A8: E1A00004    ;     mov R0, R4
000011AC: EB0000CD    ;     bl free ;;free the collected string
000011B0:             ; 
000011B0: E1A01005    ;     mov R1, R5
000011B4:             ; 
000011B4: EBFFFD9D    ;     bl newline
000011B8:             ; 
000011B8: E24F406B    ;     adrl R4, range_min
000011BC: E2444C11    ; 
000011C0: E5544000    ;     ldrb R4, [R4]
000011C4: E24F5076    ;     adrl R5, range_max
000011C8: E2455C11    ; 
000011CC: E5555000    ;     ldrb R5, [R5]
000011D0:             ; 
000011D0: E1510005    ;     cmp R1, R5
000011D4: CA000005    ;     bgt getwidFail
000011D8: E1510004    ;     cmp R1, R4
000011DC: BA000003    ;     blt getwidFail
000011E0:             ; 
000011E0: E24F0095    ;     adrl R0, width
000011E4: E2400C11    ; 
000011E8: E5401000    ;     strb R1, [R0]
000011EC:             ; 
000011EC: EA000004    ;     b getheisetup
000011F0:             ; 
000011F0:             ; getwidFail
000011F0: E28F00A9    ;     adrl R0, getwidfailmsg
000011F4: E2800C07    ; 
000011F8: EF000003    ;     swi 3
000011FC:             ; 
000011FC: EBFFFFCB    ;     bl printrange
00001200:             ; 
00001200: EAFFFFE1    ;     b getwid
00001204:             ; 
00001204:             ; getheisetup
00001204: E28F007E    ;     adrl R0, askhei
00001208: E2800C07    ; 
0000120C: EF000003    ;     swi 3
00001210:             ; 
00001210: EBFFFFC6    ;     bl printrange
00001214:             ; 
00001214:             ; gethei
00001214: E3A0000A    ;     ldr R0, =enter
00001218: E3A01003    ;     mov R1, #3
0000121C: E3A02001    ;     mov R2, #1
00001220: EBFFFE89    ;     bl getstring
00001224: E1A04000    ;     mov R4, R0
00001228:             ; 
00001228: EBFFFE3D    ;     bl strtoi
0000122C: E1A05000    ;     mov R5, R0
00001230:             ; 
00001230: E1A00004    ;     mov R0, R4
00001234: EB0000AB    ;     bl free
00001238:             ; 
00001238: E1A01005    ;     mov R1, R5
0000123C:             ; 
0000123C: EBFFFD7B    ;     bl newline
00001240:             ; 
00001240: E24F40F3    ;     adrl R4, range_min
00001244: E2444C11    ; 
00001248: E5544000    ;     ldrb R4, [R4]
0000124C: E24F50FE    ;     adrl R5, range_max
00001250: E2455C11    ; 
00001254: E5555000    ;     ldrb R5, [R5]
00001258:             ; 
00001258: E1510005    ;     cmp R1, R5
0000125C: CA000005    ;     bgt getheiFail
00001260: E1510004    ;     cmp R1, R4
00001264: BA000003    ;     blt getheiFail
00001268:             ; 
00001268: E24F2F87    ;     adrl R2, height
0000126C: E2422A01    ; 
00001270: E5421000    ;     strb R1, [R2]
00001274:             ; 
00001274: EA000004    ;     b customend
00001278:             ; 
00001278:             ; getheiFail
00001278: E28F004D    ;     adrl R0, getheifailmsg
0000127C: E2800C07    ; 
00001280: EF000003    ;     swi 3
00001284:             ; 
00001284: EBFFFFA9    ;     bl printrange
00001288:             ; 
00001288: EAFFFFE1    ;     b gethei
0000128C:             ; 
0000128C:             ; customend
0000128C: EBFFFF2D    ;     bl printoptions
00001290:             ; 
00001290: E8BD4010    ;     pop {R14, R4}
00001294: E1A0F00E    ;     mov R15, R14 ;;RET
00001298:             ; 
00001298:             ; 
00001298:             ; updategrid
00001298:             ; ;;INP in R0 is the active grid
00001298:             ; ;;INP in R1 is the passive grid
00001298:             ; ;;passive grid is the one being updated based on the value in the activeGrid
00001298:             ; ;;RET --
00001298:             ; ;;for row from 0 to height - 1
00001298:             ; ;;  for col from 0 to width - 1
00001298:             ; ;;      int n = countNeighbours(activeGrid, row, col)
00001298:             ; ;;      int s = activeGrid[row][col]
00001298:             ; ;;      
00001298:             ; ;;      if (s == alive)
00001298:             ; ;;          passiveGrid[row][col] = n == 3 or n == 2
00001298:             ; ;;      else
00001298:             ; ;;          passiveGrid[row][col] = n == 3
00001298:             ; 
00001298:             ; ;;  R4 holds the row
00001298:             ; ;;  R5 holds the col
00001298:             ; ;;  R6 holds the width
00001298:             ; ;;  R7 holds the height
00001298:             ; ;;  R8 holds the active grid
00001298:             ; ;;  R9 holds the passive grid
00001298:             ; 
00001298: E92D47F0    ;     push {R14, R4-R10}
0000129C:             ; 
0000129C: E24F6051    ;     adrl R6, width
000012A0: E2466C12    ; 
000012A4: E5566000    ;     ldrb R6, [R6]
000012A8: E24F7F97    ;     adrl R7, height
000012AC: E2477A01    ; 
000012B0: E5577000    ;     ldrb R7, [R7]
000012B4:             ; 
000012B4: E1A08000    ;     mov R8, R0
000012B8: E1A09001    ;     mov R9, R1
000012BC:             ; 
000012BC: E3A04000    ;     mov R4, #0 ;;row
000012C0:             ; updategridrowloop
000012C0: E1540007    ;     cmp R4, R7
000012C4: 0A00001A    ;     beq updategridrowlend
000012C8:             ; 
000012C8: E3A05000    ;     mov R5, #0 ;;col
000012CC:             ; updategridcolloop
000012CC: E1550006    ;     cmp R5, R6
000012D0: 0A000014    ;     beq updategridccollend
000012D4:             ; 
000012D4: E1A00008    ;     mov R0, R8
000012D8: E1A01004    ;     mov R1, R4
000012DC: E1A02005    ;     mov R2, R5
000012E0: EB000015    ;     bl countneighbours
000012E4:             ; 
000012E4: E0215694    ;     mla R1, R4, R6, R5 ;;R1 = row * width + col
000012E8: E7D82001    ;     ldrb R2, [R8, R1] ;;grid[R1]
000012EC:             ;     ;;R0 holds the n count
000012EC: E3520000    ;     cmp R2, #0
000012F0: 0A000006    ;     beq updatedead
000012F4:             ; 
000012F4:             ; updatealive
000012F4: E3A03000    ;     mov R3, #0
000012F8: E3500003    ;     cmp R0, #3
000012FC: 03A03001    ;     moveq R3, #1
00001300: E3500002    ;     cmp R0, #2
00001304: 03A03001    ;     moveq R3, #1
00001308: E7C93001    ;     strb R3, [R9, R1]
0000130C: EA000003    ;     b updatelcont
00001310:             ; 
00001310:             ; updatedead
00001310: E3A03001    ;     mov R3, #1
00001314: E3500003    ;     cmp R0, #3
00001318: 13A03000    ;     movne R3, #0
0000131C: E7C93001    ;     strb R3, [R9, R1]
00001320:             ; 
00001320:             ; updatelcont
00001320: E2855001    ;     add R5, R5, #1
00001324: EAFFFFE8    ;     b updategridcolloop
00001328:             ; 
00001328:             ; updategridccollend
00001328: E3A05000    ;     mov R5, #0
0000132C: E2844001    ;     add R4, R4, #1
00001330: EAFFFFE2    ;     b updategridrowloop
00001334:             ; 
00001334:             ; updategridrowlend
00001334:             ; updategridend
00001334: E8BD47F0    ;     pop {R14, R4-R10}
00001338: E1A0F00E    ;     mov R15, R14
0000133C:             ; 
0000133C:             ; 
0000133C:             ; countneighbours
0000133C:             ; ;;INP in R0 is the activeGrid
0000133C:             ; ;;INP in R1 is the row
0000133C:             ; ;;INP in R2 is the col
0000133C:             ; ;;OUT in R0 is the number of neighbours
0000133C:             ; 
0000133C:             ; ;;offsets = [[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]]
0000133C:             ; ;;tot = 0
0000133C:             ; ;;for offset in offsets
0000133C:             ; ;;  if (isinrange(row + offset[0], col + offset[1]))
0000133C:             ; ;;      tot += grid[row + offset[0]][col + offset[1]]
0000133C:             ; ;;return tot
0000133C: E92D4FF0    ;     push {R14, R4-R11} ;;I used the fp before I knew it wasn't a general purpose one, its fine 
                      ; in this context anyway
00001340:             ; 
00001340: E24F4D4D    ;     adrl R4, offsets ;;holds the offset
00001344:             ; 
00001344: E1A07000    ;     mov R7, R0
00001348: E1A08001    ;     mov R8, R1
0000134C: E1A09002    ;     mov R9, R2
00001350: E3A0A000    ;     mov R10, #0 ;;R10 holds the total
00001354: E24FB009    ;     adrl R11, width
00001358: E24BBC13    ; 
0000135C: E55BB000    ;     ldrb R11, [R11];;R11 holds the width of the grid
00001360:             ; 
00001360: E3A03000    ;     mov R3, #0
00001364:             ; 
00001364:             ; countneighboursloop
00001364: E3530008    ;     cmp R3, #8 ;;change this ccheck to be for R4
00001368: 0A00000F    ;     beq countneighbourslend
0000136C:             ; 
0000136C: E4945004    ;     ldr R5, [R4], #4
00001370: E4946004    ;     ldr R6, [R4], #4
00001374:             ; 
00001374: E0880005    ;     add R0, R8, R5
00001378: E0891006    ;     add R1, R9, R6
0000137C:             ; 
0000137C: E2833001    ;     add R3, R3, #1
00001380:             ; 
00001380: E92D0008    ;     push {R3} ;;I should probably be using a local var on the stack, but I don't yet know how t
                      ; o setup a stack frame properly
00001384: EB00000B    ;     bl isinrange
00001388: E8BD0008    ;     pop {R3}
0000138C:             ; 
0000138C: E3500000    ;     cmp R0, #0
00001390: 0A000004    ;     beq countneighboursskipadd
00001394:             ; 
00001394: E0880005    ;     add R0, R8, R5 ;;new row
00001398: E0891006    ;     add R1, R9, R6 ;;new col ;;can assume that R0, R1 haven't changed as isinrange doesn't edit
                      ;  them, but I'm going to for now
0000139C:             ; 
0000139C: E0201B90    ;     mla R0, R0, R11, R1 ;;find offset
000013A0: E7D70000    ;     ldrb R0, [R7, R0]
000013A4: E08AA000    ;     add R10, R10, R0 ;;tot += grid[newrow][newcol]
000013A8:             ; 
000013A8:             ; countneighboursskipadd
000013A8: EAFFFFED    ;     b countneighboursloop
000013AC:             ; 
000013AC:             ; countneighbourslend
000013AC:             ; countneighboursend
000013AC: E1A0000A    ;     mov R0, R10
000013B0: E8BD4FF0    ;     pop {R14, R4-R11}
000013B4: E1A0F00E    ;     mov R15, R14
000013B8:             ; 
000013B8:             ; 
000013B8:             ; isinrange
000013B8:             ; ;;INP in R0 is the row
000013B8:             ; ;;INP in R1 is the col
000013B8:             ; ;;Uses defined width and height
000013B8:             ; ;;RET in R0 is 1 if is in range else 0
000013B8: E3A02001    ;     mov R2, #1 ;;is valid unless...
000013BC:             ; 
000013BC: E3500000    ;     cmp R0, #0
000013C0: BA00000D    ;     blt isinrangefail
000013C4:             ; 
000013C4: E3510000    ;     cmp R1, #0
000013C8: BA00000B    ;     blt isinrangefail
000013CC:             ; 
000013CC: E24F3081    ;     adrl R3, width
000013D0: E2433C13    ; 
000013D4: E5533000    ;     ldrb R3, [R3]
000013D8: E1510003    ;     cmp R1, R3
000013DC: AA000006    ;     bge isinrangefail
000013E0:             ; 
000013E0: E24F3FE5    ;     adrl R3, height
000013E4: E2433A01    ; 
000013E8: E5533000    ;     ldrb R3, [R3]
000013EC: E1500003    ;     cmp R0, R3
000013F0: AA000001    ;     bge isinrangefail
000013F4:             ; 
000013F4: E3A00001    ;     mov R0, #1
000013F8: EA000000    ;     b isinrangeend
000013FC:             ; 
000013FC:             ; isinrangefail
000013FC: E3A00000    ;     mov R0, #0
00001400:             ; 
00001400:             ; isinrangeend
00001400: E1A0F00E    ;     mov R15, R14
00001404:             ; 
00001404:             ; 
00001404:             ; ;; The heap will be a linked list of free blocks - unlike the Comodo version which stores both 
                      ; free & taken blocks 
00001404:             ; ;; This is an idea I'm stealing from the C programming book
00001404:             ; ;; Crate structure
00001404:             ; ;;  |-ptr to next crate (1 word)
00001404:             ; ;;  |-ptr to prev crate (1 word)
00001404:             ; ;;  `-Size (bytes)      (1 word)
00001404:             ; ;; 
00001404:             ; 
00001404:             ; ;;  Traversal of the heap
00001404:             ; ;;  Unlink in my Comodo implimentation the heap is not a linked list of all Crates (free or not
                      ; )
00001404:             ; ;;  That made traversing the heap for debugging purposes very easy, in this case taken crates d
                      ; o not point to the next
00001404:             ; ;;  Instead could start at head and then just go to addr + sizeof(Crate) + size. This should ta
                      ; ke us to the next crate, free or not
00001404:             ; ;;  
00001404:             ; setupHeap
00001404:             ; ;;NO INP
00001404:             ; ;;NO OUT
00001404:             ;     ;;we have the heapstart
00001404:             ;     ;;the end of the heap will be 0x100000 (it will overlap with the stack :) )
00001404: E24F0008    ;     adrl R0, heaphead
00001408: E2400B05    ; 
0000140C: E5100000    ;     ldr R0, [R0] ;;stores the mem addr of the start of the heap
00001410: E3A01601    ;     ldr R1, =max_addr ;;stores the end of the heap
00001414: E3A02801    ;     ldr R2, =stack_size
00001418: E0411002    ;     sub R1, R1, R2
0000141C:             ; 
0000141C: E0411000    ;     sub R1, R1, R0  ;;HEAPEND - HEAPSTART = TOTAL STORAGE (bytes)
00001420: E241100C    ;     sub R1, R1, #12 ;;SIZE -= SIZEOF(CRATE) (12 bytes)
00001424: E5801008    ;     str R1, [R0, #8] ;;set the size of the crate
00001428: E3A01000    ;     mov R1, #0
0000142C: E5801004    ;     str R1, [R0, #4] ;;set the prev ptr
00001430: E5801000    ;     str R1, [R0, #0] ;;set the next ptr
00001434:             ; 
00001434: E1A0F00E    ;     mov R15, R14
00001438:             ; 
00001438:             ; ;; The heap is a linked list of free Crates and so find the header and then go though until one
                      ;  satifies the size requirement
00001438:             ; ;;  end if next is 0
00001438:             ; ;;  once found either take over the crate or split it into two new crates
00001438:             ; ;;  align the bytes amount to 8 byte boundry
00001438:             ; malloc
00001438:             ; ;;INP into R0 bytes to allocate
00001438:             ; ;;OUT into R0 the ptr to the memory or 0 for no memory allocated
00001438:             ;     ;;step 1 align the bytes
00001438:             ;     ;;1001010 & 0111 = 0000010 ;2
00001438:             ;     ;;if 0 goto alignend
00001438:             ;     ;;1001010 + (8 - 2)
00001438: E92D0010    ;     push {R4}
0000143C:             ; 
0000143C: E2001007    ;     and R1, R0, #0b0111
00001440: E3510000    ;     cmp R1, #0
00001444: 0A000002    ;     beq mallignend
00001448: E3A03008    ;     mov R3, #0b1000
0000144C: E0432001    ;     sub R2, R3, R1
00001450: E0800002    ;     add R0, R0, R2
00001454:             ; 
00001454:             ; mallignend
00001454: E24F1058    ;     adrl R1, heaphead
00001458: E2411B05    ; 
0000145C: E5111000    ;     ldr R1, [R1] ;;stores a ptr to the first block
00001460:             ;     
00001460:             ; checkcrate
00001460: E5912008    ;     ldr R2, [R1, #8] ;;Size of the crate
00001464: E1500002    ;     cmp R0, R2 ;;bytes needed - bytes in crate
00001468: DA000006    ;     ble foundcrate
0000146C: E5912000    ;     ldr R2, [R1, #0] ;;get the next ptr
00001470: E3520000    ;     cmp R2, #0
00001474: 0A000001    ;     beq nocrates
00001478: E1A01002    ;     mov R1, R2 ;;swap the current crate with the next crate
0000147C: EAFFFFF7    ;     b checkcrate
00001480:             ; nocrates
00001480: E3A00000    ;     mov R0, #0
00001484: EA000015    ;     b mallocEnd
00001488:             ; 
00001488:             ; foundcrate
00001488:             ;     ;;Once a crate that we can use has been found we need to either split the crate or use the 
                      ; crate
00001488:             ;     ;;We should use the whole crate only when its size < bytesneeded + CrateHeader + 8
00001488:             ;     ;;This would give the edge case crate 8 bytes
00001488:             ;     
00001488:             ;     ;;R1 holds the found crate ptr
00001488:             ;     ;;R0 is the bytes requested and aligned
00001488: E2802014    ;     add R2, R0, #20 ;;A crate header is 12 bytes + the extra 8 bytes minimum
0000148C: E5913008    ;     ldr R3, [R1, #8]
00001490: E1530002    ;     cmp R3, R2
00001494: BA00000C    ;     blt usecrate
00001498:             ; splitcrate
00001498:             ;     ;;In this case we have a large crate that should be split up.
00001498:             ;     ;;ATM the crate will just be split up to where the requested memory is at the end of the fr
                      ; ee Crate.
00001498:             ; 
00001498: E5913008    ;     ldr R3, [R1, #8] ;;The size of the toSplit Crate
0000149C: E0433000    ;     sub R3, R3, R0 ;; size - bytesRequested
000014A0: E243300C    ;     sub R3, R3, #12 ;; size - bytesRequested - sizeof(Crate)
000014A4: E5813008    ;     str R3, [R1, #8] ;;toSplit->size = newSize
000014A8:             ; 
000014A8: E0833001    ;     add R3, R3, R1 ;; newSize + toSplit.addr
000014AC: E283400C    ;     add R4, R3, #12 ;; newSize + toSplit.addr + sizeof(Crate) = position of new Crate
000014B0:             ; 
000014B0:             ;     ;;Setup the header for the newCrate
000014B0: E3A02000    ;     mov R2, #0
000014B4: E5842000    ;     str R2, [R4, #0] ;;next = 0
000014B8: E5842004    ;     str R2, [R4, #4] ;;prev = 0
000014BC: E5840008    ;     str R0, [R4, #8] ;;size = requested and aligned
000014C0:             ; 
000014C0:             ;     ;;MAYBE: can the crates that are taken have a smaller header than those that are free. Take
                      ; n crates need not store the next, prev free nodes
000014C0:             ;     ;;This may complicate things as size would need to be moved around and the size from taken 
                      ; to free would be different. 
000014C0:             ; 
000014C0: E284400C    ;     add R4, R4, #12
000014C4:             ; 
000014C4: E1A00004    ;     mov R0, R4
000014C8:             ; 
000014C8: EA000004    ;     b mallocEnd
000014CC:             ; 
000014CC:             ; usecrate
000014CC:             ;     ;; Simplest option as we can just remove it from the list
000014CC:             ;     ;; c1 <-> c2 <-> c3 ==> c1 <-> c3
000014CC: E5912000    ;     ldr R2, [R1, #0] ;;next ptr
000014D0: E5913004    ;     ldr R3, [R1, #4] ;;prev ptr
000014D4: E5823004    ;     str R3, [R2, #4] ;;Store c1 into c3's previous
000014D8: E5832000    ;     str R2, [R3, #0] ;;Store c3 into c1's next
000014DC:             ; 
000014DC: E1A00001    ;     mov R0, R1 ;;move the found crate's address into the return register ;;The crate header is 
                      ; no longer needed
000014E0:             ; 
000014E0:             ; mallocEnd
000014E0: E8BD0010    ;     pop {R4}
000014E4: E1A0F00E    ;     mov R15, R14
000014E8:             ; 
000014E8:             ; free
000014E8:             ; ;;INP in R0 is the mem addr of the data to be freed
000014E8:             ; ;;OUT in R0 is the success code - 0 for mem freed, ¬0 for error ;;probably won't be currently 
                      ; used `=(- -)=' 
000014E8:             ;     ;;In order to free memory we need to add it back to the linked list
000014E8:             ;     ;;Following K&R's version the linked list will be ordered by address this will make finding
                      ;  consecutive memory locations that should be combined easier
000014E8:             ; 
000014E8:             ;     ;;The inputted address of the crate is the address given in malloc and so the start of the 
                      ; crate is that addr - sizeof(Crate) (#12)
000014E8:             ; 
000014E8:             ;     ;;heapHead = first Crate
000014E8:             ;     ;;current = heapHead
000014E8:             ;     ;;while (toFree.addr > current.addr)
000014E8:             ;     ;;  current = current.next
000014E8:             ;     ;;
000014E8:             ;     ;;//Add the toFree Crate inbetween the current and its previous i.e.  A<->B<->C, toFree = D
                      ;  (addr < C, addr > B) ==> A<->B<->D<->C
000014E8:             ;     ;;current->prev->next = toFree
000014E8:             ;     ;;toFree->prev = current.prev
000014E8:             ;     ;;current->prev = toFree
000014E8:             ;     ;;toFree->next = current
000014E8:             ; 
000014E8:             ;     ;; Crate structure
000014E8:             ;     ;;  |-ptr to next crate (1 word)
000014E8:             ;     ;;  |-ptr to prev crate (1 word)
000014E8:             ;     ;;  `-Size (bytes)      (1 word)
000014E8:             ; 
000014E8: E92D01F0    ;     push {R4-R8}
000014EC:             ; 
000014EC: E24F1E4F    ;     adrl R1, heaphead
000014F0: E2411A01    ; 
000014F4: E5111000    ;     ldr R1, [R1] ;;R1 will hold the current
000014F8: E240000C    ;     sub R0, R0, #12 ;;subtract sizeof(Crate) to get header pointer
000014FC:             ; freeloop
000014FC: E5912000    ;     ldr R2, [R1, #0] ;;load the ptr to the next
00001500: E1520000    ;     cmp R2, R0 ;;compare the address of the toFree to the address of current->next
00001504:             ; 
00001504: AA000003    ;     bge freelend ;;current->next.addr >= toFree.addr
00001508:             ; 
00001508: E3520000    ;     cmp R2, #0 ;;If there are no more Crates to the right then this could be a new Crate at the
                      ;  end or |F|T| it should merge left 
0000150C: 0A000009    ;     beq freelendEnd
00001510:             ; 
00001510: E1A01002    ;     mov R1, R2 ;;current = current.next
00001514:             ; 
00001514: EAFFFFF8    ;     b freeloop
00001518:             ; 
00001518:             ; freelend
00001518:             ;     ;; R1 holds the current (left)
00001518:             ;     ;; R2 holds the c->next (right)
00001518: E5912000    ;     ldr R2, [R1, #0]
0000151C:             ; 
0000151C:             ;     ;;Setup the ptrs for the crates this will help later on   left<->toFree<->right ;;left,righ
                      ; t can be 0
0000151C:             ;     ;;We're just adding the new crate to the linked list
0000151C:             ;     ;;current->next->prev = toFree
0000151C:             ;     ;;toFree->next = current->next
0000151C:             ;     ;;current->next = toFree
0000151C:             ;     ;;toFree->prev = current
0000151C:             ; 
0000151C: E5913000    ;     ldr R3, [R1, #0] ;;holds current->next
00001520: E3530000    ;     cmp R3, #0
00001524: 15830004    ;     strne R0, [R3, #4] ;;current->next->prev = toFree
00001528: E5803000    ;     str R3, [R0, #0] ;;toFree->next = current->next
0000152C: E5810000    ;     str R0, [R1, #0] ;;current->next = toFree
00001530: E5801004    ;     str R1, [R0, #4] ;;toFree->prev = current
00001534:             ; 
00001534: EA000001    ;     b freeMergeCheck
00001538:             ; 
00001538:             ; freelendEnd
00001538:             ; ;;If there are no more Crates to the right then this could be a new Crate at the end or |F|T| i
                      ; t should merge left 
00001538:             ; ;;Found a crate (current) that is to the left of the crate as we ran out of ->next ptrs
00001538:             ; ;;Need to set current->next = toFree
00001538:             ; ;;            toFree->prev = current
00001538: E5801004    ;     str R1, [R0, #4] ;;toFree->prev = current
0000153C: E5810000    ;     str R0, [R1, #0] ;;current->next = toFree
00001540:             ; 
00001540:             ; freeMergeCheck
00001540:             ;     ;;We have a ptr to current. This should be the closest Crate to the left of toFree
00001540:             ;     ;;We also have the next Crate (null or not) which is to the right of toFree
00001540:             ;     ;;Both of these crates MAY need to be merged but could also have taken crates in between
00001540:             ;     ;;First is to check if the crates are adjacent
00001540:             ;     ;;  If they are NOT then create a newCrate
00001540:             ;     ;;  If they are     then merge both
00001540:             ;     ;;  If only one     then merge either left or right
00001540:             ; 
00001540:             ;     ;;R1 will be left
00001540:             ;     ;;R2 will be right
00001540:             ; 
00001540: E3510000    ;     cmp R1, #0
00001544: 01A01000    ;     moveq R1, R0 ;;If there is no left crate then left=toFree
00001548: E3520000    ;     cmp R2, #0
0000154C: 01A02000    ;     moveq R2, R0 ;;If there is no right crate (more likely) then right=toFree
00001550:             ; 
00001550:             ; verifyLeft
00001550:             ;     ;;Check if the left is adjacent
00001550:             ;     ;;It will be if (left.addr + sizeof(Crate) + left.size == toFree.addr)
00001550:             ; 
00001550: E5913008    ;     ldr R3, [R1, #8]
00001554: E283300C    ;     add R3, R3, #12 ;;12 is sizeof(Crate) + toFree.size
00001558: E0833001    ;     add R3, R3, R1 ;;left.addr + left->size ??
0000155C:             ; 
0000155C: E1530000    ;     cmp R3, R0
00001560: 11A01000    ;     movne R1, R0
00001564:             ; 
00001564:             ; verifyRight
00001564:             ;     ;;Going from toFree to Right
00001564: E5903008    ;     ldr R3, [R0, #8] ;;get size of toFree
00001568: E283300C    ;     add R3, R3, #12 ;;12 is sizeof(Crate) + toFree.size
0000156C: E0833000    ;     add R3, R3, R0 ;; + toFree.addr
00001570:             ; 
00001570: E1530002    ;     cmp R3, R2
00001574: 11A02000    ;     movne R2, R0
00001578:             ; 
00001578:             ; merge
00001578:             ;     ;;Merge the two Crates given in R1 and R2
00001578:             ;     ;;left can be (left) or (toFree)
00001578:             ;     ;;right can be (right) or (toFree)
00001578:             ;     ;;If left == right: don't merge; create new Crate
00001578:             ;     ;;If left != right: then add to left's size
00001578:             ; 
00001578: E1510002    ;     cmp R1, R2
0000157C: 0A00000A    ;     beq mergeNew
00001580:             ; 
00001580:             ;     ;;The new size is right.addr - left.addr + right->size    from right.addr - left.addr - siz
                      ; eof(Crate) + sizeof(Crate) + right->size
00001580:             ;     ;;                                                               |left      |right
00001580:             ;     ;;                                                               |<12>|size||<12>|size|
00001580:             ;     ;;
00001580:             ;     ;;                                                               |left      
00001580:             ;     ;;                                                               |<12>|size           |
00001580:             ;     ;;
00001580:             ;     ;;I'm doing it this way as the left and right may not be contiguous i.e. if toFree has a fr
                      ; ee crate on either side
00001580:             ; 
00001580: E0423001    ;     sub R3, R2, R1
00001584: E5924008    ;     ldr R4, [R2, #8]
00001588: E0833004    ;     add R3, R3, R4
0000158C: E5813008    ;     str R3, [R1, #8]
00001590:             ; 
00001590:             ;     ;;Time to switch some ptrs
00001590:             ;     ;;Current state left.prev<->left<->right<->right.next (with left or right = toFree) or left
                      ; .prev<->left<->toFree<->right<->right.next
00001590:             ;     ;;New state would be left.prev<->left<->right.next (with left or right = toFree) or left.pr
                      ; ev<->left<->right.next
00001590:             ;     ;;Both cases end the same, so get right.next. These could be 0 but it doesn't matter
00001590:             ;     ;;Next need to change the prev and next ptrs for adjacent Crates
00001590:             ;     ;;i.e. right->next->prev = left
00001590:             ; 
00001590: E5924000    ;     ldr R4, [R2, #0] ;;right->next
00001594: E1540001    ;     cmp R4, R1
00001598: 15814000    ;     strne R4, [R1, #0] ;;left->next = right->next
0000159C: 13A04000    ;     movne R4, #0
000015A0: 15814000    ;     strne R4, [R1, #0]
000015A4:             ; 
000015A4: E3540000    ;     cmp R4, #0
000015A8: 15841004    ;     strne R1, [R4, #4] ;;right->next->prev = left
000015AC:             ; 
000015AC:             ; mergeNew
000015AC:             ;     ;;The crate has already been setup with its ptrs and had its size as well so don't need to 
                      ; do anything
000015AC:             ; 
000015AC:             ; freeEnd
000015AC: E8BD01F0    ;     pop {R4-R8}
000015B0: E1A0F00E    ;     mov R15, R14
000015B4:             ; 
000015B4:             ; align
000015B4:             ; 
000015B4:             ; ;;String defs -- The naming scheme is bad :(
000015B4: 2D 2D 2D 2D ; welcomemsg      defb "-----------Welcome to JCGOL in ARM32-----------", nl, 0
000015B8: 2D 2D 2D 2D ; 
000015BC: 2D 2D 2D 57 ; 
000015C0: 65 6C 63 6F ; 
000015C4: 6D 65 20 74 ; 
000015C8: 6F 20 4A 43 ; 
000015CC: 47 4F 4C 20 ; 
000015D0: 69 6E 20 41 ; 
000015D4: 52 4D 33 32 ; 
000015D8: 2D 2D 2D 2D ; 
000015DC: 2D 2D 2D 2D ; 
000015E0: 2D 2D 2D 0A ; 
000015E4: 00          ; 
000015E5: 28 4E 29 65 ; welcome2msg     defb "(N)ew board\n(L)oad a saved board\n(H)elp msg\n(S)ettings\n(Q)uit", nl, 0
000015E9: 77 20 62 6F ; 
000015ED: 61 72 64 0A ; 
000015F1: 28 4C 29 6F ; 
000015F5: 61 64 20 61 ; 
000015F9: 20 73 61 76 ; 
000015FD: 65 64 20 62 ; 
00001601: 6F 61 72 64 ; 
00001605: 0A 28 48 29 ; 
00001609: 65 6C 70 20 ; 
0000160D: 6D 73 67 0A ; 
00001611: 28 53 29 65 ; 
00001615: 74 74 69 6E ; 
00001619: 67 73 0A 28 ; 
0000161D: 51 29 75 69 ; 
00001621: 74 0A 00    ; 
00001624: 49 6E 76 61 ; mainchoicefail  defb "Invalid choice please enter 'n' for new board, 'l' for load a board, 'h' 
00001628: 6C 69 64 20 ; to view help message, 's' to view settings, or 'q' to close. Not cases sensative", nl, 0
0000162C: 63 68 6F 69 ; 
00001630: 63 65 20 70 ; 
00001634: 6C 65 61 73 ; 
00001638: 65 20 65 6E ; 
0000163C: 74 65 72 20 ; 
00001640: 27 6E 27 20 ; 
00001644: 66 6F 72 20 ; 
00001648: 6E 65 77 20 ; 
0000164C: 62 6F 61 72 ; 
00001650: 64 2C 20 27 ; 
00001654: 6C 27 20 66 ; 
00001658: 6F 72 20 6C ; 
0000165C: 6F 61 64 20 ; 
00001660: 61 20 62 6F ; 
00001664: 61 72 64 2C ; 
00001668: 20 27 68 27 ; 
0000166C: 20 74 6F 20 ; 
00001670: 76 69 65 77 ; 
00001674: 20 68 65 6C ; 
00001678: 70 20 6D 65 ; 
0000167C: 73 73 61 67 ; 
00001680: 65 2C 20 27 ; 
00001684: 73 27 20 74 ; 
00001688: 6F 20 76 69 ; 
0000168C: 65 77 20 73 ; 
00001690: 65 74 74 69 ; 
00001694: 6E 67 73 2C ; 
00001698: 20 6F 72 20 ; 
0000169C: 27 71 27 20 ; 
000016A0: 74 6F 20 63 ; 
000016A4: 6C 6F 73 65 ; 
000016A8: 2E 20 4E 6F ; 
000016AC: 74 20 63 61 ; 
000016B0: 73 65 73 20 ; 
000016B4: 73 65 6E 73 ; 
000016B8: 61 74 69 76 ; 
000016BC: 65 0A 00    ; 
000016BF: 53 6C 6F 77 ; helpmsg         defb "Slow mode will create a pause between each grid print to make it more rea
000016C3: 20 6D 6F 64 ; dable - can't use with step mode\nErase mode will erase the previous board before printing the 
000016C7: 65 20 77 69 ; next - [is 2x slower]\n", 0
000016CB: 6C 6C 20 63 ; 
000016CF: 72 65 61 74 ; 
000016D3: 65 20 61 20 ; 
000016D7: 70 61 75 73 ; 
000016DB: 65 20 62 65 ; 
000016DF: 74 77 65 65 ; 
000016E3: 6E 20 65 61 ; 
000016E7: 63 68 20 67 ; 
000016EB: 72 69 64 20 ; 
000016EF: 70 72 69 6E ; 
000016F3: 74 20 74 6F ; 
000016F7: 20 6D 61 6B ; 
000016FB: 65 20 69 74 ; 
000016FF: 20 6D 6F 72 ; 
00001703: 65 20 72 65 ; 
00001707: 61 64 61 62 ; 
0000170B: 6C 65 20 2D ; 
0000170F: 20 63 61 6E ; 
00001713: 27 74 20 75 ; 
00001717: 73 65 20 77 ; 
0000171B: 69 74 68 20 ; 
0000171F: 73 74 65 70 ; 
00001723: 20 6D 6F 64 ; 
00001727: 65 0A 45 72 ; 
0000172B: 61 73 65 20 ; 
0000172F: 6D 6F 64 65 ; 
00001733: 20 77 69 6C ; 
00001737: 6C 20 65 72 ; 
0000173B: 61 73 65 20 ; 
0000173F: 74 68 65 20 ; 
00001743: 70 72 65 76 ; 
00001747: 69 6F 75 73 ; 
0000174B: 20 62 6F 61 ; 
0000174F: 72 64 20 62 ; 
00001753: 65 66 6F 72 ; 
00001757: 65 20 70 72 ; 
0000175B: 69 6E 74 69 ; 
0000175F: 6E 67 20 74 ; 
00001763: 68 65 20 6E ; 
00001767: 65 78 74 20 ; 
0000176B: 2D 20 5B 69 ; 
0000176F: 73 20 32 78 ; 
00001773: 20 73 6C 6F ; 
00001777: 77 65 72 5D ; 
0000177B: 0A 00       ; 
0000177D: 53 69 6E 67 ; help2msg        defb "Single step mode will prompt for input each time a grid is drawn, you can
00001781: 6C 65 20 73 ;  (s)ave the current state or (q)uit to menu", 0
00001785: 74 65 70 20 ; 
00001789: 6D 6F 64 65 ; 
0000178D: 20 77 69 6C ; 
00001791: 6C 20 70 72 ; 
00001795: 6F 6D 70 74 ; 
00001799: 20 66 6F 72 ; 
0000179D: 20 69 6E 70 ; 
000017A1: 75 74 20 65 ; 
000017A5: 61 63 68 20 ; 
000017A9: 74 69 6D 65 ; 
000017AD: 20 61 20 67 ; 
000017B1: 72 69 64 20 ; 
000017B5: 69 73 20 64 ; 
000017B9: 72 61 77 6E ; 
000017BD: 2C 20 79 6F ; 
000017C1: 75 20 63 61 ; 
000017C5: 6E 20 28 73 ; 
000017C9: 29 61 76 65 ; 
000017CD: 20 74 68 65 ; 
000017D1: 20 63 75 72 ; 
000017D5: 72 65 6E 74 ; 
000017D9: 20 73 74 61 ; 
000017DD: 74 65 20 6F ; 
000017E1: 72 20 28 71 ; 
000017E5: 29 75 69 74 ; 
000017E9: 20 74 6F 20 ; 
000017ED: 6D 65 6E 75 ; 
000017F1: 00          ; 
000017F2: 54 68 61 6E ; mainendmsg      defb "Thank you for playing JCGOL for ARM32", nl, 0
000017F6: 6B 20 79 6F ; 
000017FA: 75 20 66 6F ; 
000017FE: 72 20 70 6C ; 
00001802: 61 79 69 6E ; 
00001806: 67 20 4A 43 ; 
0000180A: 47 4F 4C 20 ; 
0000180E: 66 6F 72 20 ; 
00001812: 41 52 4D 33 ; 
00001816: 32 0A 00    ; 
00001819: 57 6F 75 6C ; askdefaults     defb "Would you like to use the default settings? Y/n: ", 0
0000181D: 64 20 79 6F ; 
00001821: 75 20 6C 69 ; 
00001825: 6B 65 20 74 ; 
00001829: 6F 20 75 73 ; 
0000182D: 65 20 74 68 ; 
00001831: 65 20 64 65 ; 
00001835: 66 61 75 6C ; 
00001839: 74 20 73 65 ; 
0000183D: 74 74 69 6E ; 
00001841: 67 73 3F 20 ; 
00001845: 59 2F 6E 3A ; 
00001849: 20 00       ; 
0000184B: 45 6E 61 62 ; askerase        defb "Enable erase mode? Y/n: ", 0
0000184F: 6C 65 20 65 ; 
00001853: 72 61 73 65 ; 
00001857: 20 6D 6F 64 ; 
0000185B: 65 3F 20 59 ; 
0000185F: 2F 6E 3A 20 ; 
00001863: 00          ; 
00001864: 45 6E 61 62 ; askslow         defb "Enable slow mode? Y/n: ", 0
00001868: 6C 65 20 73 ; 
0000186C: 6C 6F 77 20 ; 
00001870: 6D 6F 64 65 ; 
00001874: 3F 20 59 2F ; 
00001878: 6E 3A 20 00 ; 
0000187C: 45 6E 61 62 ; askstep         defb "Enable step mode? Y/n: ", 0
00001880: 6C 65 20 73 ; 
00001884: 74 65 70 20 ; 
00001888: 6D 6F 64 65 ; 
0000188C: 3F 20 59 2F ; 
00001890: 6E 3A 20 00 ; 
00001894: 43 61 6E 6E ; stepslowwarning defb "Cannot have slow and step mode active at the same time, disabling slow mo
00001898: 6F 74 20 68 ; de", nl, 0
0000189C: 61 76 65 20 ; 
000018A0: 73 6C 6F 77 ; 
000018A4: 20 61 6E 64 ; 
000018A8: 20 73 74 65 ; 
000018AC: 70 20 6D 6F ; 
000018B0: 64 65 20 61 ; 
000018B4: 63 74 69 76 ; 
000018B8: 65 20 61 74 ; 
000018BC: 20 74 68 65 ; 
000018C0: 20 73 61 6D ; 
000018C4: 65 20 74 69 ; 
000018C8: 6D 65 2C 20 ; 
000018CC: 64 69 73 61 ; 
000018D0: 62 6C 69 6E ; 
000018D4: 67 20 73 6C ; 
000018D8: 6F 77 20 6D ; 
000018DC: 6F 64 65 0A ; 
000018E0: 00          ; 
000018E1: 52 65 74 75 ; savedchoice     defb "Return to menu? (n for continue sim) Y/n: ", 0
000018E5: 72 6E 20 74 ; 
000018E9: 6F 20 6D 65 ; 
000018ED: 6E 75 3F 20 ; 
000018F1: 28 6E 20 66 ; 
000018F5: 6F 72 20 63 ; 
000018F9: 6F 6E 74 69 ; 
000018FD: 6E 75 65 20 ; 
00001901: 73 69 6D 29 ; 
00001905: 20 59 2F 6E ; 
00001909: 3A 20 00    ; 
0000190C: 50 6C 65 61 ; askname         defb "Please enter a name for the grid: ", 0
00001910: 73 65 20 65 ; 
00001914: 6E 74 65 72 ; 
00001918: 20 61 20 6E ; 
0000191C: 61 6D 65 20 ; 
00001920: 66 6F 72 20 ; 
00001924: 74 68 65 20 ; 
00001928: 67 72 69 64 ; 
0000192C: 3A 20 00    ; 
0000192F: 45 72 61 73 ; warneraseslow   defb "Erase mode is active it is recommended to also use slow mode", nl, 0
00001933: 65 20 6D 6F ; 
00001937: 64 65 20 69 ; 
0000193B: 73 20 61 63 ; 
0000193F: 74 69 76 65 ; 
00001943: 20 69 74 20 ; 
00001947: 69 73 20 72 ; 
0000194B: 65 63 6F 6D ; 
0000194F: 6D 65 6E 64 ; 
00001953: 65 64 20 74 ; 
00001957: 6F 20 61 6C ; 
0000195B: 73 6F 20 75 ; 
0000195F: 73 65 20 73 ; 
00001963: 6C 6F 77 20 ; 
00001967: 6D 6F 64 65 ; 
0000196B: 0A 00       ; 
0000196D: 50 6C 65 61 ; askwid          defb "Please enter a width (", 0
00001971: 73 65 20 65 ; 
00001975: 6E 74 65 72 ; 
00001979: 20 61 20 77 ; 
0000197D: 69 64 74 68 ; 
00001981: 20 28 00    ; 
00001984: 2D 00       ; dash            defb "-", 0
00001986: 29 3A 20 00 ; b_close_colon   defb "): ",0
0000198A: 50 6C 65 61 ; askhei          defb "Please enter a height ", 0
0000198E: 73 65 20 65 ; 
00001992: 6E 74 65 72 ; 
00001996: 20 61 20 68 ; 
0000199A: 65 69 67 68 ; 
0000199E: 74 20 00    ; 
000019A1: 49 6E 76 61 ; getwidfailmsg   defb "Invalid width please enter a value between ", 0
000019A5: 6C 69 64 20 ; 
000019A9: 77 69 64 74 ; 
000019AD: 68 20 70 6C ; 
000019B1: 65 61 73 65 ; 
000019B5: 20 65 6E 74 ; 
000019B9: 65 72 20 61 ; 
000019BD: 20 76 61 6C ; 
000019C1: 75 65 20 62 ; 
000019C5: 65 74 77 65 ; 
000019C9: 65 6E 20 00 ; 
000019CD: 49 6E 76 61 ; getheifailmsg   defb "Invalid height please enter a value between ", 0
000019D1: 6C 69 64 20 ; 
000019D5: 68 65 69 67 ; 
000019D9: 68 74 20 70 ; 
000019DD: 6C 65 61 73 ; 
000019E1: 65 20 65 6E ; 
000019E5: 74 65 72 20 ; 
000019E9: 61 20 76 61 ; 
000019ED: 6C 75 65 20 ; 
000019F1: 62 65 74 77 ; 
000019F5: 65 65 6E 20 ; 
000019F9: 00          ; 
000019FA:             ; 
000019FA:             ; ;;[[todo]] change to printing the current options
000019FA: 55 73 69 6E ; usingDefault    defb "Using default values: dims=(18, 18) slowMode=Off eraseMode=Off stepMode=O
000019FE: 67 20 64 65 ; n", nl, 0
00001A02: 66 61 75 6C ; 
00001A06: 74 20 76 61 ; 
00001A0A: 6C 75 65 73 ; 
00001A0E: 3A 20 64 69 ; 
00001A12: 6D 73 3D 28 ; 
00001A16: 31 38 2C 20 ; 
00001A1A: 31 38 29 20 ; 
00001A1E: 73 6C 6F 77 ; 
00001A22: 4D 6F 64 65 ; 
00001A26: 3D 4F 66 66 ; 
00001A2A: 20 65 72 61 ; 
00001A2E: 73 65 4D 6F ; 
00001A32: 64 65 3D 4F ; 
00001A36: 66 66 20 73 ; 
00001A3A: 74 65 70 4D ; 
00001A3E: 6F 64 65 3D ; 
00001A42: 4F 6E 0A 00 ; 
00001A46: 55 73 69 6E ; usingDefWODims  defb "Using default values: slowMode=Off eraseMode=Off stepMode=On", nl, 0
00001A4A: 67 20 64 65 ; 
00001A4E: 66 61 75 6C ; 
00001A52: 74 20 76 61 ; 
00001A56: 6C 75 65 73 ; 
00001A5A: 3A 20 73 6C ; 
00001A5E: 6F 77 4D 6F ; 
00001A62: 64 65 3D 4F ; 
00001A66: 66 66 20 65 ; 
00001A6A: 72 61 73 65 ; 
00001A6E: 4D 6F 64 65 ; 
00001A72: 3D 4F 66 66 ; 
00001A76: 20 73 74 65 ; 
00001A7A: 70 4D 6F 64 ; 
00001A7E: 65 3D 4F 6E ; 
00001A82: 0A 00       ; 
00001A84:             ; 
00001A84: 43 75 72 72 ; optionsp_1      defb "Current options: dims=(", 0 ;;width
00001A88: 65 6E 74 20 ; 
00001A8C: 6F 70 74 69 ; 
00001A90: 6F 6E 73 3A ; 
00001A94: 20 64 69 6D ; 
00001A98: 73 3D 28 00 ; 
00001A9C: 2C 20 00    ; optionsp_2      defb ", ", 0 ;;height
00001A9F: 29 20 73 6C ; optionsp_3      defb ") slowMode=", 0 ;;OFF/ON
00001AA3: 6F 77 4D 6F ; 
00001AA7: 64 65 3D 00 ; 
00001AAB: 20 65 72 61 ; optionsp_4      defb " eraseMode=", 0 ;;^
00001AAF: 73 65 4D 6F ; 
00001AB3: 64 65 3D 00 ; 
00001AB7: 20 73 74 65 ; optionsp_5      defb " stepMode=", 0  ;;^
00001ABB: 70 4D 6F 64 ; 
00001ABF: 65 3D 00    ; 
00001AC2:             ; 
00001AC2: 59 6F 75 27 ; mainloopittsmsg defb "You've reached the max itterations before waiting for input. You can chan
00001AC6: 76 65 20 72 ; ge this in settings. Press any key to continue, 'q' to quit, and 's' to save the grid", nl, 0
00001ACA: 65 61 63 68 ; 
00001ACE: 65 64 20 74 ; 
00001AD2: 68 65 20 6D ; 
00001AD6: 61 78 20 69 ; 
00001ADA: 74 74 65 72 ; 
00001ADE: 61 74 69 6F ; 
00001AE2: 6E 73 20 62 ; 
00001AE6: 65 66 6F 72 ; 
00001AEA: 65 20 77 61 ; 
00001AEE: 69 74 69 6E ; 
00001AF2: 67 20 66 6F ; 
00001AF6: 72 20 69 6E ; 
00001AFA: 70 75 74 2E ; 
00001AFE: 20 59 6F 75 ; 
00001B02: 20 63 61 6E ; 
00001B06: 20 63 68 61 ; 
00001B0A: 6E 67 65 20 ; 
00001B0E: 74 68 69 73 ; 
00001B12: 20 69 6E 20 ; 
00001B16: 73 65 74 74 ; 
00001B1A: 69 6E 67 73 ; 
00001B1E: 2E 20 50 72 ; 
00001B22: 65 73 73 20 ; 
00001B26: 61 6E 79 20 ; 
00001B2A: 6B 65 79 20 ; 
00001B2E: 74 6F 20 63 ; 
00001B32: 6F 6E 74 69 ; 
00001B36: 6E 75 65 2C ; 
00001B3A: 20 27 71 27 ; 
00001B3E: 20 74 6F 20 ; 
00001B42: 71 75 69 74 ; 
00001B46: 2C 20 61 6E ; 
00001B4A: 64 20 27 73 ; 
00001B4E: 27 20 74 6F ; 
00001B52: 20 73 61 76 ; 
00001B56: 65 20 74 68 ; 
00001B5A: 65 20 67 72 ; 
00001B5E: 69 64 0A 00 ; 
00001B62:             ; 
00001B62: 43 68 6F 6F ; askgenoption    defb "Choose between (R)andom generation or (D)rawing the grid", 0
00001B66: 73 65 20 62 ; 
00001B6A: 65 74 77 65 ; 
00001B6E: 65 6E 20 28 ; 
00001B72: 52 29 61 6E ; 
00001B76: 64 6F 6D 20 ; 
00001B7A: 67 65 6E 65 ; 
00001B7E: 72 61 74 69 ; 
00001B82: 6F 6E 20 6F ; 
00001B86: 72 20 28 44 ; 
00001B8A: 29 72 61 77 ; 
00001B8E: 69 6E 67 20 ; 
00001B92: 74 68 65 20 ; 
00001B96: 67 72 69 64 ; 
00001B9A: 00          ; 
00001B9B: 49 6E 76 61 ; setupGrdFailmsg defb "Invalid choice, use `R` for random generation and `d` for drawing the gri
00001B9F: 6C 69 64 20 ; d. Not case sensative: ", 0
00001BA3: 63 68 6F 69 ; 
00001BA7: 63 65 2C 20 ; 
00001BAB: 75 73 65 20 ; 
00001BAF: 60 52 60 20 ; 
00001BB3: 66 6F 72 20 ; 
00001BB7: 72 61 6E 64 ; 
00001BBB: 6F 6D 20 67 ; 
00001BBF: 65 6E 65 72 ; 
00001BC3: 61 74 69 6F ; 
00001BC7: 6E 20 61 6E ; 
00001BCB: 64 20 60 64 ; 
00001BCF: 60 20 66 6F ; 
00001BD3: 72 20 64 72 ; 
00001BD7: 61 77 69 6E ; 
00001BDB: 67 20 74 68 ; 
00001BDF: 65 20 67 72 ; 
00001BE3: 69 64 2E 20 ; 
00001BE7: 4E 6F 74 20 ; 
00001BEB: 63 61 73 65 ; 
00001BEF: 20 73 65 6E ; 
00001BF3: 73 61 74 69 ; 
00001BF7: 76 65 3A 20 ; 
00001BFB: 00          ; 
00001BFC: 45 6E 74 65 ; askseed         defb "Enter 4 characters to be used as the seed: ", 0
00001C00: 72 20 34 20 ; 
00001C04: 63 68 61 72 ; 
00001C08: 61 63 74 65 ; 
00001C0C: 72 73 20 74 ; 
00001C10: 6F 20 62 65 ; 
00001C14: 20 75 73 65 ; 
00001C18: 64 20 61 73 ; 
00001C1C: 20 74 68 65 ; 
00001C20: 20 73 65 65 ; 
00001C24: 64 3A 20 00 ; 
00001C28: 55 73 69 6E ; drawinfomsg     defb "Using '1' and '0' choose the value of the current cell", nl, 0
00001C2C: 67 20 27 31 ; 
00001C30: 27 20 61 6E ; 
00001C34: 64 20 27 30 ; 
00001C38: 27 20 63 68 ; 
00001C3C: 6F 6F 73 65 ; 
00001C40: 20 74 68 65 ; 
00001C44: 20 76 61 6C ; 
00001C48: 75 65 20 6F ; 
00001C4C: 66 20 74 68 ; 
00001C50: 65 20 63 75 ; 
00001C54: 72 72 65 6E ; 
00001C58: 74 20 63 65 ; 
00001C5C: 6C 6C 0A 00 ; 
00001C60: 49 6E 76 61 ; drawfailmsg     defb "Invalid input please enter 1 or 0: ", nl, 0
00001C64: 6C 69 64 20 ; 
00001C68: 69 6E 70 75 ; 
00001C6C: 74 20 70 6C ; 
00001C70: 65 61 73 65 ; 
00001C74: 20 65 6E 74 ; 
00001C78: 65 72 20 31 ; 
00001C7C: 20 6F 72 20 ; 
00001C80: 30 3A 20 0A ; 
00001C84: 00          ; 
00001C85: 47 72 69 64 ; gridfailmsg     defb "Grid was not properly initialised, consider smaller dims", nl, 0
00001C89: 20 77 61 73 ; 
00001C8D: 20 6E 6F 74 ; 
00001C91: 20 70 72 6F ; 
00001C95: 70 65 72 6C ; 
00001C99: 79 20 69 6E ; 
00001C9D: 69 74 69 61 ; 
00001CA1: 6C 69 73 65 ; 
00001CA5: 64 2C 20 63 ; 
00001CA9: 6F 6E 73 69 ; 
00001CAD: 64 65 72 20 ; 
00001CB1: 73 6D 61 6C ; 
00001CB5: 6C 65 72 20 ; 
00001CB9: 64 69 6D 73 ; 
00001CBD: 0A 00       ; 
00001CBF: 54 68 65 72 ; gridsavefail    defb "There was an error allocating memory for the grid save", nl, 0
00001CC3: 65 20 77 61 ; 
00001CC7: 73 20 61 6E ; 
00001CCB: 20 65 72 72 ; 
00001CCF: 6F 72 20 61 ; 
00001CD3: 6C 6C 6F 63 ; 
00001CD7: 61 74 69 6E ; 
00001CDB: 67 20 6D 65 ; 
00001CDF: 6D 6F 72 79 ; 
00001CE3: 20 66 6F 72 ; 
00001CE7: 20 74 68 65 ; 
00001CEB: 20 67 72 69 ; 
00001CEF: 64 20 73 61 ; 
00001CF3: 76 65 0A 00 ; 
00001CF7: 54 68 65 72 ; gridloadempty   defb "There are no saved grids, start a step mode sim and save the grid, return
00001CFB: 65 20 61 72 ;  to main menu to load", nl, 0
00001CFF: 65 20 6E 6F ; 
00001D03: 20 73 61 76 ; 
00001D07: 65 64 20 67 ; 
00001D0B: 72 69 64 73 ; 
00001D0F: 2C 20 73 74 ; 
00001D13: 61 72 74 20 ; 
00001D17: 61 20 73 74 ; 
00001D1B: 65 70 20 6D ; 
00001D1F: 6F 64 65 20 ; 
00001D23: 73 69 6D 20 ; 
00001D27: 61 6E 64 20 ; 
00001D2B: 73 61 76 65 ; 
00001D2F: 20 74 68 65 ; 
00001D33: 20 67 72 69 ; 
00001D37: 64 2C 20 72 ; 
00001D3B: 65 74 75 72 ; 
00001D3F: 6E 20 74 6F ; 
00001D43: 20 6D 61 69 ; 
00001D47: 6E 20 6D 65 ; 
00001D4B: 6E 75 20 74 ; 
00001D4F: 6F 20 6C 6F ; 
00001D53: 61 64 0A 00 ; 
00001D57: 7C 69 6E 64 ; gridloadpindex  defb "|index: ", 0
00001D5B: 65 78 3A 20 ; 
00001D5F: 00          ; 
00001D60: 7C 6E 61 6D ; gridloadpname   defb "|name: ", 0
00001D64: 65 3A 20 00 ; 
00001D68: 7C 77 69 64 ; gridloadpwidth  defb "|width: ", 0
00001D6C: 74 68 3A 20 ; 
00001D70: 00          ; 
00001D71: 7C 68 65 69 ; gridloadpheight defb "|height: ", 0
00001D75: 67 68 74 3A ; 
00001D79: 20 00       ; 
00001D7B: 50 6C 65 61 ; loadboardaski   defb "Please enter the index of the grid to load, or enter a negative index to 
00001D7F: 73 65 20 65 ; not load a grid. (press enter to input)", nl, 0
00001D83: 6E 74 65 72 ; 
00001D87: 20 74 68 65 ; 
00001D8B: 20 69 6E 64 ; 
00001D8F: 65 78 20 6F ; 
00001D93: 66 20 74 68 ; 
00001D97: 65 20 67 72 ; 
00001D9B: 69 64 20 74 ; 
00001D9F: 6F 20 6C 6F ; 
00001DA3: 61 64 2C 20 ; 
00001DA7: 6F 72 20 65 ; 
00001DAB: 6E 74 65 72 ; 
00001DAF: 20 61 20 6E ; 
00001DB3: 65 67 61 74 ; 
00001DB7: 69 76 65 20 ; 
00001DBB: 69 6E 64 65 ; 
00001DBF: 78 20 74 6F ; 
00001DC3: 20 6E 6F 74 ; 
00001DC7: 20 6C 6F 61 ; 
00001DCB: 64 20 61 20 ; 
00001DCF: 67 72 69 64 ; 
00001DD3: 2E 20 28 70 ; 
00001DD7: 72 65 73 73 ; 
00001DDB: 20 65 6E 74 ; 
00001DDF: 65 72 20 74 ; 
00001DE3: 6F 20 69 6E ; 
00001DE7: 70 75 74 29 ; 
00001DEB: 0A 00       ; 
00001DED: 52 65 74 75 ; loadboardretmsg defb "Returning to main menu", nl, 0
00001DF1: 72 6E 69 6E ; 
00001DF5: 67 20 74 6F ; 
00001DF9: 20 6D 61 69 ; 
00001DFD: 6E 20 6D 65 ; 
00001E01: 6E 75 0A 00 ; 
00001E05: 49 6E 76 61 ; loadboardifail  defb "Invalid input given for the index", nl, 0
00001E09: 6C 69 64 20 ; 
00001E0D: 69 6E 70 75 ; 
00001E11: 74 20 67 69 ; 
00001E15: 76 65 6E 20 ; 
00001E19: 66 6F 72 20 ; 
00001E1D: 74 68 65 20 ; 
00001E21: 69 6E 64 65 ; 
00001E25: 78 0A 00    ; 
00001E28: 49 6E 76 61 ; loadboardirerr  defb "Invalid index, out of range", nl, 0
00001E2C: 6C 69 64 20 ; 
00001E30: 69 6E 64 65 ; 
00001E34: 78 2C 20 6F ; 
00001E38: 75 74 20 6F ; 
00001E3C: 66 20 72 61 ; 
00001E40: 6E 67 65 0A ; 
00001E44: 00          ; 
00001E45: 45 72 72 6F ; loadboardmlcerr defb "Error allocating memory for loaded grid. Returing to main menu", nl, 0
00001E49: 72 20 61 6C ; 
00001E4D: 6C 6F 63 61 ; 
00001E51: 74 69 6E 67 ; 
00001E55: 20 6D 65 6D ; 
00001E59: 6F 72 79 20 ; 
00001E5D: 66 6F 72 20 ; 
00001E61: 6C 6F 61 64 ; 
00001E65: 65 64 20 67 ; 
00001E69: 72 69 64 2E ; 
00001E6D: 20 52 65 74 ; 
00001E71: 75 72 69 6E ; 
00001E75: 67 20 74 6F ; 
00001E79: 20 6D 61 69 ; 
00001E7D: 6E 20 6D 65 ; 
00001E81: 6E 75 0A 00 ; 
00001E85: 53 75 63 63 ; loadboardsucmsg defb "Successfully loaded the grid", nl, 0
00001E89: 65 73 73 66 ; 
00001E8D: 75 6C 6C 79 ; 
00001E91: 20 6C 6F 61 ; 
00001E95: 64 65 64 20 ; 
00001E99: 74 68 65 20 ; 
00001E9D: 67 72 69 64 ; 
00001EA1: 0A 00       ; 
00001EA3: 4C 69 73 74 ; listgridmsg     defb "Listing all availible saved grids", nl, 0
00001EA7: 69 6E 67 20 ; 
00001EAB: 61 6C 6C 20 ; 
00001EAF: 61 76 61 69 ; 
00001EB3: 6C 69 62 6C ; 
00001EB7: 65 20 73 61 ; 
00001EBB: 76 65 64 20 ; 
00001EBF: 67 72 69 64 ; 
00001EC3: 73 0A 00    ; 
00001EC6: 2D 2D 2D 2D ; cutoff          defb "-----------------", nl, 0
00001ECA: 2D 2D 2D 2D ; 
00001ECE: 2D 2D 2D 2D ; 
00001ED2: 2D 2D 2D 2D ; 
00001ED6: 2D 0A 00    ; 
00001ED9: 5B 5B 61 64 ; helpinfomsg     defb "[[add]]"
00001EDD: 64 5D 5D    ; 
00001EE0: 5B 5B 61 64 ; settingsmsg     defb "[[add]]"
00001EE4: 64 5D 5D    ; 
00001EE7: 45 72 72 6F ; changearrverr_m defb "Error invalid value given (1-255) inclusive. Re-enter: ", nl, 0
00001EEB: 72 20 69 6E ; 
00001EEF: 76 61 6C 69 ; 
00001EF3: 64 20 76 61 ; 
00001EF7: 6C 75 65 20 ; 
00001EFB: 67 69 76 65 ; 
00001EFF: 6E 20 28 31 ; 
00001F03: 2D 32 35 35 ; 
00001F07: 29 20 69 6E ; 
00001F0B: 63 6C 75 73 ; 
00001F0F: 69 76 65 2E ; 
00001F13: 20 52 65 2D ; 
00001F17: 65 6E 74 65 ; 
00001F1B: 72 3A 20 0A ; 
00001F1F: 00          ; 
00001F20:             ; 
00001F20: 53 65 74 74 ; s_m1            defb "Settings", nl, "|-[0] stepMode_d     - The following 4 settings are the d
00001F24: 69 6E 67 73 ; efault values for the options", nl, "|-[1] slowMode_d", nl, "|-[2] eraseMode_d", nl, "|-[3] Dim
00001F28: 0A 7C 2D 5B ; s_d", nl, 0
00001F2C: 30 5D 20 73 ; 
00001F30: 74 65 70 4D ; 
00001F34: 6F 64 65 5F ; 
00001F38: 64 20 20 20 ; 
00001F3C: 20 20 2D 20 ; 
00001F40: 54 68 65 20 ; 
00001F44: 66 6F 6C 6C ; 
00001F48: 6F 77 69 6E ; 
00001F4C: 67 20 34 20 ; 
00001F50: 73 65 74 74 ; 
00001F54: 69 6E 67 73 ; 
00001F58: 20 61 72 65 ; 
00001F5C: 20 74 68 65 ; 
00001F60: 20 64 65 66 ; 
00001F64: 61 75 6C 74 ; 
00001F68: 20 76 61 6C ; 
00001F6C: 75 65 73 20 ; 
00001F70: 66 6F 72 20 ; 
00001F74: 74 68 65 20 ; 
00001F78: 6F 70 74 69 ; 
00001F7C: 6F 6E 73 0A ; 
00001F80: 7C 2D 5B 31 ; 
00001F84: 5D 20 73 6C ; 
00001F88: 6F 77 4D 6F ; 
00001F8C: 64 65 5F 64 ; 
00001F90: 0A 7C 2D 5B ; 
00001F94: 32 5D 20 65 ; 
00001F98: 72 61 73 65 ; 
00001F9C: 4D 6F 64 65 ; 
00001FA0: 5F 64 0A 7C ; 
00001FA4: 2D 5B 33 5D ; 
00001FA8: 20 44 69 6D ; 
00001FAC: 73 5F 64 0A ; 
00001FB0: 00          ; 
00001FB1: 7C 2D 5B 34 ; s_m2            defb "|-[4] range          - The range of values that the dims can have (1-255 
00001FB5: 5D 20 72 61 ; && range_min < range_max)", nl, 0
00001FB9: 6E 67 65 20 ; 
00001FBD: 20 20 20 20 ; 
00001FC1: 20 20 20 20 ; 
00001FC5: 20 2D 20 54 ; 
00001FC9: 68 65 20 72 ; 
00001FCD: 61 6E 67 65 ; 
00001FD1: 20 6F 66 20 ; 
00001FD5: 76 61 6C 75 ; 
00001FD9: 65 73 20 74 ; 
00001FDD: 68 61 74 20 ; 
00001FE1: 74 68 65 20 ; 
00001FE5: 64 69 6D 73 ; 
00001FE9: 20 63 61 6E ; 
00001FED: 20 68 61 76 ; 
00001FF1: 65 20 28 31 ; 
00001FF5: 2D 32 35 35 ; 
00001FF9: 20 26 26 20 ; 
00001FFD: 72 61 6E 67 ; 
00002001: 65 5F 6D 69 ; 
00002005: 6E 20 3C 20 ; 
00002009: 72 61 6E 67 ; 
0000200D: 65 5F 6D 61 ; 
00002011: 78 29 0A 00 ; 
00002015: 7C 2D 5B 35 ; s_m3            defb "|-[5] Icons          - The characters printed for an alive/dead/ptr cell"
00002019: 5D 20 49 63 ; ,nl, "`-[6] itters         - The number of itterations in the non-step version before it will w
0000201D: 6F 6E 73 20 ; ait for input", nl, 0
00002021: 20 20 20 20 ; 
00002025: 20 20 20 20 ; 
00002029: 20 2D 20 54 ; 
0000202D: 68 65 20 63 ; 
00002031: 68 61 72 61 ; 
00002035: 63 74 65 72 ; 
00002039: 73 20 70 72 ; 
0000203D: 69 6E 74 65 ; 
00002041: 64 20 66 6F ; 
00002045: 72 20 61 6E ; 
00002049: 20 61 6C 69 ; 
0000204D: 76 65 2F 64 ; 
00002051: 65 61 64 2F ; 
00002055: 70 74 72 20 ; 
00002059: 63 65 6C 6C ; 
0000205D: 0A 60 2D 5B ; 
00002061: 36 5D 20 69 ; 
00002065: 74 74 65 72 ; 
00002069: 73 20 20 20 ; 
0000206D: 20 20 20 20 ; 
00002071: 20 20 2D 20 ; 
00002075: 54 68 65 20 ; 
00002079: 6E 75 6D 62 ; 
0000207D: 65 72 20 6F ; 
00002081: 66 20 69 74 ; 
00002085: 74 65 72 61 ; 
00002089: 74 69 6F 6E ; 
0000208D: 73 20 69 6E ; 
00002091: 20 74 68 65 ; 
00002095: 20 6E 6F 6E ; 
00002099: 2D 73 74 65 ; 
0000209D: 70 20 76 65 ; 
000020A1: 72 73 69 6F ; 
000020A5: 6E 20 62 65 ; 
000020A9: 66 6F 72 65 ; 
000020AD: 20 69 74 20 ; 
000020B1: 77 69 6C 6C ; 
000020B5: 20 77 61 69 ; 
000020B9: 74 20 66 6F ; 
000020BD: 72 20 69 6E ; 
000020C1: 70 75 74 0A ; 
000020C5: 00          ; 
000020C6: 7C 2D 5B 37 ; s_m4            defb "|-[7] Drawing erase  - Bool for if when drawing the grid it should erase 
000020CA: 5D 20 44 72 ; the previous one", nl, 0
000020CE: 61 77 69 6E ; 
000020D2: 67 20 65 72 ; 
000020D6: 61 73 65 20 ; 
000020DA: 20 2D 20 42 ; 
000020DE: 6F 6F 6C 20 ; 
000020E2: 66 6F 72 20 ; 
000020E6: 69 66 20 77 ; 
000020EA: 68 65 6E 20 ; 
000020EE: 64 72 61 77 ; 
000020F2: 69 6E 67 20 ; 
000020F6: 74 68 65 20 ; 
000020FA: 67 72 69 64 ; 
000020FE: 20 69 74 20 ; 
00002102: 73 68 6F 75 ; 
00002106: 6C 64 20 65 ; 
0000210A: 72 61 73 65 ; 
0000210E: 20 74 68 65 ; 
00002112: 20 70 72 65 ; 
00002116: 76 69 6F 75 ; 
0000211A: 73 20 6F 6E ; 
0000211E: 65 0A 00    ; 
00002121: 45 6E 74 65 ; s_m             defb "Enter the index of the setting to edit or -1 to return to the menu (press
00002125: 72 20 74 68 ;  enter to input): ", 0
00002129: 65 20 69 6E ; 
0000212D: 64 65 78 20 ; 
00002131: 6F 66 20 74 ; 
00002135: 68 65 20 73 ; 
00002139: 65 74 74 69 ; 
0000213D: 6E 67 20 74 ; 
00002141: 6F 20 65 64 ; 
00002145: 69 74 20 6F ; 
00002149: 72 20 2D 31 ; 
0000214D: 20 74 6F 20 ; 
00002151: 72 65 74 75 ; 
00002155: 72 6E 20 74 ; 
00002159: 6F 20 74 68 ; 
0000215D: 65 20 6D 65 ; 
00002161: 6E 75 20 28 ; 
00002165: 70 72 65 73 ; 
00002169: 73 20 65 6E ; 
0000216D: 74 65 72 20 ; 
00002171: 74 6F 20 69 ; 
00002175: 6E 70 75 74 ; 
00002179: 29 3A 20 00 ; 
0000217D: 45 72 72 6F ; s_m_err         defb "Error invalid index. Re-enter: ", 0
00002181: 72 20 69 6E ; 
00002185: 76 61 6C 69 ; 
00002189: 64 20 69 6E ; 
0000218D: 64 65 78 2E ; 
00002191: 20 52 65 2D ; 
00002195: 65 6E 74 65 ; 
00002199: 72 3A 20 00 ; 
0000219D:             ; 
0000219D: 53 6C 6F 77 ; currentslow     defb "Slow_d: ", 0
000021A1: 5F 64 3A 20 ; 
000021A5: 00          ; 
000021A6: 45 72 61 73 ; currenterase    defb "Erase_d: ", 0
000021AA: 65 5F 64 3A ; 
000021AE: 20 00       ; 
000021B0: 53 74 65 70 ; currentstep     defb "Step_d: ", 0
000021B4: 5F 64 3A 20 ; 
000021B8: 00          ; 
000021B9: 44 69 6D 73 ; currentDims     defb "Dims: ", 0
000021BD: 3A 20 00    ; 
000021C0: 52 61 6E 67 ; currentRange    defb "Range: ", 0
000021C4: 65 3A 20 00 ; 
000021C8: 49 74 74 65 ; currentItters   defb "Itters: ", 0
000021CC: 72 73 3A 20 ; 
000021D0: 00          ; 
000021D1: 45 72 61 73 ; currentdraweras defb "Erase when drawing: ", 0
000021D5: 65 20 77 68 ; 
000021D9: 65 6E 20 64 ; 
000021DD: 72 61 77 69 ; 
000021E1: 6E 67 3A 20 ; 
000021E5: 00          ; 
000021E6: 28 00       ; bracket_open    defb "(", 0
000021E8: 2C 20 00    ; comma_space     defb ", ", 0
000021EB: 29 00       ; bracket_close   defb ")", 0
000021ED: 41 6C 69 76 ; currenticons_1  defb "Alive: ", 0
000021F1: 65 3A 20 00 ; 
000021F5: 44 65 61 64 ; currenticons_2  defb "Dead: ", 0
000021F9: 3A 20 00    ; 
000021FC: 50 74 72 3A ; currenticons_3  defb "Ptr: ", 0
00002200: 20 00       ; 
00002202: 45 6E 74 65 ; currenticons_a  defb "Enter 3 character (not seperated) for the values of the alive/dead/ptr ch
00002206: 72 20 33 20 ; aracters: ", 0
0000220A: 63 68 61 72 ; 
0000220E: 61 63 74 65 ; 
00002212: 72 20 28 6E ; 
00002216: 6F 74 20 73 ; 
0000221A: 65 70 65 72 ; 
0000221E: 61 74 65 64 ; 
00002222: 29 20 66 6F ; 
00002226: 72 20 74 68 ; 
0000222A: 65 20 76 61 ; 
0000222E: 6C 75 65 73 ; 
00002232: 20 6F 66 20 ; 
00002236: 74 68 65 20 ; 
0000223A: 61 6C 69 76 ; 
0000223E: 65 2F 64 65 ; 
00002242: 61 64 2F 70 ; 
00002246: 74 72 20 63 ; 
0000224A: 68 61 72 61 ; 
0000224E: 63 74 65 72 ; 
00002252: 73 3A 20 00 ; 
00002256: 45 72 72 6F ; mallocerr_m     defb "Error getting memory from malloc", nl, 0
0000225A: 72 20 67 65 ; 
0000225E: 74 74 69 6E ; 
00002262: 67 20 6D 65 ; 
00002266: 6D 6F 72 79 ; 
0000226A: 20 66 72 6F ; 
0000226E: 6D 20 6D 61 ; 
00002272: 6C 6C 6F 63 ; 
00002276: 0A 00       ; 
00002278: 45 72 72 6F ; getstringerr_m  defb "Error getting string, could be malloc error", nl, 0
0000227C: 72 20 67 65 ; 
00002280: 74 74 69 6E ; 
00002284: 67 20 73 74 ; 
00002288: 72 69 6E 67 ; 
0000228C: 2C 20 63 6F ; 
00002290: 75 6C 64 20 ; 
00002294: 62 65 20 6D ; 
00002298: 61 6C 6C 6F ; 
0000229C: 63 20 65 72 ; 
000022A0: 72 6F 72 0A ; 
000022A4: 00          ; 
000022A5: 49 74 74 65 ; currentitter    defb "Itters: ", 0
000022A9: 72 73 3A 20 ; 
000022AD: 00          ; 
000022AE: 45 6E 74 65 ; currentaskx     defb "Enter value for x: ", 0
000022B2: 72 20 76 61 ; 
000022B6: 6C 75 65 20 ; 
000022BA: 66 6F 72 20 ; 
000022BE: 78 3A 20 00 ; 
000022C2: 45 6E 74 65 ; currentasky     defb "Enter value for y: ", 0
000022C6: 72 20 76 61 ; 
000022CA: 6C 75 65 20 ; 
000022CE: 66 6F 72 20 ; 
000022D2: 79 3A 20 00 ; 
000022D6: 45 6E 74 65 ; currentasknew   defb "Enter new value: ", 0
000022DA: 72 20 6E 65 ; 
000022DE: 77 20 76 61 ; 
000022E2: 6C 75 65 3A ; 
000022E6: 20 00       ; 
000022E8: 45 6E 74 65 ; currentasknew_B defb "Enter new value (0 or 1): ", 0
000022EC: 72 20 6E 65 ; 
000022F0: 77 20 76 61 ; 
000022F4: 6C 75 65 20 ; 
000022F8: 28 30 20 6F ; 
000022FC: 72 20 31 29 ; 
00002300: 3A 20 00    ; 
00002303: 45 72 72 6F ; currentasknew_E defb "Error invalid re-enter: ", 0
00002307: 72 20 69 6E ; 
0000230B: 76 61 6C 69 ; 
0000230F: 64 20 72 65 ; 
00002313: 2D 65 6E 74 ; 
00002317: 65 72 3A 20 ; 
0000231B: 00          ; 
0000231C: 49 6E 76 61 ; currentarrerr   defb "Invalid value entered re-enter: ", 0
00002320: 6C 69 64 20 ; 
00002324: 76 61 6C 75 ; 
00002328: 65 20 65 6E ; 
0000232C: 74 65 72 65 ; 
00002330: 64 20 72 65 ; 
00002334: 2D 65 6E 74 ; 
00002338: 65 72 3A 20 ; 
0000233C: 00          ; 
0000233D: 49 6E 76 61 ; changearrsizmsg defb "Invalid, x >= y.", nl, 0
00002341: 6C 69 64 2C ; 
00002345: 20 78 20 3E ; 
00002349: 3D 20 79 2E ; 
0000234D: 0A 00       ; 
0000234F: 49 6E 76 61 ; changeittere_m  defb "Invalid itter value. Re-enter: ", nl, 0
00002353: 6C 69 64 20 ; 
00002357: 69 74 74 65 ; 
0000235B: 72 20 76 61 ; 
0000235F: 6C 75 65 2E ; 
00002363: 20 52 65 2D ; 
00002367: 65 6E 74 65 ; 
0000236B: 72 3A 20 0A ; 
0000236F: 00          ; 
00002370: 45 6E 74 65 ; getitters_m     defb "Enter the max itterations (1-255): ", 0
00002374: 72 20 74 68 ; 
00002378: 65 20 6D 61 ; 
0000237C: 78 20 69 74 ; 
00002380: 74 65 72 61 ; 
00002384: 74 69 6F 6E ; 
00002388: 73 20 28 31 ; 
0000238C: 2D 32 35 35 ; 
00002390: 29 3A 20 00 ; 
00002394:             ; 
00002394: 4F 4E 00    ; on_msg          defb "ON", 0
00002397: 4F 46 46 00 ; off_msg         defb "OFF", 0
0000239B: 2C 00       ; comma           defb ",", 0
0000239D:             ; 
000023A0:             ; align
000023A0: 00000000    ; heapstart       defw 0 ;;points to the end of the data this is where the heap can then begin
000023A4:             ; Remaining literals

Symbol Table: Labels
: max_addr                          00100000  Value
: stack_size                        00010000  Value
: nl                                0000000A  Value
: backspace                         00000008  Value
: minBuffSize                       00000008  Value
: enter                             0000000A  Value
: minSaveSize                       00000008  Value
: sizeofSaveI                       0000000C  Value
: heaphead                          00000004  Local -- ARM
: offsets                           00000008  Local -- ARM
: gridA                             00000048  Local -- ARM
: gridB                             0000004C  Local -- ARM
: erase_b                           00000050  Local -- ARM
: slow_b                            00000051  Local -- ARM
: step_b                            00000052  Local -- ARM
: width                             00000053  Local -- ARM
: height                            00000054  Local -- ARM
: range_min                         00000055  Local -- ARM
: range_max                         00000056  Local -- ARM
: maxitters                         00000057  Local -- ARM
: drawerase                         00000058  Local -- ARM
: alive_c                           00000059  Local -- ARM
: dead_c                            0000005A  Local -- ARM
: ptr_c                             0000005B  Local -- ARM
: erase_b_d                         0000005C  Local -- ARM
: slow_b_d                          0000005D  Local -- ARM
: step_b_d                          0000005E  Local -- ARM
: width_d                           0000005F  Local -- ARM
: height_d                          00000060  Local -- ARM
: _start                            00000064  Local -- ARM
: main                              00000094  Local -- ARM
: mainmenu                          000000C0  Local -- ARM
: mainchoice                        000000D8  Local -- ARM
: mainloopstart                     00000120  Local -- ARM
: mainloop                          00000154  Local -- ARM
: mainloopcont                      00000178  Local -- ARM
: mainloopdostep                    00000194  Local -- ARM
: mainloopskipstep                  000001BC  Local -- ARM
: gridFail                          000001E0  Local -- ARM
: mainEnd                           000001EC  Local -- ARM
: settingsmenu                      00000204  Local -- ARM
: changesetting                     00000234  Local -- ARM
: changesettingget                  00000240  Local -- ARM
: changesettingserr                 0000027C  Local -- ARM
: changesettingscont                0000028C  Local -- ARM
: changearr                         000002D4  Local -- ARM
: changearrget                      000002E8  Local -- ARM
: changearrsizeerr                  0000032C  Local -- ARM
: changearrset                      0000033C  Local -- ARM
: changearrend                      00000350  Local -- ARM
: changearrgetvalidint              00000358  Local -- ARM
: changearrgetvalidintget           0000035C  Local -- ARM
: changearrgetvalidinterr           0000038C  Local -- ARM
: changearrgetvalidintcont          000003A0  Local -- ARM
: changearrgetvalidintend           000003B0  Local -- ARM
: printdims                         000003BC  Local -- ARM
: changestep                        00000410  Local -- ARM
: changeslow                        00000428  Local -- ARM
: changeerase                       00000440  Local -- ARM
: changebool                        00000454  Local -- ARM
: changebool_cont                   00000494  Local -- ARM
: changebool_set                    000004C0  Local -- ARM
: changeboolend                     000004F0  Local -- ARM
: changedims                        000004F8  Local -- ARM
: changerange                       00000514  Local -- ARM
: changeicons                       00000530  Local -- ARM
: changeiconsmallerr                0000057C  Local -- ARM
: printicons                        0000058C  Local -- ARM
: printiconsend                     000005E0  Local -- ARM
: changeitter                       000005E4  Local -- ARM
: changeitterget                    00000608  Local -- ARM
: changeittererr                    00000650  Local -- ARM
: changeitterend                    00000664  Local -- ARM
: changedrawerase                   00000680  Local -- ARM
: changedraweraseend                00000694  Local -- ARM
: printhelp                         00000698  Local -- ARM
: newboard                          000006AC  Local -- ARM
: loadboard                         000006D4  Local -- ARM
: loadboardaskindex                 000006E8  Local -- ARM
: loadboardindex                    0000074C  Local -- ARM
: loadboardmain                     00000768  Local -- ARM
: loadboardmallocB                  000007D0  Local -- ARM
: loadboardskipB                    000007EC  Local -- ARM
: loadboardmallocfail               0000080C  Local -- ARM
: loadboardret                      0000081C  Local -- ARM
: loadboardempty                    00000828  Local -- ARM
: loadboarderr                      00000828  Local -- ARM
: loadboardsucc                     0000082C  Local -- ARM
: newline                           00000830  Local -- ARM
: step                              0000083C  Local -- ARM
: stependfail                       000008B4  Local -- ARM
: stependsucc                       000008BC  Local -- ARM
: stepend                           000008C0  Local -- ARM
: listGrids                         000008C8  Local -- ARM
: listGridsLoop                     000008FC  Local -- ARM
: listGridsEmpty                    00000990  Local -- ARM
: listGridsLend                     0000099C  Local -- ARM
: listGridsEnd                      0000099C  Local -- ARM
: saveGrid                          000009A4  Local -- ARM
: saveGridResize                    000009C8  Local -- ARM
: saveGridAdd                       00000A00  Local -- ARM
: saveGridFailMalloc                00000A68  Local -- ARM
: saveGridSucc                      00000A70  Local -- ARM
: saveGridEnd                       00000A74  Local -- ARM
: erase                             00000A7C  Local -- ARM
: eraseloop                         00000A80  Local -- ARM
: eraseend                          00000A98  Local -- ARM
: slow                              00000A9C  Local -- ARM
: slowloop                          00000AA4  Local -- ARM
: slowend                           00000AC4  Local -- ARM
: heapclean                         00000AC8  Local -- ARM
: heapcleanloop                     00000AE4  Local -- ARM
: heapcleanend                      00000AF8  Local -- ARM
: strlen                            00000AFC  Local -- ARM
: strlenloop                        00000B08  Local -- ARM
: strlenend                         00000B1C  Local -- ARM
: strtoi                            00000B24  Local -- ARM
: strtoiloop                        00000B64  Local -- ARM
: strtoilend                        00000B98  Local -- ARM
: strtoifailminus                   00000BA0  Local -- ARM
: strtoifailoutrange                00000BA8  Local -- ARM
: strtoifailnonnum                  00000BB0  Local -- ARM
: strtoiendfail                     00000BB4  Local -- ARM
: strtoiendsucc                     00000BBC  Local -- ARM
: strtoiend                         00000BC0  Local -- ARM
: memcpy                            00000BC8  Local -- ARM
: memcpywordsloop                   00000BF0  Local -- ARM
: memcpywordslend                   00000C08  Local -- ARM
: memcpyallbytes                    00000C18  Local -- ARM
: memcpybytes                       00000C24  Local -- ARM
: memcpybytesloop                   00000C28  Local -- ARM
: memcpybyteslend                   00000C40  Local -- ARM
: memcpyend                         00000C44  Local -- ARM
: getstring                         00000C4C  Local -- ARM
: getstringloop                     00000C78  Local -- ARM
: getstringloopskipsize             00000C88  Local -- ARM
: skipMax                           00000C9C  Local -- ARM
: getstringlcont                    00000CA8  Local -- ARM
: getstringresize                   00000CC0  Local -- ARM
: getstringlend                     00000CF0  Local -- ARM
: getstringResizeEnd                00000CFC  Local -- ARM
: getstringEnd                      00000D28  Local -- ARM
: tolower                           00000D3C  Local -- ARM
: setupGrid                         00000D44  Local -- ARM
: setupGridAsk                      00000D8C  Local -- ARM
: setupdrawing                      00000DBC  Local -- ARM
: setuprandom                       00000DCC  Local -- ARM
: setupstart                        00000DF4  Local -- ARM
: setuprowloop                      00000DF8  Local -- ARM
: setupcolloop                      00000E04  Local -- ARM
: dorandom                          00000E18  Local -- ARM
: dodrawstart                       00000E2C  Local -- ARM
: dodraw                            00000E44  Local -- ARM
: dodrawsucc                        00000E64  Local -- ARM
: dodrawsuccskiperase               00000E88  Local -- ARM
: setupcollcont                     00000E90  Local -- ARM
: setupcollend                      00000EA0  Local -- ARM
: setuprowlend                      00000EA8  Local -- ARM
: setupGridFail                     00000EB8  Local -- ARM
: setupGridEnd                      00000EB8  Local -- ARM
: drawgrid                          00000EC0  Local -- ARM
: drawgridrowloop                   00000ED4  Local -- ARM
: drawgridcolloop                   00000EE0  Local -- ARM
: drawgridprintcurrent              00000F0C  Local -- ARM
: drawgridcollcont                  00000F14  Local -- ARM
: drawgridcollend                   00000F24  Local -- ARM
: drawgridrowlend                   00000F38  Local -- ARM
: drawgridend                       00000F40  Local -- ARM
: printoptions                      00000F48  Local -- ARM
: setupOptions                      00000FF0  Local -- ARM
: setupOptionsDEnd                  0000104C  Local -- ARM
: setupCustom                       00001058  Local -- ARM
: setupCustomskipslow               0000111C  Local -- ARM
: printrange                        00001130  Local -- ARM
: setupCustomDimsCheck              00001174  Local -- ARM
: getwid                            0000118C  Local -- ARM
: getwidFail                        000011F0  Local -- ARM
: getheisetup                       00001204  Local -- ARM
: gethei                            00001214  Local -- ARM
: getheiFail                        00001278  Local -- ARM
: customend                         0000128C  Local -- ARM
: updategrid                        00001298  Local -- ARM
: updategridrowloop                 000012C0  Local -- ARM
: updategridcolloop                 000012CC  Local -- ARM
: updatealive                       000012F4  Local -- ARM
: updatedead                        00001310  Local -- ARM
: updatelcont                       00001320  Local -- ARM
: updategridccollend                00001328  Local -- ARM
: updategridrowlend                 00001334  Local -- ARM
: updategridend                     00001334  Local -- ARM
: countneighbours                   0000133C  Local -- ARM
: countneighboursloop               00001364  Local -- ARM
: countneighboursskipadd            000013A8  Local -- ARM
: countneighbourslend               000013AC  Local -- ARM
: countneighboursend                000013AC  Local -- ARM
: isinrange                         000013B8  Local -- ARM
: isinrangefail                     000013FC  Local -- ARM
: isinrangeend                      00001400  Local -- ARM
: setupHeap                         00001404  Local -- ARM
: malloc                            00001438  Local -- ARM
: mallignend                        00001454  Local -- ARM
: checkcrate                        00001460  Local -- ARM
: nocrates                          00001480  Local -- ARM
: foundcrate                        00001488  Local -- ARM
: splitcrate                        00001498  Local -- ARM
: usecrate                          000014CC  Local -- ARM
: mallocEnd                         000014E0  Local -- ARM
: free                              000014E8  Local -- ARM
: freeloop                          000014FC  Local -- ARM
: freelend                          00001518  Local -- ARM
: freelendEnd                       00001538  Local -- ARM
: freeMergeCheck                    00001540  Local -- ARM
: verifyLeft                        00001550  Local -- ARM
: verifyRight                       00001564  Local -- ARM
: merge                             00001578  Local -- ARM
: mergeNew                          000015AC  Local -- ARM
: freeEnd                           000015AC  Local -- ARM
: welcomemsg                        000015B4  Local -- ARM
: welcome2msg                       000015E5  Local -- ARM
: mainchoicefail                    00001624  Local -- ARM
: helpmsg                           000016BF  Local -- ARM
: help2msg                          0000177D  Local -- ARM
: mainendmsg                        000017F2  Local -- ARM
: askdefaults                       00001819  Local -- ARM
: askerase                          0000184B  Local -- ARM
: askslow                           00001864  Local -- ARM
: askstep                           0000187C  Local -- ARM
: stepslowwarning                   00001894  Local -- ARM
: savedchoice                       000018E1  Local -- ARM
: askname                           0000190C  Local -- ARM
: warneraseslow                     0000192F  Local -- ARM
: askwid                            0000196D  Local -- ARM
: dash                              00001984  Local -- ARM
: b_close_colon                     00001986  Local -- ARM
: askhei                            0000198A  Local -- ARM
: getwidfailmsg                     000019A1  Local -- ARM
: getheifailmsg                     000019CD  Local -- ARM
: usingDefault                      000019FA  Local -- ARM
: usingDefWODims                    00001A46  Local -- ARM
: optionsp_1                        00001A84  Local -- ARM
: optionsp_2                        00001A9C  Local -- ARM
: optionsp_3                        00001A9F  Local -- ARM
: optionsp_4                        00001AAB  Local -- ARM
: optionsp_5                        00001AB7  Local -- ARM
: mainloopittsmsg                   00001AC2  Local -- ARM
: askgenoption                      00001B62  Local -- ARM
: setupGrdFailmsg                   00001B9B  Local -- ARM
: askseed                           00001BFC  Local -- ARM
: drawinfomsg                       00001C28  Local -- ARM
: drawfailmsg                       00001C60  Local -- ARM
: gridfailmsg                       00001C85  Local -- ARM
: gridsavefail                      00001CBF  Local -- ARM
: gridloadempty                     00001CF7  Local -- ARM
: gridloadpindex                    00001D57  Local -- ARM
: gridloadpname                     00001D60  Local -- ARM
: gridloadpwidth                    00001D68  Local -- ARM
: gridloadpheight                   00001D71  Local -- ARM
: loadboardaski                     00001D7B  Local -- ARM
: loadboardretmsg                   00001DED  Local -- ARM
: loadboardifail                    00001E05  Local -- ARM
: loadboardirerr                    00001E28  Local -- ARM
: loadboardmlcerr                   00001E45  Local -- ARM
: loadboardsucmsg                   00001E85  Local -- ARM
: listgridmsg                       00001EA3  Local -- ARM
: cutoff                            00001EC6  Local -- ARM
: helpinfomsg                       00001ED9  Local -- ARM
: settingsmsg                       00001EE0  Local -- ARM
: changearrverr_m                   00001EE7  Local -- ARM
: s_m1                              00001F20  Local -- ARM
: s_m2                              00001FB1  Local -- ARM
: s_m3                              00002015  Local -- ARM
: s_m4                              000020C6  Local -- ARM
: s_m                               00002121  Local -- ARM
: s_m_err                           0000217D  Local -- ARM
: currentslow                       0000219D  Local -- ARM
: currenterase                      000021A6  Local -- ARM
: currentstep                       000021B0  Local -- ARM
: currentDims                       000021B9  Local -- ARM
: currentRange                      000021C0  Local -- ARM
: currentItters                     000021C8  Local -- ARM
: currentdraweras                   000021D1  Local -- ARM
: bracket_open                      000021E6  Local -- ARM
: comma_space                       000021E8  Local -- ARM
: bracket_close                     000021EB  Local -- ARM
: currenticons_1                    000021ED  Local -- ARM
: currenticons_2                    000021F5  Local -- ARM
: currenticons_3                    000021FC  Local -- ARM
: currenticons_a                    00002202  Local -- ARM
: mallocerr_m                       00002256  Local -- ARM
: getstringerr_m                    00002278  Local -- ARM
: currentitter                      000022A5  Local -- ARM
: currentaskx                       000022AE  Local -- ARM
: currentasky                       000022C2  Local -- ARM
: currentasknew                     000022D6  Local -- ARM
: currentasknew_B                   000022E8  Local -- ARM
: currentasknew_E                   00002303  Local -- ARM
: currentarrerr                     0000231C  Local -- ARM
: changearrsizmsg                   0000233D  Local -- ARM
: changeittere_m                    0000234F  Local -- ARM
: getitters_m                       00002370  Local -- ARM
: on_msg                            00002394  Local -- ARM
: off_msg                           00002397  Local -- ARM
: comma                             0000239B  Local -- ARM
: heapstart                         000023A0  Local -- ARM
