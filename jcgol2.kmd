KMD
00000000:             ; ;;  This is my second rendition of JCGOL in ARM assembly for Komodo
00000000:             ; ;;  
00000000:             ; ;;  This will attempt to follow the ARM 32bit calling convention 
00000000:             ; ;;      R0-3 are argument registers, scratch
00000000:             ; ;;      R4-10 are local variable registers and should be saved before use in a function
00000000:             ; ;;      R11 - FP
00000000:             ; ;;      R12 - IPC
00000000:             ; ;;      R13 - SP
00000000:             ; ;;      R14 - LR
00000000:             ; ;;      R15 - PC
00000000:             ; ;;
00000000:             ; ;;  The plan
00000000:             ; ;;  - Create a simple `heap` allocator for the grid and input
00000000:             ; ;;  - Ask the user
00000000:             ; ;;      |-Use default? Y - skip below
00000000:             ; ;;      |-dims of the grid
00000000:             ; ;;      |   `-Will need a way to get a string input and convert to an integer (make sure to cat
                      ; ch -ve)
00000000:             ; ;;      |-slow mode
00000000:             ; ;;      `-erase mode
00000000:             ; ;;  - ask for generation mode
00000000:             ; ;;      |-If random ask for seed
00000000:             ; ;;      |   `-For generation roll the seed to create a pseudorandom value for each `pixel`
00000000:             ; ;;      `-If draw then get them to draw the grid one `pixel` at a time
00000000:             ; ;;  - Allocate two grids, the pointers to which will swap after a frame. One is used to count t
                      ; he neighbours the other for the new cell value.
00000000:             ; ;;  - loop
00000000:             ; ;;      |-count neighbours
00000000:             ; ;;      |-update inactive grid
00000000:             ; ;;      |-swap grids
00000000:             ; ;;      |-draw active grid
00000000:             ; ;;      `-goto loop
00000000:             ; 
00000000:             ; ;;SINGLE STEP mode allows you to save the current state of the board into a list, also give it 
                      ; a name
00000000:             ; ;;At the main menu you can load a saved grid
00000000:             ; 
00000000:             ; ;;Grid info struct
00000000:             ; ;;  - SaveInfoStruct* array
00000000:             ; ;;  - int max size of arr
00000000:             ; ;;  - int current position in arr
00000000:             ; 
00000000:             ; ;;Save info struct
00000000:             ; ;;  -address of grid [4 BYTES]
00000000:             ; ;;  -char* to the name [4 BYTES]
00000000:             ; ;;  -width of grid (1 BYTE)
00000000:             ; ;;  -height of grid (1 BYTE)
00000000:             ; 
00000000:             ; 
00000000:             ; ;;  CURRENT ISSUES/TODOS
00000000:             ; ;;  |-More testing of malloc & free need to be done
00000000:             ; ;;  `-Think about minimising the fragmentation of the heap - find the best free block instead o
                      ; f the first
00000000:             ;   
00000000:             ; max_addr    EQU  0x100000
00000000:             ; stack_size  EQU  0x10000
00000000:             ; nl          EQU  10
00000000:             ; backspace   EQU  8
00000000:             ; minBuffSize EQU  8
00000000:             ; enter       EQU  nl
00000000:             ; minSaveSize EQU  8
00000000:             ; sizeofSaveI EQU  12 ;;10 bytes + 2 bytes of padding to align to 4 byte boundry for arr
00000000:             ; 
00000000: EA000017    ; b _start
00000004:             ; 
00000004:             ; align
00000004:             ; ;;[[note]]
00000004:             ; ;;ldr instructions out of range (for pc-relative offsets?) of ldr (-4096/+4095?) use below
00000004:             ; ;;  adrl Rx, label
00000004:             ; ;;  ldr  Rx, [Rx]
00000004: 00010000    ; heaphead        defw 0x10000 ;;default start changed to addr of heapstart 
00000008:             ; 
00000008:             ; ;;Integer defs
00000008: FFFFFFFF    ; offsets         defw -1,-1,-1,0,-1,1,0,-1,0,1,1,-1,1,0,1,1 ;;[[-1,-1],[-1,0],[-1,1],[0,-1],[0,1
0000000C: FFFFFFFF    ; ],[1,-1],[1,0],[1,1]]
00000010: FFFFFFFF    ; 
00000014: 00000000    ; 
00000018: FFFFFFFF    ; 
0000001C: 00000001    ; 
00000020: 00000000    ; 
00000024: FFFFFFFF    ; 
00000028: 00000000    ; 
0000002C: 00000001    ; 
00000030: 00000001    ; 
00000034: FFFFFFFF    ; 
00000038: 00000001    ; 
0000003C: 00000000    ; 
00000040: 00000001    ; 
00000044: 00000001    ; 
00000048:             ; 
00000048:             ; ;;Grid addresses
00000048: 00000000    ; gridA           defw 0
0000004C: 00000000    ; gridB           defw 0
00000050:             ; 
00000050:             ; ;;options
00000050: 00          ; erase_b         defb 0
00000051: 00          ; slow_b          defb 0
00000052: 00          ; step_b          defb 0
00000053: 12          ; width           defb 18
00000054: 12          ; height          defb 18
00000055: 01          ; range_min       defb 1
00000056: 1E          ; range_max       defb 30
00000057: 19          ; maxitters       defb 25
00000058: 01          ; drawerase       defb 1  ;;Should the draw mode erase previous
00000059:             ; 
00000059: 58          ; alive_c         defb 'X'
0000005A: 2D          ; dead_c          defb '-'
0000005B: 23          ; ptr_c           defb '#'
0000005C:             ; 
0000005C:             ; ;;default options
0000005C: 00          ; erase_b_d       defb 0
0000005D: 00          ; slow_b_d        defb 0
0000005E: 01          ; step_b_d        defb 1
0000005F: 12          ; width_d         defb 18
00000060: 12          ; height_d        defb 18
00000061:             ; 
00000064:             ; align
00000064:             ; 
00000064:             ; _start
00000064:             ;     ;;prepare the stack
00000064: E3A0D601    ;     ldr R13, =max_addr
00000068: E3A0E000    ;     mov R14, #0 ;; allow for `returning` from _start
0000006C: E92D4000    ;     push {R14}
00000070:             ; 
00000070:             ;     ;;[[temp]] clean the heap (zero out)
00000070: EB0002AF    ;     bl heapclean
00000074:             ; 
00000074:             ;     ;;setup heap
00000074: E28F0F8D    ;     adrl R0, heapstart
00000078: E2800B09    ; 
0000007C: E50F0080    ;     str R0, heaphead    ;;place address of last instruction (heapstart label) into the heaphead
                      ;  variable
00000080: EB000519    ;     bl setupHeap
00000084:             ; 
00000084: EB000002    ;     bl main
00000088:             ; 
00000088: E8BD4000    ;     pop {R14}
0000008C: EF000002    ;     swi 2
00000090: E1A0F00E    ;     mov R15, R14
00000094:             ; 
00000094:             ; main
00000094: E92D4FF0    ;     push {fp, R14, R4-R10} ;;8 registers saved
00000098:             ; 
00000098: E28DB01C    ;     add fp, sp, #28 ;;(r - 1) * 4
0000009C: E24DD010    ;     sub sp, sp, #16 ;;reserve 12 bytes (4 bytes to align?) on the stack for the pointer to the 
                      ; list of saved grids + the maxSize of the array
000000A0:             ; 
000000A0:             ;     ;;The gridInfo struct
000000A0:             ;     ;;set the current position of the pointer
000000A0: E3A00000    ;     mov R0, #0
000000A4: E58D0008    ;     str R0, [sp, #8]
000000A8:             ; 
000000A8:             ;     ;;set the number of elements(save info structs) that can be stored in the array at the mome
                      ; nt
000000A8: E3A00008    ;     ldr R0, =minSaveSize
000000AC: E58D0004    ;     str R0, [sp, #4]
000000B0:             ; 
000000B0:             ;     ;;minsize * sizeof(SaveInfo) = number of bytes needed for the array
000000B0: E3A0100C    ;     ldr R1, =sizeofSaveI
000000B4: E0000190    ;     mul R0, R0, R1
000000B8: EB000518    ;     bl malloc ;;allocate the array on the heap
000000BC:             ; 
000000BC: E58D0000    ;     str R0, [sp, #0] ;;store the address
000000C0:             ; 
000000C0:             ; mainmenu
000000C0: E28F0D5D    ;     adrl R0, welcomemsg
000000C4: E2800000    ; 
000000C8: EF000003    ;     swi 3
000000CC:             ; 
000000CC: E28F0065    ;     adrl R0, welcome2msg
000000D0: E2800C17    ; 
000000D4: EF000003    ;     swi 3
000000D8:             ; 
000000D8:             ; mainchoice
000000D8: EF000001    ;     swi 1
000000DC: E3800020    ;     orr R0, R0, #32
000000E0: E1A04000    ;     mov R4, R0
000000E4:             ; 
000000E4:             ;     ;;These should really be functions
000000E4:             ; 
000000E4: E354006E    ;     cmp R4, #'n' ;;new board generation
000000E8: 0A00018A    ;     beq newboard
000000EC:             ; 
000000EC: E354006C    ;     cmp R4, #'l' ;;load a saved board
000000F0: E1A0000D    ;     mov R0, sp ;;load the info ptr
000000F4: 0A000191    ;     beq loadboard
000000F8:             ; 
000000F8: E3540068    ;     cmp R4, #'h'
000000FC: 0A000180    ;     beq printhelp
00000100:             ; 
00000100: E3540073    ;     cmp R4, #'s'
00000104: 0A000057    ;     beq settingsmenu
00000108:             ; 
00000108: E3540070    ;     cmp R4, #'p'
0000010C: 0A000005    ;     beq showHeap
00000110:             ; 
00000110: E3540071    ;     cmp R4, #'q' ;;quit
00000114: 0A000038    ;     beq mainEnd
00000118:             ; 
00000118: E28F0FD6    ;     adrl R0, mainchoicefail
0000011C: E2800B05    ; 
00000120: EF000003    ;     swi 3
00000124:             ; 
00000124: EAFFFFEB    ;     b mainchoice
00000128:             ; 
00000128:             ;     ;;R4 will hold the active grid, R5 will hold the passive grid
00000128:             ;     ;;Active is used to count neighbours, passive is used to place updated values in 
00000128:             ;     ;;either can be drawn, just drawn in a different position
00000128:             ; 
00000128:             ; 
00000128:             ; showHeap
00000128: EB00055B    ;     bl printHeap
0000012C:             ; 
0000012C: EAFFFFE3    ;     b mainmenu
00000130:             ; 
00000130:             ; ;;update loop
00000130:             ; ;;    - loop
00000130:             ; ;;      |-count neighbours
00000130:             ; ;;      |-update inactive grid
00000130:             ; ;;      |-swap grids
00000130:             ; ;;      |-draw grid
00000130:             ; ;;      |-[slow?] - slow() - loops for some time to increase waiting time
00000130:             ; ;;      |-[step?] - step() - waits for input, s and q will have effects
00000130:             ; ;;      |-[erase?] - erase() - \b until grid is gone
00000130:             ; ;;      `-goto loop
00000130:             ; mainloopstart
00000130:             ;     ;;load the slow, step, and erase booleans
00000130: E55F60E7    ;     ldrb R6, slow_b
00000134: E55F70EC    ;     ldrb R7, erase_b
00000138: E55F80EE    ;     ldrb R8, step_b
0000013C:             ; 
0000013C: E51F40FC    ;     ldr R4, gridA
00000140: E51F50FC    ;     ldr R5, gridB
00000144:             ; 
00000144:             ;     ;;(width * height) * 2 + 1 + height
00000144: E55F00F9    ;     ldrb R0, width
00000148: E55F10FC    ;     ldrb R1, height
0000014C: E0000190    ;     mul R0, R0, R1
00000150: E1A00080    ;     mov R0, R0, lsl #1
00000154: E2800001    ;     add R0, R0, #1
00000158: E0800001    ;     add R0, R0, R1
0000015C: E1A09000    ;     mov R9, R0      ;;R9 holds the itterations for erase, so it doesn't have to calc it every t
                      ; ime
00000160:             ; 
00000160: E3A0A000    ;     mov R10, #0 ;;This will hold the number of itterations, when it reaches 
00000164:             ; 
00000164:             ; mainloop
00000164: E55F0115    ;     ldrb R0, maxitters ;;run out of registers @-@
00000168: E15A0000    ;     cmp R10, R0
0000016C: E28AA001    ;     add R10, R10, #1
00000170: 1A000004    ;     bne mainloopcont
00000174:             ; 
00000174: E3A0A000    ;     mov R10, #0
00000178:             ; 
00000178: E28F0096    ;     adrl R0, mainloopittsmsg
0000017C: E2800C1B    ; 
00000180: EF000003    ;     swi 3
00000184:             ; 
00000184: EA000006    ;     b mainloopdostep
00000188:             ; 
00000188:             ; mainloopcont
00000188: E1A00004    ;     mov R0, R4
0000018C: E1A01005    ;     mov R1, R5
00000190: EB000479    ;     bl updategrid
00000194:             ; 
00000194: E1A00004    ;     mov R0, R4
00000198: EB00036A    ;     bl drawgrid
0000019C:             ; 
0000019C: E3580001    ;     cmp R8, #1
000001A0: 1A000009    ;     bne mainloopskipstep
000001A4:             ; 
000001A4:             ; mainloopdostep
000001A4: E1A0000D    ;     mov R0, sp
000001A8: E1A01004    ;     mov R1, R4 ;;give the active grid
000001AC: EB0001BD    ;     bl step
000001B0: E3500000    ;     cmp R0, #0
000001B4: 0A000004    ;     beq mainloopskipstep
000001B8:             ;     
000001B8:             ;     ;;If R0 is #1 then free and go to the main menu
000001B8:             ;     ;;free the current grid
000001B8: E51F0178    ;     ldr R0, gridA
000001BC: EB000503    ;     bl free
000001C0: E51F017C    ;     ldr R0, gridB
000001C4: EB000501    ;     bl free
000001C8:             ; 
000001C8: EAFFFFBC    ;     b mainmenu
000001CC:             ; 
000001CC:             ; mainloopskipstep
000001CC: E3560001    ;     cmp R6, #1
000001D0: 0B00024C    ;     bleq slow
000001D4:             ; 
000001D4: E3570001    ;     cmp R7, #1
000001D8: 01A00009    ;     moveq R0, R9
000001DC: 0B000241    ;     bleq erase
000001E0:             ; 
000001E0: E1A00004    ;     mov R0, R4
000001E4: E1A04005    ;     mov R4, R5
000001E8: E1A05000    ;     mov R5, R0 ;;SWAP the active and passive
000001EC:             ; 
000001EC: EAFFFFDC    ;     b mainloop
000001F0:             ; 
000001F0:             ; gridFail
000001F0: E28F0017    ;     adrl R0, gridfailmsg
000001F4: E2800C1D    ; 
000001F8: EF000003    ;     swi 3
000001FC:             ; 
000001FC:             ; mainEnd
000001FC:             ;     ;;[[todo]]need to free all of the memory, saved grids (grids + names) + current grids
000001FC:             ; 
000001FC: E28F0042    ;     adrl R0, mainendmsg
00000200: E2800B06    ; 
00000204: EF000003    ;     swi 3
00000208:             ; 
00000208: E1A0000D    ;     mov R0, sp
0000020C: EB000002    ;     bl mainfree
00000210:             ; 
00000210: E24BD018    ;     sub sp, fp, #24 ;;???
00000214: E8BD47F0    ;     pop {R14, R4-R10}
00000218: E1A0F00E    ;     mov R15, R14
0000021C:             ; 
0000021C:             ; mainfree
0000021C:             ; ;;INP in R0 is the saveInfoStruct
0000021C:             ; ;;OUT --
0000021C:             ; ;;free all of the memory that we used i.e. any saved grids, saved grid names, and the arr of sa
                      ; ved grids
0000021C: E92D41F0    ;     push {R14, R4-R8}
00000220:             ; 
00000220: E5905008    ;     ldr R5, [R0, #8] ;;get the current index this is the number of elements in the arr
00000224: E5906000    ;     ldr R6, [R0, #0] ;;This is the array address
00000228: E3A0700C    ;     ldr R7, =sizeofSaveI
0000022C:             ; 
0000022C: E3A04000    ;     mov R4, #0
00000230:             ; mainfreeloop
00000230:             ;     ;;loop through the savedGrids
00000230: E1540005    ;     cmp R4, R5
00000234: 0A000007    ;     beq mainfreelend
00000238:             ; 
00000238: E0286794    ;     mla R8, R4, R7, R6
0000023C: E5980000    ;     ldr R0, [R8, #0] ;;get the address of the grid
00000240: E5988004    ;     ldr R8, [R8, #4] ;;get the address of the char*
00000244:             ; 
00000244: EB0004E1    ;     bl free
00000248:             ; 
00000248: E1A00008    ;     mov R0, R8
0000024C: EB0004DF    ;     bl free
00000250:             ; 
00000250: E2844001    ;     add R4, R4, #1
00000254: EAFFFFF5    ;     b mainfreeloop
00000258:             ; 
00000258:             ; mainfreelend
00000258:             ;     ;;free the array
00000258: E1A00006    ;     mov R0, R6
0000025C: EB0004DB    ;     bl free
00000260:             ; 
00000260:             ; mainfreeend
00000260: E8BD41F0    ;     pop {R14, R4-R8}
00000264: E1A0F00E    ;     mov R15, R14
00000268:             ; 
00000268:             ;     ;;Save info struct
00000268:             ; ;;  -address of grid [4 BYTES]
00000268:             ; ;;  -char* to the name [4 BYTES]
00000268:             ; ;;  -width of grid (1 BYTE)
00000268:             ; ;;  -height of grid (1 BYTE)
00000268:             ; 
00000268:             ; settingsmenu
00000268:             ; ;;https://media.giphy.com/media/jOpLbiGmHR9S0/giphy.gif
00000268:             ; ;;I think there's a limit on the defined string length
00000268: E28F0035    ;     adrl R0, s_m1
0000026C: E2800C1F    ; 
00000270: EF000003    ;     swi 3
00000274:             ; 
00000274: E28F00BA    ;     adrl R0, s_m2
00000278: E2800C1F    ; 
0000027C: EF000003    ;     swi 3
00000280:             ;     
00000280: E28F0012    ;     adrl R0, s_m3
00000284: E2800A02    ; 
00000288: EF000003    ;     swi 3
0000028C:             ; 
0000028C: E28F00B7    ;     adrl R0, s_m4
00000290: E2800A02    ; 
00000294: EF000003    ;     swi 3
00000298:             ; 
00000298:             ; changesetting
00000298: E28F0006    ;     adrl R0, s_m
0000029C: E2800C21    ; 
000002A0: EF000003    ;     swi 3
000002A4:             ; 
000002A4:             ; changesettingget
000002A4: E3A0000A    ;     ldr R0, =enter
000002A8: E3A01002    ;     mov R1, #2
000002AC: E3A02001    ;     mov R2, #1
000002B0: EB000280    ;     bl getstring
000002B4:             ; 
000002B4: E1A05000    ;     mov R5, R0
000002B8:             ; 
000002B8: EB000234    ;     bl strtoi
000002BC:             ; 
000002BC: E1A04000    ;     mov R4, R0
000002C0: E1A06001    ;     mov R6, R1
000002C4: E1A00005    ;     mov R0, R5
000002C8:             ; 
000002C8: EB0004C0    ;     bl free
000002CC:             ; 
000002CC: EB000172    ;     bl newline
000002D0:             ; 
000002D0: E3560001    ;     cmp R6, #1
000002D4: 0AFFFF79    ;     beq mainmenu
000002D8:             ; 
000002D8: E3560000    ;     cmp R6, #0
000002DC: 0A000003    ;     beq changesettingscont
000002E0:             ; 
000002E0:             ; changesettingserr
000002E0: E28F001A    ;     adrl R0, s_m_err
000002E4: E2800C21    ; 
000002E8: EF000003    ;     swi 3
000002EC:             ; 
000002EC: EAFFFFEC    ;     b changesettingget
000002F0:             ; 
000002F0:             ; changesettingscont
000002F0: E3540007    ;     cmp R4, #7
000002F4: CAFFFFF9    ;     bgt changesettingserr
000002F8:             ; 
000002F8:             ;     ;;now we have the index we can print the current value and prompt for a new one then loop b
                      ; ack up to the getsetting
000002F8: E3540000    ;     cmp R4, #0
000002FC: 0A00005C    ;     beq changestep
00000300:             ; 
00000300: E3540001    ;     cmp R4, #1
00000304: 0A000060    ;     beq changeslow
00000308:             ; 
00000308: E3540002    ;     cmp R4, #2
0000030C: 0A000064    ;     beq changeerase
00000310:             ; 
00000310: E3540003    ;     cmp R4, #3
00000314: 0A000091    ;     beq changedims
00000318:             ; 
00000318: E3540004    ;     cmp R4, #4
0000031C: 0A000096    ;     beq changerange
00000320:             ; 
00000320: E3540005    ;     cmp R4, #5
00000324: 0A00009B    ;     beq changeicons
00000328:             ; 
00000328: E3540006    ;     cmp R4, #6
0000032C: 0A0000C6    ;     beq changeitter
00000330:             ; 
00000330: E3540007    ;     cmp R4, #7
00000334: 0A0000EB    ;     beq changedrawerase
00000338:             ; 
00000338:             ; changearr
00000338:             ; ;;generic for changedims and change range
00000338:             ; ;;INP in R0 is addr. for x
00000338:             ; ;;INP in R1 is addr. for y
00000338:             ; ;;INP in R2 is boolean for require x < y. 1 for require
00000338: E92D41F0    ;     push {R14, R4-R8}
0000033C:             ; 
0000033C: E1A06000    ;     mov R6, R0
00000340: E1A07001    ;     mov R7, R1
00000344: E1A08002    ;     mov R8, R2
00000348:             ; 
00000348: EB000034    ;     bl printdims
0000034C:             ; 
0000034C:             ; changearrget
0000034C: E28F00DF    ;     adrl R0, currentaskx
00000350: E2800C21    ; 
00000354: EF000003    ;     swi 3
00000358:             ; 
00000358: EB000017    ;     bl changearrgetvalidint
0000035C: E1A04000    ;     mov R4, R0
00000360:             ; 
00000360: EB00014D    ;     bl newline
00000364:             ; 
00000364: E28F00DB    ;     adrl R0, currentasky
00000368: E2800C21    ; 
0000036C: EF000003    ;     swi 3
00000370:             ; 
00000370: EB000011    ;     bl changearrgetvalidint
00000374: E1A05000    ;     mov R5, R0
00000378:             ; 
00000378: EB000147    ;     bl newline
0000037C:             ; 
0000037C: E3580001    ;     cmp R8, #1
00000380: 1A000006    ;     bne changearrset
00000384:             ; 
00000384: E1540005    ;     cmp R4, R5
00000388: AA000000    ;     bge changearrsizeerr
0000038C:             ; 
0000038C: EA000003    ;     b changearrset
00000390:             ; 
00000390:             ; changearrsizeerr
00000390: E28F002A    ;     adrl R0, changearrsizmsg
00000394: E2800C22    ; 
00000398: EF000003    ;     swi 3
0000039C:             ; 
0000039C: EAFFFFEA    ;     b changearrget
000003A0:             ; 
000003A0:             ; changearrset
000003A0:             ;     ;;now we have the two valid values so str them back
000003A0: E5464000    ;     strb R4, [R6]
000003A4: E5475000    ;     strb R5, [R7] 
000003A8:             ; 
000003A8: E1A00006    ;     mov R0, R6
000003AC: E1A01007    ;     mov R1, R7
000003B0:             ; 
000003B0: EB00001A    ;     bl printdims
000003B4:             ; 
000003B4:             ; changearrend
000003B4: E8BD41F0    ;     pop {R14, R4-R8}
000003B8: E1A0F00E    ;     mov R15, R14
000003BC:             ; 
000003BC:             ; ;;And you thought the naming couldn't get worse \(*0*)/
000003BC:             ; changearrgetvalidint ;;basically an inner function
000003BC:             ; ;;INP --
000003BC:             ; ;;OUT in R0 is the gotten value
000003BC: E92D41F0    ;     push {R14, R4-R8}
000003C0:             ; changearrgetvalidintget
000003C0: E3A0000A    ;     ldr R0, =enter
000003C4: E3A01003    ;     mov R1, #3
000003C8: E3A02001    ;     mov R2, #1
000003CC: EB000239    ;     bl getstring
000003D0:             ; 
000003D0: E1A04000    ;     mov R4, R0 ;;save the string to free
000003D4:             ; 
000003D4: EB0001ED    ;     bl strtoi
000003D8:             ; 
000003D8: E1A05000    ;     mov R5, R0 ;;save the int value
000003DC: E1A06001    ;     mov R6, R1 ;;save err code
000003E0:             ; 
000003E0: E1A00004    ;     mov R0, R4
000003E4: EB000479    ;     bl free
000003E8:             ; 
000003E8: E3560000    ;     cmp R6, #0
000003EC: 0A000004    ;     beq changearrgetvalidintcont
000003F0:             ; 
000003F0:             ; changearrgetvalidinterr
000003F0: EB000129    ;     bl newline
000003F4:             ; 
000003F4: E28F0ED7    ;     adrl R0, changearrverr_m
000003F8: E2800A01    ; 
000003FC: EF000003    ;     swi 3
00000400:             ; 
00000400: EAFFFFEE    ;     b changearrgetvalidintget
00000404:             ; 
00000404:             ; changearrgetvalidintcont
00000404:             ;     ;;we now have an int value, need to do bounds checks
00000404: E3550000    ;     cmp R5, #0
00000408: DAFFFFF8    ;     ble changearrgetvalidinterr
0000040C:             ; 
0000040C: E35500FF    ;     cmp R5, #255
00000410: CAFFFFF6    ;     bgt changearrgetvalidinterr
00000414:             ; 
00000414:             ; changearrgetvalidintend
00000414: E1A00005    ;     mov R0, R5
00000418:             ; 
00000418: E8BD41F0    ;     pop {R14, R4-R8}
0000041C: E1A0F00E    ;     mov R15, R14
00000420:             ; 
00000420:             ; printdims
00000420:             ; ;;INP in R0 is addr. for x
00000420:             ; ;;INP in R1 is addr. for y
00000420:             ; ;;(_, _)
00000420:             ;     
00000420: E1A02000    ;     mov R2, R0
00000424: E1A03001    ;     mov R3, R1
00000428:             ; 
00000428: E28F000E    ;     adrl R0, currentDims
0000042C: E2800A02    ; 
00000430: EF000003    ;     swi 3
00000434:             ; 
00000434: E28F002F    ;     adrl R0, bracket_open
00000438: E2800A02    ; 
0000043C: EF000003    ;     swi 3
00000440:             ; 
00000440: E5520000    ;     ldrb R0, [R2]
00000444: EF000004    ;     swi 4
00000448:             ; 
00000448: E28F001D    ;     adrl R0, comma_space
0000044C: E2800A02    ; 
00000450: EF000003    ;     swi 3
00000454:             ; 
00000454: E5530000    ;     ldrb R0, [R3]
00000458: EF000004    ;     swi 4
0000045C:             ; 
0000045C: E28F000C    ;     adrl R0, bracket_close
00000460: E2800A02    ; 
00000464: EF000003    ;     swi 3
00000468:             ; 
00000468: E3A0000A    ;     ldr R0, =nl
0000046C: EF000000    ;     swi 0
00000470:             ; 
00000470: E1A0F00E    ;     mov R15, R14
00000474:             ; 
00000474:             ; changestep
00000474: E24F001E    ;     adrl R0, step_b_d
00000478: E2400B01    ; 
0000047C: E28F10B1    ;     adrl R1, currentstep
00000480: E2811C1F    ; 
00000484:             ; 
00000484: EB00000C    ;     bl changebool
00000488:             ; 
00000488: EAFFFF82    ;     b changesetting
0000048C:             ; 
0000048C:             ; changeslow
0000048C: E24F0037    ;     adrl R0, slow_b_d
00000490: E2400B01    ; 
00000494: E28F1086    ;     adrl R1, currentslow
00000498: E2811C1F    ; 
0000049C:             ; 
0000049C: EB000006    ;     bl changebool
000004A0:             ; 
000004A0: EAFFFF7C    ;     b changesetting
000004A4:             ; 
000004A4:             ; changeerase
000004A4: E24F0E45    ;     adrl R0, erase_b_d
000004A8: E2400000    ; 
000004AC: E28F1077    ;     adrl R1, currenterase
000004B0: E2811C1F    ; 
000004B4:             ; 
000004B4: EB000000    ;     bl changebool
000004B8:             ; 
000004B8: EAFFFF76    ;     b changesetting
000004BC:             ; 
000004BC:             ; changebool
000004BC:             ; ;;INP in R0 is the address of ___b_d
000004BC:             ; ;;INP in R1 is the address of the printing name
000004BC:             ; ;;OUT --
000004BC: E92D41F0    ;     push {R14, R4-R8}
000004C0:             ; 
000004C0: E1A04000    ;     mov R4, R0
000004C4: E1A05001    ;     mov R5, R1
000004C8:             ; 
000004C8: E1A00001    ;     mov R0, R1
000004CC: EF000003    ;     swi 3
000004D0:             ; 
000004D0: E5540000    ;     ldrb R0, [R4]
000004D4: E3500001    ;     cmp R0, #1
000004D8: 128F00C7    ;     adrlne R0, off_msg
000004DC: 12800C21    ; 
000004E0: 028F0F6F    ;     adrleq R0, on_msg
000004E4: 02800A02    ; 
000004E8: EF000003    ;     swi 3
000004EC:             ; 
000004EC: EB0000EA    ;     bl newline
000004F0:             ; 
000004F0: E28F0075    ;     adrl R0, currentasknew_B
000004F4: E2800A02    ; 
000004F8: EF000003    ;     swi 3
000004FC:             ; 
000004FC:             ; changebool_cont
000004FC: EF000001    ;     swi 1
00000500:             ; 
00000500: E2400030    ;     sub R0, R0, #48
00000504: E3500001    ;     cmp R0, #1
00000508: 0A000006    ;     beq changebool_set
0000050C: E3500000    ;     cmp R0, #0
00000510: 0A000004    ;     beq changebool_set
00000514:             ; 
00000514: EB0000E0    ;     bl newline
00000518:             ; 
00000518: E28F0068    ;     adrl R0, currentasknew_E
0000051C: E2800A02    ; 
00000520: EF000003    ;     swi 3
00000524:             ; 
00000524: EAFFFFF4    ;     b changebool_cont
00000528:             ; 
00000528:             ; changebool_set
00000528: E5440000    ;     strb R0, [R4]
0000052C:             ; 
0000052C: EB0000DA    ;     bl newline
00000530:             ; 
00000530: E1A00005    ;     mov R0, R5
00000534: EF000003    ;     swi 3
00000538:             ; 
00000538: E5540000    ;     ldrb R0, [R4]
0000053C: E3500001    ;     cmp R0, #1
00000540: 128F005F    ;     adrlne R0, off_msg
00000544: 12800C21    ; 
00000548: 028F0F55    ;     adrleq R0, on_msg
0000054C: 02800A02    ; 
00000550: EF000003    ;     swi 3
00000554:             ; 
00000554: EB0000D0    ;     bl newline
00000558:             ; 
00000558:             ; changeboolend
00000558: E8BD41F0    ;     pop {R14, R4-R8}
0000055C: E1A0F00E    ;     mov R15, R14
00000560:             ; 
00000560:             ; changedims
00000560:             ; ;;INP in R0 is addr. for x
00000560:             ; ;;INP in R1 is addr. for y
00000560:             ; ;;INP in R2 is boolean for require x < y. 1 for require
00000560: E24F0009    ;     adrl R0, width_d
00000564: E2400C05    ; 
00000568: E24F1E51    ;     adrl R1, height_d
0000056C: E2411000    ; 
00000570: E3A02000    ;     mov R2, #0
00000574: EBFFFF6F    ;     bl changearr
00000578:             ; 
00000578: EAFFFF46    ;     b changesetting
0000057C:             ; 
0000057C:             ; changerange
0000057C: E24F002F    ;     adrl R0, range_min
00000580: E2400C05    ; 
00000584: E24F1036    ;     adrl R1, range_max
00000588: E2411C05    ; 
0000058C: E3A02001    ;     mov R2, #1
00000590: EBFFFF68    ;     bl changearr
00000594:             ; 
00000594: EAFFFF3F    ;     b changesetting
00000598:             ; 
00000598:             ; changeicons
00000598:             ; ;;print the current icons, ask for 3 characters in sequence for alive/dead/ptr
00000598: EB000015    ;     bl printicons
0000059C:             ; 
0000059C: E28F00E3    ;     adrl R0, currenticons_a
000005A0: E2800C1E    ; 
000005A4: EF000003    ;     swi 3
000005A8:             ; 
000005A8: E3A00000    ;     mov R0, #0
000005AC: E3A01003    ;     mov R1, #3
000005B0: E3A02001    ;     mov R2, #1
000005B4: EB0001BF    ;     bl getstring
000005B8:             ; 
000005B8: E3500000    ;     cmp R0, #0
000005BC: 0A000008    ;     beq changeiconsmallerr
000005C0:             ; 
000005C0: E5D01000    ;     ldrb R1, [R0, #0]
000005C4: E5D02001    ;     ldrb R2, [R0, #1]
000005C8: E5D03002    ;     ldrb R3, [R0, #2]
000005CC:             ; 
000005CC: E54F157B    ;     strb R1, alive_c
000005D0: E54F257E    ;     strb R2, dead_c
000005D4: E54F3581    ;     strb R3, ptr_c
000005D8:             ; 
000005D8: EB0000AF    ;     bl newline
000005DC:             ; 
000005DC: EB000004    ;     bl printicons
000005E0:             ; 
000005E0: EAFFFF2C    ;     b changesetting
000005E4:             ; 
000005E4:             ; changeiconsmallerr
000005E4: E28F0011    ;     adrl R0, getstringerr_m
000005E8: E2800C1F    ; 
000005EC: EF000003    ;     swi 3
000005F0:             ; 
000005F0: EAFFFF28    ;     b changesetting
000005F4:             ; 
000005F4:             ; printicons
000005F4:             ; ;;INP --
000005F4:             ; ;;OUT --
000005F4: E28F0076    ;     adrl R0, currenticons_1
000005F8: E2800C1E    ; 
000005FC: EF000003    ;     swi 3
00000600:             ; 
00000600: E55F05AF    ;     ldrb R0, alive_c
00000604: EF000000    ;     swi 0
00000608:             ; 
00000608: E3A0000A    ;     ldr R0, =nl
0000060C: EF000000    ;     swi 0
00000610:             ; 
00000610: E28F0062    ;     adrl R0, currenticons_2
00000614: E2800C1E    ; 
00000618: EF000003    ;     swi 3
0000061C:             ; 
0000061C: E55F05CA    ;     ldrb R0, dead_c
00000620: EF000000    ;     swi 0
00000624:             ; 
00000624: E3A0000A    ;     ldr R0, =nl
00000628: EF000000    ;     swi 0
0000062C:             ; 
0000062C: E28F004D    ;     adrl R0, currenticons_3
00000630: E2800C1E    ; 
00000634: EF000003    ;     swi 3
00000638:             ; 
00000638: E55F05E5    ;     ldrb R0, ptr_c
0000063C: EF000000    ;     swi 0
00000640:             ; 
00000640: E3A0000A    ;     ldr R0, =nl
00000644: EF000000    ;     swi 0
00000648:             ; 
00000648:             ; printiconsend
00000648: E1A0F00E    ;     mov R15, R14
0000064C:             ; 
0000064C:             ; changeitter
0000064C: E28F00F9    ;     adrl R0, currentItters
00000650: E2800C1D    ; 
00000654: EF000003    ;     swi 3
00000658:             ; 
00000658: E55F0609    ;     ldrb R0, maxitters
0000065C: EF000004    ;     swi 4
00000660:             ; 
00000660: EB00008D    ;     bl newline
00000664:             ; 
00000664: E28F0089    ;     adrl R0, getitters_m
00000668: E2800C1F    ; 
0000066C: EF000003    ;     swi 3
00000670:             ; 
00000670:             ; changeitterget
00000670: E3A0000A    ;     ldr R0, =enter
00000674: E3E01000    ;     mov R1, #-1
00000678: E3A02001    ;     mov R2, #1
0000067C: EB00018D    ;     bl getstring
00000680:             ; 
00000680: E1A04000    ;     mov R4, R0
00000684:             ; 
00000684: EB000141    ;     bl strtoi
00000688: E1A03000    ;     mov R3, R0
0000068C:             ; 
0000068C: E1A05000    ;     mov R5, R0
00000690: E1A06001    ;     mov R6, R1
00000694:             ; 
00000694: E1A00004    ;     mov R0, R4
00000698: EB0003CC    ;     bl free
0000069C:             ; 
0000069C: EB00007E    ;     bl newline
000006A0:             ; 
000006A0: E3560000    ;     cmp R6, #0
000006A4: 1A000003    ;     bne changeittererr
000006A8:             ; 
000006A8: E24F0059    ;     adrl R0, maxitters
000006AC: E2400C06    ; 
000006B0: E5405000    ;     strb R5, [R0]
000006B4:             ; 
000006B4: EA000004    ;     b changeitterend
000006B8:             ; 
000006B8:             ; changeittererr
000006B8: EB000077    ;     bl newline
000006BC:             ; 
000006BC: E28F0EF1    ;     adrl R0, changeittere_m
000006C0: E2800A01    ; 
000006C4: EF000003    ;     swi 3
000006C8: EAFFFFE8    ;     b changeitterget
000006CC:             ; changeitterend
000006CC: E28F0079    ;     adrl R0, currentItters
000006D0: E2800C1D    ; 
000006D4: EF000003    ;     swi 3
000006D8:             ; 
000006D8: E55F0689    ;     ldrb R0, maxitters
000006DC: EF000004    ;     swi 4
000006E0:             ; 
000006E0: EB00006D    ;     bl newline
000006E4:             ; 
000006E4: EAFFFEEB    ;     b changesetting
000006E8:             ; 
000006E8:             ; changedrawerase
000006E8: E24F0FA6    ;     adrl R0, drawerase
000006EC: E2400B01    ; 
000006F0: E28F105E    ;     adrl R1, currentdraweras
000006F4: E2811C1D    ; 
000006F8: EBFFFF6F    ;     bl changebool
000006FC:             ; 
000006FC: EAFFFEE5    ;     b changesetting
00000700:             ; 
00000700:             ; changedraweraseend
00000700: EAFFFEE4    ;     b changesetting
00000704:             ; 
00000704:             ; printhelp
00000704: E28F0052    ;     adrl R0, helpinfomsg
00000708: E2800C1A    ; 
0000070C: EF000003    ;     swi 3
00000710:             ; 
00000710: EF000001    ;     swi 1
00000714:             ; 
00000714: EAFFFE69    ;     b mainmenu
00000718:             ; 
00000718:             ; newboard
00000718: E3A00001    ;     mov R0, #1;;should get dims
0000071C: EB000258    ;     bl setupOptions
00000720:             ; 
00000720: EB0001A2    ;     bl setupGrid
00000724:             ;     
00000724: E51F46E4    ;     ldr R4, gridA
00000728: E51F56E4    ;     ldr R5, gridB
0000072C:             ; 
0000072C: E3540000    ;     cmp R4, #0
00000730: 0AFFFEAE    ;     beq gridFail
00000734: E3550000    ;     cmp R5, #0
00000738: 0AFFFEAC    ;     beq gridFail
0000073C:             ; 
0000073C: EAFFFE7B    ;     b mainloopstart
00000740:             ; 
00000740:             ; loadboard
00000740:             ; ;;INP in R0 is the ptr to the SaveInfoHeader struct i.e. ptr to arr, current pos, max size
00000740:             ; ;;RET in R0 0 for success in which case go to main loop, n/0 for err in which case return to ma
                      ; in menu
00000740:             ; ;;display the saved grids
00000740:             ; ;;ask for the index
00000740:             ; ;;load the grids with the saved info
00000740:             ; ;;ask the user for the settings
00000740: E1A04000    ;     mov R4, R0 ;;save the struct ptr
00000744:             ; 
00000744:             ;     ;;pass ptr to listgrids
00000744: EB00007A    ;     bl listGrids
00000748:             ; 
00000748: E5940008    ;     ldr R0, [R4, #8] ;;get the current position
0000074C: E3500000    ;     cmp R0, #0
00000750: 0A00004F    ;     beq loadboardempty
00000754:             ; 
00000754:             ; loadboardaskindex
00000754:             ;     ;;The grid has now been printed out we need to get the index to load
00000754: E28F00A4    ;     adrl R0, loadboardaski
00000758: E2800B06    ; 
0000075C: EF000003    ;     swi 3
00000760:             ; 
00000760: E3A0000A    ;     ldr R0, =enter
00000764: E3E01000    ;     mov R1, #-1
00000768: E3A02001    ;     mov R2, #1
0000076C: EB000151    ;     bl getstring
00000770: E1A05000    ;     mov R5, R0
00000774:             ; 
00000774: EB000048    ;     bl newline
00000778:             ; 
00000778: E1A00005    ;     mov R0, R5
0000077C: EB000103    ;     bl strtoi
00000780: E1A06000    ;     mov R6, R0
00000784: E1A07001    ;     mov R7, R1
00000788:             ;     ;;ERR codes
00000788:             ;     ;;  0 is success
00000788:             ;     ;;  1 is attempted -ve
00000788:             ;     ;;  2 is use of non-numeric characters
00000788:             ;     ;;  3 is value out of range of integer
00000788:             ;     ;;  4 is null string given
00000788:             ; 
00000788: E1A00005    ;     mov R0, R5
0000078C: EB00038F    ;     bl free
00000790:             ; 
00000790: E1A00006    ;     mov R0, R6
00000794: E1A01007    ;     mov R1, R7
00000798:             ; 
00000798: E3510001    ;     cmp R1, #1
0000079C: 0A000039    ;     beq loadboardret
000007A0:             ; 
000007A0: E3510000    ;     cmp R1, #0
000007A4: 0A000003    ;     beq loadboardindex
000007A8:             ; 
000007A8: E28F00DA    ;     adrl R0, loadboardifail
000007AC: E2800B06    ; 
000007B0: EF000003    ;     swi 3
000007B4:             ; 
000007B4: EAFFFFE6    ;     b loadboardaskindex
000007B8:             ; 
000007B8:             ; loadboardindex
000007B8:             ; ;;we now have an index lets check if its in range and then load the board
000007B8:             ;     ;;should be +ve so don't need to check < 0
000007B8: E5941008    ;     ldr R1, [R4, #8] ;;get the current position, this is where things get added so index < curr
                      ; entposition
000007BC: E1500001    ;     cmp R0, R1
000007C0: BA000003    ;     blt loadboardmain
000007C4:             ; 
000007C4: E28F00E1    ;     adrl R0, loadboardirerr
000007C8: E2800B06    ; 
000007CC: EF000003    ;     swi 3
000007D0: EAFFFFDF    ;     b loadboardaskindex
000007D4:             ; 
000007D4:             ; loadboardmain
000007D4:             ; ;;now we know that the index is valid we can load the grid
000007D4:             ; ;;
000007D4:             ; ;;need to free current grid
000007D4:             ; ;;need to create a copy of the snapshot and set gridA to it 
000007D4:             ; ;;return to main menu
000007D4: E5941000    ;     ldr R1, [R4, #0] ;;get the array of grids
000007D8: E3A0200C    ;     ldr R2, =sizeofSaveI
000007DC: E0201290    ;     mla R0, R0, R2, R1 ;;R0 = index * sizeofSaveI + grid.addr
000007E0:             ; 
000007E0: E5905000    ;     ldr R5, [R0, #0] ;;get the address of that grid
000007E4: E5D06008    ;     ldrb R6, [R0, #8] ;;get the width
000007E8: E5D07009    ;     ldrb R7, [R0, #9] ;;get the height
000007EC:             ; 
000007EC: E0000796    ;     mul R0, R6, R7 ;;get the required size
000007F0: E1A09000    ;     mov R9, R0 ;;save the number of bytes
000007F4:             ; 
000007F4: EB000349    ;     bl malloc
000007F8:             ; 
000007F8: E3500000    ;     cmp R0, #0
000007FC: 0A00001D    ;     beq loadboardmallocfail
00000800:             ; 
00000800: E1A08000    ;     mov R8, R0 ;;save the new grid arr
00000804:             ; 
00000804:             ;     ;;need to copy the saved grid into the new grid
00000804:             ; 
00000804: E1A00005    ;     mov R0, R5  ;;src is the saved grid
00000808: E1A01008    ;     mov R1, R8  ;;dst is the new grid
0000080C: E1A02009    ;     mov R2, R9  ;;bytes is in R9 already from width and height
00000810: EB000107    ;     bl memcpy
00000814:             ; 
00000814: E51F07D4    ;     ldr R0, gridA
00000818: EB00036C    ;     bl free
0000081C:             ; 
0000081C: E50F87DC    ;     str R8, gridA
00000820:             ; 
00000820:             ;     ;;also need to check if the old gridB is big enough
00000820: E55F87D5    ;     ldrb R8, width
00000824: E55FA7D8    ;     ldrb R10, height
00000828: E1560008    ;     cmp R6, R8
0000082C: 1A000002    ;     bne loadboardmallocB
00000830: E157000A    ;     cmp R7, R10
00000834: 1A000000    ;     bne loadboardmallocB
00000838:             ; 
00000838: EA000006    ;     b loadboardskipB
0000083C:             ; 
0000083C:             ; loadboardmallocB
0000083C: E51F07F8    ;     ldr R0, gridB
00000840: EB000362    ;     bl free
00000844:             ; 
00000844: E1A00009    ;     mov R0, R9
00000848: EB000334    ;     bl malloc
0000084C:             ; 
0000084C: E3500000    ;     cmp R0, #0
00000850: 0A000008    ;     beq loadboardmallocfail
00000854:             ; 
00000854: E50F0810    ;     str R0, gridB
00000858:             ; 
00000858:             ; loadboardskipB
00000858: E54F680D    ;     strb R6, width
0000085C: E54F7810    ;     strb R7, height ;;overwrite the active grid information
00000860:             ; 
00000860: E28F00A2    ;     adrl R0, loadboardsucmsg
00000864: E2800B06    ; 
00000868: EF000003    ;     swi 3
0000086C:             ; 
0000086C: E3A00000    ;     mov R0, #0 ;;skip asking dims as they've been loaded
00000870: EB000203    ;     bl setupOptions
00000874:             ; 
00000874: EA000007    ;     b loadboardsucc
00000878:             ; 
00000878:             ; loadboardmallocfail
00000878: E28F004A    ;     adrl R0, loadboardmlcerr
0000087C: E2800B06    ; 
00000880: EF000003    ;     swi 3
00000884:             ; 
00000884: EA000002    ;     b loadboarderr
00000888:             ; 
00000888:             ; loadboardret
00000888: E28F00E2    ;     adrl R0, loadboardretmsg
0000088C: E2800C17    ; 
00000890: EF000003    ;     swi 3
00000894:             ; 
00000894:             ; loadboardempty
00000894:             ; loadboarderr
00000894: EAFFFE09    ;     b mainmenu
00000898:             ; loadboardsucc
00000898: EAFFFE24    ;     b mainloopstart
0000089C:             ; 
0000089C:             ; newline
0000089C: E3A0000A    ;     ldr R0, =nl
000008A0: EF000000    ;     swi 0
000008A4:             ; 
000008A4: E1A0F00E    ;     mov R15, R14
000008A8:             ; 
000008A8:             ; step
000008A8:             ; ;;INP in R0 is the gridHeaderStruct ptr [[todo]]
000008A8:             ; ;;INP in R1 is the active grid ptr
000008A8:             ; ;;OUT in R0 is 1 if should return to main menu, else 0.
000008A8:             ; 
000008A8:             ; ;;get user input
000008A8:             ; ;;if q -> jump to main menu
000008A8:             ; ;;if s -> ask for name, bl saveGrid with name
000008A8: E92D41F0    ;     push {R14, R4-R8}
000008AC: E1A04000    ;     mov R4, R0 ;;save the struct 
000008B0: E1A05001    ;     mov R5, R1
000008B4:             ; 
000008B4: EF000001    ;     swi 1
000008B8:             ; 
000008B8: E3500071    ;     cmp R0, #'q'
000008BC: 0A000017    ;     beq stependfail ;;bad name, shame I can't change it eh
000008C0:             ; 
000008C0: E3500073    ;     cmp R0, #'s'
000008C4: 1A000017    ;     bne stependsucc
000008C8:             ; 
000008C8: E28F0E29    ;     adrl R0, askname
000008CC: E2800A01    ; 
000008D0: EF000003    ;     swi 3
000008D4:             ; 
000008D4: E3A0000A    ;     ldr R0, =enter
000008D8: E3E01000    ;     mov R1, #-1
000008DC: E3A02001    ;     mov R2, #1
000008E0: EB0000F4    ;     bl getstring
000008E4:             ; 
000008E4: E1A01000    ;     mov R1, R0 ;;char* name
000008E8: E1A00004    ;     mov R0, R4 ;;gridinfo* 
000008EC: E1A02005    ;     mov R2, R5 ;;active grid
000008F0: EB000046    ;     bl saveGrid
000008F4:             ; 
000008F4: EBFFFFE8    ;     bl newline
000008F8:             ; 
000008F8: E28F0035    ;     adrl R0, savedchoice
000008FC: E2800C12    ; 
00000900: EF000003    ;     swi 3
00000904:             ; 
00000904: EF000001    ;     swi 1
00000908: EF000000    ;     swi 0
0000090C: E3500059    ;     cmp R0, #'Y'
00000910:             ; 
00000910: E3A0000A    ;     ldr R0, =nl
00000914: EF000000    ;     swi 0
00000918:             ; 
00000918: 0A000000    ;     beq stependfail
0000091C: EA000001    ;     b stependsucc
00000920:             ; 
00000920:             ; stependfail
00000920: E3A00001    ;     mov R0, #1
00000924: EA000000    ;     b stepend
00000928:             ; 
00000928:             ; stependsucc
00000928: E3A00000    ;     mov R0, #0
0000092C:             ; 
0000092C:             ; stepend
0000092C: E8BD41F0    ;     pop {R14, R4-R8}
00000930: E1A0F00E    ;     mov R15, R14
00000934:             ; 
00000934:             ; listGrids
00000934:             ; ;;INP in R0 is the ptr to the gridInfo struct
00000934:             ; ;;RET --
00000934:             ; ;;Grid info struct
00000934:             ; ;;  - SaveInfoStruct* array
00000934:             ; ;;  - int max size of arr
00000934:             ; ;;  - int current position in arr
00000934:             ; 
00000934:             ; ;;loops through the array of grids (if any) printing their names, and dims, ask to print grid
00000934: E92D47F0    ;     push {R14, R4-R10}
00000938:             ; 
00000938: E5904000    ;     ldr R4, [R0, #0] ;;get the array ptr
0000093C: E5905008    ;     ldr R5, [R0, #8] ;;current position
00000940:             ; 
00000940: E3550000    ;     cmp R5, #0
00000944: 0A00002C    ;     beq listGridsEmpty
00000948:             ; 
00000948:             ; ;;if current position == 1: print("There are no saved grids")
00000948:             ; ;;for i from 0 to current position
00000948:             ; ;;  getname(4)
00000948:             ; ;;  getwidth(8)
00000948:             ; ;;  getheight(9)
00000948:             ; ;;  print("There is a grid called %s with dims (%d, %d)")
00000948: E3A01000    ;     mov R1, #0 ;;i
0000094C: E3A0200C    ;     ldr R2, =sizeofSaveI
00000950:             ; 
00000950: E28F0E7D    ;     adrl R0, listgridmsg
00000954: E2800A01    ; 
00000958: EF000003    ;     swi 3
0000095C:             ; 
0000095C: E28F00E7    ;     adrl R0, cutoff
00000960: E2800C17    ; 
00000964: EF000003    ;     swi 3
00000968:             ; 
00000968:             ; listGridsLoop
00000968: E1510005    ;     cmp R1, R5
0000096C: 0A000025    ;     beq listGridsLend
00000970:             ; 
00000970: E0234291    ;     mla R3, R1, R2, R4 ;;R3 = i * sizeof(saveInfo) + array
00000974: E5936004    ;     ldr R6, [R3, #4] ;;load the name ptr
00000978: E5D37008    ;     ldrb R7, [R3, #8] ;;load the width
0000097C: E5D38009    ;     ldrb R8, [R3, #9] ;;load the height
00000980:             ; 
00000980: E28F0F95    ;     adrl R0, gridloadpindex
00000984: E2800B05    ; 
00000988: EF000003    ;     swi 3
0000098C:             ; 
0000098C: E3A0003A    ;     mov R0, #':'
00000990: EF000000    ;     swi 0
00000994:             ; 
00000994: E1A00001    ;     mov R0, R1
00000998: EF000004    ;     swi 4
0000099C:             ; 
0000099C: EBFFFFBE    ;     bl newline
000009A0:             ; 
000009A0: E28F003D    ;     adrl R0, gridloadpname
000009A4: E2800C16    ; 
000009A8: EF000003    ;     swi 3
000009AC:             ; 
000009AC: E1A00006    ;     mov R0, R6
000009B0: EF000003    ;     swi 3
000009B4:             ; 
000009B4: EBFFFFB8    ;     bl newline
000009B8:             ; 
000009B8: E28F002D    ;     adrl R0, gridloadpwidth
000009BC: E2800C16    ; 
000009C0: EF000003    ;     swi 3
000009C4:             ; 
000009C4: E1A00007    ;     mov R0, R7
000009C8: EF000004    ;     swi 4
000009CC:             ; 
000009CC: EBFFFFB2    ;     bl newline
000009D0:             ; 
000009D0: E28F001E    ;     adrl R0, gridloadpheight
000009D4: E2800C16    ; 
000009D8: EF000003    ;     swi 3
000009DC:             ; 
000009DC: E1A00008    ;     mov R0, R8
000009E0: EF000004    ;     swi 4
000009E4:             ; 
000009E4: EBFFFFAC    ;     bl newline
000009E8:             ; 
000009E8:             ;     ;;[[Prob]  Printing the grid uses the stored width and height, I could change it to use a p
                      ; assed in
000009E8:             ;     ;;             version but do the other areas have enough registers to cope? probably not.
000009E8:             ;     ;;             Would have to swap the width and height with the loaded versions - I really 
                      ; don't like this idea
000009E8:             ; 
000009E8: E2811001    ;     add R1, R1, #1
000009EC:             ; 
000009EC: E28F0057    ;     adrl R0, cutoff
000009F0: E2800C17    ; 
000009F4: EF000003    ;     swi 3
000009F8:             ; 
000009F8: EAFFFFDA    ;     b listGridsLoop
000009FC:             ; 
000009FC:             ; listGridsEmpty
000009FC: E28F007D    ;     adrl R0, gridloadempty
00000A00: E2800C15    ; 
00000A04: EF000003    ;     swi 3
00000A08:             ; 
00000A08:             ; listGridsLend
00000A08:             ; listGridsEnd
00000A08: E8BD47F0    ;     pop {R14, R4-R10}
00000A0C: E1A0F00E    ;     mov R15, R14
00000A10:             ; 
00000A10:             ; saveGrid
00000A10:             ; ;;INP in R0 is the ptr gridInfo struct (in the main's stackframe)
00000A10:             ; ;;INP in R1 is the char* to the name
00000A10:             ; ;;INP in R2 is the active grid
00000A10:             ; ;;RET in R0 is an errcode or 0 for success. 1 for malloc error
00000A10:             ; 
00000A10:             ; ;;if reachedCap -> realloc + inc maxsize
00000A10:             ; ;;copy the current grid to another loc and place info in gridArr
00000A10:             ; ;;inc current index
00000A10: E92D47F0    ;     push {R14, R4-R10}
00000A14:             ; 
00000A14: E1A04000    ;     mov R4, R0
00000A18: E1A05001    ;     mov R5, R1
00000A1C: E1A0A002    ;     mov R10, R2
00000A20:             ; 
00000A20: E5942008    ;     ldr R2, [R4, #8] ;;get the current index
00000A24: E5943004    ;     ldr R3, [R4, #4] ;;get the maxsize
00000A28:             ; 
00000A28: E1520003    ;     cmp R2, R3
00000A2C: 0A000000    ;     beq saveGridResize
00000A30: EA00000D    ;     b saveGridAdd
00000A34:             ; 
00000A34:             ; saveGridResize
00000A34:             ;     ;;maxsize in R3
00000A34: E1A06083    ;     mov R6, R3, lsl #1 ;;double the capacity
00000A38: E3A0700C    ;     ldr R7, =sizeofSaveI
00000A3C: E0070796    ;     mul R7, R6, R7 ;;get the number of bytes
00000A40:             ; 
00000A40: E1A00007    ;     mov R0, R7
00000A44: EB0002B5    ;     bl malloc ;;get the new grid
00000A48:             ; 
00000A48: E3500000    ;     cmp R0, #0 ;;if malloc failed then don't do any saving
00000A4C: 0A000020    ;     beq saveGridFailMalloc
00000A50:             ; 
00000A50: E1A01000    ;     mov R1, R0
00000A54: E1A08000    ;     mov R8, R0 ;;save of ptr
00000A58:             ; 
00000A58:             ;     ;;now that we have the new grid we need to memcpy the bytes from the original into the new 
                      ; one
00000A58: E5940000    ;     ldr R0, [R4, #0] ;;get the array ptr
00000A5C:             ;     ;;R1 has the malloced address
00000A5C: E1A020A7    ;     mov R2, R7, lsr #1 ;;not great, this is the double cap halfed, means no mul again
00000A60: EB000073    ;     bl memcpy
00000A64:             ; 
00000A64:             ;     ;;assume success because I didn't give memcpy an err code :)
00000A64:             ;     ;;need to store the new size and arr ptr in the gridinfo struct
00000A64:             ; 
00000A64: E5848000    ;     str R8, [R4, #0]
00000A68: E5846004    ;     str R6, [R4, #4]
00000A6C:             ; 
00000A6C:             ; saveGridAdd
00000A6C:             ; ;;add the current grid to the array
00000A6C: E5946000    ;     ldr R6, [R4, #0] ;;get the arr ptr
00000A70: E5947008    ;     ldr R7, [R4, #8] ;;get current index
00000A74:             ; 
00000A74:             ;     ;;ptr is 4 bytes
00000A74:             ;     ;;we're adding the struct of 
00000A74:             ;     ;;  |-grid*     (ptr)
00000A74:             ;     ;;  |-char*     (ptr)
00000A74:             ;     ;;  |-width     (byte)
00000A74:             ;     ;;  `-height    (byte)
00000A74:             ; 
00000A74:             ;     ;;we need to copy the current array
00000A74: E55F8A29    ;     ldrb R8, width
00000A78: E55F9A2C    ;     ldrb R9, height
00000A7C: E0080998    ;     mul R8, R8, R9 ;;get the number of bytes in grid
00000A80:             ; 
00000A80: E1A00008    ;     mov R0, R8
00000A84: EB0002A5    ;     bl malloc ;;allocate a new grid
00000A88:             ; 
00000A88: E3500000    ;     cmp R0, #0
00000A8C: 0A000010    ;     beq saveGridFailMalloc
00000A90:             ; 
00000A90: E92D0100    ;     push {R8} ;; :(
00000A94:             ; 
00000A94: E3A0800C    ;     ldr R8, =sizeofSaveI
00000A98: E0266897    ;     mla R6, R7, R8, R6 ;;currentindex * sizeof(Gridinfo) + arrptr
00000A9C: E5860000    ;     str R0, [R6, #0] ;;store the grid*
00000AA0: E5865004    ;     str R5, [R6, #4] ;;store the char*
00000AA4: E55F8A59    ;     ldrb R8, width
00000AA8: E5C68008    ;     strb R8, [R6, #8]
00000AAC: E5C69009    ;     strb R9, [R6, #9]
00000AB0:             ; 
00000AB0: E8BD0100    ;     pop {R8}
00000AB4:             ; 
00000AB4: E1A01000    ;     mov R1, R0 ;;dst
00000AB8: E1A0000A    ;     mov R0, R10 ;;src
00000ABC: E1A02008    ;     mov R2, R8 ;;num bytes
00000AC0: EB00005B    ;     bl memcpy ;;copy the grid into the new location
00000AC4:             ; 
00000AC4:             ;     ;;inc the position
00000AC4: E5940008    ;     ldr R0, [R4, #8]
00000AC8: E2800001    ;     add R0, R0, #1
00000ACC: E5840008    ;     str R0, [R4, #8]
00000AD0:             ; 
00000AD0: EA000001    ;     b saveGridSucc
00000AD4:             ; 
00000AD4:             ; saveGridFailMalloc
00000AD4: E3A00001    ;     mov R0, #1
00000AD8: EA000000    ;     b saveGridEnd
00000ADC:             ; 
00000ADC:             ; saveGridSucc
00000ADC: E3A00000    ;     mov R0, #0
00000AE0:             ; 
00000AE0:             ; saveGridEnd
00000AE0: E8BD47F0    ;     pop {R14, R4-R10}
00000AE4: E1A0F00E    ;     mov R15, R14
00000AE8:             ; 
00000AE8:             ; erase
00000AE8:             ; ;;INP in R0 is the itters
00000AE8:             ; ;;for (width * height + 1) * 2 + 1
00000AE8:             ; ;;      print('\b')
00000AE8: E1A01000    ;     mov R1, R0
00000AEC:             ; 
00000AEC:             ; eraseloop
00000AEC: E3510000    ;     cmp R1, #0
00000AF0: 0A000003    ;     beq eraseend
00000AF4:             ; 
00000AF4: E3A00008    ;     ldr R0, =backspace
00000AF8: EF000000    ;     swi 0
00000AFC:             ; 
00000AFC: E2411001    ;     sub R1, R1, #1
00000B00: EAFFFFF9    ;     b eraseloop
00000B04:             ; 
00000B04:             ; eraseend
00000B04: E1A0F00E    ;     mov R15, R14
00000B08:             ; 
00000B08:             ; slow
00000B08: E3A010FF    ;     mov R1, #0xFF
00000B0C: E1A01081    ;     mov R1, R1, lsl #1
00000B10:             ; 
00000B10:             ; slowloop
00000B10: E3510000    ;     cmp R1, #0
00000B14: 0A000005    ;     beq slowend
00000B18:             ; 
00000B18: E3A00020    ;     mov R0, #' '
00000B1C: EF000000    ;     swi 0
00000B20: E3A00008    ;     ldr R0, =backspace
00000B24: EF000000    ;     swi 0
00000B28:             ; 
00000B28: E2411001    ;     sub R1, R1, #1
00000B2C: EAFFFFF7    ;     b slowloop
00000B30:             ; 
00000B30:             ; slowend
00000B30: E1A0F00E    ;     mov R15, R14
00000B34:             ; 
00000B34:             ; heapclean
00000B34:             ; ;;zero out all memory in the heap (debugging uses)
00000B34: E28F0FDD    ;     adrl R0, heapstart
00000B38: E2800B06    ; 
00000B3C: E3A01601    ;     ldr R1, =max_addr ;;stores the end of the heap
00000B40: E3A02801    ;     ldr R2, =stack_size
00000B44: E0411002    ;     sub R1, R1, R2 ;; R1 = max_addr - stack_size which should be the heap end
00000B48: E3C11003    ;     and R1, R1, #-4 ;;align to 4 byte boundry just in case
00000B4C: E3A03000    ;     mov R3, #0
00000B50:             ; heapcleanloop ;;starting at heapstart
00000B50: E1500001    ;     cmp R0, R1
00000B54: 0A000002    ;     beq heapcleanend
00000B58: E5003000    ;     str R3, [R0] ;;store 0 in loc
00000B5C: E2800004    ;     add R0, R0, #4 ;;inc by a word
00000B60: EAFFFFFA    ;     b heapcleanloop
00000B64:             ; heapcleanend
00000B64: E1A0F00E    ;     mov R15, R14
00000B68:             ; 
00000B68:             ; strlen
00000B68:             ; ;;INP in R0 is the address of the string
00000B68:             ; ;;OUT in R0 is the length of the null terminated string
00000B68:             ; 
00000B68:             ; ;;len = 0
00000B68:             ; ;;while(inp[len] != \0) {len++;}
00000B68:             ; ;;return len
00000B68:             ; 
00000B68: E3A01000    ;     mov R1, #0 ;;len
00000B6C: E3500000    ;     cmp R0, #0
00000B70: 0A000004    ;     beq strlenend
00000B74:             ; 
00000B74:             ; strlenloop
00000B74: E7D02001    ;     ldrb R2, [R0, R1]
00000B78: E3520000    ;     cmp R2, #0
00000B7C: 0A000001    ;     beq strlenend
00000B80: E2811001    ;     add R1, R1, #1
00000B84: EAFFFFFA    ;     b strlenloop
00000B88:             ; 
00000B88:             ; strlenend
00000B88: E1A00001    ;     mov R0, R1
00000B8C: E1A0F00E    ;     mov R15, R14
00000B90:             ; 
00000B90:             ; 
00000B90:             ; strtoi
00000B90:             ; ;;INP in R0 is the address of the string
00000B90:             ; ;;OUT in R0 is the value created
00000B90:             ; ;;OUT in R1 is the err code
00000B90:             ; ;;
00000B90:             ; ;;ERR codes
00000B90:             ; ;;  0 is success
00000B90:             ; ;;  1 is attempted -ve
00000B90:             ; ;;  2 is use of non-numeric characters
00000B90:             ; ;;  3 is value out of range of integer
00000B90:             ; ;;  4 is null string given
00000B90:             ; 
00000B90:             ; ;;  example inp
00000B90:             ; ;;  12234       len = 5
00000B90:             ; ;;      ^-find end
00000B90:             ; ;;  tot = 0
00000B90:             ; ;;  for i from end to 0:
00000B90:             ; ;;      tot += inp[i] * (10 ** (len(inp) - i - 1))
00000B90:             ; ;;  +some checks for valid input
00000B90:             ; 
00000B90:             ; ;;This will take in an address to the start of a string and attempt to convert it into an integ
                      ; er
00000B90:             ; ;;String is only valid when all characters are numerical
00000B90:             ; ;;For now it does not accept -ve numbers
00000B90:             ; 
00000B90: E92D41F0    ;     push {R14, R4-R8}
00000B94: E1A04000    ;     mov R4, R0  ;;R4 holds the addr
00000B98:             ; 
00000B98: E3500000    ;     cmp R0, #0
00000B9C: 03A01004    ;     moveq R1, #4
00000BA0: 0A00001E    ;     beq strtoiendfail ;;null given so err code = 4 and end
00000BA4:             ; 
00000BA4: EBFFFFEF    ;     bl strlen
00000BA8: E1A05000    ;     mov R5, R0  ;;R5 holds the len of the string
00000BAC:             ; 
00000BAC: E3550000    ;     cmp R5, #0
00000BB0: 0A00001C    ;     beq strtoiendsucc ;;if len(string) == 0 then return 0
00000BB4:             ; 
00000BB4: E5D46000    ;     ldrb R6, [R4, #0]
00000BB8: E356002D    ;     cmp R6, #45
00000BBC: 0A000012    ;     beq strtoifailminus
00000BC0:             ; 
00000BC0: E3A06000    ;     mov R6, #0  ;;R6 holds the total
00000BC4: E3A07001    ;     mov R7, #1  ;;R7 holds the **
00000BC8: E2458001    ;     sub R8, R5, #1  ;;R8 is i which starts at end (len - 1)
00000BCC: E3A0300A    ;     mov R3, #10 ;;mul to **
00000BD0:             ; 
00000BD0:             ; strtoiloop
00000BD0: E3580000    ;     cmp R8, #0
00000BD4: BA00000A    ;     blt strtoilend
00000BD8:             ; 
00000BD8: E7D42008    ;     ldrb R2, [R4, R8]
00000BDC: E2422030    ;     sub R2, R2, #48
00000BE0:             ; 
00000BE0: E3520000    ;     cmp R2, #0
00000BE4: BA00000C    ;     blt strtoifailnonnum
00000BE8: E3520009    ;     cmp R2, #9
00000BEC: CA00000A    ;     bgt strtoifailnonnum
00000BF0:             ; 
00000BF0: E0266792    ;     mla R6, R2, R7, R6 ;;total = (inp[i] * (**)) + total -> total += inp[i] * (**)
00000BF4: 6A000006    ;     bvs strtoifailoutrange
00000BF8: E0070397    ;     mul R7, R7, R3
00000BFC:             ; 
00000BFC: E2488001    ;     sub R8, R8, #1
00000C00:             ; 
00000C00: EAFFFFF2    ;     b strtoiloop
00000C04:             ; 
00000C04:             ; 
00000C04:             ; ;;branches are expensive - should this just be rep RET? probably doesn't matter at this scale
00000C04:             ; strtoilend
00000C04: E1A00006    ;     mov R0, R6
00000C08: EA000006    ;     b strtoiendsucc
00000C0C:             ; 
00000C0C:             ; strtoifailminus
00000C0C: E3A01001    ;     mov R1, #1
00000C10: EA000002    ;     b strtoiendfail
00000C14:             ; 
00000C14:             ; strtoifailoutrange
00000C14: E3A01003    ;     mov R1, #3
00000C18: EA000000    ;     b strtoiendfail
00000C1C:             ; 
00000C1C:             ; strtoifailnonnum
00000C1C: E3A01002    ;     mov R1, #2
00000C20:             ; 
00000C20:             ; strtoiendfail
00000C20: E3A00000    ;     mov R0, #0
00000C24: EA000000    ;     b strtoiend
00000C28:             ; 
00000C28:             ; strtoiendsucc
00000C28: E3A01000    ;     mov R1, #0
00000C2C:             ; 
00000C2C:             ; strtoiend
00000C2C: E8BD41F0    ;     pop {R14, R4-R8}
00000C30: E1A0F00E    ;     mov R15, R14
00000C34:             ; 
00000C34:             ; memcpy
00000C34:             ; ;;INP in R0 is the addr of src
00000C34:             ; ;;INP in R1 is the addr of dst
00000C34:             ; ;;INP in R2 is the number of bytes to copy
00000C34:             ; 
00000C34:             ; ;;check if src and dst are alliged
00000C34:             ; ;;If different then write bytes
00000C34:             ; ;;If same then go to 4byte boundry
00000C34:             ; ;;  Write words of bytes2copy / 4
00000C34:             ; ;;  Write remaining bytes
00000C34: E92D41F0    ;     push {R14, R4-R8}
00000C38:             ; 
00000C38: E2004003    ;     and R4, R0, #0b11
00000C3C: E2015003    ;     and R5, R1, #0b11
00000C40:             ; 
00000C40: E1540005    ;     cmp R4, R5
00000C44: 1A00000E    ;     bne memcpyallbytes
00000C48:             ; 
00000C48:             ;     ;;If they are the same then cpy R4 bytes and then do words
00000C48: E0422004    ;     sub R2, R2, R4;; bytes2cpy -= bytes we are about to write
00000C4C: E1A03004    ;     mov R3, R4
00000C50: EB00000E    ;     bl memcpybytes
00000C54:             ; 
00000C54:             ;     ;;Now find the number of words that can be written i.e. bytes2cpy / 4 (bytes2cpy >> 2)
00000C54: E3C23003    ;     and R3, R2, #-4 ;;the number of bytes to write that make up the words
00000C58: E3A04000    ;     mov R4, #0 ;;i
00000C5C:             ; memcpywordsloop
00000C5C: E1540003    ;     cmp R4, R3
00000C60: 0A000003    ;     beq memcpywordslend
00000C64:             ; 
00000C64: E7906004    ;     ldr R6, [R0, R4]
00000C68: E7816004    ;     str R6, [R1, R4]
00000C6C:             ;     
00000C6C: E2844004    ;     add R4, R4, #4
00000C70:             ; 
00000C70: EAFFFFF9    ;     b memcpywordsloop
00000C74:             ;     
00000C74:             ; memcpywordslend
00000C74:             ; ;;Now copy the remaining bytes
00000C74: E2022003    ;     and R2, R2, #0b11
00000C78: E1A03002    ;     mov R3, R2
00000C7C: EB000003    ;     bl memcpybytes
00000C80: EA00000A    ;     b memcpyend
00000C84:             ; 
00000C84:             ; memcpyallbytes
00000C84: E1A03002    ;     mov R3, R2
00000C88: EB000000    ;     bl memcpybytes
00000C8C: EA000007    ;     b memcpyend
00000C90:             ; 
00000C90:             ; memcpybytes
00000C90:             ; ;;This is an internal function to memcpy and so doesn't follow the calling convention, it also 
                      ; assumes values are in place from memcpy
00000C90:             ; ;;for (int i = 0; i < byte2cpy; i++) {
00000C90:             ; ;;      *(dst + i) = *(src + i)
00000C90:             ; ;;INP in R3 is the number of bytes to copy
00000C90: E3A05000    ;     mov R5, #0 ;;i
00000C94:             ; memcpybytesloop
00000C94: E1550003    ;     cmp R5, R3
00000C98: 0A000003    ;     beq memcpybyteslend ;;i < bytes2cpy
00000C9C:             ; 
00000C9C: E7D04005    ;     ldrb R4, [R0, R5]
00000CA0: E7C14005    ;     strb R4, [R1, R5] ;;dst[i] = src[i]
00000CA4:             ; 
00000CA4: E2855001    ;     add R5, R5, #1 ;;i++
00000CA8:             ; 
00000CA8: EAFFFFF9    ;     b memcpybytesloop
00000CAC:             ; 
00000CAC:             ; memcpybyteslend
00000CAC: E1A0F00E    ;     mov R15, R14
00000CB0:             ; 
00000CB0:             ; memcpyend
00000CB0: E8BD41F0    ;     pop {R14, R4-R8}
00000CB4: E1A0F00E    ;     mov R15, R14
00000CB8:             ; 
00000CB8:             ; getstring
00000CB8:             ; ;;INP in R0 the terminator character
00000CB8:             ; ;;INP in R1 the max number of characters or -1 for no max
00000CB8:             ; ;;INP in R2 boolean (non-0/0) for if letters should be printed out as well
00000CB8:             ; ;;RET in R0 a ptr to the memory address
00000CB8:             ; ;;
00000CB8:             ; ;;Dynamically allocate memory to support large string
00000CB8:             ; 
00000CB8:             ; ;;buff = malloc(minBytes)
00000CB8:             ; ;;while (input != terminator && pos < maxchars) 
00000CB8:             ; ;;  buff[pos] = input
00000CB8:             ; ;;  putchar(input)
00000CB8:             ; ;;  if (pos > buffSize)
00000CB8:             ; ;;      nBuff = malloc(buffSize << 1)
00000CB8:             ; ;;      memcpy from buff to nBuff
00000CB8:             ; ;;      free buff
00000CB8:             ; ;;      buff = nBuff
00000CB8:             ; 
00000CB8: E92D47F0    ;     push {R14, R4-R10}
00000CBC:             ; 
00000CBC: E1A08000    ;     mov R8, R0 ;;now holds terminator
00000CC0: E1A09001    ;     mov R9, R1 ;;nax chars
00000CC4: E3590000    ;     cmp R9, #0
00000CC8: 0A000031    ;     beq getstringEnd
00000CCC:             ;     ;sub R9, R9, #1 ;;reduce by 1 to use later
00000CCC: E1A0A002    ;     mov R10, R2 ;;print bool
00000CD0:             ; 
00000CD0: E3A06008    ;     ldr R6, =minBuffSize ;;R6 will hold the current size of the buffer
00000CD4: E1A00006    ;     mov R0, R6
00000CD8: EB000210    ;     bl malloc
00000CDC: E1A04000    ;     mov R4, R0 ;;R4 is the address of the buffer
00000CE0:             ; 
00000CE0: E3A05000    ;     mov R5, #0 ;;R5 is the loop counter/index into buffer
00000CE4:             ; getstringloop
00000CE4: E3790001    ;     cmp R9, #-1
00000CE8: 0A000001    ;     beq getstringloopskipsize
00000CEC: E1550009    ;     cmp R5, R9 ;;position - maxsize
00000CF0:             ;                       ;;pos 2 means 3 characters written
00000CF0: AA000019    ;     bge getstringlend ;;if position >= maxsize
00000CF4:             ; getstringloopskipsize
00000CF4: EF000001    ;     swi 1 ;;get input
00000CF8: E1500008    ;     cmp R0, R8 ;;is input == terminator character
00000CFC: 0A000016    ;     beq getstringlend
00000D00:             ; 
00000D00: E3790001    ;     cmp R9, #-1
00000D04: 0AFFFFFF    ;     beq skipMax
00000D08:             ;     
00000D08:             ; skipMax
00000D08: E1550006    ;     cmp R5, R6
00000D0C: E92D0001    ;     push {R0}
00000D10: AA000005    ;     bge getstringresize
00000D14:             ; 
00000D14:             ; getstringlcont
00000D14: E8BD0001    ;     pop {R0}
00000D18: E7C40005    ;     strb R0, [R4, R5] ;;buff[pos] = input
00000D1C:             ; 
00000D1C: E35A0000    ;     cmp R10, #0
00000D20: 1F000000    ;     swine 0 ;;output the character to the screen if R10 is not 0
00000D24:             ; 
00000D24: E2855001    ;     add R5, R5, #1
00000D28:             ; 
00000D28: EAFFFFED    ;     b getstringloop
00000D2C:             ; 
00000D2C:             ; getstringresize
00000D2C:             ;     ;;r6 will hold new buffer
00000D2C: E1A00086    ;     mov R0, R6, lsl #1
00000D30: EB0001FA    ;     bl malloc
00000D34: E1A07000    ;     mov R7, R0
00000D38:             ; 
00000D38: E1A00004    ;     mov R0, R4 ;;old buff
00000D3C: E1A01007    ;     mov R1, R7 ;;newBuff
00000D40: E1A02005    ;     mov R2, R5 ;;bytes to write
00000D44: EBFFFFBA    ;     bl memcpy
00000D48:             ; 
00000D48: E1A00004    ;     mov R0, R4
00000D4C: EB00021F    ;     bl free
00000D50: E1A04007    ;     mov R4, R7
00000D54:             ; 
00000D54: E1A06086    ;     mov R6, R6, lsl #1
00000D58:             ; 
00000D58: EAFFFFED    ;     b getstringlcont
00000D5C:             ; 
00000D5C:             ; getstringlend
00000D5C:             ;     ;;need to add a \0
00000D5C:             ;     ;;need to check if the buffer is completely full -> resize buffer to +1? (will be aligned t
                      ; o 8 in malloc!) then copy
00000D5C:             ;     ;;I could have the buffers always leave a space open for the \0? but this is kind of an edg
                      ; e case?
00000D5C: E1550006    ;     cmp R5, R6 ;;position to size of buffer
00000D60: 0A000000    ;     beq getstringResizeEnd
00000D64:             ; 
00000D64: EA00000A    ;     b getstringEnd
00000D68:             ; 
00000D68:             ; getstringResizeEnd
00000D68: E2860001    ;     add R0, R6, #1
00000D6C: EB0001EB    ;     bl malloc
00000D70: E1A07000    ;     mov R7, R0
00000D74:             ; 
00000D74: E1A00004    ;     mov R0, R4;;old buff
00000D78: E1A01007    ;     mov R1, R7;;new buff
00000D7C: E1A02005    ;     mov R2, R5;;bytes2write
00000D80: EBFFFFAB    ;     bl memcpy
00000D84:             ; 
00000D84: E1A00004    ;     mov R0, R4
00000D88: EB000210    ;     bl free
00000D8C: E1A04007    ;     mov R4, R7
00000D90:             ; 
00000D90: E2866001    ;     add R6, R6, #1 ;;not needed
00000D94:             ; 
00000D94:             ; getstringEnd
00000D94: E3A00000    ;     mov R0, #0
00000D98: E7C40005    ;     strb R0, [R4, R5]
00000D9C:             ; 
00000D9C: E1A00004    ;     mov R0, R4
00000DA0:             ; 
00000DA0: E8BD47F0    ;     pop {R14, R4-R10}
00000DA4: E1A0F00E    ;     mov R15, R14
00000DA8:             ; 
00000DA8:             ; tolower
00000DA8:             ; ;;INP in R0 is a character
00000DA8:             ; ;;OUT in R0 is the character.lower()
00000DA8: E3800020    ;     orr R0, R0, #32
00000DAC: E1A0F00E    ;     mov R15, R14
00000DB0:             ; 
00000DB0:             ; setupGrid
00000DB0:             ; ;;INP --
00000DB0:             ; ;;RET --
00000DB0:             ; ;;The values addresses of the grids will now be set, can still be 0
00000DB0:             ; ;; ask for generation mode
00000DB0:             ; ;;      |-If random ask for seed
00000DB0:             ; ;;      |   `-For generation roll the seed to create a pseudorandom value for each `pixel`
00000DB0:             ; ;;      `-If draw then get them to draw the grid one `pixel` at a time
00000DB0: E92D47F0    ;     push {R14, R4-R10}
00000DB4:             ; 
00000DB4:             ;     ;;generate the main grid
00000DB4: E55F6D69    ;     ldrb R6, width
00000DB8: E55F7D6C    ;     ldrb R7, height
00000DBC:             ; 
00000DBC: E0000796    ;     mul R0, R6, R7 ;;width * height = num of bytes to malloc
00000DC0:             ; 
00000DC0: E1A05000    ;     mov R5, R0
00000DC4: EB0001D5    ;     bl malloc
00000DC8: E1A04000    ;     mov R4, R0
00000DCC: E50F4D8C    ;     str R4, gridA
00000DD0:             ; 
00000DD0: E1A00005    ;     mov R0, R5
00000DD4: EB0001D1    ;     bl malloc
00000DD8: E50F0D94    ;     str R0, gridB
00000DDC:             ; 
00000DDC: E3550000    ;     cmp R5, #0
00000DE0: 0A000056    ;     beq setupGridFail
00000DE4: E3540000    ;     cmp R4, #0
00000DE8: 0A000054    ;     beq setupGridFail
00000DEC:             ; 
00000DEC:             ;     ;;R4 holds the gridA addr
00000DEC:             ;     ;;R6 holds the width
00000DEC:             ;     ;;R7 holds the height
00000DEC:             ; 
00000DEC: E28F00C2    ;     adrl R0, askgenoption
00000DF0: E2800C0F    ; 
00000DF4: EF000003    ;     swi 3
00000DF8:             ; setupGridAsk
00000DF8: EF000001    ;     swi 1
00000DFC: E3800020    ;     orr R0, R0, #32
00000E00:             ; 
00000E00: E1A01000    ;     mov R1, R0
00000E04: EBFFFEA4    ;     bl newline
00000E08:             ; 
00000E08: E3510064    ;     cmp R1, #'d'
00000E0C: 0A000005    ;     beq setupdrawing
00000E10:             ; 
00000E10: E3510072    ;     cmp R1, #'r'
00000E14: 0A000008    ;     beq setuprandom
00000E18:             ; 
00000E18: E28F00CF    ;     adrl R0, setupGrdFailmsg
00000E1C: E2800C0F    ; 
00000E20: EF000003    ;     swi 3
00000E24: EAFFFFF3    ;     b setupGridAsk
00000E28:             ; 
00000E28:             ; setupdrawing
00000E28: E3A09000    ;     mov R9, #0
00000E2C:             ; 
00000E2C: E28F0048    ;     adrl R0, drawinfomsg
00000E30: E2800A01    ; 
00000E34: EF000003    ;     swi 3
00000E38:             ; 
00000E38: EA00000A    ;     b setupstart
00000E3C:             ; 
00000E3C:             ; setuprandom
00000E3C: E28F000C    ;     adrl R0, askseed
00000E40: E2800A01    ; 
00000E44: EF000003    ;     swi 3
00000E48:             ; 
00000E48: E3A00000    ;     mov R0, #0
00000E4C: E3A01004    ;     mov R1, #4
00000E50: E3A02001    ;     mov R2, #1
00000E54: EBFFFF97    ;     bl getstring
00000E58:             ; 
00000E58: E5108000    ;     ldr R8, [R0]
00000E5C:             ; 
00000E5C: EB0001DB    ;     bl free
00000E60:             ; 
00000E60: EBFFFE8D    ;     bl newline
00000E64:             ; 
00000E64: E3A09001    ;     mov R9, #1
00000E68:             ; 
00000E68:             ; setupstart
00000E68:             ; ;;This is probably not a good way to do it as there is more branching in the middle of a loop t
                      ; hat is executed alot
00000E68:             ; ;;I'm doing it this way `not because it is easy, but because I though it would be easy`
00000E68:             ; ;;Reduces the need for writing another loop :)
00000E68:             ; ;;R9 holds the mode (1 for random, 0 for draw)
00000E68:             ; ;;R8 will hold the seed for random
00000E68:             ; ;;for row from 0 to height - 1
00000E68:             ; ;;  for col from 0 to width - 1
00000E68:             ; ;;      if (random)
00000E68:             ; ;;          grid[row][col] = ((seed rol 1) || row) && 1
00000E68:             ; ;;      else
00000E68:             ; ;;          grid[row][col] = input() == 1
00000E68: E3A05000    ;     mov R5, #0 ;; row
00000E6C:             ; setuprowloop
00000E6C: E1550007    ;     cmp R5, R7
00000E70: 0A000032    ;     beq setuprowlend
00000E74:             ; 
00000E74: E3A0A000    ;     mov R10, #0 ;;col
00000E78:             ; setupcolloop
00000E78: E15A0006    ;     cmp R10, R6
00000E7C: 0A00002D    ;     beq setupcollend
00000E80:             ; 
00000E80: E3590001    ;     cmp R9, #1
00000E84: 0A000000    ;     beq dorandom
00000E88: EA000004    ;     b dodrawstart
00000E8C:             ; 
00000E8C:             ; ;;dorandom and dodraw will get their value for this position and then place it in R2
00000E8C:             ; ;;R3 is free at this point
00000E8C:             ; dorandom
00000E8C:             ;     ;;seed in R8
00000E8C: E1A080E8    ;     mov R8, R8, ror #1
00000E90: E00A3005    ;     and R3, R10, R5
00000E94: E0288003    ;     eor R8, R8, R3
00000E98: E2082001    ;     and R2, R8, #1
00000E9C: EA000021    ;     b setupcollcont
00000EA0:             ; 
00000EA0:             ; dodrawstart
00000EA0: E023A695    ;     mla R3, R5, R6, R10 ;;R3 = row * width + col
00000EA4:             ; 
00000EA4: E3A00002    ;     mov R0, #2
00000EA8: E7C40003    ;     strb R0, [R4, R3]
00000EAC:             ; 
00000EAC: E3590000    ;     cmp R9, #0
00000EB0: 01A00004    ;     moveq R0, R4
00000EB4: 0B000023    ;     bleq drawgrid ;;print the new state of the grid if this is drawing mode
00000EB8:             ; 
00000EB8:             ; dodraw
00000EB8:             ;     ;;get input, validate 1 or 0
00000EB8:             ;     ;;if invalid print error loop back
00000EB8:             ;     ;;-_- I've just realised I want to print the grid each time as well R0-R3 are scratch
00000EB8: EF000001    ;     swi 1
00000EBC:             ; 
00000EBC: E3500031    ;     cmp R0, #'1'
00000EC0: 0A00000D    ;     beq dodrawsucc
00000EC4: E3500030    ;     cmp R0, #'0'
00000EC8: 0A00000B    ;     beq dodrawsucc
00000ECC:             ; 
00000ECC: E3A0100A    ;     ldr R1, =enter
00000ED0: E1500001    ;     cmp R0, R1;;next line
00000ED4: 1A000004    ;     bne dodrawfail
00000ED8:             ; 
00000ED8: E023A695    ;     mla R3, R5, R6, R10 ;;R3 = row * width + col
00000EDC: E3A00000    ;     mov R0, #0
00000EE0: E7C40003    ;     strb R0, [R4, R3]
00000EE4:             ; 
00000EE4: E2855001    ;     add R5, R5, #1
00000EE8: EAFFFFDF    ;     b setuprowloop
00000EEC:             ; 
00000EEC:             ; dodrawfail
00000EEC:             ; 
00000EEC: E28F00DE    ;     adrl R0, drawfailmsg
00000EF0: E2800C0F    ; 
00000EF4: EF000003    ;     swi 3
00000EF8:             ; 
00000EF8: EAFFFFEE    ;     b dodraw
00000EFC:             ; 
00000EFC:             ; dodrawsucc
00000EFC: E92D0001    ;     push {R0}
00000F00: E55F0EB0    ;     ldrb R0, drawerase
00000F04: E3500000    ;     cmp R0, #0
00000F08: 0A000004    ;     beq dodrawsuccskiperase
00000F0C:             ; 
00000F0C: E0000796    ;     mul R0, R6, R7      ;;I don't like having to do this every time :(
00000F10: E1A00080    ;     mov R0, R0, lsl #1
00000F14: E2800001    ;     add R0, R0, #1
00000F18: E0800007    ;     add R0, R0, R7
00000F1C: EBFFFEF1    ;     bl erase
00000F20:             ;     
00000F20:             ; dodrawsuccskiperase
00000F20: E8BD0001    ;     pop {R0}
00000F24:             ; 
00000F24: E2402030    ;     sub R2, R0, #48 ;;could be xor?
00000F28:             ; 
00000F28:             ; setupcollcont
00000F28:             ;     ;;place the value in R2 into the grid[row][col]
00000F28:             ;     ;;row * width + col
00000F28: E023A695    ;     mla R3, R5, R6, R10 ;;R3 = row * width + col ;;I'm doing this twice \-(*v*)-/
00000F2C: E7C42003    ;     strb R2, [R4, R3] ;;grid offset by R3
00000F30:             ; 
00000F30: E28AA001    ;     add R10, R10, #1
00000F34: EAFFFFCF    ;     b setupcolloop
00000F38:             ; setupcollend
00000F38: E2855001    ;     add R5, R5, #1
00000F3C: EAFFFFCA    ;     b setuprowloop
00000F40:             ; setuprowlend
00000F40:             ;     ;;grid has been setup
00000F40:             ; setupGridFail
00000F40:             ; setupGridEnd
00000F40: E8BD47F0    ;     pop {R14, R4-R10}
00000F44: E1A0F00E    ;     mov R15, R14
00000F48:             ; 
00000F48:             ; 
00000F48:             ; ;;[[TODO]] the heap may not be blank (when heapclean is removed) and so need to 0 the mem. Mayb
                      ; e add option to malloc or add calloc (not the same)
00000F48:             ; drawgrid
00000F48:             ; ;;INP in R0 is the grid address to draw
00000F48:             ; 
00000F48:             ; ;;for row from 0 to height - 1
00000F48:             ; ;;  for col from 0 to width - 1
00000F48:             ; ;;      print('X' if grid[row][col] else '_')
00000F48:             ; ;;  print(newline)
00000F48:             ; ;;print(newline)
00000F48: E92D01F0    ;     push {R4-R8}
00000F4C:             ; 
00000F4C: E1A06000    ;     mov R6, R0
00000F50:             ; 
00000F50: E55F4F05    ;     ldrb R4, width
00000F54: E55F5F08    ;     ldrb R5, height
00000F58:             ; 
00000F58: E3A02000    ;     mov R2, #0 ;;row
00000F5C:             ; drawgridrowloop
00000F5C: E1520005    ;     cmp R2, R5
00000F60: 0A000016    ;     beq drawgridrowlend
00000F64:             ; 
00000F64: E3A01000    ;     mov R1, #0 ;;col
00000F68:             ; drawgridcolloop
00000F68: E1510004    ;     cmp R1, R4
00000F6C: 0A00000E    ;     beq drawgridcollend
00000F70:             ; 
00000F70: E0231492    ;     mla R3, R2, R4, R1 ;;R3 = row * width + col
00000F74: E7D63003    ;     ldrb R3, [R6, R3]
00000F78:             ; 
00000F78: E3530002    ;     cmp R3, #2
00000F7C: 0A000004    ;     beq drawgridprintcurrent
00000F80: E3530001    ;     cmp R3, #1
00000F84: 051F0F33    ;     ldreq R0, alive_c
00000F88: 151F0F36    ;     ldrne R0, dead_c
00000F8C:             ; 
00000F8C: EF000000    ;     swi 0
00000F90:             ; 
00000F90: EA000001    ;     b drawgridcollcont
00000F94:             ; 
00000F94:             ; drawgridprintcurrent
00000F94: E51F0F41    ;     ldr R0, ptr_c
00000F98: EF000000    ;     swi 0
00000F9C:             ; 
00000F9C:             ; drawgridcollcont
00000F9C: E3A00020    ;     mov R0, #' '
00000FA0: EF000000    ;     swi 0
00000FA4:             ; 
00000FA4: E2811001    ;     add R1, R1, #1
00000FA8: EAFFFFEE    ;     b drawgridcolloop
00000FAC:             ; 
00000FAC:             ; drawgridcollend
00000FAC: E3A01000    ;     mov R1, #0
00000FB0: E2822001    ;     add R2, R2, #1
00000FB4: E3A0000A    ;     mov R0, #10
00000FB8: EF000000    ;     swi 0
00000FBC: EAFFFFE6    ;     b drawgridrowloop
00000FC0:             ; 
00000FC0:             ; drawgridrowlend
00000FC0: E3A0000A    ;     mov R0, #10
00000FC4: EF000000    ;     swi 0
00000FC8:             ; drawgridend
00000FC8: E8BD01F0    ;     pop {R4-R8}
00000FCC: E1A0F00E    ;     mov R15, R14
00000FD0:             ; 
00000FD0:             ; 
00000FD0:             ; printoptions
00000FD0:             ; ;;INP --
00000FD0:             ; ;;OUT --
00000FD0:             ; ;;optionsp_1-5
00000FD0: E28F0C0D    ;     adrl R0, optionsp_1
00000FD4: E2800000    ; 
00000FD8: EF000003    ;     swi 3
00000FDC:             ; 
00000FDC: E55F0F91    ;     ldrb R0, width
00000FE0: EF000004    ;     swi 4
00000FE4:             ; 
00000FE4: E28F0F41    ;     adrl R0, optionsp_2
00000FE8: E2800B03    ; 
00000FEC: EF000003    ;     swi 3
00000FF0:             ; 
00000FF0: E55F0FA4    ;     ldrb R0, height
00000FF4: EF000004    ;     swi 4
00000FF8:             ; 
00000FF8: E28F00F3    ;     adrl R0, optionsp_3
00000FFC: E2800B03    ; 
00001000: EF000003    ;     swi 3
00001004:             ; 
00001004: E55F0FBB    ;     ldrb R0, slow_b
00001008: E3500001    ;     cmp R0, #1
0000100C: 128F0093    ;     adrlne R0, off_msg
00001010: 12800C16    ; 
00001014: 028F0FA2    ;     adrleq R0, on_msg
00001018: 02800B05    ; 
0000101C: EF000003    ;     swi 3
00001020:             ; 
00001020: E28F00D7    ;     adrl R0, optionsp_4
00001024: E2800B03    ; 
00001028: EF000003    ;     swi 3
0000102C:             ; 
0000102C: E55F0FE4    ;     ldrb R0, erase_b
00001030: E3500001    ;     cmp R0, #1
00001034: 128F006B    ;     adrlne R0, off_msg
00001038: 12800C16    ; 
0000103C: 028F0E66    ;     adrleq R0, on_msg
00001040: 02800A01    ; 
00001044: EF000003    ;     swi 3
00001048:             ; 
00001048: E28F00BB    ;     adrl R0, optionsp_5
0000104C: E2800B03    ; 
00001050: EF000003    ;     swi 3
00001054:             ; 
00001054: E24F000A    ;     adrl R0, step_b
00001058: E2400A01    ; 
0000105C: E5500000    ;     ldrb R0, [R0]
00001060: E3500001    ;     cmp R0, #1
00001064: 128F003B    ;     adrlne R0, off_msg
00001068: 12800C16    ; 
0000106C: 028F0E63    ;     adrleq R0, on_msg
00001070: 02800A01    ; 
00001074: EF000003    ;     swi 3
00001078:             ; 
00001078: E3A0000A    ;     ldr R0, =nl
0000107C: EF000000    ;     swi 0
00001080:             ; 
00001080: E1A0F00E    ;     mov R15, R14
00001084:             ; 
00001084:             ; setupOptions
00001084:             ; ;;INP in R0 is 1 if should ask for dims 0 for skip
00001084: E92D4010    ;     push {R14, R4}
00001088: E1A04000    ;     mov R4, R0
0000108C:             ; 
0000108C: E28F00D9    ;     adrl R0, askdefaults ;;ask q
00001090: E2800C09    ; 
00001094: EF000003    ;     swi 3
00001098: EF000001    ;     swi 1   ;;get character answer
0000109C: EF000000    ;     swi 0
000010A0: E3500059    ;     cmp R0, #'Y'
000010A4: E3A0000A    ;     ldr R0, =nl
000010A8: EF000000    ;     swi 0
000010AC:             ; 
000010AC: 1A000022    ;     bne setupCustom
000010B0:             ; 
000010B0: E24F005C    ;     adrl R0, erase_b_d
000010B4: E2400A01    ; 
000010B8: E5500000    ;     ldrb R0, [R0]
000010BC: E24F1074    ;     adrl R1, erase_b
000010C0: E2411A01    ; 
000010C4: E5410000    ;     strb R0, [R1]
000010C8:             ; 
000010C8: E24F0073    ;     adrl R0, slow_b_d
000010CC: E2400A01    ; 
000010D0: E5500000    ;     ldrb R0, [R0]
000010D4: E24F108B    ;     adrl R1, slow_b
000010D8: E2411A01    ; 
000010DC: E5410000    ;     strb R0, [R1]
000010E0:             ; 
000010E0: E24F008A    ;     adrl R0, step_b_d
000010E4: E2400A01    ; 
000010E8: E5500000    ;     ldrb R0, [R0]
000010EC: E24F10A2    ;     adrl R1, step_b
000010F0: E2411A01    ; 
000010F4: E5410000    ;     strb R0, [R1]
000010F8:             ; 
000010F8: E3540000    ;     cmp R4, #0
000010FC: 0A00000B    ;     beq setupOptionsDEnd
00001100:             ; 
00001100: E24F00A9    ;     adrl R0, width_d
00001104: E2400A01    ; 
00001108: E5500000    ;     ldrb R0, [R0]
0000110C: E24F10C1    ;     adrl R1, width
00001110: E2411A01    ; 
00001114: E5410000    ;     strb R0, [R1]
00001118: E24F0D43    ;     adrl R0, height_d
0000111C: E2400000    ; 
00001120: E5500000    ;     ldrb R0, [R0]
00001124: E24F10D8    ;     adrl R1, height
00001128: E2411A01    ; 
0000112C: E5410000    ;     strb R0, [R1]
00001130:             ; 
00001130:             ; setupOptionsDEnd
00001130: EBFFFFA6    ;     bl printoptions
00001134:             ; 
00001134: E8BD4010    ;     pop {R14, R4}
00001138: E1A0F00E    ;     mov R15, R14 ;;RET
0000113C:             ; 
0000113C:             ; setupCustom
0000113C:             ; ;;ask for erase, slow, step, and conditionally dims
0000113C:             ; 
0000113C:             ; ;;ask step
0000113C:             ; ;;ask erase
0000113C:             ; ;;if (!step)
0000113C:             ; ;;  if erase
0000113C:             ; ;;      print(recommend slow)
0000113C:             ; ;;  ask slow
0000113C:             ; 
0000113C: E3A01001    ;     mov R1, #1
00001140:             ; 
00001140: E28F0F62    ;     adrl R0, askstep
00001144: E2800B02    ; 
00001148: EF000003    ;     swi 3
0000114C: EF000001    ;     swi 1
00001150: EF000000    ;     swi 0 
00001154: E3500059    ;     cmp R0, #'Y' 
00001158: E3A0000A    ;     ldr R0, =nl
0000115C: EF000000    ;     swi 0
00001160: 13A01000    ;     movne R1, #0
00001164: E24F001A    ;     adrl R0, step_b
00001168: E2400C11    ; 
0000116C: E5401000    ;     strb R1, [R0]
00001170:             ; 
00001170: E3A01001    ;     mov R1, #1
00001174:             ; 
00001174: E28F0023    ;     adrl R0, askerase
00001178: E2800C09    ; 
0000117C: EF000003    ;     swi 3
00001180: EF000001    ;     swi 1
00001184: EF000000    ;     swi 0
00001188: E3500059    ;     cmp R0, #'Y'
0000118C: E3A0000A    ;     ldr R0, =nl
00001190: EF000000    ;     swi 0
00001194: 13A01000    ;     movne R1, #0
00001198: E24F0E15    ;     adrl R0, erase_b
0000119C: E2400A01    ; 
000011A0: E5401000    ;     strb R1, [R0]
000011A4:             ; 
000011A4: E24F005A    ;     adrl R0, step_b
000011A8: E2400C11    ; 
000011AC: E5500000    ;     ldrb R0, [R0]
000011B0: E3500001    ;     cmp R0, #1
000011B4: 0A000011    ;     beq setupCustomskipslow
000011B8:             ; 
000011B8: E3510001    ;     cmp R1, #1 ;;if erase is on
000011BC: E28F00BF    ;     adrl R0, warneraseslow
000011C0: E2800C09    ; 
000011C4: 0F000003    ;     swieq 3
000011C8:             ; 
000011C8: E3A01001    ;     mov R1, #1
000011CC:             ;  
000011CC: E28F00E4    ;     adrl R0, askslow
000011D0: E2800B02    ; 
000011D4: EF000003    ;     swi 3
000011D8: EF000001    ;     swi 1
000011DC: EF000000    ;     swi 0 
000011E0: E3500059    ;     cmp R0, #'Y' 
000011E4: E3A0000A    ;     ldr R0, =nl
000011E8: EF000000    ;     swi 0
000011EC: 13A01000    ;     movne R1, #0
000011F0: E24F00A7    ;     adrl R0, slow_b
000011F4: E2400C11    ; 
000011F8: E5401000    ;     strb R1, [R0] ;;[[maybe]] changed but not checked, go here if error
000011FC:             ; 
000011FC: EA000015    ;     b setupCustomDimsCheck
00001200:             ; 
00001200:             ; setupCustomskipslow
00001200: E3A00000    ;     mov R0, #0
00001204: E24F10BB    ;     adrl R1, slow_b
00001208: E2411C11    ; 
0000120C: E5410000    ;     strb R0, [R1]
00001210:             ; 
00001210: EA000010    ;     b setupCustomDimsCheck
00001214:             ; 
00001214:             ; printrange
00001214:             ; ;;INP --
00001214:             ; ;;OUT --
00001214: E28F004F    ;     adrl R0, bracket_open
00001218: E2800C12    ; 
0000121C: EF000003    ;     swi 3
00001220:             ; 
00001220: E24F00D3    ;     adrl R0, range_min
00001224: E2400C11    ; 
00001228: E5500000    ;     ldrb R0, [R0]
0000122C: EF000004    ;     swi 4
00001230:             ; 
00001230: E28F0E9A    ;     adrl R0, dash
00001234: EF000003    ;     swi 3
00001238:             ; 
00001238: E24F00EA    ;     adrl R0, range_max
0000123C: E2400C11    ; 
00001240: E5500000    ;     ldrb R0, [R0]
00001244: EF000004    ;     swi 4
00001248:             ; 
00001248: E28F008A    ;     adrl R0, b_close_colon
0000124C: E2800C09    ; 
00001250: EF000003    ;     swi 3
00001254:             ; 
00001254: E1A0F00E    ;     mov R15, R14
00001258:             ; 
00001258:             ; setupCustomDimsCheck
00001258: E3540000    ;     cmp R4, #0
0000125C: 0A000043    ;     beq customend
00001260:             ; 
00001260: E28F0059    ;     adrl R0, askwid
00001264: E2800C09    ; 
00001268: EF000003    ;     swi 3
0000126C:             ; 
0000126C: EBFFFFE8    ;     bl printrange
00001270:             ; 
00001270:             ; getwid
00001270: E3A0000A    ;     ldr R0, =enter
00001274: E3A01003    ;     mov R1, #3
00001278: E3A02001    ;     mov R2, #1
0000127C: EBFFFE8D    ;     bl getstring
00001280: E1A04000    ;     mov R4, R0
00001284:             ; 
00001284: EBFFFE41    ;     bl strtoi
00001288: E1A05000    ;     mov R5, R0
0000128C:             ;     
0000128C: E1A00004    ;     mov R0, R4
00001290: EB0000CE    ;     bl free ;;free the collected string
00001294:             ; 
00001294: E1A01005    ;     mov R1, R5
00001298:             ; 
00001298: EBFFFD7F    ;     bl newline
0000129C:             ; 
0000129C: E24F404F    ;     adrl R4, range_min
000012A0: E2444C12    ; 
000012A4: E5544000    ;     ldrb R4, [R4]
000012A8: E24F505A    ;     adrl R5, range_max
000012AC: E2455C12    ; 
000012B0: E5555000    ;     ldrb R5, [R5]
000012B4:             ; 
000012B4: E1510005    ;     cmp R1, R5
000012B8: CA000005    ;     bgt getwidFail
000012BC: E1510004    ;     cmp R1, R4
000012C0: BA000003    ;     blt getwidFail
000012C4:             ; 
000012C4: E24F0079    ;     adrl R0, width
000012C8: E2400C12    ; 
000012CC: E5401000    ;     strb R1, [R0]
000012D0:             ; 
000012D0: EA000004    ;     b getheisetup
000012D4:             ; 
000012D4:             ; getwidFail
000012D4: E28F0019    ;     adrl R0, getwidfailmsg
000012D8: E2800C09    ; 
000012DC: EF000003    ;     swi 3
000012E0:             ; 
000012E0: EBFFFFCB    ;     bl printrange
000012E4:             ; 
000012E4: EAFFFFE1    ;     b getwid
000012E8:             ; 
000012E8:             ; getheisetup
000012E8: E28F00EE    ;     adrl R0, askhei
000012EC: E2800B02    ; 
000012F0: EF000003    ;     swi 3
000012F4:             ; 
000012F4: EBFFFFC6    ;     bl printrange
000012F8:             ; 
000012F8:             ; gethei
000012F8: E3A0000A    ;     ldr R0, =enter
000012FC: E3A01003    ;     mov R1, #3
00001300: E3A02001    ;     mov R2, #1
00001304: EBFFFE6B    ;     bl getstring
00001308: E1A04000    ;     mov R4, R0
0000130C:             ; 
0000130C: EBFFFE1F    ;     bl strtoi
00001310: E1A05000    ;     mov R5, R0
00001314:             ; 
00001314: E1A00004    ;     mov R0, R4
00001318: EB0000AC    ;     bl free
0000131C:             ; 
0000131C: E1A01005    ;     mov R1, R5
00001320:             ; 
00001320: EBFFFD5D    ;     bl newline
00001324:             ; 
00001324: E24F40D7    ;     adrl R4, range_min
00001328: E2444C12    ; 
0000132C: E5544000    ;     ldrb R4, [R4]
00001330: E24F50E2    ;     adrl R5, range_max
00001334: E2455C12    ; 
00001338: E5555000    ;     ldrb R5, [R5]
0000133C:             ; 
0000133C: E1510005    ;     cmp R1, R5
00001340: CA000005    ;     bgt getheiFail
00001344: E1510004    ;     cmp R1, R4
00001348: BA000003    ;     blt getheiFail
0000134C:             ; 
0000134C: E24F2C13    ;     adrl R2, height
00001350: E2422000    ; 
00001354: E5421000    ;     strb R1, [R2]
00001358:             ; 
00001358: EA000004    ;     b customend
0000135C:             ; 
0000135C:             ; getheiFail
0000135C: E28F00BD    ;     adrl R0, getheifailmsg
00001360: E2800B02    ; 
00001364: EF000003    ;     swi 3
00001368:             ; 
00001368: EBFFFFA9    ;     bl printrange
0000136C:             ; 
0000136C: EAFFFFE1    ;     b gethei
00001370:             ; 
00001370:             ; customend
00001370: EBFFFF16    ;     bl printoptions
00001374:             ; 
00001374: E8BD4010    ;     pop {R14, R4}
00001378: E1A0F00E    ;     mov R15, R14 ;;RET
0000137C:             ; 
0000137C:             ; 
0000137C:             ; updategrid
0000137C:             ; ;;INP in R0 is the active grid
0000137C:             ; ;;INP in R1 is the passive grid
0000137C:             ; ;;passive grid is the one being updated based on the value in the activeGrid
0000137C:             ; ;;RET --
0000137C:             ; ;;for row from 0 to height - 1
0000137C:             ; ;;  for col from 0 to width - 1
0000137C:             ; ;;      int n = countNeighbours(activeGrid, row, col)
0000137C:             ; ;;      int s = activeGrid[row][col]
0000137C:             ; ;;      
0000137C:             ; ;;      if (s == alive)
0000137C:             ; ;;          passiveGrid[row][col] = n == 3 or n == 2
0000137C:             ; ;;      else
0000137C:             ; ;;          passiveGrid[row][col] = n == 3
0000137C:             ; 
0000137C:             ; ;;  R4 holds the row
0000137C:             ; ;;  R5 holds the col
0000137C:             ; ;;  R6 holds the width
0000137C:             ; ;;  R7 holds the height
0000137C:             ; ;;  R8 holds the active grid
0000137C:             ; ;;  R9 holds the passive grid
0000137C:             ; 
0000137C: E92D47F0    ;     push {R14, R4-R10}
00001380:             ; 
00001380: E24F6035    ;     adrl R6, width
00001384: E2466C13    ; 
00001388: E5566000    ;     ldrb R6, [R6]
0000138C: E24F7D4D    ;     adrl R7, height
00001390: E2477000    ; 
00001394: E5577000    ;     ldrb R7, [R7]
00001398:             ; 
00001398: E1A08000    ;     mov R8, R0
0000139C: E1A09001    ;     mov R9, R1
000013A0:             ; 
000013A0: E3A04000    ;     mov R4, #0 ;;row
000013A4:             ; updategridrowloop
000013A4: E1540007    ;     cmp R4, R7
000013A8: 0A00001A    ;     beq updategridrowlend
000013AC:             ; 
000013AC: E3A05000    ;     mov R5, #0 ;;col
000013B0:             ; updategridcolloop
000013B0: E1550006    ;     cmp R5, R6
000013B4: 0A000014    ;     beq updategridccollend
000013B8:             ; 
000013B8: E1A00008    ;     mov R0, R8
000013BC: E1A01004    ;     mov R1, R4
000013C0: E1A02005    ;     mov R2, R5
000013C4: EB000015    ;     bl countneighbours
000013C8:             ; 
000013C8: E0215694    ;     mla R1, R4, R6, R5 ;;R1 = row * width + col
000013CC: E7D82001    ;     ldrb R2, [R8, R1] ;;grid[R1]
000013D0:             ;     ;;R0 holds the n count
000013D0: E3520000    ;     cmp R2, #0
000013D4: 0A000006    ;     beq updatedead
000013D8:             ; 
000013D8:             ; updatealive
000013D8: E3A03000    ;     mov R3, #0
000013DC: E3500003    ;     cmp R0, #3
000013E0: 03A03001    ;     moveq R3, #1
000013E4: E3500002    ;     cmp R0, #2
000013E8: 03A03001    ;     moveq R3, #1
000013EC: E7C93001    ;     strb R3, [R9, R1]
000013F0: EA000003    ;     b updatelcont
000013F4:             ; 
000013F4:             ; updatedead
000013F4: E3A03001    ;     mov R3, #1
000013F8: E3500003    ;     cmp R0, #3
000013FC: 13A03000    ;     movne R3, #0
00001400: E7C93001    ;     strb R3, [R9, R1]
00001404:             ; 
00001404:             ; updatelcont
00001404: E2855001    ;     add R5, R5, #1
00001408: EAFFFFE8    ;     b updategridcolloop
0000140C:             ; 
0000140C:             ; updategridccollend
0000140C: E3A05000    ;     mov R5, #0
00001410: E2844001    ;     add R4, R4, #1
00001414: EAFFFFE2    ;     b updategridrowloop
00001418:             ; 
00001418:             ; updategridrowlend
00001418:             ; updategridend
00001418: E8BD47F0    ;     pop {R14, R4-R10}
0000141C: E1A0F00E    ;     mov R15, R14
00001420:             ; 
00001420:             ; 
00001420:             ; countneighbours
00001420:             ; ;;INP in R0 is the activeGrid
00001420:             ; ;;INP in R1 is the row
00001420:             ; ;;INP in R2 is the col
00001420:             ; ;;OUT in R0 is the number of neighbours
00001420:             ; 
00001420:             ; ;;offsets = [[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]]
00001420:             ; ;;tot = 0
00001420:             ; ;;for offset in offsets
00001420:             ; ;;  if (isinrange(row + offset[0], col + offset[1]))
00001420:             ; ;;      tot += grid[row + offset[0]][col + offset[1]]
00001420:             ; ;;return tot
00001420: E92D4FF0    ;     push {R14, R4-R11} ;;I used the fp before I knew it wasn't a general purpose one, its fine 
                      ; in this context anyway
00001424:             ; 
00001424: E24F4024    ;     adrl R4, offsets ;;holds the offset
00001428: E2444B05    ; 
0000142C:             ; 
0000142C: E1A07000    ;     mov R7, R0
00001430: E1A08001    ;     mov R8, R1
00001434: E1A09002    ;     mov R9, R2
00001438: E3A0A000    ;     mov R10, #0 ;;R10 holds the total
0000143C: E24FB0F1    ;     adrl R11, width
00001440: E24BBC13    ; 
00001444: E55BB000    ;     ldrb R11, [R11];;R11 holds the width of the grid
00001448:             ; 
00001448: E3A03000    ;     mov R3, #0
0000144C:             ; 
0000144C:             ; countneighboursloop
0000144C: E3530008    ;     cmp R3, #8 ;;change this ccheck to be for R4
00001450: 0A00000F    ;     beq countneighbourslend
00001454:             ; 
00001454: E4945004    ;     ldr R5, [R4], #4
00001458: E4946004    ;     ldr R6, [R4], #4
0000145C:             ; 
0000145C: E0880005    ;     add R0, R8, R5
00001460: E0891006    ;     add R1, R9, R6
00001464:             ; 
00001464: E2833001    ;     add R3, R3, #1
00001468:             ; 
00001468: E92D0008    ;     push {R3} ;;I should probably be using a local var on the stack, but I don't yet know how t
                      ; o setup a stack frame properly
0000146C: EB00000B    ;     bl isinrange
00001470: E8BD0008    ;     pop {R3}
00001474:             ; 
00001474: E3500000    ;     cmp R0, #0
00001478: 0A000004    ;     beq countneighboursskipadd
0000147C:             ; 
0000147C: E0880005    ;     add R0, R8, R5 ;;new row
00001480: E0891006    ;     add R1, R9, R6 ;;new col ;;can assume that R0, R1 haven't changed as isinrange doesn't edit
                      ;  them, but I'm going to for now
00001484:             ; 
00001484: E0201B90    ;     mla R0, R0, R11, R1 ;;find offset
00001488: E7D70000    ;     ldrb R0, [R7, R0]
0000148C: E08AA000    ;     add R10, R10, R0 ;;tot += grid[newrow][newcol]
00001490:             ; 
00001490:             ; countneighboursskipadd
00001490: EAFFFFED    ;     b countneighboursloop
00001494:             ; 
00001494:             ; countneighbourslend
00001494:             ; countneighboursend
00001494: E1A0000A    ;     mov R0, R10
00001498: E8BD4FF0    ;     pop {R14, R4-R11}
0000149C: E1A0F00E    ;     mov R15, R14
000014A0:             ; 
000014A0:             ; 
000014A0:             ; isinrange
000014A0:             ; ;;INP in R0 is the row
000014A0:             ; ;;INP in R1 is the col
000014A0:             ; ;;Uses defined width and height
000014A0:             ; ;;RET in R0 is 1 if is in range else 0
000014A0: E3A02001    ;     mov R2, #1 ;;is valid unless...
000014A4:             ; 
000014A4: E3500000    ;     cmp R0, #0
000014A8: BA00000D    ;     blt isinrangefail
000014AC:             ; 
000014AC: E3510000    ;     cmp R1, #0
000014B0: BA00000B    ;     blt isinrangefail
000014B4:             ; 
000014B4: E24F3069    ;     adrl R3, width
000014B8: E2433B05    ; 
000014BC: E5533000    ;     ldrb R3, [R3]
000014C0: E1510003    ;     cmp R1, R3
000014C4: AA000006    ;     bge isinrangefail
000014C8:             ; 
000014C8: E24F307C    ;     adrl R3, height
000014CC: E2433B05    ; 
000014D0: E5533000    ;     ldrb R3, [R3]
000014D4: E1500003    ;     cmp R0, R3
000014D8: AA000001    ;     bge isinrangefail
000014DC:             ; 
000014DC: E3A00001    ;     mov R0, #1
000014E0: EA000000    ;     b isinrangeend
000014E4:             ; 
000014E4:             ; isinrangefail
000014E4: E3A00000    ;     mov R0, #0
000014E8:             ; 
000014E8:             ; isinrangeend
000014E8: E1A0F00E    ;     mov R15, R14
000014EC:             ; 
000014EC:             ; 
000014EC:             ; ;; The heap will be a linked list of free blocks - unlike the Comodo version which stores both 
                      ; free & taken blocks 
000014EC:             ; ;; This is an idea I'm stealing from the C programming book
000014EC:             ; ;; Crate structure
000014EC:             ; ;;  |-ptr to next crate (1 word)
000014EC:             ; ;;  |-ptr to prev crate (1 word)
000014EC:             ; ;;  `-Size (bytes)      (1 word)
000014EC:             ; ;; 
000014EC:             ; 
000014EC:             ; ;;  Traversal of the heap
000014EC:             ; ;;  Unlink in my Comodo implimentation the heap is not a linked list of all Crates (free or not
                      ; )
000014EC:             ; ;;  That made traversing the heap for debugging purposes very easy, in this case taken crates d
                      ; o not point to the next
000014EC:             ; ;;  Instead could start at head and then just go to addr + sizeof(Crate) + size. This should ta
                      ; ke us to the next crate, free or not
000014EC:             ; ;;  
000014EC:             ; setupHeap
000014EC:             ; ;;NO INP
000014EC:             ; ;;NO OUT
000014EC:             ;     ;;we have the heapstart
000014EC:             ;     ;;the end of the heap will be 0x100000 (it will overlap with the stack :) )
000014EC: E24F0E4F    ;     adrl R0, heaphead
000014F0: E2400A01    ; 
000014F4: E5100000    ;     ldr R0, [R0] ;;stores the mem addr of the start of the heap
000014F8: E3A01601    ;     ldr R1, =max_addr ;;stores the end of the heap
000014FC: E3A02801    ;     ldr R2, =stack_size
00001500: E0411002    ;     sub R1, R1, R2
00001504:             ; 
00001504: E0411000    ;     sub R1, R1, R0  ;;HEAPEND - HEAPSTART = TOTAL STORAGE (bytes)
00001508: E241100C    ;     sub R1, R1, #12 ;;SIZE -= SIZEOF(CRATE) (12 bytes)
0000150C: E5801008    ;     str R1, [R0, #8] ;;set the size of the crate
00001510: E3A01000    ;     mov R1, #0
00001514: E5801004    ;     str R1, [R0, #4] ;;set the prev ptr
00001518: E5801000    ;     str R1, [R0, #0] ;;set the next ptr
0000151C:             ; 
0000151C: E1A0F00E    ;     mov R15, R14
00001520:             ; 
00001520:             ; ;; The heap is a linked list of free Crates and so find the header and then go though until one
                      ;  satifies the size requirement
00001520:             ; ;;  end if next is 0
00001520:             ; ;;  once found either take over the crate or split it into two new crates
00001520:             ; ;;  align the bytes amount to 8 byte boundry
00001520:             ; malloc
00001520:             ; ;;INP into R0 bytes to allocate
00001520:             ; ;;OUT into R0 the ptr to the memory or 0 for no memory allocated
00001520:             ;     ;;step 1 align the bytes
00001520:             ;     ;;1001010 & 0111 = 0000010 ;2
00001520:             ;     ;;if 0 goto alignend
00001520:             ;     ;;1001010 + (8 - 2)
00001520: E92D0010    ;     push {R4}
00001524:             ; 
00001524: E2001007    ;     and R1, R0, #0b0111
00001528: E3510000    ;     cmp R1, #0
0000152C: 0A000002    ;     beq mallignend
00001530: E3A03008    ;     mov R3, #0b1000
00001534: E0432001    ;     sub R2, R3, R1
00001538: E0800002    ;     add R0, R0, R2
0000153C:             ; 
0000153C:             ; mallignend
0000153C: E24F1D55    ;     adrl R1, heaphead
00001540: E2411000    ; 
00001544: E5111000    ;     ldr R1, [R1] ;;stores a ptr to the first block
00001548:             ;     
00001548:             ; checkcrate
00001548: E5912008    ;     ldr R2, [R1, #8] ;;Size of the crate
0000154C: E1500002    ;     cmp R0, R2 ;;bytes needed - bytes in crate
00001550: DA000006    ;     ble foundcrate
00001554: E5912000    ;     ldr R2, [R1, #0] ;;get the next ptr
00001558: E3520000    ;     cmp R2, #0
0000155C: 0A000001    ;     beq nocrates
00001560: E1A01002    ;     mov R1, R2 ;;swap the current crate with the next crate
00001564: EAFFFFF7    ;     b checkcrate
00001568:             ; nocrates
00001568: E3A00000    ;     mov R0, #0
0000156C: EA000015    ;     b mallocEnd
00001570:             ; 
00001570:             ; foundcrate
00001570:             ;     ;;Once a crate that we can use has been found we need to either split the crate or use the 
                      ; crate
00001570:             ;     ;;We should use the whole crate only when its size < bytesneeded + CrateHeader + 8
00001570:             ;     ;;This would give the edge case crate 8 bytes
00001570:             ;     
00001570:             ;     ;;R1 holds the found crate ptr
00001570:             ;     ;;R0 is the bytes requested and aligned
00001570: E2802014    ;     add R2, R0, #20 ;;A crate header is 12 bytes + the extra 8 bytes minimum
00001574: E5913008    ;     ldr R3, [R1, #8]
00001578: E1530002    ;     cmp R3, R2
0000157C: BA00000C    ;     blt usecrate
00001580:             ; splitcrate
00001580:             ;     ;;In this case we have a large crate that should be split up.
00001580:             ;     ;;ATM the crate will just be split up to where the requested memory is at the end of the fr
                      ; ee Crate.
00001580:             ; 
00001580: E5913008    ;     ldr R3, [R1, #8] ;;The size of the toSplit Crate
00001584: E0433000    ;     sub R3, R3, R0 ;; size - bytesRequested
00001588: E243300C    ;     sub R3, R3, #12 ;; size - bytesRequested - sizeof(Crate)
0000158C: E5813008    ;     str R3, [R1, #8] ;;toSplit->size = newSize
00001590:             ; 
00001590: E0833001    ;     add R3, R3, R1 ;; newSize + toSplit.addr
00001594: E283400C    ;     add R4, R3, #12 ;; newSize + toSplit.addr + sizeof(Crate) = position of new Crate
00001598:             ; 
00001598:             ;     ;;Setup the header for the newCrate
00001598: E3A02000    ;     mov R2, #0
0000159C: E5842000    ;     str R2, [R4, #0] ;;next = 0
000015A0: E5842004    ;     str R2, [R4, #4] ;;prev = 0
000015A4: E5840008    ;     str R0, [R4, #8] ;;size = requested and aligned
000015A8:             ; 
000015A8:             ;     ;;MAYBE: can the crates that are taken have a smaller header than those that are free. Take
                      ; n crates need not store the next, prev free nodes
000015A8:             ;     ;;This may complicate things as size would need to be moved around and the size from taken 
                      ; to free would be different. 
000015A8:             ; 
000015A8: E284400C    ;     add R4, R4, #12
000015AC:             ; 
000015AC: E1A00004    ;     mov R0, R4
000015B0:             ; 
000015B0: EA000004    ;     b mallocEnd
000015B4:             ; 
000015B4:             ; usecrate
000015B4:             ;     ;; Simplest option as we can just remove it from the list
000015B4:             ;     ;; c1 <-> c2 <-> c3 ==> c1 <-> c3
000015B4: E5912000    ;     ldr R2, [R1, #0] ;;next ptr
000015B8: E5913004    ;     ldr R3, [R1, #4] ;;prev ptr
000015BC: E5823004    ;     str R3, [R2, #4] ;;Store c1 into c3's previous
000015C0: E5832000    ;     str R2, [R3, #0] ;;Store c3 into c1's next
000015C4:             ; 
000015C4: E1A00001    ;     mov R0, R1 ;;move the found crate's address into the return register ;;The crate header is 
                      ; no longer needed
000015C8:             ; 
000015C8:             ; mallocEnd
000015C8: E8BD0010    ;     pop {R4}
000015CC: E1A0F00E    ;     mov R15, R14
000015D0:             ; 
000015D0:             ; free
000015D0:             ; ;;INP in R0 is the mem addr of the data to be freed
000015D0:             ; ;;OUT in R0 is the success code - 0 for mem freed, ¬0 for error ;;probably won't be currently 
                      ; used `=(- -)=' 
000015D0:             ;     ;;In order to free memory we need to add it back to the linked list
000015D0:             ;     ;;Following K&R's version the linked list will be ordered by address this will make finding
                      ;  consecutive memory locations that should be combined easier
000015D0:             ; 
000015D0:             ;     ;;The inputted address of the crate is the address given in malloc and so the start of the 
                      ; crate is that addr - sizeof(Crate) (#12)
000015D0:             ; 
000015D0:             ;     ;;heapHead = first Crate
000015D0:             ;     ;;current = heapHead
000015D0:             ;     ;;while (toFree.addr > current.addr)
000015D0:             ;     ;;  current = current.next
000015D0:             ;     ;;
000015D0:             ;     ;;//Add the toFree Crate inbetween the current and its previous i.e.  A<->B<->C, toFree = D
                      ;  (addr < C, addr > B) ==> A<->B<->D<->C
000015D0:             ;     ;;current->prev->next = toFree
000015D0:             ;     ;;toFree->prev = current.prev
000015D0:             ;     ;;current->prev = toFree
000015D0:             ;     ;;toFree->next = current
000015D0:             ; 
000015D0:             ;     ;; Crate structure
000015D0:             ;     ;;  |-ptr to next crate (1 word)
000015D0:             ;     ;;  |-ptr to prev crate (1 word)
000015D0:             ;     ;;  `-Size (bytes)      (1 word)
000015D0:             ; 
000015D0: E92D01F0    ;     push {R4-R8}
000015D4:             ; 
000015D4: E24F1F76    ;     adrl R1, heaphead
000015D8: E2411B05    ; 
000015DC: E5111000    ;     ldr R1, [R1] ;;R1 will hold the current
000015E0: E240000C    ;     sub R0, R0, #12 ;;subtract sizeof(Crate) to get header pointer
000015E4:             ; freeloop
000015E4: E5912000    ;     ldr R2, [R1, #0] ;;load the ptr to the next
000015E8: E1520000    ;     cmp R2, R0 ;;compare the address of the toFree to the address of current->next
000015EC:             ; 
000015EC: AA000003    ;     bge freelend ;;current->next.addr >= toFree.addr
000015F0:             ; 
000015F0: E3520000    ;     cmp R2, #0 ;;If there are no more Crates to the right then this could be a new Crate at the
                      ;  end or |F|T| it should merge left 
000015F4: 0A000009    ;     beq freelendEnd
000015F8:             ; 
000015F8: E1A01002    ;     mov R1, R2 ;;current = current.next
000015FC:             ; 
000015FC: EAFFFFF8    ;     b freeloop
00001600:             ; 
00001600:             ; freelend
00001600:             ;     ;; R1 holds the current (left)
00001600:             ;     ;; R2 holds the c->next (right)
00001600: E5912000    ;     ldr R2, [R1, #0]
00001604:             ; 
00001604:             ;     ;;Setup the ptrs for the crates this will help later on   left<->toFree<->right ;;left,righ
                      ; t can be 0
00001604:             ;     ;;We're just adding the new crate to the linked list
00001604:             ;     ;;current->next->prev = toFree
00001604:             ;     ;;toFree->next = current->next
00001604:             ;     ;;current->next = toFree
00001604:             ;     ;;toFree->prev = current
00001604:             ; 
00001604: E5913000    ;     ldr R3, [R1, #0] ;;holds current->next
00001608: E3530000    ;     cmp R3, #0
0000160C: 15830004    ;     strne R0, [R3, #4] ;;current->next->prev = toFree
00001610: E5803000    ;     str R3, [R0, #0] ;;toFree->next = current->next
00001614: E5810000    ;     str R0, [R1, #0] ;;current->next = toFree
00001618: E5801004    ;     str R1, [R0, #4] ;;toFree->prev = current
0000161C:             ; 
0000161C: EA000001    ;     b freeMergeCheck
00001620:             ; 
00001620:             ; freelendEnd
00001620:             ; ;;If there are no more Crates to the right then this could be a new Crate at the end or |F|T| i
                      ; t should merge left 
00001620:             ; ;;Found a crate (current) that is to the left of the crate as we ran out of ->next ptrs
00001620:             ; ;;Need to set current->next = toFree
00001620:             ; ;;            toFree->prev = current
00001620: E5801004    ;     str R1, [R0, #4] ;;toFree->prev = current
00001624: E5810000    ;     str R0, [R1, #0] ;;current->next = toFree
00001628:             ; 
00001628:             ; freeMergeCheck
00001628:             ;     ;;We have a ptr to current. This should be the closest Crate to the left of toFree
00001628:             ;     ;;We also have the next Crate (null or not) which is to the right of toFree
00001628:             ;     ;;Both of these crates MAY need to be merged but could also have taken crates in between
00001628:             ;     ;;First is to check if the crates are adjacent
00001628:             ;     ;;  If they are NOT then create a newCrate
00001628:             ;     ;;  If they are     then merge both
00001628:             ;     ;;  If only one     then merge either left or right
00001628:             ; 
00001628:             ;     ;;R1 will be left
00001628:             ;     ;;R2 will be right
00001628:             ; 
00001628: E3510000    ;     cmp R1, #0
0000162C: 01A01000    ;     moveq R1, R0 ;;If there is no left crate then left=toFree
00001630: E3520000    ;     cmp R2, #0
00001634: 01A02000    ;     moveq R2, R0 ;;If there is no right crate (more likely) then right=toFree
00001638:             ; 
00001638:             ; verifyLeft
00001638:             ;     ;;Check if the left is adjacent
00001638:             ;     ;;It will be if (left.addr + sizeof(Crate) + left.size == toFree.addr)
00001638:             ; 
00001638: E5913008    ;     ldr R3, [R1, #8]
0000163C: E283300C    ;     add R3, R3, #12 ;;12 is sizeof(Crate) + toFree.size
00001640: E0833001    ;     add R3, R3, R1 ;;left.addr + left->size ??
00001644:             ; 
00001644: E1530000    ;     cmp R3, R0
00001648: 11A01000    ;     movne R1, R0
0000164C:             ; 
0000164C:             ; verifyRight
0000164C:             ;     ;;Going from toFree to Right
0000164C: E5903008    ;     ldr R3, [R0, #8] ;;get size of toFree
00001650: E283300C    ;     add R3, R3, #12 ;;12 is sizeof(Crate) + toFree.size
00001654: E0833000    ;     add R3, R3, R0 ;; + toFree.addr
00001658:             ; 
00001658: E1530002    ;     cmp R3, R2
0000165C: 11A02000    ;     movne R2, R0
00001660:             ; 
00001660:             ; merge
00001660:             ;     ;;Merge the two Crates given in R1 and R2
00001660:             ;     ;;left can be (left) or (toFree)
00001660:             ;     ;;right can be (right) or (toFree)
00001660:             ;     ;;If left == right: don't merge; create new Crate
00001660:             ;     ;;If left != right: then add to left's size
00001660:             ; 
00001660: E1510002    ;     cmp R1, R2
00001664: 0A00000A    ;     beq mergeNew
00001668:             ; 
00001668:             ;     ;;The new size is right.addr - left.addr + right->size    from right.addr - left.addr - siz
                      ; eof(Crate) + sizeof(Crate) + right->size
00001668:             ;     ;;                                                               |left      |right
00001668:             ;     ;;                                                               |<12>|size||<12>|size|
00001668:             ;     ;;
00001668:             ;     ;;                                                               |left      
00001668:             ;     ;;                                                               |<12>|size           |
00001668:             ;     ;;
00001668:             ;     ;;I'm doing it this way as the left and right may not be contiguous i.e. if toFree has a fr
                      ; ee crate on either side
00001668:             ; 
00001668: E0423001    ;     sub R3, R2, R1
0000166C: E5924008    ;     ldr R4, [R2, #8]
00001670: E0833004    ;     add R3, R3, R4
00001674: E5813008    ;     str R3, [R1, #8]
00001678:             ; 
00001678:             ;     ;;Time to switch some ptrs
00001678:             ;     ;;Current state left.prev<->left<->right<->right.next (with left or right = toFree) or left
                      ; .prev<->left<->toFree<->right<->right.next
00001678:             ;     ;;New state would be left.prev<->left<->right.next (with left or right = toFree) or left.pr
                      ; ev<->left<->right.next
00001678:             ;     ;;Both cases end the same, so get right.next. These could be 0 but it doesn't matter
00001678:             ;     ;;Next need to change the prev and next ptrs for adjacent Crates
00001678:             ;     ;;i.e. right->next->prev = left
00001678:             ; 
00001678: E5924000    ;     ldr R4, [R2, #0] ;;right->next
0000167C: E1540001    ;     cmp R4, R1
00001680: 15814000    ;     strne R4, [R1, #0] ;;left->next = right->next
00001684: 13A04000    ;     movne R4, #0
00001688: 15814000    ;     strne R4, [R1, #0]
0000168C:             ; 
0000168C: E3540000    ;     cmp R4, #0
00001690: 15841004    ;     strne R1, [R4, #4] ;;right->next->prev = left
00001694:             ; 
00001694:             ; mergeNew
00001694:             ;     ;;The crate has already been setup with its ptrs and had its size as well so don't need to 
                      ; do anything
00001694:             ; 
00001694:             ; freeEnd
00001694: E8BD01F0    ;     pop {R4-R8}
00001698: E1A0F00E    ;     mov R15, R14
0000169C:             ; 
0000169C:             ; 
0000169C:             ; printHeap
0000169C:             ; ;;This is a debugging function that will print the free and taken list
0000169C:             ; ;;,-----------------------------------------------------------------,
0000169C:             ; ;;|   large free block  |tkn1   |tkn2       | freed1    | tkn3      |
0000169C:             ; ;;|                     |       |           |           |           |
0000169C:             ; ;;|                     |       |           |           |           |
0000169C:             ; ;;`-----------------------------------------------------------------'
0000169C:             ; 
0000169C:             ; ;;  PrintFree() - follow the free list ptrs print addr + size
0000169C:             ; ;;  PrintAll()  - start at head and go addr + size + 12 to get next, continue to end
0000169C: E92D47F0    ;     push {R14, R4-R10}
000016A0:             ; 
000016A0: EB00001D    ;     bl printFree
000016A4:             ; 
000016A4: EB000001    ;     bl printAll
000016A8:             ; 
000016A8:             ; printHeapend
000016A8: E8BD47F0    ;     pop {R14, R4-R10}
000016AC: E1A0F00E    ;     mov R15, R14
000016B0:             ; 
000016B0:             ; printAll
000016B0: E92D41F0    ;     push {R14, R4-R8}
000016B4:             ; 
000016B4: E28F00AF    ;     adrl R0, printAll_m
000016B8: E2800C0F    ; 
000016BC: EF000003    ;     swi 3
000016C0:             ;     
000016C0: E28F0FFA    ;     adrl R0, heapstart
000016C4: E2800B03    ; 
000016C8: E1A04000    ;     mov R4, R0
000016CC:             ; 
000016CC: E1A05000    ;     mov R5, R0 ;;stores the next expected free node
000016D0:             ; 
000016D0:             ; printAllLoop
000016D0: E5941000    ;     ldr R1, [R4, #0] ;;next ptr
000016D4: E5942004    ;     ldr R2, [R4, #4] ;;prev ptr
000016D8: E5943008    ;     ldr R3, [R4, #8] ;;size
000016DC:             ; 
000016DC:             ;     ;;check if this is a free node
000016DC: E1550004    ;     cmp R5, R4
000016E0: 1A000003    ;     bne skipFreeInfo
000016E4:             ; 
000016E4: E28F00A2    ;     adrl R0, printAll_m_f
000016E8: E2800C0F    ; 
000016EC: EF000003    ;     swi 3
000016F0:             ; 
000016F0: E1A05001    ;     mov R5, R1
000016F4:             ; 
000016F4:             ; skipFreeInfo
000016F4: E1A00004    ;     mov R0, R4
000016F8: EB00001C    ;     bl printblock
000016FC:             ; 
000016FC:             ;     ;;calculate the next block
000016FC:             ;     ;;addr + 12 + size
000016FC:             ; 
000016FC: E284000C    ;     add R0, R4, #12
00001700: E0800003    ;     add R0, R0, R3
00001704:             ; 
00001704: E1A04000    ;     mov R4, R0
00001708:             ; 
00001708: E354080F    ;     cmp R4, #0xF0000
0000170C: AA000000    ;     bge printAllLend
00001710:             ;     
00001710: EAFFFFEE    ;     b printAllLoop
00001714:             ; 
00001714:             ; printAllLend
00001714:             ; printAllEnd
00001714: E8BD41F0    ;     pop {R14, R4-R8}
00001718: E1A0F00E    ;     mov R15, R14
0000171C:             ; 
0000171C:             ; printFree
0000171C: E92D41F0    ;     push {R14, R4-R8}
00001720:             ; 
00001720: E28F00F1    ;     adrl R0, printFree_m
00001724: E2800C0E    ; 
00001728: EF000003    ;     swi 3
0000172C:             ; 
0000172C: E28F0FDF    ;     adrl R0, heapstart
00001730: E2800B03    ; 
00001734: E1A04000    ;     mov R4, R0
00001738:             ; 
00001738:             ; printFreeloop
00001738: E5941000    ;     ldr R1, [R4, #0] ;;next ptr
0000173C: E5942004    ;     ldr R2, [R4, #4] ;;prev ptr
00001740: E5943008    ;     ldr R3, [R4, #8] ;;size
00001744:             ; 
00001744: E28F0EEE    ;     adrl R0, printfree_f_m
00001748: E2800000    ; 
0000174C: EF000003    ;     swi 3
00001750:             ; 
00001750: E1A00004    ;     mov R0, R4
00001754: EB000005    ;     bl printblock
00001758:             ; 
00001758: E3510000    ;     cmp R1, #0
0000175C: 0A000001    ;     beq printFreelend
00001760:             ; 
00001760: E1A04001    ;     mov R4, R1
00001764: EAFFFFF3    ;     b printFreeloop
00001768:             ; 
00001768:             ; printFreelend
00001768:             ; printFreeEnd
00001768: E8BD41F0    ;     pop {R14, R4-R8}
0000176C: E1A0F00E    ;     mov R15, R14
00001770:             ; 
00001770:             ; printblock
00001770:             ; ;;INP in R0 is the addr
00001770:             ; ;;INP in R1 is the next
00001770:             ; ;;INP in R2 is the prev
00001770:             ; ;;INP in R3 is the size
00001770:             ; ;;RET --
00001770: E92D0010    ;     push {R4}
00001774: E1A04000    ;     mov R4, R0
00001778:             ; 
00001778: E28F00CB    ;     adrl R0, cutoff
0000177C: E2800C09    ; 
00001780: EF000003    ;     swi 3
00001784:             ; 
00001784: E28F00B7    ;     adrl R0, printfree_f_mad
00001788: E2800C0E    ; 
0000178C: EF000003    ;     swi 3
00001790:             ; 
00001790: E1A00004    ;     mov R0, R4
00001794: EF000004    ;     swi 4
00001798:             ; 
00001798: E3A0000A    ;     ldr R0, =nl
0000179C: EF000000    ;     swi 0
000017A0:             ; 
000017A0: E28F00A5    ;     adrl R0, printfree_f_mnx
000017A4: E2800C0E    ; 
000017A8: EF000003    ;     swi 3
000017AC:             ; 
000017AC: E1A00001    ;     mov R0, R1
000017B0: EF000004    ;     swi 4
000017B4:             ; 
000017B4: E3A0000A    ;     ldr R0, =nl
000017B8: EF000000    ;     swi 0
000017BC:             ; 
000017BC: E28F0093    ;     adrl R0, printfree_f_mpr
000017C0: E2800C0E    ; 
000017C4: EF000003    ;     swi 3
000017C8:             ; 
000017C8: E1A00002    ;     mov R0, R2
000017CC: EF000004    ;     swi 4
000017D0:             ; 
000017D0: E3A0000A    ;     ldr R0, =nl
000017D4: EF000000    ;     swi 0
000017D8:             ; 
000017D8: E28F0081    ;     adrl R0, printfree_f_msz
000017DC: E2800C0E    ; 
000017E0: EF000003    ;     swi 3
000017E4:             ; 
000017E4: E1A00003    ;     mov R0, R3
000017E8: EF000004    ;     swi 4
000017EC:             ; 
000017EC: E3A0000A    ;     ldr R0, =nl
000017F0: EF000000    ;     swi 0
000017F4:             ; 
000017F4: E28F004F    ;     adrl R0, cutoff
000017F8: E2800C09    ; 
000017FC: EF000003    ;     swi 3
00001800:             ; 
00001800: E8BD0010    ;     pop {R4}
00001804: E1A0F00E    ;     mov R15, R14
00001808:             ; 
00001808:             ; align
00001808:             ; 
00001808:             ; ;;String defs -- The naming scheme is bad :(
00001808: 2D 2D 2D 2D ; welcomemsg      defb "-----------Welcome to JCGOL in ARM32-----------", nl, 0
0000180C: 2D 2D 2D 2D ; 
00001810: 2D 2D 2D 57 ; 
00001814: 65 6C 63 6F ; 
00001818: 6D 65 20 74 ; 
0000181C: 6F 20 4A 43 ; 
00001820: 47 4F 4C 20 ; 
00001824: 69 6E 20 41 ; 
00001828: 52 4D 33 32 ; 
0000182C: 2D 2D 2D 2D ; 
00001830: 2D 2D 2D 2D ; 
00001834: 2D 2D 2D 0A ; 
00001838: 00          ; 
00001839: 28 4E 29 65 ; welcome2msg     defb "(N)ew board\n(L)oad a saved board\n(H)elp msg\n(S)ettings\n(Q)uit", nl, 0
0000183D: 77 20 62 6F ; 
00001841: 61 72 64 0A ; 
00001845: 28 4C 29 6F ; 
00001849: 61 64 20 61 ; 
0000184D: 20 73 61 76 ; 
00001851: 65 64 20 62 ; 
00001855: 6F 61 72 64 ; 
00001859: 0A 28 48 29 ; 
0000185D: 65 6C 70 20 ; 
00001861: 6D 73 67 0A ; 
00001865: 28 53 29 65 ; 
00001869: 74 74 69 6E ; 
0000186D: 67 73 0A 28 ; 
00001871: 51 29 75 69 ; 
00001875: 74 0A 00    ; 
00001878: 49 6E 76 61 ; mainchoicefail  defb "Invalid choice please enter 'n' for new board, 'l' for load a board, 'h' 
0000187C: 6C 69 64 20 ; to view help message, 's' to view settings, or 'q' to close. Not cases sensative", nl, 0
00001880: 63 68 6F 69 ; 
00001884: 63 65 20 70 ; 
00001888: 6C 65 61 73 ; 
0000188C: 65 20 65 6E ; 
00001890: 74 65 72 20 ; 
00001894: 27 6E 27 20 ; 
00001898: 66 6F 72 20 ; 
0000189C: 6E 65 77 20 ; 
000018A0: 62 6F 61 72 ; 
000018A4: 64 2C 20 27 ; 
000018A8: 6C 27 20 66 ; 
000018AC: 6F 72 20 6C ; 
000018B0: 6F 61 64 20 ; 
000018B4: 61 20 62 6F ; 
000018B8: 61 72 64 2C ; 
000018BC: 20 27 68 27 ; 
000018C0: 20 74 6F 20 ; 
000018C4: 76 69 65 77 ; 
000018C8: 20 68 65 6C ; 
000018CC: 70 20 6D 65 ; 
000018D0: 73 73 61 67 ; 
000018D4: 65 2C 20 27 ; 
000018D8: 73 27 20 74 ; 
000018DC: 6F 20 76 69 ; 
000018E0: 65 77 20 73 ; 
000018E4: 65 74 74 69 ; 
000018E8: 6E 67 73 2C ; 
000018EC: 20 6F 72 20 ; 
000018F0: 27 71 27 20 ; 
000018F4: 74 6F 20 63 ; 
000018F8: 6C 6F 73 65 ; 
000018FC: 2E 20 4E 6F ; 
00001900: 74 20 63 61 ; 
00001904: 73 65 73 20 ; 
00001908: 73 65 6E 73 ; 
0000190C: 61 74 69 76 ; 
00001910: 65 0A 00    ; 
00001913: 53 6C 6F 77 ; helpmsg         defb "Slow mode will create a pause between each grid print to make it more rea
00001917: 20 6D 6F 64 ; dable - can't use with step mode\nErase mode will erase the previous board before printing the 
0000191B: 65 20 77 69 ; next - [is 2x slower]\n", 0
0000191F: 6C 6C 20 63 ; 
00001923: 72 65 61 74 ; 
00001927: 65 20 61 20 ; 
0000192B: 70 61 75 73 ; 
0000192F: 65 20 62 65 ; 
00001933: 74 77 65 65 ; 
00001937: 6E 20 65 61 ; 
0000193B: 63 68 20 67 ; 
0000193F: 72 69 64 20 ; 
00001943: 70 72 69 6E ; 
00001947: 74 20 74 6F ; 
0000194B: 20 6D 61 6B ; 
0000194F: 65 20 69 74 ; 
00001953: 20 6D 6F 72 ; 
00001957: 65 20 72 65 ; 
0000195B: 61 64 61 62 ; 
0000195F: 6C 65 20 2D ; 
00001963: 20 63 61 6E ; 
00001967: 27 74 20 75 ; 
0000196B: 73 65 20 77 ; 
0000196F: 69 74 68 20 ; 
00001973: 73 74 65 70 ; 
00001977: 20 6D 6F 64 ; 
0000197B: 65 0A 45 72 ; 
0000197F: 61 73 65 20 ; 
00001983: 6D 6F 64 65 ; 
00001987: 20 77 69 6C ; 
0000198B: 6C 20 65 72 ; 
0000198F: 61 73 65 20 ; 
00001993: 74 68 65 20 ; 
00001997: 70 72 65 76 ; 
0000199B: 69 6F 75 73 ; 
0000199F: 20 62 6F 61 ; 
000019A3: 72 64 20 62 ; 
000019A7: 65 66 6F 72 ; 
000019AB: 65 20 70 72 ; 
000019AF: 69 6E 74 69 ; 
000019B3: 6E 67 20 74 ; 
000019B7: 68 65 20 6E ; 
000019BB: 65 78 74 20 ; 
000019BF: 2D 20 5B 69 ; 
000019C3: 73 20 32 78 ; 
000019C7: 20 73 6C 6F ; 
000019CB: 77 65 72 5D ; 
000019CF: 0A 00       ; 
000019D1: 53 69 6E 67 ; help2msg        defb "Single step mode will prompt for input each time a grid is drawn, you can
000019D5: 6C 65 20 73 ;  (s)ave the current state or (q)uit to menu", 0
000019D9: 74 65 70 20 ; 
000019DD: 6D 6F 64 65 ; 
000019E1: 20 77 69 6C ; 
000019E5: 6C 20 70 72 ; 
000019E9: 6F 6D 70 74 ; 
000019ED: 20 66 6F 72 ; 
000019F1: 20 69 6E 70 ; 
000019F5: 75 74 20 65 ; 
000019F9: 61 63 68 20 ; 
000019FD: 74 69 6D 65 ; 
00001A01: 20 61 20 67 ; 
00001A05: 72 69 64 20 ; 
00001A09: 69 73 20 64 ; 
00001A0D: 72 61 77 6E ; 
00001A11: 2C 20 79 6F ; 
00001A15: 75 20 63 61 ; 
00001A19: 6E 20 28 73 ; 
00001A1D: 29 61 76 65 ; 
00001A21: 20 74 68 65 ; 
00001A25: 20 63 75 72 ; 
00001A29: 72 65 6E 74 ; 
00001A2D: 20 73 74 61 ; 
00001A31: 74 65 20 6F ; 
00001A35: 72 20 28 71 ; 
00001A39: 29 75 69 74 ; 
00001A3D: 20 74 6F 20 ; 
00001A41: 6D 65 6E 75 ; 
00001A45: 00          ; 
00001A46: 54 68 61 6E ; mainendmsg      defb "Thank you for playing JCGOL for ARM32", nl, 0
00001A4A: 6B 20 79 6F ; 
00001A4E: 75 20 66 6F ; 
00001A52: 72 20 70 6C ; 
00001A56: 61 79 69 6E ; 
00001A5A: 67 20 4A 43 ; 
00001A5E: 47 4F 4C 20 ; 
00001A62: 66 6F 72 20 ; 
00001A66: 41 52 4D 33 ; 
00001A6A: 32 0A 00    ; 
00001A6D: 57 6F 75 6C ; askdefaults     defb "Would you like to use the default settings? Y/n: ", 0
00001A71: 64 20 79 6F ; 
00001A75: 75 20 6C 69 ; 
00001A79: 6B 65 20 74 ; 
00001A7D: 6F 20 75 73 ; 
00001A81: 65 20 74 68 ; 
00001A85: 65 20 64 65 ; 
00001A89: 66 61 75 6C ; 
00001A8D: 74 20 73 65 ; 
00001A91: 74 74 69 6E ; 
00001A95: 67 73 3F 20 ; 
00001A99: 59 2F 6E 3A ; 
00001A9D: 20 00       ; 
00001A9F: 45 6E 61 62 ; askerase        defb "Enable erase mode? Y/n: ", 0
00001AA3: 6C 65 20 65 ; 
00001AA7: 72 61 73 65 ; 
00001AAB: 20 6D 6F 64 ; 
00001AAF: 65 3F 20 59 ; 
00001AB3: 2F 6E 3A 20 ; 
00001AB7: 00          ; 
00001AB8: 45 6E 61 62 ; askslow         defb "Enable slow mode? Y/n: ", 0
00001ABC: 6C 65 20 73 ; 
00001AC0: 6C 6F 77 20 ; 
00001AC4: 6D 6F 64 65 ; 
00001AC8: 3F 20 59 2F ; 
00001ACC: 6E 3A 20 00 ; 
00001AD0: 45 6E 61 62 ; askstep         defb "Enable step mode? Y/n: ", 0
00001AD4: 6C 65 20 73 ; 
00001AD8: 74 65 70 20 ; 
00001ADC: 6D 6F 64 65 ; 
00001AE0: 3F 20 59 2F ; 
00001AE4: 6E 3A 20 00 ; 
00001AE8: 43 61 6E 6E ; stepslowwarning defb "Cannot have slow and step mode active at the same time, disabling slow mo
00001AEC: 6F 74 20 68 ; de", nl, 0
00001AF0: 61 76 65 20 ; 
00001AF4: 73 6C 6F 77 ; 
00001AF8: 20 61 6E 64 ; 
00001AFC: 20 73 74 65 ; 
00001B00: 70 20 6D 6F ; 
00001B04: 64 65 20 61 ; 
00001B08: 63 74 69 76 ; 
00001B0C: 65 20 61 74 ; 
00001B10: 20 74 68 65 ; 
00001B14: 20 73 61 6D ; 
00001B18: 65 20 74 69 ; 
00001B1C: 6D 65 2C 20 ; 
00001B20: 64 69 73 61 ; 
00001B24: 62 6C 69 6E ; 
00001B28: 67 20 73 6C ; 
00001B2C: 6F 77 20 6D ; 
00001B30: 6F 64 65 0A ; 
00001B34: 00          ; 
00001B35: 52 65 74 75 ; savedchoice     defb "Return to menu? (n for continue sim) Y/n: ", 0
00001B39: 72 6E 20 74 ; 
00001B3D: 6F 20 6D 65 ; 
00001B41: 6E 75 3F 20 ; 
00001B45: 28 6E 20 66 ; 
00001B49: 6F 72 20 63 ; 
00001B4D: 6F 6E 74 69 ; 
00001B51: 6E 75 65 20 ; 
00001B55: 73 69 6D 29 ; 
00001B59: 20 59 2F 6E ; 
00001B5D: 3A 20 00    ; 
00001B60: 50 6C 65 61 ; askname         defb "Please enter a name for the grid: ", 0
00001B64: 73 65 20 65 ; 
00001B68: 6E 74 65 72 ; 
00001B6C: 20 61 20 6E ; 
00001B70: 61 6D 65 20 ; 
00001B74: 66 6F 72 20 ; 
00001B78: 74 68 65 20 ; 
00001B7C: 67 72 69 64 ; 
00001B80: 3A 20 00    ; 
00001B83: 45 72 61 73 ; warneraseslow   defb "Erase mode is active it is recommended to also use slow mode", nl, 0
00001B87: 65 20 6D 6F ; 
00001B8B: 64 65 20 69 ; 
00001B8F: 73 20 61 63 ; 
00001B93: 74 69 76 65 ; 
00001B97: 20 69 74 20 ; 
00001B9B: 69 73 20 72 ; 
00001B9F: 65 63 6F 6D ; 
00001BA3: 6D 65 6E 64 ; 
00001BA7: 65 64 20 74 ; 
00001BAB: 6F 20 61 6C ; 
00001BAF: 73 6F 20 75 ; 
00001BB3: 73 65 20 73 ; 
00001BB7: 6C 6F 77 20 ; 
00001BBB: 6D 6F 64 65 ; 
00001BBF: 0A 00       ; 
00001BC1: 50 6C 65 61 ; askwid          defb "Please enter a width (", 0
00001BC5: 73 65 20 65 ; 
00001BC9: 6E 74 65 72 ; 
00001BCD: 20 61 20 77 ; 
00001BD1: 69 64 74 68 ; 
00001BD5: 20 28 00    ; 
00001BD8: 2D 00       ; dash            defb "-", 0
00001BDA: 29 3A 20 00 ; b_close_colon   defb "): ",0
00001BDE: 50 6C 65 61 ; askhei          defb "Please enter a height ", 0
00001BE2: 73 65 20 65 ; 
00001BE6: 6E 74 65 72 ; 
00001BEA: 20 61 20 68 ; 
00001BEE: 65 69 67 68 ; 
00001BF2: 74 20 00    ; 
00001BF5: 49 6E 76 61 ; getwidfailmsg   defb "Invalid width please enter a value between ", 0
00001BF9: 6C 69 64 20 ; 
00001BFD: 77 69 64 74 ; 
00001C01: 68 20 70 6C ; 
00001C05: 65 61 73 65 ; 
00001C09: 20 65 6E 74 ; 
00001C0D: 65 72 20 61 ; 
00001C11: 20 76 61 6C ; 
00001C15: 75 65 20 62 ; 
00001C19: 65 74 77 65 ; 
00001C1D: 65 6E 20 00 ; 
00001C21: 49 6E 76 61 ; getheifailmsg   defb "Invalid height please enter a value between ", 0
00001C25: 6C 69 64 20 ; 
00001C29: 68 65 69 67 ; 
00001C2D: 68 74 20 70 ; 
00001C31: 6C 65 61 73 ; 
00001C35: 65 20 65 6E ; 
00001C39: 74 65 72 20 ; 
00001C3D: 61 20 76 61 ; 
00001C41: 6C 75 65 20 ; 
00001C45: 62 65 74 77 ; 
00001C49: 65 65 6E 20 ; 
00001C4D: 00          ; 
00001C4E:             ; 
00001C4E:             ; ;;[[todo]] change to printing the current options
00001C4E: 55 73 69 6E ; usingDefault    defb "Using default values: dims=(18, 18) slowMode=Off eraseMode=Off stepMode=O
00001C52: 67 20 64 65 ; n", nl, 0
00001C56: 66 61 75 6C ; 
00001C5A: 74 20 76 61 ; 
00001C5E: 6C 75 65 73 ; 
00001C62: 3A 20 64 69 ; 
00001C66: 6D 73 3D 28 ; 
00001C6A: 31 38 2C 20 ; 
00001C6E: 31 38 29 20 ; 
00001C72: 73 6C 6F 77 ; 
00001C76: 4D 6F 64 65 ; 
00001C7A: 3D 4F 66 66 ; 
00001C7E: 20 65 72 61 ; 
00001C82: 73 65 4D 6F ; 
00001C86: 64 65 3D 4F ; 
00001C8A: 66 66 20 73 ; 
00001C8E: 74 65 70 4D ; 
00001C92: 6F 64 65 3D ; 
00001C96: 4F 6E 0A 00 ; 
00001C9A: 55 73 69 6E ; usingDefWODims  defb "Using default values: slowMode=Off eraseMode=Off stepMode=On", nl, 0
00001C9E: 67 20 64 65 ; 
00001CA2: 66 61 75 6C ; 
00001CA6: 74 20 76 61 ; 
00001CAA: 6C 75 65 73 ; 
00001CAE: 3A 20 73 6C ; 
00001CB2: 6F 77 4D 6F ; 
00001CB6: 64 65 3D 4F ; 
00001CBA: 66 66 20 65 ; 
00001CBE: 72 61 73 65 ; 
00001CC2: 4D 6F 64 65 ; 
00001CC6: 3D 4F 66 66 ; 
00001CCA: 20 73 74 65 ; 
00001CCE: 70 4D 6F 64 ; 
00001CD2: 65 3D 4F 6E ; 
00001CD6: 0A 00       ; 
00001CD8:             ; 
00001CD8: 43 75 72 72 ; optionsp_1      defb "Current options: dims=(", 0 ;;width
00001CDC: 65 6E 74 20 ; 
00001CE0: 6F 70 74 69 ; 
00001CE4: 6F 6E 73 3A ; 
00001CE8: 20 64 69 6D ; 
00001CEC: 73 3D 28 00 ; 
00001CF0: 2C 20 00    ; optionsp_2      defb ", ", 0 ;;height
00001CF3: 29 20 73 6C ; optionsp_3      defb ") slowMode=", 0 ;;OFF/ON
00001CF7: 6F 77 4D 6F ; 
00001CFB: 64 65 3D 00 ; 
00001CFF: 20 65 72 61 ; optionsp_4      defb " eraseMode=", 0 ;;^
00001D03: 73 65 4D 6F ; 
00001D07: 64 65 3D 00 ; 
00001D0B: 20 73 74 65 ; optionsp_5      defb " stepMode=", 0  ;;^
00001D0F: 70 4D 6F 64 ; 
00001D13: 65 3D 00    ; 
00001D16:             ; 
00001D16: 59 6F 75 27 ; mainloopittsmsg defb "You've reached the max itterations before waiting for input. You can chan
00001D1A: 76 65 20 72 ; ge this in settings. Press any key to continue, 'q' to quit, and 's' to save the grid", nl, 0
00001D1E: 65 61 63 68 ; 
00001D22: 65 64 20 74 ; 
00001D26: 68 65 20 6D ; 
00001D2A: 61 78 20 69 ; 
00001D2E: 74 74 65 72 ; 
00001D32: 61 74 69 6F ; 
00001D36: 6E 73 20 62 ; 
00001D3A: 65 66 6F 72 ; 
00001D3E: 65 20 77 61 ; 
00001D42: 69 74 69 6E ; 
00001D46: 67 20 66 6F ; 
00001D4A: 72 20 69 6E ; 
00001D4E: 70 75 74 2E ; 
00001D52: 20 59 6F 75 ; 
00001D56: 20 63 61 6E ; 
00001D5A: 20 63 68 61 ; 
00001D5E: 6E 67 65 20 ; 
00001D62: 74 68 69 73 ; 
00001D66: 20 69 6E 20 ; 
00001D6A: 73 65 74 74 ; 
00001D6E: 69 6E 67 73 ; 
00001D72: 2E 20 50 72 ; 
00001D76: 65 73 73 20 ; 
00001D7A: 61 6E 79 20 ; 
00001D7E: 6B 65 79 20 ; 
00001D82: 74 6F 20 63 ; 
00001D86: 6F 6E 74 69 ; 
00001D8A: 6E 75 65 2C ; 
00001D8E: 20 27 71 27 ; 
00001D92: 20 74 6F 20 ; 
00001D96: 71 75 69 74 ; 
00001D9A: 2C 20 61 6E ; 
00001D9E: 64 20 27 73 ; 
00001DA2: 27 20 74 6F ; 
00001DA6: 20 73 61 76 ; 
00001DAA: 65 20 74 68 ; 
00001DAE: 65 20 67 72 ; 
00001DB2: 69 64 0A 00 ; 
00001DB6:             ; 
00001DB6: 43 68 6F 6F ; askgenoption    defb "Choose between (R)andom generation or (D)rawing the grid", 0
00001DBA: 73 65 20 62 ; 
00001DBE: 65 74 77 65 ; 
00001DC2: 65 6E 20 28 ; 
00001DC6: 52 29 61 6E ; 
00001DCA: 64 6F 6D 20 ; 
00001DCE: 67 65 6E 65 ; 
00001DD2: 72 61 74 69 ; 
00001DD6: 6F 6E 20 6F ; 
00001DDA: 72 20 28 44 ; 
00001DDE: 29 72 61 77 ; 
00001DE2: 69 6E 67 20 ; 
00001DE6: 74 68 65 20 ; 
00001DEA: 67 72 69 64 ; 
00001DEE: 00          ; 
00001DEF: 49 6E 76 61 ; setupGrdFailmsg defb "Invalid choice, use `R` for random generation and `d` for drawing the gri
00001DF3: 6C 69 64 20 ; d. Not case sensative: ", 0
00001DF7: 63 68 6F 69 ; 
00001DFB: 63 65 2C 20 ; 
00001DFF: 75 73 65 20 ; 
00001E03: 60 52 60 20 ; 
00001E07: 66 6F 72 20 ; 
00001E0B: 72 61 6E 64 ; 
00001E0F: 6F 6D 20 67 ; 
00001E13: 65 6E 65 72 ; 
00001E17: 61 74 69 6F ; 
00001E1B: 6E 20 61 6E ; 
00001E1F: 64 20 60 64 ; 
00001E23: 60 20 66 6F ; 
00001E27: 72 20 64 72 ; 
00001E2B: 61 77 69 6E ; 
00001E2F: 67 20 74 68 ; 
00001E33: 65 20 67 72 ; 
00001E37: 69 64 2E 20 ; 
00001E3B: 4E 6F 74 20 ; 
00001E3F: 63 61 73 65 ; 
00001E43: 20 73 65 6E ; 
00001E47: 73 61 74 69 ; 
00001E4B: 76 65 3A 20 ; 
00001E4F: 00          ; 
00001E50: 45 6E 74 65 ; askseed         defb "Enter 4 characters to be used as the seed: ", 0
00001E54: 72 20 34 20 ; 
00001E58: 63 68 61 72 ; 
00001E5C: 61 63 74 65 ; 
00001E60: 72 73 20 74 ; 
00001E64: 6F 20 62 65 ; 
00001E68: 20 75 73 65 ; 
00001E6C: 64 20 61 73 ; 
00001E70: 20 74 68 65 ; 
00001E74: 20 73 65 65 ; 
00001E78: 64 3A 20 00 ; 
00001E7C: 55 73 69 6E ; drawinfomsg     defb "Using '1' and '0' choose the value of the current cell. Use enter to go t
00001E80: 67 20 27 31 ; o next line", nl, 0
00001E84: 27 20 61 6E ; 
00001E88: 64 20 27 30 ; 
00001E8C: 27 20 63 68 ; 
00001E90: 6F 6F 73 65 ; 
00001E94: 20 74 68 65 ; 
00001E98: 20 76 61 6C ; 
00001E9C: 75 65 20 6F ; 
00001EA0: 66 20 74 68 ; 
00001EA4: 65 20 63 75 ; 
00001EA8: 72 72 65 6E ; 
00001EAC: 74 20 63 65 ; 
00001EB0: 6C 6C 2E 20 ; 
00001EB4: 55 73 65 20 ; 
00001EB8: 65 6E 74 65 ; 
00001EBC: 72 20 74 6F ; 
00001EC0: 20 67 6F 20 ; 
00001EC4: 74 6F 20 6E ; 
00001EC8: 65 78 74 20 ; 
00001ECC: 6C 69 6E 65 ; 
00001ED0: 0A 00       ; 
00001ED2: 49 6E 76 61 ; drawfailmsg     defb "Invalid input please enter 1 or 0, or enter for next line: ", nl, 0
00001ED6: 6C 69 64 20 ; 
00001EDA: 69 6E 70 75 ; 
00001EDE: 74 20 70 6C ; 
00001EE2: 65 61 73 65 ; 
00001EE6: 20 65 6E 74 ; 
00001EEA: 65 72 20 31 ; 
00001EEE: 20 6F 72 20 ; 
00001EF2: 30 2C 20 6F ; 
00001EF6: 72 20 65 6E ; 
00001EFA: 74 65 72 20 ; 
00001EFE: 66 6F 72 20 ; 
00001F02: 6E 65 78 74 ; 
00001F06: 20 6C 69 6E ; 
00001F0A: 65 3A 20 0A ; 
00001F0E: 00          ; 
00001F0F: 47 72 69 64 ; gridfailmsg     defb "Grid was not properly initialised, consider smaller dims", nl, 0
00001F13: 20 77 61 73 ; 
00001F17: 20 6E 6F 74 ; 
00001F1B: 20 70 72 6F ; 
00001F1F: 70 65 72 6C ; 
00001F23: 79 20 69 6E ; 
00001F27: 69 74 69 61 ; 
00001F2B: 6C 69 73 65 ; 
00001F2F: 64 2C 20 63 ; 
00001F33: 6F 6E 73 69 ; 
00001F37: 64 65 72 20 ; 
00001F3B: 73 6D 61 6C ; 
00001F3F: 6C 65 72 20 ; 
00001F43: 64 69 6D 73 ; 
00001F47: 0A 00       ; 
00001F49: 54 68 65 72 ; gridsavefail    defb "There was an error allocating memory for the grid save", nl, 0
00001F4D: 65 20 77 61 ; 
00001F51: 73 20 61 6E ; 
00001F55: 20 65 72 72 ; 
00001F59: 6F 72 20 61 ; 
00001F5D: 6C 6C 6F 63 ; 
00001F61: 61 74 69 6E ; 
00001F65: 67 20 6D 65 ; 
00001F69: 6D 6F 72 79 ; 
00001F6D: 20 66 6F 72 ; 
00001F71: 20 74 68 65 ; 
00001F75: 20 67 72 69 ; 
00001F79: 64 20 73 61 ; 
00001F7D: 76 65 0A 00 ; 
00001F81: 54 68 65 72 ; gridloadempty   defb "There are no saved grids, start a step mode sim and save the grid, return
00001F85: 65 20 61 72 ; ing to main menu", nl, 0
00001F89: 65 20 6E 6F ; 
00001F8D: 20 73 61 76 ; 
00001F91: 65 64 20 67 ; 
00001F95: 72 69 64 73 ; 
00001F99: 2C 20 73 74 ; 
00001F9D: 61 72 74 20 ; 
00001FA1: 61 20 73 74 ; 
00001FA5: 65 70 20 6D ; 
00001FA9: 6F 64 65 20 ; 
00001FAD: 73 69 6D 20 ; 
00001FB1: 61 6E 64 20 ; 
00001FB5: 73 61 76 65 ; 
00001FB9: 20 74 68 65 ; 
00001FBD: 20 67 72 69 ; 
00001FC1: 64 2C 20 72 ; 
00001FC5: 65 74 75 72 ; 
00001FC9: 6E 69 6E 67 ; 
00001FCD: 20 74 6F 20 ; 
00001FD1: 6D 61 69 6E ; 
00001FD5: 20 6D 65 6E ; 
00001FD9: 75 0A 00    ; 
00001FDC: 7C 69 6E 64 ; gridloadpindex  defb "|index: ", 0
00001FE0: 65 78 3A 20 ; 
00001FE4: 00          ; 
00001FE5: 7C 6E 61 6D ; gridloadpname   defb "|name: ", 0
00001FE9: 65 3A 20 00 ; 
00001FED: 7C 77 69 64 ; gridloadpwidth  defb "|width: ", 0
00001FF1: 74 68 3A 20 ; 
00001FF5: 00          ; 
00001FF6: 7C 68 65 69 ; gridloadpheight defb "|height: ", 0
00001FFA: 67 68 74 3A ; 
00001FFE: 20 00       ; 
00002000: 50 6C 65 61 ; loadboardaski   defb "Please enter the index of the grid to load, or enter a negative index to 
00002004: 73 65 20 65 ; not load a grid. (press enter to input)", nl, 0
00002008: 6E 74 65 72 ; 
0000200C: 20 74 68 65 ; 
00002010: 20 69 6E 64 ; 
00002014: 65 78 20 6F ; 
00002018: 66 20 74 68 ; 
0000201C: 65 20 67 72 ; 
00002020: 69 64 20 74 ; 
00002024: 6F 20 6C 6F ; 
00002028: 61 64 2C 20 ; 
0000202C: 6F 72 20 65 ; 
00002030: 6E 74 65 72 ; 
00002034: 20 61 20 6E ; 
00002038: 65 67 61 74 ; 
0000203C: 69 76 65 20 ; 
00002040: 69 6E 64 65 ; 
00002044: 78 20 74 6F ; 
00002048: 20 6E 6F 74 ; 
0000204C: 20 6C 6F 61 ; 
00002050: 64 20 61 20 ; 
00002054: 67 72 69 64 ; 
00002058: 2E 20 28 70 ; 
0000205C: 72 65 73 73 ; 
00002060: 20 65 6E 74 ; 
00002064: 65 72 20 74 ; 
00002068: 6F 20 69 6E ; 
0000206C: 70 75 74 29 ; 
00002070: 0A 00       ; 
00002072: 52 65 74 75 ; loadboardretmsg defb "Returning to main menu", nl, 0
00002076: 72 6E 69 6E ; 
0000207A: 67 20 74 6F ; 
0000207E: 20 6D 61 69 ; 
00002082: 6E 20 6D 65 ; 
00002086: 6E 75 0A 00 ; 
0000208A: 49 6E 76 61 ; loadboardifail  defb "Invalid input given for the index", nl, 0
0000208E: 6C 69 64 20 ; 
00002092: 69 6E 70 75 ; 
00002096: 74 20 67 69 ; 
0000209A: 76 65 6E 20 ; 
0000209E: 66 6F 72 20 ; 
000020A2: 74 68 65 20 ; 
000020A6: 69 6E 64 65 ; 
000020AA: 78 0A 00    ; 
000020AD: 49 6E 76 61 ; loadboardirerr  defb "Invalid index, out of range", nl, 0
000020B1: 6C 69 64 20 ; 
000020B5: 69 6E 64 65 ; 
000020B9: 78 2C 20 6F ; 
000020BD: 75 74 20 6F ; 
000020C1: 66 20 72 61 ; 
000020C5: 6E 67 65 0A ; 
000020C9: 00          ; 
000020CA: 45 72 72 6F ; loadboardmlcerr defb "Error allocating memory for loaded grid. Returing to main menu", nl, 0
000020CE: 72 20 61 6C ; 
000020D2: 6C 6F 63 61 ; 
000020D6: 74 69 6E 67 ; 
000020DA: 20 6D 65 6D ; 
000020DE: 6F 72 79 20 ; 
000020E2: 66 6F 72 20 ; 
000020E6: 6C 6F 61 64 ; 
000020EA: 65 64 20 67 ; 
000020EE: 72 69 64 2E ; 
000020F2: 20 52 65 74 ; 
000020F6: 75 72 69 6E ; 
000020FA: 67 20 74 6F ; 
000020FE: 20 6D 61 69 ; 
00002102: 6E 20 6D 65 ; 
00002106: 6E 75 0A 00 ; 
0000210A: 53 75 63 63 ; loadboardsucmsg defb "Successfully loaded the grid", nl, 0
0000210E: 65 73 73 66 ; 
00002112: 75 6C 6C 79 ; 
00002116: 20 6C 6F 61 ; 
0000211A: 64 65 64 20 ; 
0000211E: 74 68 65 20 ; 
00002122: 67 72 69 64 ; 
00002126: 0A 00       ; 
00002128: 4C 69 73 74 ; listgridmsg     defb "Listing all availible saved grids", nl, 0
0000212C: 69 6E 67 20 ; 
00002130: 61 6C 6C 20 ; 
00002134: 61 76 61 69 ; 
00002138: 6C 69 62 6C ; 
0000213C: 65 20 73 61 ; 
00002140: 76 65 64 20 ; 
00002144: 67 72 69 64 ; 
00002148: 73 0A 00    ; 
0000214B: 2D 2D 2D 2D ; cutoff          defb "-----------------", nl, 0
0000214F: 2D 2D 2D 2D ; 
00002153: 2D 2D 2D 2D ; 
00002157: 2D 2D 2D 2D ; 
0000215B: 2D 0A 00    ; 
0000215E: 5B 5B 61 64 ; helpinfomsg     defb "[[add]]"
00002162: 64 5D 5D    ; 
00002165: 5B 5B 61 64 ; settingsmsg     defb "[[add]]"
00002169: 64 5D 5D    ; 
0000216C: 45 72 72 6F ; changearrverr_m defb "Error invalid value given (1-255) inclusive. Re-enter: ", nl, 0
00002170: 72 20 69 6E ; 
00002174: 76 61 6C 69 ; 
00002178: 64 20 76 61 ; 
0000217C: 6C 75 65 20 ; 
00002180: 67 69 76 65 ; 
00002184: 6E 20 28 31 ; 
00002188: 2D 32 35 35 ; 
0000218C: 29 20 69 6E ; 
00002190: 63 6C 75 73 ; 
00002194: 69 76 65 2E ; 
00002198: 20 52 65 2D ; 
0000219C: 65 6E 74 65 ; 
000021A0: 72 3A 20 0A ; 
000021A4: 00          ; 
000021A5:             ; 
000021A5: 53 65 74 74 ; s_m1            defb "Settings", nl, "|-[0] stepMode_d     - The following 4 settings are the d
000021A9: 69 6E 67 73 ; efault values for the options", nl, "|-[1] slowMode_d", nl, "|-[2] eraseMode_d", nl, "|-[3] Dim
000021AD: 0A 7C 2D 5B ; s_d", nl, 0
000021B1: 30 5D 20 73 ; 
000021B5: 74 65 70 4D ; 
000021B9: 6F 64 65 5F ; 
000021BD: 64 20 20 20 ; 
000021C1: 20 20 2D 20 ; 
000021C5: 54 68 65 20 ; 
000021C9: 66 6F 6C 6C ; 
000021CD: 6F 77 69 6E ; 
000021D1: 67 20 34 20 ; 
000021D5: 73 65 74 74 ; 
000021D9: 69 6E 67 73 ; 
000021DD: 20 61 72 65 ; 
000021E1: 20 74 68 65 ; 
000021E5: 20 64 65 66 ; 
000021E9: 61 75 6C 74 ; 
000021ED: 20 76 61 6C ; 
000021F1: 75 65 73 20 ; 
000021F5: 66 6F 72 20 ; 
000021F9: 74 68 65 20 ; 
000021FD: 6F 70 74 69 ; 
00002201: 6F 6E 73 0A ; 
00002205: 7C 2D 5B 31 ; 
00002209: 5D 20 73 6C ; 
0000220D: 6F 77 4D 6F ; 
00002211: 64 65 5F 64 ; 
00002215: 0A 7C 2D 5B ; 
00002219: 32 5D 20 65 ; 
0000221D: 72 61 73 65 ; 
00002221: 4D 6F 64 65 ; 
00002225: 5F 64 0A 7C ; 
00002229: 2D 5B 33 5D ; 
0000222D: 20 44 69 6D ; 
00002231: 73 5F 64 0A ; 
00002235: 00          ; 
00002236: 7C 2D 5B 34 ; s_m2            defb "|-[4] range          - The range of values that the dims can have (1-255 
0000223A: 5D 20 72 61 ; && range_min < range_max)", nl, 0
0000223E: 6E 67 65 20 ; 
00002242: 20 20 20 20 ; 
00002246: 20 20 20 20 ; 
0000224A: 20 2D 20 54 ; 
0000224E: 68 65 20 72 ; 
00002252: 61 6E 67 65 ; 
00002256: 20 6F 66 20 ; 
0000225A: 76 61 6C 75 ; 
0000225E: 65 73 20 74 ; 
00002262: 68 61 74 20 ; 
00002266: 74 68 65 20 ; 
0000226A: 64 69 6D 73 ; 
0000226E: 20 63 61 6E ; 
00002272: 20 68 61 76 ; 
00002276: 65 20 28 31 ; 
0000227A: 2D 32 35 35 ; 
0000227E: 20 26 26 20 ; 
00002282: 72 61 6E 67 ; 
00002286: 65 5F 6D 69 ; 
0000228A: 6E 20 3C 20 ; 
0000228E: 72 61 6E 67 ; 
00002292: 65 5F 6D 61 ; 
00002296: 78 29 0A 00 ; 
0000229A: 7C 2D 5B 35 ; s_m3            defb "|-[5] Icons          - The characters printed for an alive/dead/ptr cell"
0000229E: 5D 20 49 63 ; ,nl, "`-[6] itters         - The number of itterations in the non-step version before it will w
000022A2: 6F 6E 73 20 ; ait for input", nl, 0
000022A6: 20 20 20 20 ; 
000022AA: 20 20 20 20 ; 
000022AE: 20 2D 20 54 ; 
000022B2: 68 65 20 63 ; 
000022B6: 68 61 72 61 ; 
000022BA: 63 74 65 72 ; 
000022BE: 73 20 70 72 ; 
000022C2: 69 6E 74 65 ; 
000022C6: 64 20 66 6F ; 
000022CA: 72 20 61 6E ; 
000022CE: 20 61 6C 69 ; 
000022D2: 76 65 2F 64 ; 
000022D6: 65 61 64 2F ; 
000022DA: 70 74 72 20 ; 
000022DE: 63 65 6C 6C ; 
000022E2: 0A 60 2D 5B ; 
000022E6: 36 5D 20 69 ; 
000022EA: 74 74 65 72 ; 
000022EE: 73 20 20 20 ; 
000022F2: 20 20 20 20 ; 
000022F6: 20 20 2D 20 ; 
000022FA: 54 68 65 20 ; 
000022FE: 6E 75 6D 62 ; 
00002302: 65 72 20 6F ; 
00002306: 66 20 69 74 ; 
0000230A: 74 65 72 61 ; 
0000230E: 74 69 6F 6E ; 
00002312: 73 20 69 6E ; 
00002316: 20 74 68 65 ; 
0000231A: 20 6E 6F 6E ; 
0000231E: 2D 73 74 65 ; 
00002322: 70 20 76 65 ; 
00002326: 72 73 69 6F ; 
0000232A: 6E 20 62 65 ; 
0000232E: 66 6F 72 65 ; 
00002332: 20 69 74 20 ; 
00002336: 77 69 6C 6C ; 
0000233A: 20 77 61 69 ; 
0000233E: 74 20 66 6F ; 
00002342: 72 20 69 6E ; 
00002346: 70 75 74 0A ; 
0000234A: 00          ; 
0000234B: 7C 2D 5B 37 ; s_m4            defb "|-[7] Drawing erase  - Bool for if when drawing the grid it should erase 
0000234F: 5D 20 44 72 ; the previous one", nl, 0
00002353: 61 77 69 6E ; 
00002357: 67 20 65 72 ; 
0000235B: 61 73 65 20 ; 
0000235F: 20 2D 20 42 ; 
00002363: 6F 6F 6C 20 ; 
00002367: 66 6F 72 20 ; 
0000236B: 69 66 20 77 ; 
0000236F: 68 65 6E 20 ; 
00002373: 64 72 61 77 ; 
00002377: 69 6E 67 20 ; 
0000237B: 74 68 65 20 ; 
0000237F: 67 72 69 64 ; 
00002383: 20 69 74 20 ; 
00002387: 73 68 6F 75 ; 
0000238B: 6C 64 20 65 ; 
0000238F: 72 61 73 65 ; 
00002393: 20 74 68 65 ; 
00002397: 20 70 72 65 ; 
0000239B: 76 69 6F 75 ; 
0000239F: 73 20 6F 6E ; 
000023A3: 65 0A 00    ; 
000023A6: 45 6E 74 65 ; s_m             defb "Enter the index of the setting to edit or -1 to return to the menu (press
000023AA: 72 20 74 68 ;  enter to input): ", 0
000023AE: 65 20 69 6E ; 
000023B2: 64 65 78 20 ; 
000023B6: 6F 66 20 74 ; 
000023BA: 68 65 20 73 ; 
000023BE: 65 74 74 69 ; 
000023C2: 6E 67 20 74 ; 
000023C6: 6F 20 65 64 ; 
000023CA: 69 74 20 6F ; 
000023CE: 72 20 2D 31 ; 
000023D2: 20 74 6F 20 ; 
000023D6: 72 65 74 75 ; 
000023DA: 72 6E 20 74 ; 
000023DE: 6F 20 74 68 ; 
000023E2: 65 20 6D 65 ; 
000023E6: 6E 75 20 28 ; 
000023EA: 70 72 65 73 ; 
000023EE: 73 20 65 6E ; 
000023F2: 74 65 72 20 ; 
000023F6: 74 6F 20 69 ; 
000023FA: 6E 70 75 74 ; 
000023FE: 29 3A 20 00 ; 
00002402: 45 72 72 6F ; s_m_err         defb "Error invalid index. Re-enter: ", 0
00002406: 72 20 69 6E ; 
0000240A: 76 61 6C 69 ; 
0000240E: 64 20 69 6E ; 
00002412: 64 65 78 2E ; 
00002416: 20 52 65 2D ; 
0000241A: 65 6E 74 65 ; 
0000241E: 72 3A 20 00 ; 
00002422:             ; 
00002422: 53 6C 6F 77 ; currentslow     defb "Slow_d: ", 0
00002426: 5F 64 3A 20 ; 
0000242A: 00          ; 
0000242B: 45 72 61 73 ; currenterase    defb "Erase_d: ", 0
0000242F: 65 5F 64 3A ; 
00002433: 20 00       ; 
00002435: 53 74 65 70 ; currentstep     defb "Step_d: ", 0
00002439: 5F 64 3A 20 ; 
0000243D: 00          ; 
0000243E: 44 69 6D 73 ; currentDims     defb "Dims: ", 0
00002442: 3A 20 00    ; 
00002445: 52 61 6E 67 ; currentRange    defb "Range: ", 0
00002449: 65 3A 20 00 ; 
0000244D: 49 74 74 65 ; currentItters   defb "Itters: ", 0
00002451: 72 73 3A 20 ; 
00002455: 00          ; 
00002456: 45 72 61 73 ; currentdraweras defb "Erase when drawing: ", 0
0000245A: 65 20 77 68 ; 
0000245E: 65 6E 20 64 ; 
00002462: 72 61 77 69 ; 
00002466: 6E 67 3A 20 ; 
0000246A: 00          ; 
0000246B: 28 00       ; bracket_open    defb "(", 0
0000246D: 2C 20 00    ; comma_space     defb ", ", 0
00002470: 29 00       ; bracket_close   defb ")", 0
00002472: 41 6C 69 76 ; currenticons_1  defb "Alive: ", 0
00002476: 65 3A 20 00 ; 
0000247A: 44 65 61 64 ; currenticons_2  defb "Dead: ", 0
0000247E: 3A 20 00    ; 
00002481: 50 74 72 3A ; currenticons_3  defb "Ptr: ", 0
00002485: 20 00       ; 
00002487: 45 6E 74 65 ; currenticons_a  defb "Enter 3 character (not seperated) for the values of the alive/dead/ptr ch
0000248B: 72 20 33 20 ; aracters: ", 0
0000248F: 63 68 61 72 ; 
00002493: 61 63 74 65 ; 
00002497: 72 20 28 6E ; 
0000249B: 6F 74 20 73 ; 
0000249F: 65 70 65 72 ; 
000024A3: 61 74 65 64 ; 
000024A7: 29 20 66 6F ; 
000024AB: 72 20 74 68 ; 
000024AF: 65 20 76 61 ; 
000024B3: 6C 75 65 73 ; 
000024B7: 20 6F 66 20 ; 
000024BB: 74 68 65 20 ; 
000024BF: 61 6C 69 76 ; 
000024C3: 65 2F 64 65 ; 
000024C7: 61 64 2F 70 ; 
000024CB: 74 72 20 63 ; 
000024CF: 68 61 72 61 ; 
000024D3: 63 74 65 72 ; 
000024D7: 73 3A 20 00 ; 
000024DB: 45 72 72 6F ; mallocerr_m     defb "Error getting memory from malloc", nl, 0
000024DF: 72 20 67 65 ; 
000024E3: 74 74 69 6E ; 
000024E7: 67 20 6D 65 ; 
000024EB: 6D 6F 72 79 ; 
000024EF: 20 66 72 6F ; 
000024F3: 6D 20 6D 61 ; 
000024F7: 6C 6C 6F 63 ; 
000024FB: 0A 00       ; 
000024FD: 45 72 72 6F ; getstringerr_m  defb "Error getting string, could be malloc error", nl, 0
00002501: 72 20 67 65 ; 
00002505: 74 74 69 6E ; 
00002509: 67 20 73 74 ; 
0000250D: 72 69 6E 67 ; 
00002511: 2C 20 63 6F ; 
00002515: 75 6C 64 20 ; 
00002519: 62 65 20 6D ; 
0000251D: 61 6C 6C 6F ; 
00002521: 63 20 65 72 ; 
00002525: 72 6F 72 0A ; 
00002529: 00          ; 
0000252A: 49 74 74 65 ; currentitter    defb "Itters: ", 0
0000252E: 72 73 3A 20 ; 
00002532: 00          ; 
00002533: 45 6E 74 65 ; currentaskx     defb "Enter value for x: ", 0
00002537: 72 20 76 61 ; 
0000253B: 6C 75 65 20 ; 
0000253F: 66 6F 72 20 ; 
00002543: 78 3A 20 00 ; 
00002547: 45 6E 74 65 ; currentasky     defb "Enter value for y: ", 0
0000254B: 72 20 76 61 ; 
0000254F: 6C 75 65 20 ; 
00002553: 66 6F 72 20 ; 
00002557: 79 3A 20 00 ; 
0000255B: 45 6E 74 65 ; currentasknew   defb "Enter new value: ", 0
0000255F: 72 20 6E 65 ; 
00002563: 77 20 76 61 ; 
00002567: 6C 75 65 3A ; 
0000256B: 20 00       ; 
0000256D: 45 6E 74 65 ; currentasknew_B defb "Enter new value (0 or 1): ", 0
00002571: 72 20 6E 65 ; 
00002575: 77 20 76 61 ; 
00002579: 6C 75 65 20 ; 
0000257D: 28 30 20 6F ; 
00002581: 72 20 31 29 ; 
00002585: 3A 20 00    ; 
00002588: 45 72 72 6F ; currentasknew_E defb "Error invalid re-enter: ", 0
0000258C: 72 20 69 6E ; 
00002590: 76 61 6C 69 ; 
00002594: 64 20 72 65 ; 
00002598: 2D 65 6E 74 ; 
0000259C: 65 72 3A 20 ; 
000025A0: 00          ; 
000025A1: 49 6E 76 61 ; currentarrerr   defb "Invalid value entered re-enter: ", 0
000025A5: 6C 69 64 20 ; 
000025A9: 76 61 6C 75 ; 
000025AD: 65 20 65 6E ; 
000025B1: 74 65 72 65 ; 
000025B5: 64 20 72 65 ; 
000025B9: 2D 65 6E 74 ; 
000025BD: 65 72 3A 20 ; 
000025C1: 00          ; 
000025C2: 49 6E 76 61 ; changearrsizmsg defb "Invalid, x >= y.", nl, 0
000025C6: 6C 69 64 2C ; 
000025CA: 20 78 20 3E ; 
000025CE: 3D 20 79 2E ; 
000025D2: 0A 00       ; 
000025D4: 49 6E 76 61 ; changeittere_m  defb "Invalid itter value. Re-enter: ", nl, 0
000025D8: 6C 69 64 20 ; 
000025DC: 69 74 74 65 ; 
000025E0: 72 20 76 61 ; 
000025E4: 6C 75 65 2E ; 
000025E8: 20 52 65 2D ; 
000025EC: 65 6E 74 65 ; 
000025F0: 72 3A 20 0A ; 
000025F4: 00          ; 
000025F5: 45 6E 74 65 ; getitters_m     defb "Enter the max itterations (1-255): ", 0
000025F9: 72 20 74 68 ; 
000025FD: 65 20 6D 61 ; 
00002601: 78 20 69 74 ; 
00002605: 74 65 72 61 ; 
00002609: 74 69 6F 6E ; 
0000260D: 73 20 28 31 ; 
00002611: 2D 32 35 35 ; 
00002615: 29 3A 20 00 ; 
00002619:             ; 
00002619:             ; ;;debug for heap
00002619: 50 72 69 6E ; printFree_m     defb "Printing free list", nl
0000261D: 74 69 6E 67 ; 
00002621: 20 66 72 65 ; 
00002625: 65 20 6C 69 ; 
00002629: 73 74 0A    ; 
0000262C: 46 6F 75 6E ; printfree_f_m   defb "Found a new free item", nl, 0
00002630: 64 20 61 20 ; 
00002634: 6E 65 77 20 ; 
00002638: 66 72 65 65 ; 
0000263C: 20 69 74 65 ; 
00002640: 6D 0A 00    ; 
00002643: 41 64 64 72 ; printfree_f_mad defb "Address: ", 0
00002647: 65 73 73 3A ; 
0000264B: 20 00       ; 
0000264D: 4E 65 78 74 ; printfree_f_mnx defb "Next   : ", 0
00002651: 20 20 20 3A ; 
00002655: 20 00       ; 
00002657: 50 72 65 76 ; printfree_f_mpr defb "Prev   : ", 0
0000265B: 20 20 20 3A ; 
0000265F: 20 00       ; 
00002661: 53 69 7A 65 ; printfree_f_msz defb "Size   : ", 0
00002665: 20 20 20 3A ; 
00002669: 20 00       ; 
0000266B:             ; 
0000266B: 50 72 69 6E ; printAll_m      defb "Printing all elements in the heap", nl, 0
0000266F: 74 69 6E 67 ; 
00002673: 20 61 6C 6C ; 
00002677: 20 65 6C 65 ; 
0000267B: 6D 65 6E 74 ; 
0000267F: 73 20 69 6E ; 
00002683: 20 74 68 65 ; 
00002687: 20 68 65 61 ; 
0000268B: 70 0A 00    ; 
0000268E: 54 68 69 73 ; printAll_m_f    defb "This is a Free block", nl, 0
00002692: 20 69 73 20 ; 
00002696: 61 20 46 72 ; 
0000269A: 65 65 20 62 ; 
0000269E: 6C 6F 63 6B ; 
000026A2: 0A 00       ; 
000026A4:             ; 
000026A4: 4F 4E 00    ; on_msg          defb "ON", 0
000026A7: 4F 46 46 00 ; off_msg         defb "OFF", 0
000026AB: 2C 00       ; comma           defb ",", 0
000026AD:             ; 
000026B0:             ; align
000026B0: 00000000    ; heapstart       defw 0 ;;points to the end of the data this is where the heap can then begin
000026B4:             ; Remaining literals

Symbol Table: Labels
: max_addr                          00100000  Value
: stack_size                        00010000  Value
: nl                                0000000A  Value
: backspace                         00000008  Value
: minBuffSize                       00000008  Value
: enter                             0000000A  Value
: minSaveSize                       00000008  Value
: sizeofSaveI                       0000000C  Value
: heaphead                          00000004  Local -- ARM
: offsets                           00000008  Local -- ARM
: gridA                             00000048  Local -- ARM
: gridB                             0000004C  Local -- ARM
: erase_b                           00000050  Local -- ARM
: slow_b                            00000051  Local -- ARM
: step_b                            00000052  Local -- ARM
: width                             00000053  Local -- ARM
: height                            00000054  Local -- ARM
: range_min                         00000055  Local -- ARM
: range_max                         00000056  Local -- ARM
: maxitters                         00000057  Local -- ARM
: drawerase                         00000058  Local -- ARM
: alive_c                           00000059  Local -- ARM
: dead_c                            0000005A  Local -- ARM
: ptr_c                             0000005B  Local -- ARM
: erase_b_d                         0000005C  Local -- ARM
: slow_b_d                          0000005D  Local -- ARM
: step_b_d                          0000005E  Local -- ARM
: width_d                           0000005F  Local -- ARM
: height_d                          00000060  Local -- ARM
: _start                            00000064  Local -- ARM
: main                              00000094  Local -- ARM
: mainmenu                          000000C0  Local -- ARM
: mainchoice                        000000D8  Local -- ARM
: showHeap                          00000128  Local -- ARM
: mainloopstart                     00000130  Local -- ARM
: mainloop                          00000164  Local -- ARM
: mainloopcont                      00000188  Local -- ARM
: mainloopdostep                    000001A4  Local -- ARM
: mainloopskipstep                  000001CC  Local -- ARM
: gridFail                          000001F0  Local -- ARM
: mainEnd                           000001FC  Local -- ARM
: mainfree                          0000021C  Local -- ARM
: mainfreeloop                      00000230  Local -- ARM
: mainfreelend                      00000258  Local -- ARM
: mainfreeend                       00000260  Local -- ARM
: settingsmenu                      00000268  Local -- ARM
: changesetting                     00000298  Local -- ARM
: changesettingget                  000002A4  Local -- ARM
: changesettingserr                 000002E0  Local -- ARM
: changesettingscont                000002F0  Local -- ARM
: changearr                         00000338  Local -- ARM
: changearrget                      0000034C  Local -- ARM
: changearrsizeerr                  00000390  Local -- ARM
: changearrset                      000003A0  Local -- ARM
: changearrend                      000003B4  Local -- ARM
: changearrgetvalidint              000003BC  Local -- ARM
: changearrgetvalidintget           000003C0  Local -- ARM
: changearrgetvalidinterr           000003F0  Local -- ARM
: changearrgetvalidintcont          00000404  Local -- ARM
: changearrgetvalidintend           00000414  Local -- ARM
: printdims                         00000420  Local -- ARM
: changestep                        00000474  Local -- ARM
: changeslow                        0000048C  Local -- ARM
: changeerase                       000004A4  Local -- ARM
: changebool                        000004BC  Local -- ARM
: changebool_cont                   000004FC  Local -- ARM
: changebool_set                    00000528  Local -- ARM
: changeboolend                     00000558  Local -- ARM
: changedims                        00000560  Local -- ARM
: changerange                       0000057C  Local -- ARM
: changeicons                       00000598  Local -- ARM
: changeiconsmallerr                000005E4  Local -- ARM
: printicons                        000005F4  Local -- ARM
: printiconsend                     00000648  Local -- ARM
: changeitter                       0000064C  Local -- ARM
: changeitterget                    00000670  Local -- ARM
: changeittererr                    000006B8  Local -- ARM
: changeitterend                    000006CC  Local -- ARM
: changedrawerase                   000006E8  Local -- ARM
: changedraweraseend                00000700  Local -- ARM
: printhelp                         00000704  Local -- ARM
: newboard                          00000718  Local -- ARM
: loadboard                         00000740  Local -- ARM
: loadboardaskindex                 00000754  Local -- ARM
: loadboardindex                    000007B8  Local -- ARM
: loadboardmain                     000007D4  Local -- ARM
: loadboardmallocB                  0000083C  Local -- ARM
: loadboardskipB                    00000858  Local -- ARM
: loadboardmallocfail               00000878  Local -- ARM
: loadboardret                      00000888  Local -- ARM
: loadboardempty                    00000894  Local -- ARM
: loadboarderr                      00000894  Local -- ARM
: loadboardsucc                     00000898  Local -- ARM
: newline                           0000089C  Local -- ARM
: step                              000008A8  Local -- ARM
: stependfail                       00000920  Local -- ARM
: stependsucc                       00000928  Local -- ARM
: stepend                           0000092C  Local -- ARM
: listGrids                         00000934  Local -- ARM
: listGridsLoop                     00000968  Local -- ARM
: listGridsEmpty                    000009FC  Local -- ARM
: listGridsLend                     00000A08  Local -- ARM
: listGridsEnd                      00000A08  Local -- ARM
: saveGrid                          00000A10  Local -- ARM
: saveGridResize                    00000A34  Local -- ARM
: saveGridAdd                       00000A6C  Local -- ARM
: saveGridFailMalloc                00000AD4  Local -- ARM
: saveGridSucc                      00000ADC  Local -- ARM
: saveGridEnd                       00000AE0  Local -- ARM
: erase                             00000AE8  Local -- ARM
: eraseloop                         00000AEC  Local -- ARM
: eraseend                          00000B04  Local -- ARM
: slow                              00000B08  Local -- ARM
: slowloop                          00000B10  Local -- ARM
: slowend                           00000B30  Local -- ARM
: heapclean                         00000B34  Local -- ARM
: heapcleanloop                     00000B50  Local -- ARM
: heapcleanend                      00000B64  Local -- ARM
: strlen                            00000B68  Local -- ARM
: strlenloop                        00000B74  Local -- ARM
: strlenend                         00000B88  Local -- ARM
: strtoi                            00000B90  Local -- ARM
: strtoiloop                        00000BD0  Local -- ARM
: strtoilend                        00000C04  Local -- ARM
: strtoifailminus                   00000C0C  Local -- ARM
: strtoifailoutrange                00000C14  Local -- ARM
: strtoifailnonnum                  00000C1C  Local -- ARM
: strtoiendfail                     00000C20  Local -- ARM
: strtoiendsucc                     00000C28  Local -- ARM
: strtoiend                         00000C2C  Local -- ARM
: memcpy                            00000C34  Local -- ARM
: memcpywordsloop                   00000C5C  Local -- ARM
: memcpywordslend                   00000C74  Local -- ARM
: memcpyallbytes                    00000C84  Local -- ARM
: memcpybytes                       00000C90  Local -- ARM
: memcpybytesloop                   00000C94  Local -- ARM
: memcpybyteslend                   00000CAC  Local -- ARM
: memcpyend                         00000CB0  Local -- ARM
: getstring                         00000CB8  Local -- ARM
: getstringloop                     00000CE4  Local -- ARM
: getstringloopskipsize             00000CF4  Local -- ARM
: skipMax                           00000D08  Local -- ARM
: getstringlcont                    00000D14  Local -- ARM
: getstringresize                   00000D2C  Local -- ARM
: getstringlend                     00000D5C  Local -- ARM
: getstringResizeEnd                00000D68  Local -- ARM
: getstringEnd                      00000D94  Local -- ARM
: tolower                           00000DA8  Local -- ARM
: setupGrid                         00000DB0  Local -- ARM
: setupGridAsk                      00000DF8  Local -- ARM
: setupdrawing                      00000E28  Local -- ARM
: setuprandom                       00000E3C  Local -- ARM
: setupstart                        00000E68  Local -- ARM
: setuprowloop                      00000E6C  Local -- ARM
: setupcolloop                      00000E78  Local -- ARM
: dorandom                          00000E8C  Local -- ARM
: dodrawstart                       00000EA0  Local -- ARM
: dodraw                            00000EB8  Local -- ARM
: dodrawfail                        00000EEC  Local -- ARM
: dodrawsucc                        00000EFC  Local -- ARM
: dodrawsuccskiperase               00000F20  Local -- ARM
: setupcollcont                     00000F28  Local -- ARM
: setupcollend                      00000F38  Local -- ARM
: setuprowlend                      00000F40  Local -- ARM
: setupGridFail                     00000F40  Local -- ARM
: setupGridEnd                      00000F40  Local -- ARM
: drawgrid                          00000F48  Local -- ARM
: drawgridrowloop                   00000F5C  Local -- ARM
: drawgridcolloop                   00000F68  Local -- ARM
: drawgridprintcurrent              00000F94  Local -- ARM
: drawgridcollcont                  00000F9C  Local -- ARM
: drawgridcollend                   00000FAC  Local -- ARM
: drawgridrowlend                   00000FC0  Local -- ARM
: drawgridend                       00000FC8  Local -- ARM
: printoptions                      00000FD0  Local -- ARM
: setupOptions                      00001084  Local -- ARM
: setupOptionsDEnd                  00001130  Local -- ARM
: setupCustom                       0000113C  Local -- ARM
: setupCustomskipslow               00001200  Local -- ARM
: printrange                        00001214  Local -- ARM
: setupCustomDimsCheck              00001258  Local -- ARM
: getwid                            00001270  Local -- ARM
: getwidFail                        000012D4  Local -- ARM
: getheisetup                       000012E8  Local -- ARM
: gethei                            000012F8  Local -- ARM
: getheiFail                        0000135C  Local -- ARM
: customend                         00001370  Local -- ARM
: updategrid                        0000137C  Local -- ARM
: updategridrowloop                 000013A4  Local -- ARM
: updategridcolloop                 000013B0  Local -- ARM
: updatealive                       000013D8  Local -- ARM
: updatedead                        000013F4  Local -- ARM
: updatelcont                       00001404  Local -- ARM
: updategridccollend                0000140C  Local -- ARM
: updategridrowlend                 00001418  Local -- ARM
: updategridend                     00001418  Local -- ARM
: countneighbours                   00001420  Local -- ARM
: countneighboursloop               0000144C  Local -- ARM
: countneighboursskipadd            00001490  Local -- ARM
: countneighbourslend               00001494  Local -- ARM
: countneighboursend                00001494  Local -- ARM
: isinrange                         000014A0  Local -- ARM
: isinrangefail                     000014E4  Local -- ARM
: isinrangeend                      000014E8  Local -- ARM
: setupHeap                         000014EC  Local -- ARM
: malloc                            00001520  Local -- ARM
: mallignend                        0000153C  Local -- ARM
: checkcrate                        00001548  Local -- ARM
: nocrates                          00001568  Local -- ARM
: foundcrate                        00001570  Local -- ARM
: splitcrate                        00001580  Local -- ARM
: usecrate                          000015B4  Local -- ARM
: mallocEnd                         000015C8  Local -- ARM
: free                              000015D0  Local -- ARM
: freeloop                          000015E4  Local -- ARM
: freelend                          00001600  Local -- ARM
: freelendEnd                       00001620  Local -- ARM
: freeMergeCheck                    00001628  Local -- ARM
: verifyLeft                        00001638  Local -- ARM
: verifyRight                       0000164C  Local -- ARM
: merge                             00001660  Local -- ARM
: mergeNew                          00001694  Local -- ARM
: freeEnd                           00001694  Local -- ARM
: printHeap                         0000169C  Local -- ARM
: printHeapend                      000016A8  Local -- ARM
: printAll                          000016B0  Local -- ARM
: printAllLoop                      000016D0  Local -- ARM
: skipFreeInfo                      000016F4  Local -- ARM
: printAllLend                      00001714  Local -- ARM
: printAllEnd                       00001714  Local -- ARM
: printFree                         0000171C  Local -- ARM
: printFreeloop                     00001738  Local -- ARM
: printFreelend                     00001768  Local -- ARM
: printFreeEnd                      00001768  Local -- ARM
: printblock                        00001770  Local -- ARM
: welcomemsg                        00001808  Local -- ARM
: welcome2msg                       00001839  Local -- ARM
: mainchoicefail                    00001878  Local -- ARM
: helpmsg                           00001913  Local -- ARM
: help2msg                          000019D1  Local -- ARM
: mainendmsg                        00001A46  Local -- ARM
: askdefaults                       00001A6D  Local -- ARM
: askerase                          00001A9F  Local -- ARM
: askslow                           00001AB8  Local -- ARM
: askstep                           00001AD0  Local -- ARM
: stepslowwarning                   00001AE8  Local -- ARM
: savedchoice                       00001B35  Local -- ARM
: askname                           00001B60  Local -- ARM
: warneraseslow                     00001B83  Local -- ARM
: askwid                            00001BC1  Local -- ARM
: dash                              00001BD8  Local -- ARM
: b_close_colon                     00001BDA  Local -- ARM
: askhei                            00001BDE  Local -- ARM
: getwidfailmsg                     00001BF5  Local -- ARM
: getheifailmsg                     00001C21  Local -- ARM
: usingDefault                      00001C4E  Local -- ARM
: usingDefWODims                    00001C9A  Local -- ARM
: optionsp_1                        00001CD8  Local -- ARM
: optionsp_2                        00001CF0  Local -- ARM
: optionsp_3                        00001CF3  Local -- ARM
: optionsp_4                        00001CFF  Local -- ARM
: optionsp_5                        00001D0B  Local -- ARM
: mainloopittsmsg                   00001D16  Local -- ARM
: askgenoption                      00001DB6  Local -- ARM
: setupGrdFailmsg                   00001DEF  Local -- ARM
: askseed                           00001E50  Local -- ARM
: drawinfomsg                       00001E7C  Local -- ARM
: drawfailmsg                       00001ED2  Local -- ARM
: gridfailmsg                       00001F0F  Local -- ARM
: gridsavefail                      00001F49  Local -- ARM
: gridloadempty                     00001F81  Local -- ARM
: gridloadpindex                    00001FDC  Local -- ARM
: gridloadpname                     00001FE5  Local -- ARM
: gridloadpwidth                    00001FED  Local -- ARM
: gridloadpheight                   00001FF6  Local -- ARM
: loadboardaski                     00002000  Local -- ARM
: loadboardretmsg                   00002072  Local -- ARM
: loadboardifail                    0000208A  Local -- ARM
: loadboardirerr                    000020AD  Local -- ARM
: loadboardmlcerr                   000020CA  Local -- ARM
: loadboardsucmsg                   0000210A  Local -- ARM
: listgridmsg                       00002128  Local -- ARM
: cutoff                            0000214B  Local -- ARM
: helpinfomsg                       0000215E  Local -- ARM
: settingsmsg                       00002165  Local -- ARM
: changearrverr_m                   0000216C  Local -- ARM
: s_m1                              000021A5  Local -- ARM
: s_m2                              00002236  Local -- ARM
: s_m3                              0000229A  Local -- ARM
: s_m4                              0000234B  Local -- ARM
: s_m                               000023A6  Local -- ARM
: s_m_err                           00002402  Local -- ARM
: currentslow                       00002422  Local -- ARM
: currenterase                      0000242B  Local -- ARM
: currentstep                       00002435  Local -- ARM
: currentDims                       0000243E  Local -- ARM
: currentRange                      00002445  Local -- ARM
: currentItters                     0000244D  Local -- ARM
: currentdraweras                   00002456  Local -- ARM
: bracket_open                      0000246B  Local -- ARM
: comma_space                       0000246D  Local -- ARM
: bracket_close                     00002470  Local -- ARM
: currenticons_1                    00002472  Local -- ARM
: currenticons_2                    0000247A  Local -- ARM
: currenticons_3                    00002481  Local -- ARM
: currenticons_a                    00002487  Local -- ARM
: mallocerr_m                       000024DB  Local -- ARM
: getstringerr_m                    000024FD  Local -- ARM
: currentitter                      0000252A  Local -- ARM
: currentaskx                       00002533  Local -- ARM
: currentasky                       00002547  Local -- ARM
: currentasknew                     0000255B  Local -- ARM
: currentasknew_B                   0000256D  Local -- ARM
: currentasknew_E                   00002588  Local -- ARM
: currentarrerr                     000025A1  Local -- ARM
: changearrsizmsg                   000025C2  Local -- ARM
: changeittere_m                    000025D4  Local -- ARM
: getitters_m                       000025F5  Local -- ARM
: printFree_m                       00002619  Local -- ARM
: printfree_f_m                     0000262C  Local -- ARM
: printfree_f_mad                   00002643  Local -- ARM
: printfree_f_mnx                   0000264D  Local -- ARM
: printfree_f_mpr                   00002657  Local -- ARM
: printfree_f_msz                   00002661  Local -- ARM
: printAll_m                        0000266B  Local -- ARM
: printAll_m_f                      0000268E  Local -- ARM
: on_msg                            000026A4  Local -- ARM
: off_msg                           000026A7  Local -- ARM
: comma                             000026AB  Local -- ARM
: heapstart                         000026B0  Local -- ARM
