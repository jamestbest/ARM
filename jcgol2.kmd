KMD
00000000:             ; ;;  This is my second rendition of JCGOL in ARM assembly for Komodo
00000000:             ; ;;  
00000000:             ; ;;  This will attempt to follow the ARM 32bit calling convention 
00000000:             ; ;;      R0-3 are argument registers, scratch
00000000:             ; ;;      R4-10 are local variable registers and should be saved before use in a function
00000000:             ; ;;      R11 - FP
00000000:             ; ;;      R12 - IPC
00000000:             ; ;;      R13 - SP
00000000:             ; ;;      R14 - LR
00000000:             ; ;;      R15 - PC
00000000:             ; ;;
00000000:             ; ;;  The plan
00000000:             ; ;;  - Create a simple `heap` allocator for the grid and input
00000000:             ; ;;  - Ask the user
00000000:             ; ;;      |-Use default? Y - skip below
00000000:             ; ;;      |-dims of the grid
00000000:             ; ;;      |   `-Will need a way to get a string input and convert to an integer (make sure to cat
                      ; ch -ve)
00000000:             ; ;;      |-slow mode
00000000:             ; ;;      `-erase mode
00000000:             ; ;;  - ask for generation mode
00000000:             ; ;;      |-If random ask for seed
00000000:             ; ;;      |   `-For generation roll the seed to create a pseudorandom value for each `pixel`
00000000:             ; ;;      `-If draw then get them to draw the grid one `pixel` at a time
00000000:             ; ;;  - Allocate two grids, the pointers to which will swap after a frame. One is used to count t
                      ; he neighbours the other for the new cell value.
00000000:             ; ;;  - loop
00000000:             ; ;;      |-count neighbours
00000000:             ; ;;      |-update inactive grid
00000000:             ; ;;      |-swap grids
00000000:             ; ;;      |-draw active grid
00000000:             ; ;;      `-goto loop
00000000:             ; 
00000000:             ; ;;SINGLE STEP mode allows you to save the current state of the board into a list, also give it 
                      ; a name
00000000:             ; ;;At the main menu you can load a saved grid
00000000:             ; 
00000000:             ; ;;Grid info struct
00000000:             ; ;;  - SaveInfoStruct* array
00000000:             ; ;;  - int max size of arr
00000000:             ; ;;  - int current position in arr
00000000:             ; 
00000000:             ; ;;Save info struct
00000000:             ; ;;  -address of grid [4 BYTES]
00000000:             ; ;;  -char* to the name [4 BYTES]
00000000:             ; ;;  -width of grid (1 BYTE)
00000000:             ; ;;  -height of grid (1 BYTE)
00000000:             ; 
00000000:             ; 
00000000:             ; ;;  CURRENT ISSUES/TODOS
00000000:             ; ;;  |-More testing of malloc & free need to be done
00000000:             ; ;;  `-Think about minimising the fragmentation of the heap - find the best free block instead o
                      ; f the first
00000000:             ;   
00000000:             ; max_addr    EQU  0x100000
00000000:             ; stack_size  EQU  0x10000
00000000:             ; nl          EQU  10
00000000:             ; backspace   EQU  8
00000000:             ; minBuffSize EQU  8
00000000:             ; enter       EQU  nl
00000000:             ; minSaveSize EQU  8
00000000:             ; sizeofSaveI EQU  12 ;;10 bytes + 2 bytes of padding to align to 4 byte boundry for arr
00000000:             ; 
00000000: EA000017    ; b _start
00000004:             ; 
00000004:             ; align
00000004:             ; ;;[[note]]
00000004:             ; ;;ldr instructions out of range (for pc-relative offsets?) of ldr (-4096/+4095?) use below
00000004:             ; ;;  adrl Rx, label
00000004:             ; ;;  ldr  Rx, [Rx]
00000004: 00010000    ; heaphead        defw 0x10000 ;;default start changed to addr of heapstart 
00000008:             ; 
00000008:             ; ;;Integer defs
00000008: FFFFFFFF    ; offsets         defw -1,-1,-1,0,-1,1,0,-1,0,1,1,-1,1,0,1,1 ;;[[-1,-1],[-1,0],[-1,1],[0,-1],[0,1
0000000C: FFFFFFFF    ; ],[1,-1],[1,0],[1,1]]
00000010: FFFFFFFF    ; 
00000014: 00000000    ; 
00000018: FFFFFFFF    ; 
0000001C: 00000001    ; 
00000020: 00000000    ; 
00000024: FFFFFFFF    ; 
00000028: 00000000    ; 
0000002C: 00000001    ; 
00000030: 00000001    ; 
00000034: FFFFFFFF    ; 
00000038: 00000001    ; 
0000003C: 00000000    ; 
00000040: 00000001    ; 
00000044: 00000001    ; 
00000048:             ; 
00000048:             ; ;;Grid addresses
00000048: 00000000    ; gridA           defw 0
0000004C: 00000000    ; gridB           defw 0
00000050:             ; 
00000050:             ; ;;options
00000050: 00          ; erase_b         defb 0
00000051: 00          ; slow_b          defb 0
00000052: 00          ; step_b          defb 0
00000053: 12          ; width           defb 18
00000054: 12          ; height          defb 18
00000055: 01          ; range_min       defb 1
00000056: 1E          ; range_max       defb 30
00000057: 19          ; maxitters       defb 25
00000058: 01          ; drawerase       defb 1  ;;Should the draw mode erase previous
00000059:             ; 
00000059: 58          ; alive_c         defb 'X'
0000005A: 2D          ; dead_c          defb '-'
0000005B: 23          ; ptr_c           defb '#'
0000005C:             ; 
0000005C:             ; ;;default options
0000005C: 00          ; erase_b_d       defb 0
0000005D: 00          ; slow_b_d        defb 0
0000005E: 01          ; step_b_d        defb 1
0000005F: 12          ; width_d         defb 18
00000060: 12          ; height_d        defb 18
00000061:             ; 
00000064:             ; align
00000064:             ; 
00000064:             ; _start
00000064:             ;     ;;prepare the stack
00000064: E3A0D601    ;     ldr R13, =max_addr
00000068: E3A0E000    ;     mov R14, #0 ;; allow for `returning` from _start
0000006C: E92D4000    ;     push {R14}
00000070:             ; 
00000070:             ;     ;;[[temp]] clean the heap (zero out)
00000070: EB0002B2    ;     bl heapclean
00000074:             ; 
00000074:             ;     ;;setup heap
00000074: E28F0FAA    ;     adrl R0, heapstart
00000078: E2800B09    ; 
0000007C: E50F0080    ;     str R0, heaphead    ;;place address of last instruction (heapstart label) into the heaphead
                      ;  variable
00000080: EB00051C    ;     bl setupHeap
00000084:             ; 
00000084: EB000002    ;     bl main
00000088:             ; 
00000088: E8BD4000    ;     pop {R14}
0000008C: EF000002    ;     swi 2
00000090: E1A0F00E    ;     mov R15, R14
00000094:             ; 
00000094:             ; main
00000094: E92D4FF0    ;     push {fp, R14, R4-R10} ;;8 registers saved
00000098:             ; 
00000098: E28DB01C    ;     add fp, sp, #28 ;;(r - 1) * 4
0000009C: E24DD010    ;     sub sp, sp, #16 ;;reserve 12 bytes (4 bytes to align?) on the stack for the pointer to the 
                      ; list of saved grids + the maxSize of the array
000000A0:             ; 
000000A0:             ;     ;;The gridInfo struct
000000A0:             ;     ;;set the current position of the pointer
000000A0: E3A00000    ;     mov R0, #0
000000A4: E58D0008    ;     str R0, [sp, #8]
000000A8:             ; 
000000A8:             ;     ;;set the number of elements(save info structs) that can be stored in the array at the mome
                      ; nt
000000A8: E3A00008    ;     ldr R0, =minSaveSize
000000AC: E58D0004    ;     str R0, [sp, #4]
000000B0:             ; 
000000B0:             ;     ;;minsize * sizeof(SaveInfo) = number of bytes needed for the array
000000B0: E3A0100C    ;     ldr R1, =sizeofSaveI
000000B4: E0000190    ;     mul R0, R0, R1
000000B8: EB00051B    ;     bl malloc ;;allocate the array on the heap
000000BC:             ; 
000000BC: E58D0000    ;     str R0, [sp, #0] ;;store the address
000000C0:             ; 
000000C0:             ; mainmenu
000000C0: E28F0FD3    ;     adrl R0, welcomemsg
000000C4: E2800B05    ; 
000000C8: EF000003    ;     swi 3
000000CC:             ; 
000000CC: E28F0071    ;     adrl R0, welcome2msg
000000D0: E2800C17    ; 
000000D4: EF000003    ;     swi 3
000000D8:             ; 
000000D8:             ; mainchoice
000000D8: EF000001    ;     swi 1
000000DC: E3800020    ;     orr R0, R0, #32
000000E0: E1A04000    ;     mov R4, R0
000000E4:             ; 
000000E4:             ;     ;;These should really be functions
000000E4:             ; 
000000E4: E354006E    ;     cmp R4, #'n' ;;new board generation
000000E8: 0A00018D    ;     beq newboard
000000EC:             ; 
000000EC: E354006C    ;     cmp R4, #'l' ;;load a saved board
000000F0: E1A0000D    ;     mov R0, sp ;;load the info ptr
000000F4: 0A000194    ;     beq loadboard
000000F8:             ; 
000000F8: E3540068    ;     cmp R4, #'h'
000000FC: 0A000183    ;     beq printhelp
00000100:             ; 
00000100: E3540073    ;     cmp R4, #'s'
00000104: 0A00005B    ;     beq settingsmenu
00000108:             ; 
00000108: E3540070    ;     cmp R4, #'p'
0000010C: 0A000005    ;     beq showHeap
00000110:             ; 
00000110: E3540071    ;     cmp R4, #'q' ;;quit
00000114: 0A000038    ;     beq mainEnd
00000118:             ; 
00000118: E28F0075    ;     adrl R0, mainchoicefail
0000011C: E2800C17    ; 
00000120: EF000003    ;     swi 3
00000124:             ; 
00000124: EAFFFFEB    ;     b mainchoice
00000128:             ; 
00000128:             ;     ;;R4 will hold the active grid, R5 will hold the passive grid
00000128:             ;     ;;Active is used to count neighbours, passive is used to place updated values in 
00000128:             ;     ;;either can be drawn, just drawn in a different position
00000128:             ; 
00000128:             ; 
00000128:             ; showHeap
00000128: EB00052B    ;     bl printHeap
0000012C:             ; 
0000012C: EAFFFFE3    ;     b mainmenu
00000130:             ; 
00000130:             ; ;;update loop
00000130:             ; ;;    - loop
00000130:             ; ;;      |-count neighbours
00000130:             ; ;;      |-update inactive grid
00000130:             ; ;;      |-swap grids
00000130:             ; ;;      |-draw grid
00000130:             ; ;;      |-[slow?] - slow() - loops for some time to increase waiting time
00000130:             ; ;;      |-[step?] - step() - waits for input, s and q will have effects
00000130:             ; ;;      |-[erase?] - erase() - \b until grid is gone
00000130:             ; ;;      `-goto loop
00000130:             ; mainloopstart
00000130:             ;     ;;load the slow, step, and erase booleans
00000130: E55F60E7    ;     ldrb R6, slow_b
00000134: E55F70EC    ;     ldrb R7, erase_b
00000138: E55F80EE    ;     ldrb R8, step_b
0000013C:             ; 
0000013C: E51F40FC    ;     ldr R4, gridA
00000140: E51F50FC    ;     ldr R5, gridB
00000144:             ; 
00000144:             ;     ;;(width * height) * 2 + 1 + height
00000144: E55F00F9    ;     ldrb R0, width
00000148: E55F10FC    ;     ldrb R1, height
0000014C: E0000190    ;     mul R0, R0, R1
00000150: E1A00080    ;     mov R0, R0, lsl #1
00000154: E2800001    ;     add R0, R0, #1
00000158: E0800001    ;     add R0, R0, R1
0000015C: E1A09000    ;     mov R9, R0      ;;R9 holds the itterations for erase, so it doesn't have to calc it every t
                      ; ime
00000160:             ; 
00000160: E3A0A000    ;     mov R10, #0 ;;This will hold the number of itterations, when it reaches 
00000164:             ; 
00000164:             ; mainloop
00000164: E55F0115    ;     ldrb R0, maxitters ;;run out of registers @-@
00000168: E15A0000    ;     cmp R10, R0
0000016C: E28AA001    ;     add R10, R10, #1
00000170: 1A000004    ;     bne mainloopcont
00000174:             ; 
00000174: E3A0A000    ;     mov R10, #0
00000178:             ; 
00000178: E28F00C9    ;     adrl R0, mainloopittsmsg
0000017C: E2800C1B    ; 
00000180: EF000003    ;     swi 3
00000184:             ; 
00000184: EA000006    ;     b mainloopdostep
00000188:             ; 
00000188:             ; mainloopcont
00000188: E1A00004    ;     mov R0, R4
0000018C: E1A01005    ;     mov R1, R5
00000190: EB00047C    ;     bl updategrid
00000194:             ; 
00000194: E1A00004    ;     mov R0, R4
00000198: EB00036D    ;     bl drawgrid
0000019C:             ; 
0000019C: E3580001    ;     cmp R8, #1
000001A0: 1A000009    ;     bne mainloopskipstep
000001A4:             ; 
000001A4:             ; mainloopdostep
000001A4: E1A0000D    ;     mov R0, sp
000001A8: E1A01004    ;     mov R1, R4 ;;give the active grid
000001AC: EB0001C0    ;     bl step
000001B0: E3500000    ;     cmp R0, #0
000001B4: 0A000004    ;     beq mainloopskipstep
000001B8:             ;     
000001B8:             ;     ;;If R0 is #1 then free and go to the main menu
000001B8:             ;     ;;free the current grid
000001B8: E51F0178    ;     ldr R0, gridA
000001BC: EB000563    ;     bl free
000001C0: E51F017C    ;     ldr R0, gridB
000001C4: EB000561    ;     bl free
000001C8:             ; 
000001C8: EAFFFFBC    ;     b mainmenu
000001CC:             ; 
000001CC:             ; mainloopskipstep
000001CC: E3560001    ;     cmp R6, #1
000001D0: 0B00024F    ;     bleq slow
000001D4:             ; 
000001D4: E3570001    ;     cmp R7, #1
000001D8: 01A00009    ;     moveq R0, R9
000001DC: 0B000244    ;     bleq erase
000001E0:             ; 
000001E0: E1A00004    ;     mov R0, R4
000001E4: E1A04005    ;     mov R4, R5
000001E8: E1A05000    ;     mov R5, R0 ;;SWAP the active and passive
000001EC:             ; 
000001EC: EAFFFFDC    ;     b mainloop
000001F0:             ; 
000001F0:             ; gridFail
000001F0: E28F004A    ;     adrl R0, gridfailmsg
000001F4: E2800C1D    ; 
000001F8: EF000003    ;     swi 3
000001FC:             ; 
000001FC:             ; mainEnd
000001FC:             ;     ;;[[todo]]need to free all of the memory, saved grids (grids + names) + current grids
000001FC:             ; 
000001FC: E28F0075    ;     adrl R0, mainendmsg
00000200: E2800B06    ; 
00000204: EF000003    ;     swi 3
00000208:             ; 
00000208: E1A0000D    ;     mov R0, sp
0000020C: EB000006    ;     bl mainfree
00000210:             ; 
00000210: E28F00D6    ;     adrl R0, printHeap_end_m
00000214: E2800B09    ; 
00000218: EF000003    ;     swi 3
0000021C:             ; 
0000021C: EB0004EE    ;     bl printHeap
00000220:             ; 
00000220: E24BD018    ;     sub sp, fp, #24 ;;???
00000224: E8BD47F0    ;     pop {R14, R4-R10}
00000228: E1A0F00E    ;     mov R15, R14
0000022C:             ; 
0000022C:             ; mainfree
0000022C:             ; ;;INP in R0 is the saveInfoStruct
0000022C:             ; ;;OUT --
0000022C:             ; ;;free all of the memory that we used i.e. any saved grids, saved grid names, and the arr of sa
                      ; ved grids
0000022C: E92D41F0    ;     push {R14, R4-R8}
00000230:             ; 
00000230: E5905008    ;     ldr R5, [R0, #8] ;;get the current index this is the number of elements in the arr
00000234: E5906000    ;     ldr R6, [R0, #0] ;;This is the array address
00000238: E3A0700C    ;     ldr R7, =sizeofSaveI
0000023C:             ; 
0000023C: E3A04000    ;     mov R4, #0
00000240:             ; mainfreeloop
00000240:             ;     ;;loop through the savedGrids
00000240: E1540005    ;     cmp R4, R5
00000244: 0A000007    ;     beq mainfreelend
00000248:             ; 
00000248: E0286794    ;     mla R8, R4, R7, R6
0000024C: E5980000    ;     ldr R0, [R8, #0] ;;get the address of the grid
00000250: E5988004    ;     ldr R8, [R8, #4] ;;get the address of the char*
00000254:             ; 
00000254: EB00053D    ;     bl free
00000258:             ; 
00000258: E1A00008    ;     mov R0, R8
0000025C: EB00053B    ;     bl free
00000260:             ; 
00000260: E2844001    ;     add R4, R4, #1
00000264: EAFFFFF5    ;     b mainfreeloop
00000268:             ; 
00000268:             ; mainfreelend
00000268:             ;     ;;free the array
00000268: E1A00006    ;     mov R0, R6
0000026C: EB000537    ;     bl free
00000270:             ; 
00000270:             ; mainfreeend
00000270: E8BD41F0    ;     pop {R14, R4-R8}
00000274: E1A0F00E    ;     mov R15, R14
00000278:             ; 
00000278:             ;     ;;Save info struct
00000278:             ; ;;  -address of grid [4 BYTES]
00000278:             ; ;;  -char* to the name [4 BYTES]
00000278:             ; ;;  -width of grid (1 BYTE)
00000278:             ; ;;  -height of grid (1 BYTE)
00000278:             ; 
00000278:             ; settingsmenu
00000278:             ; ;;https://media.giphy.com/media/jOpLbiGmHR9S0/giphy.gif
00000278:             ; ;;I think there's a limit on the defined string length
00000278: E28F0FD6    ;     adrl R0, s_m1
0000027C: E2800B07    ; 
00000280: EF000003    ;     swi 3
00000284:             ; 
00000284: E28F00DD    ;     adrl R0, s_m2
00000288: E2800C1F    ; 
0000028C: EF000003    ;     swi 3
00000290:             ;     
00000290: E28F0035    ;     adrl R0, s_m3
00000294: E2800A02    ; 
00000298: EF000003    ;     swi 3
0000029C:             ; 
0000029C: E28F00DA    ;     adrl R0, s_m4
000002A0: E2800A02    ; 
000002A4: EF000003    ;     swi 3
000002A8:             ; 
000002A8:             ; changesetting
000002A8: E28F0029    ;     adrl R0, s_m
000002AC: E2800C21    ; 
000002B0: EF000003    ;     swi 3
000002B4:             ; 
000002B4:             ; changesettingget
000002B4: E3A0000A    ;     ldr R0, =enter
000002B8: E3A01002    ;     mov R1, #2
000002BC: E3A02001    ;     mov R2, #1
000002C0: EB00027F    ;     bl getstring
000002C4:             ; 
000002C4: E1A05000    ;     mov R5, R0
000002C8:             ; 
000002C8: EB000233    ;     bl strtoi
000002CC:             ; 
000002CC: E1A04000    ;     mov R4, R0
000002D0: E1A06001    ;     mov R6, R1
000002D4: E1A00005    ;     mov R0, R5
000002D8:             ; 
000002D8: EB00051C    ;     bl free
000002DC:             ; 
000002DC: EB000171    ;     bl newline
000002E0:             ; 
000002E0: E3560001    ;     cmp R6, #1
000002E4: 0AFFFF75    ;     beq mainmenu
000002E8:             ; 
000002E8: E3560000    ;     cmp R6, #0
000002EC: 0A000003    ;     beq changesettingscont
000002F0:             ; 
000002F0:             ; changesettingserr
000002F0: E28F003D    ;     adrl R0, s_m_err
000002F4: E2800C21    ; 
000002F8: EF000003    ;     swi 3
000002FC:             ; 
000002FC: EAFFFFEC    ;     b changesettingget
00000300:             ; 
00000300:             ; changesettingscont
00000300: E3540007    ;     cmp R4, #7
00000304: CAFFFFF9    ;     bgt changesettingserr
00000308:             ; 
00000308:             ;     ;;now we have the index we can print the current value and prompt for a new one then loop b
                      ; ack up to the getsetting
00000308: E3540000    ;     cmp R4, #0
0000030C: 0A00005C    ;     beq changestep
00000310:             ; 
00000310: E3540001    ;     cmp R4, #1
00000314: 0A000060    ;     beq changeslow
00000318:             ; 
00000318: E3540002    ;     cmp R4, #2
0000031C: 0A000064    ;     beq changeerase
00000320:             ; 
00000320: E3540003    ;     cmp R4, #3
00000324: 0A000090    ;     beq changedims
00000328:             ; 
00000328: E3540004    ;     cmp R4, #4
0000032C: 0A000095    ;     beq changerange
00000330:             ; 
00000330: E3540005    ;     cmp R4, #5
00000334: 0A00009A    ;     beq changeicons
00000338:             ; 
00000338: E3540006    ;     cmp R4, #6
0000033C: 0A0000C5    ;     beq changeitter
00000340:             ; 
00000340: E3540007    ;     cmp R4, #7
00000344: 0A0000EA    ;     beq changedrawerase
00000348:             ; 
00000348:             ; changearr
00000348:             ; ;;generic for changedims and change range
00000348:             ; ;;INP in R0 is addr. for x
00000348:             ; ;;INP in R1 is addr. for y
00000348:             ; ;;INP in R2 is boolean for require x < y. 1 for require
00000348: E92D41F0    ;     push {R14, R4-R8}
0000034C:             ; 
0000034C: E1A06000    ;     mov R6, R0
00000350: E1A07001    ;     mov R7, R1
00000354: E1A08002    ;     mov R8, R2
00000358:             ; 
00000358: EB000034    ;     bl printdims
0000035C:             ; 
0000035C:             ; changearrget
0000035C: E28F0002    ;     adrl R0, currentaskx
00000360: E2800C22    ; 
00000364: EF000003    ;     swi 3
00000368:             ; 
00000368: EB000017    ;     bl changearrgetvalidint
0000036C: E1A04000    ;     mov R4, R0
00000370:             ; 
00000370: EB00014C    ;     bl newline
00000374:             ; 
00000374: E28F00FE    ;     adrl R0, currentasky
00000378: E2800C21    ; 
0000037C: EF000003    ;     swi 3
00000380:             ; 
00000380: EB000011    ;     bl changearrgetvalidint
00000384: E1A05000    ;     mov R5, R0
00000388:             ; 
00000388: EB000146    ;     bl newline
0000038C:             ; 
0000038C: E3580001    ;     cmp R8, #1
00000390: 1A000006    ;     bne changearrset
00000394:             ; 
00000394: E1540005    ;     cmp R4, R5
00000398: AA000000    ;     bge changearrsizeerr
0000039C:             ; 
0000039C: EA000003    ;     b changearrset
000003A0:             ; 
000003A0:             ; changearrsizeerr
000003A0: E28F004D    ;     adrl R0, changearrsizmsg
000003A4: E2800C22    ; 
000003A8: EF000003    ;     swi 3
000003AC:             ; 
000003AC: EAFFFFEA    ;     b changearrget
000003B0:             ; 
000003B0:             ; changearrset
000003B0:             ;     ;;now we have the two valid values so str them back
000003B0: E5464000    ;     strb R4, [R6]
000003B4: E5475000    ;     strb R5, [R7] 
000003B8:             ; 
000003B8: E1A00006    ;     mov R0, R6
000003BC: E1A01007    ;     mov R1, R7
000003C0:             ; 
000003C0: EB00001A    ;     bl printdims
000003C4:             ; 
000003C4:             ; changearrend
000003C4: E8BD41F0    ;     pop {R14, R4-R8}
000003C8: E1A0F00E    ;     mov R15, R14
000003CC:             ; 
000003CC:             ; ;;And you thought the naming couldn't get worse \(*0*)/
000003CC:             ; changearrgetvalidint ;;basically an inner function
000003CC:             ; ;;INP --
000003CC:             ; ;;OUT in R0 is the gotten value
000003CC: E92D41F0    ;     push {R14, R4-R8}
000003D0:             ; changearrgetvalidintget
000003D0: E3A0000A    ;     ldr R0, =enter
000003D4: E3A01003    ;     mov R1, #3
000003D8: E3A02001    ;     mov R2, #1
000003DC: EB000238    ;     bl getstring
000003E0:             ; 
000003E0: E1A04000    ;     mov R4, R0 ;;save the string to free
000003E4:             ; 
000003E4: EB0001EC    ;     bl strtoi
000003E8:             ; 
000003E8: E1A05000    ;     mov R5, R0 ;;save the int value
000003EC: E1A06001    ;     mov R6, R1 ;;save err code
000003F0:             ; 
000003F0: E1A00004    ;     mov R0, R4
000003F4: EB0004D5    ;     bl free
000003F8:             ; 
000003F8: E3560000    ;     cmp R6, #0
000003FC: 0A000004    ;     beq changearrgetvalidintcont
00000400:             ; 
00000400:             ; changearrgetvalidinterr
00000400: EB000128    ;     bl newline
00000404:             ; 
00000404: E28F0093    ;     adrl R0, changearrverr_m
00000408: E2800C1D    ; 
0000040C: EF000003    ;     swi 3
00000410:             ; 
00000410: EAFFFFEE    ;     b changearrgetvalidintget
00000414:             ; 
00000414:             ; changearrgetvalidintcont
00000414:             ;     ;;we now have an int value, need to do bounds checks
00000414: E3550000    ;     cmp R5, #0
00000418: DAFFFFF8    ;     ble changearrgetvalidinterr
0000041C:             ; 
0000041C: E35500FF    ;     cmp R5, #255
00000420: CAFFFFF6    ;     bgt changearrgetvalidinterr
00000424:             ; 
00000424:             ; changearrgetvalidintend
00000424: E1A00005    ;     mov R0, R5
00000428:             ; 
00000428: E8BD41F0    ;     pop {R14, R4-R8}
0000042C: E1A0F00E    ;     mov R15, R14
00000430:             ; 
00000430:             ; printdims
00000430:             ; ;;INP in R0 is addr. for x
00000430:             ; ;;INP in R1 is addr. for y
00000430:             ; ;;(_, _)
00000430:             ;     
00000430: E1A02000    ;     mov R2, R0
00000434: E1A03001    ;     mov R3, R1
00000438:             ; 
00000438: E28F0031    ;     adrl R0, currentDims
0000043C: E2800A02    ; 
00000440: EF000003    ;     swi 3
00000444:             ; 
00000444: E28F0052    ;     adrl R0, bracket_open
00000448: E2800A02    ; 
0000044C: EF000003    ;     swi 3
00000450:             ; 
00000450: E5520000    ;     ldrb R0, [R2]
00000454: EF000004    ;     swi 4
00000458:             ; 
00000458: E28F0D81    ;     adrl R0, comma_space
0000045C: E2800000    ; 
00000460: EF000003    ;     swi 3
00000464:             ; 
00000464: E5530000    ;     ldrb R0, [R3]
00000468: EF000004    ;     swi 4
0000046C:             ; 
0000046C: E28F002F    ;     adrl R0, bracket_close
00000470: E2800A02    ; 
00000474: EF000003    ;     swi 3
00000478:             ; 
00000478: E3A0000A    ;     ldr R0, =nl
0000047C: EF000000    ;     swi 0
00000480:             ; 
00000480: E1A0F00E    ;     mov R15, R14
00000484:             ; 
00000484:             ; changestep
00000484: E24F002E    ;     adrl R0, step_b_d
00000488: E2400B01    ; 
0000048C: E28F1FF5    ;     adrl R1, currentstep
00000490: E2811B07    ; 
00000494:             ; 
00000494: EB00000B    ;     bl changebool
00000498:             ; 
00000498: EAFFFF82    ;     b changesetting
0000049C:             ; 
0000049C:             ; changeslow
0000049C: E24F0047    ;     adrl R0, slow_b_d
000004A0: E2400B01    ; 
000004A4: E28F10A9    ;     adrl R1, currentslow
000004A8: E2811C1F    ; 
000004AC:             ; 
000004AC: EB000005    ;     bl changebool
000004B0:             ; 
000004B0: EAFFFF7C    ;     b changesetting
000004B4:             ; 
000004B4:             ; changeerase
000004B4: E24F0E46    ;     adrl R0, erase_b_d
000004B8: E28F109E    ;     adrl R1, currenterase
000004BC: E2811C1F    ; 
000004C0:             ; 
000004C0: EB000000    ;     bl changebool
000004C4:             ; 
000004C4: EAFFFF77    ;     b changesetting
000004C8:             ; 
000004C8:             ; changebool
000004C8:             ; ;;INP in R0 is the address of ___b_d
000004C8:             ; ;;INP in R1 is the address of the printing name
000004C8:             ; ;;OUT --
000004C8: E92D41F0    ;     push {R14, R4-R8}
000004CC:             ; 
000004CC: E1A04000    ;     mov R4, R0
000004D0: E1A05001    ;     mov R5, R1
000004D4:             ; 
000004D4: E1A00001    ;     mov R0, R1
000004D8: EF000003    ;     swi 3
000004DC:             ; 
000004DC: E5540000    ;     ldrb R0, [R4]
000004E0: E3500001    ;     cmp R0, #1
000004E4: 128F0031    ;     adrlne R0, off_msg
000004E8: 12800C22    ; 
000004EC: 028F0026    ;     adrleq R0, on_msg
000004F0: 02800C22    ; 
000004F4: EF000003    ;     swi 3
000004F8:             ; 
000004F8: EB0000EA    ;     bl newline
000004FC:             ; 
000004FC: E28F009C    ;     adrl R0, currentasknew_B
00000500: E2800A02    ; 
00000504: EF000003    ;     swi 3
00000508:             ; 
00000508:             ; changebool_cont
00000508: EF000001    ;     swi 1
0000050C:             ; 
0000050C: E2400030    ;     sub R0, R0, #48
00000510: E3500001    ;     cmp R0, #1
00000514: 0A000006    ;     beq changebool_set
00000518: E3500000    ;     cmp R0, #0
0000051C: 0A000004    ;     beq changebool_set
00000520:             ; 
00000520: EB0000E0    ;     bl newline
00000524:             ; 
00000524: E28F008F    ;     adrl R0, currentasknew_E
00000528: E2800A02    ; 
0000052C: EF000003    ;     swi 3
00000530:             ; 
00000530: EAFFFFF4    ;     b changebool_cont
00000534:             ; 
00000534:             ; changebool_set
00000534: E5440000    ;     strb R0, [R4]
00000538:             ; 
00000538: EB0000DA    ;     bl newline
0000053C:             ; 
0000053C: E1A00005    ;     mov R0, R5
00000540: EF000003    ;     swi 3
00000544:             ; 
00000544: E5540000    ;     ldrb R0, [R4]
00000548: E3500001    ;     cmp R0, #1
0000054C: 128F00C9    ;     adrlne R0, off_msg
00000550: 12800C21    ; 
00000554: 028F00BE    ;     adrleq R0, on_msg
00000558: 02800C21    ; 
0000055C: EF000003    ;     swi 3
00000560:             ; 
00000560: EB0000D0    ;     bl newline
00000564:             ; 
00000564:             ; changeboolend
00000564: E8BD41F0    ;     pop {R14, R4-R8}
00000568: E1A0F00E    ;     mov R15, R14
0000056C:             ; 
0000056C:             ; changedims
0000056C:             ; ;;INP in R0 is addr. for x
0000056C:             ; ;;INP in R1 is addr. for y
0000056C:             ; ;;INP in R2 is boolean for require x < y. 1 for require
0000056C: E24F0015    ;     adrl R0, width_d
00000570: E2400C05    ; 
00000574: E24F1F47    ;     adrl R1, height_d
00000578: E2411B01    ; 
0000057C: E3A02000    ;     mov R2, #0
00000580: EBFFFF70    ;     bl changearr
00000584:             ; 
00000584: EAFFFF47    ;     b changesetting
00000588:             ; 
00000588:             ; changerange
00000588: E24F003B    ;     adrl R0, range_min
0000058C: E2400C05    ; 
00000590: E24F1042    ;     adrl R1, range_max
00000594: E2411C05    ; 
00000598: E3A02001    ;     mov R2, #1
0000059C: EBFFFF69    ;     bl changearr
000005A0:             ; 
000005A0: EAFFFF40    ;     b changesetting
000005A4:             ; 
000005A4:             ; changeicons
000005A4:             ; ;;print the current icons, ask for 3 characters in sequence for alive/dead/ptr
000005A4: EB000015    ;     bl printicons
000005A8:             ; 
000005A8: E28F000A    ;     adrl R0, currenticons_a
000005AC: E2800C1F    ; 
000005B0: EF000003    ;     swi 3
000005B4:             ; 
000005B4: E3A00000    ;     mov R0, #0
000005B8: E3A01003    ;     mov R1, #3
000005BC: E3A02001    ;     mov R2, #1
000005C0: EB0001BF    ;     bl getstring
000005C4:             ; 
000005C4: E3500000    ;     cmp R0, #0
000005C8: 0A000008    ;     beq changeiconsmallerr
000005CC:             ; 
000005CC: E5D01000    ;     ldrb R1, [R0, #0]
000005D0: E5D02001    ;     ldrb R2, [R0, #1]
000005D4: E5D03002    ;     ldrb R3, [R0, #2]
000005D8:             ; 
000005D8: E54F1587    ;     strb R1, alive_c
000005DC: E54F258A    ;     strb R2, dead_c
000005E0: E54F358D    ;     strb R3, ptr_c
000005E4:             ; 
000005E4: EB0000AF    ;     bl newline
000005E8:             ; 
000005E8: EB000004    ;     bl printicons
000005EC:             ; 
000005EC: EAFFFF2D    ;     b changesetting
000005F0:             ; 
000005F0:             ; changeiconsmallerr
000005F0: E28F0FCE    ;     adrl R0, getstringerr_m
000005F4: E2800B07    ; 
000005F8: EF000003    ;     swi 3
000005FC:             ; 
000005FC: EAFFFF29    ;     b changesetting
00000600:             ; 
00000600:             ; printicons
00000600:             ; ;;INP --
00000600:             ; ;;OUT --
00000600: E28F009D    ;     adrl R0, currenticons_1
00000604: E2800C1E    ; 
00000608: EF000003    ;     swi 3
0000060C:             ; 
0000060C: E55F05BB    ;     ldrb R0, alive_c
00000610: EF000000    ;     swi 0
00000614:             ; 
00000614: E3A0000A    ;     ldr R0, =nl
00000618: EF000000    ;     swi 0
0000061C:             ; 
0000061C: E28F0089    ;     adrl R0, currenticons_2
00000620: E2800C1E    ; 
00000624: EF000003    ;     swi 3
00000628:             ; 
00000628: E55F05D6    ;     ldrb R0, dead_c
0000062C: EF000000    ;     swi 0
00000630:             ; 
00000630: E3A0000A    ;     ldr R0, =nl
00000634: EF000000    ;     swi 0
00000638:             ; 
00000638: E28F0F9D    ;     adrl R0, currenticons_3
0000063C: E2800B07    ; 
00000640: EF000003    ;     swi 3
00000644:             ; 
00000644: E55F05F1    ;     ldrb R0, ptr_c
00000648: EF000000    ;     swi 0
0000064C:             ; 
0000064C: E3A0000A    ;     ldr R0, =nl
00000650: EF000000    ;     swi 0
00000654:             ; 
00000654:             ; printiconsend
00000654: E1A0F00E    ;     mov R15, R14
00000658:             ; 
00000658:             ; changeitter
00000658: E28F0EE2    ;     adrl R0, currentItters
0000065C: E2800A01    ; 
00000660: EF000003    ;     swi 3
00000664:             ; 
00000664: E55F0615    ;     ldrb R0, maxitters
00000668: EF000004    ;     swi 4
0000066C:             ; 
0000066C: EB00008D    ;     bl newline
00000670:             ; 
00000670: E28F0EFB    ;     adrl R0, getitters_m
00000674: E2800A01    ; 
00000678: EF000003    ;     swi 3
0000067C:             ; 
0000067C:             ; changeitterget
0000067C: E3A0000A    ;     ldr R0, =enter
00000680: E3E01000    ;     mov R1, #-1
00000684: E3A02001    ;     mov R2, #1
00000688: EB00018D    ;     bl getstring
0000068C:             ; 
0000068C: E1A04000    ;     mov R4, R0
00000690:             ; 
00000690: EB000141    ;     bl strtoi
00000694: E1A03000    ;     mov R3, R0
00000698:             ; 
00000698: E1A05000    ;     mov R5, R0
0000069C: E1A06001    ;     mov R6, R1
000006A0:             ; 
000006A0: E1A00004    ;     mov R0, R4
000006A4: EB000429    ;     bl free
000006A8:             ; 
000006A8: EB00007E    ;     bl newline
000006AC:             ; 
000006AC: E3560000    ;     cmp R6, #0
000006B0: 1A000003    ;     bne changeittererr
000006B4:             ; 
000006B4: E24F0065    ;     adrl R0, maxitters
000006B8: E2400C06    ; 
000006BC: E5405000    ;     strb R5, [R0]
000006C0:             ; 
000006C0: EA000004    ;     b changeitterend
000006C4:             ; 
000006C4:             ; changeittererr
000006C4: EB000077    ;     bl newline
000006C8:             ; 
000006C8: E28F0037    ;     adrl R0, changeittere_m
000006CC: E2800C1F    ; 
000006D0: EF000003    ;     swi 3
000006D4: EAFFFFE8    ;     b changeitterget
000006D8:             ; changeitterend
000006D8: E28F0EDA    ;     adrl R0, currentItters
000006DC: E2800A01    ; 
000006E0: EF000003    ;     swi 3
000006E4:             ; 
000006E4: E55F0695    ;     ldrb R0, maxitters
000006E8: EF000004    ;     swi 4
000006EC:             ; 
000006EC: EB00006D    ;     bl newline
000006F0:             ; 
000006F0: EAFFFEEC    ;     b changesetting
000006F4:             ; 
000006F4:             ; changedrawerase
000006F4: E24F0FA9    ;     adrl R0, drawerase
000006F8: E2400B01    ; 
000006FC: E28F1085    ;     adrl R1, currentdraweras
00000700: E2811C1D    ; 
00000704: EBFFFF6F    ;     bl changebool
00000708:             ; 
00000708: EAFFFEE6    ;     b changesetting
0000070C:             ; 
0000070C:             ; changedraweraseend
0000070C: EAFFFEE5    ;     b changesetting
00000710:             ; 
00000710:             ; printhelp
00000710: E28F0079    ;     adrl R0, helpinfomsg
00000714: E2800C1A    ; 
00000718: EF000003    ;     swi 3
0000071C:             ; 
0000071C: EF000001    ;     swi 1
00000720:             ; 
00000720: EAFFFE66    ;     b mainmenu
00000724:             ; 
00000724:             ; newboard
00000724: E3A00001    ;     mov R0, #1;;should get dims
00000728: EB000258    ;     bl setupOptions
0000072C:             ; 
0000072C: EB0001A2    ;     bl setupGrid
00000730:             ;     
00000730: E51F46F0    ;     ldr R4, gridA
00000734: E51F56F0    ;     ldr R5, gridB
00000738:             ; 
00000738: E3540000    ;     cmp R4, #0
0000073C: 0AFFFEAB    ;     beq gridFail
00000740: E3550000    ;     cmp R5, #0
00000744: 0AFFFEA9    ;     beq gridFail
00000748:             ; 
00000748: EAFFFE78    ;     b mainloopstart
0000074C:             ; 
0000074C:             ; loadboard
0000074C:             ; ;;INP in R0 is the ptr to the SaveInfoHeader struct i.e. ptr to arr, current pos, max size
0000074C:             ; ;;RET in R0 0 for success in which case go to main loop, n/0 for err in which case return to ma
                      ; in menu
0000074C:             ; ;;display the saved grids
0000074C:             ; ;;ask for the index
0000074C:             ; ;;load the grids with the saved info
0000074C:             ; ;;ask the user for the settings
0000074C: E1A04000    ;     mov R4, R0 ;;save the struct ptr
00000750:             ; 
00000750:             ;     ;;pass ptr to listgrids
00000750: EB00007A    ;     bl listGrids
00000754:             ; 
00000754: E5940008    ;     ldr R0, [R4, #8] ;;get the current position
00000758: E3500000    ;     cmp R0, #0
0000075C: 0A00004F    ;     beq loadboardempty
00000760:             ; 
00000760:             ; loadboardaskindex
00000760:             ;     ;;The grid has now been printed out we need to get the index to load
00000760: E28F00CB    ;     adrl R0, loadboardaski
00000764: E2800B06    ; 
00000768: EF000003    ;     swi 3
0000076C:             ; 
0000076C: E3A0000A    ;     ldr R0, =enter
00000770: E3E01000    ;     mov R1, #-1
00000774: E3A02001    ;     mov R2, #1
00000778: EB000151    ;     bl getstring
0000077C: E1A05000    ;     mov R5, R0
00000780:             ; 
00000780: EB000048    ;     bl newline
00000784:             ; 
00000784: E1A00005    ;     mov R0, R5
00000788: EB000103    ;     bl strtoi
0000078C: E1A06000    ;     mov R6, R0
00000790: E1A07001    ;     mov R7, R1
00000794:             ;     ;;ERR codes
00000794:             ;     ;;  0 is success
00000794:             ;     ;;  1 is attempted -ve
00000794:             ;     ;;  2 is use of non-numeric characters
00000794:             ;     ;;  3 is value out of range of integer
00000794:             ;     ;;  4 is null string given
00000794:             ; 
00000794: E1A00005    ;     mov R0, R5
00000798: EB0003EC    ;     bl free
0000079C:             ; 
0000079C: E1A00006    ;     mov R0, R6
000007A0: E1A01007    ;     mov R1, R7
000007A4:             ; 
000007A4: E3510001    ;     cmp R1, #1
000007A8: 0A000039    ;     beq loadboardret
000007AC:             ; 
000007AC: E3510000    ;     cmp R1, #0
000007B0: 0A000003    ;     beq loadboardindex
000007B4:             ; 
000007B4: E28F0001    ;     adrl R0, loadboardifail
000007B8: E2800C19    ; 
000007BC: EF000003    ;     swi 3
000007C0:             ; 
000007C0: EAFFFFE6    ;     b loadboardaskindex
000007C4:             ; 
000007C4:             ; loadboardindex
000007C4:             ; ;;we now have an index lets check if its in range and then load the board
000007C4:             ;     ;;should be +ve so don't need to check < 0
000007C4: E5941008    ;     ldr R1, [R4, #8] ;;get the current position, this is where things get added so index < curr
                      ; entposition
000007C8: E1500001    ;     cmp R0, R1
000007CC: BA000003    ;     blt loadboardmain
000007D0:             ; 
000007D0: E28F0F42    ;     adrl R0, loadboardirerr
000007D4: E2800B06    ; 
000007D8: EF000003    ;     swi 3
000007DC: EAFFFFDF    ;     b loadboardaskindex
000007E0:             ; 
000007E0:             ; loadboardmain
000007E0:             ; ;;now we know that the index is valid we can load the grid
000007E0:             ; ;;
000007E0:             ; ;;need to free current grid
000007E0:             ; ;;need to create a copy of the snapshot and set gridA to it 
000007E0:             ; ;;return to main menu
000007E0: E5941000    ;     ldr R1, [R4, #0] ;;get the array of grids
000007E4: E3A0200C    ;     ldr R2, =sizeofSaveI
000007E8: E0201290    ;     mla R0, R0, R2, R1 ;;R0 = index * sizeofSaveI + grid.addr
000007EC:             ; 
000007EC: E5905000    ;     ldr R5, [R0, #0] ;;get the address of that grid
000007F0: E5D06008    ;     ldrb R6, [R0, #8] ;;get the width
000007F4: E5D07009    ;     ldrb R7, [R0, #9] ;;get the height
000007F8:             ; 
000007F8: E0000796    ;     mul R0, R6, R7 ;;get the required size
000007FC: E1A09000    ;     mov R9, R0 ;;save the number of bytes
00000800:             ; 
00000800: EB000349    ;     bl malloc
00000804:             ; 
00000804: E3500000    ;     cmp R0, #0
00000808: 0A00001D    ;     beq loadboardmallocfail
0000080C:             ; 
0000080C: E1A08000    ;     mov R8, R0 ;;save the new grid arr
00000810:             ; 
00000810:             ;     ;;need to copy the saved grid into the new grid
00000810:             ; 
00000810: E1A00005    ;     mov R0, R5  ;;src is the saved grid
00000814: E1A01008    ;     mov R1, R8  ;;dst is the new grid
00000818: E1A02009    ;     mov R2, R9  ;;bytes is in R9 already from width and height
0000081C: EB000107    ;     bl memcpy
00000820:             ; 
00000820: E51F07E0    ;     ldr R0, gridA
00000824: EB0003C9    ;     bl free
00000828:             ; 
00000828: E50F87E8    ;     str R8, gridA
0000082C:             ; 
0000082C:             ;     ;;also need to check if the old gridB is big enough
0000082C: E55F87E1    ;     ldrb R8, width
00000830: E55FA7E4    ;     ldrb R10, height
00000834: E1560008    ;     cmp R6, R8
00000838: 1A000002    ;     bne loadboardmallocB
0000083C: E157000A    ;     cmp R7, R10
00000840: 1A000000    ;     bne loadboardmallocB
00000844:             ; 
00000844: EA000006    ;     b loadboardskipB
00000848:             ; 
00000848:             ; loadboardmallocB
00000848: E51F0804    ;     ldr R0, gridB
0000084C: EB0003BF    ;     bl free
00000850:             ; 
00000850: E1A00009    ;     mov R0, R9
00000854: EB000334    ;     bl malloc
00000858:             ; 
00000858: E3500000    ;     cmp R0, #0
0000085C: 0A000008    ;     beq loadboardmallocfail
00000860:             ; 
00000860: E50F081C    ;     str R0, gridB
00000864:             ; 
00000864:             ; loadboardskipB
00000864: E54F6819    ;     strb R6, width
00000868: E54F781C    ;     strb R7, height ;;overwrite the active grid information
0000086C:             ; 
0000086C: E28F00C9    ;     adrl R0, loadboardsucmsg
00000870: E2800B06    ; 
00000874: EF000003    ;     swi 3
00000878:             ; 
00000878: E3A00000    ;     mov R0, #0 ;;skip asking dims as they've been loaded
0000087C: EB000203    ;     bl setupOptions
00000880:             ; 
00000880: EA000007    ;     b loadboardsucc
00000884:             ; 
00000884:             ; loadboardmallocfail
00000884: E28F0071    ;     adrl R0, loadboardmlcerr
00000888: E2800B06    ; 
0000088C: EF000003    ;     swi 3
00000890:             ; 
00000890: EA000002    ;     b loadboarderr
00000894:             ; 
00000894:             ; loadboardret
00000894: E28F0009    ;     adrl R0, loadboardretmsg
00000898: E2800B06    ; 
0000089C: EF000003    ;     swi 3
000008A0:             ; 
000008A0:             ; loadboardempty
000008A0:             ; loadboarderr
000008A0: EAFFFE06    ;     b mainmenu
000008A4:             ; loadboardsucc
000008A4: EAFFFE21    ;     b mainloopstart
000008A8:             ; 
000008A8:             ; newline
000008A8: E3A0000A    ;     ldr R0, =nl
000008AC: EF000000    ;     swi 0
000008B0:             ; 
000008B0: E1A0F00E    ;     mov R15, R14
000008B4:             ; 
000008B4:             ; step
000008B4:             ; ;;INP in R0 is the gridHeaderStruct ptr [[todo]]
000008B4:             ; ;;INP in R1 is the active grid ptr
000008B4:             ; ;;OUT in R0 is 1 if should return to main menu, else 0.
000008B4:             ; 
000008B4:             ; ;;get user input
000008B4:             ; ;;if q -> jump to main menu
000008B4:             ; ;;if s -> ask for name, bl saveGrid with name
000008B4: E92D41F0    ;     push {R14, R4-R8}
000008B8: E1A04000    ;     mov R4, R0 ;;save the struct 
000008BC: E1A05001    ;     mov R5, R1
000008C0:             ; 
000008C0: EF000001    ;     swi 1
000008C4:             ; 
000008C4: E3500071    ;     cmp R0, #'q'
000008C8: 0A000017    ;     beq stependfail ;;bad name, shame I can't change it eh
000008CC:             ; 
000008CC: E3500073    ;     cmp R0, #'s'
000008D0: 1A000017    ;     bne stependsucc
000008D4:             ; 
000008D4: E28F00B7    ;     adrl R0, askname
000008D8: E2800C12    ; 
000008DC: EF000003    ;     swi 3
000008E0:             ; 
000008E0: E3A0000A    ;     ldr R0, =enter
000008E4: E3E01000    ;     mov R1, #-1
000008E8: E3A02001    ;     mov R2, #1
000008EC: EB0000F4    ;     bl getstring
000008F0:             ; 
000008F0: E1A01000    ;     mov R1, R0 ;;char* name
000008F4: E1A00004    ;     mov R0, R4 ;;gridinfo* 
000008F8: E1A02005    ;     mov R2, R5 ;;active grid
000008FC: EB000046    ;     bl saveGrid
00000900:             ; 
00000900: EBFFFFE8    ;     bl newline
00000904:             ; 
00000904: E28F0F97    ;     adrl R0, savedchoice
00000908: E2800A01    ; 
0000090C: EF000003    ;     swi 3
00000910:             ; 
00000910: EF000001    ;     swi 1
00000914: EF000000    ;     swi 0
00000918: E3500059    ;     cmp R0, #'Y'
0000091C:             ; 
0000091C: E3A0000A    ;     ldr R0, =nl
00000920: EF000000    ;     swi 0
00000924:             ; 
00000924: 0A000000    ;     beq stependfail
00000928: EA000001    ;     b stependsucc
0000092C:             ; 
0000092C:             ; stependfail
0000092C: E3A00001    ;     mov R0, #1
00000930: EA000000    ;     b stepend
00000934:             ; 
00000934:             ; stependsucc
00000934: E3A00000    ;     mov R0, #0
00000938:             ; 
00000938:             ; stepend
00000938: E8BD41F0    ;     pop {R14, R4-R8}
0000093C: E1A0F00E    ;     mov R15, R14
00000940:             ; 
00000940:             ; listGrids
00000940:             ; ;;INP in R0 is the ptr to the gridInfo struct
00000940:             ; ;;RET --
00000940:             ; ;;Grid info struct
00000940:             ; ;;  - SaveInfoStruct* array
00000940:             ; ;;  - int max size of arr
00000940:             ; ;;  - int current position in arr
00000940:             ; 
00000940:             ; ;;loops through the array of grids (if any) printing their names, and dims, ask to print grid
00000940: E92D47F0    ;     push {R14, R4-R10}
00000944:             ; 
00000944: E5904000    ;     ldr R4, [R0, #0] ;;get the array ptr
00000948: E5905008    ;     ldr R5, [R0, #8] ;;current position
0000094C:             ; 
0000094C: E3550000    ;     cmp R5, #0
00000950: 0A00002C    ;     beq listGridsEmpty
00000954:             ; 
00000954:             ; ;;if current position == 1: print("There are no saved grids")
00000954:             ; ;;for i from 0 to current position
00000954:             ; ;;  getname(4)
00000954:             ; ;;  getwidth(8)
00000954:             ; ;;  getheight(9)
00000954:             ; ;;  print("There is a grid called %s with dims (%d, %d)")
00000954: E3A01000    ;     mov R1, #0 ;;i
00000958: E3A0200C    ;     ldr R2, =sizeofSaveI
0000095C:             ; 
0000095C: E28F00F7    ;     adrl R0, listgridmsg
00000960: E2800C17    ; 
00000964: EF000003    ;     swi 3
00000968:             ; 
00000968: E28F000E    ;     adrl R0, cutoff
0000096C: E2800B06    ; 
00000970: EF000003    ;     swi 3
00000974:             ; 
00000974:             ; listGridsLoop
00000974: E1510005    ;     cmp R1, R5
00000978: 0A000025    ;     beq listGridsLend
0000097C:             ; 
0000097C: E0234291    ;     mla R3, R1, R2, R4 ;;R3 = i * sizeof(saveInfo) + array
00000980: E5936004    ;     ldr R6, [R3, #4] ;;load the name ptr
00000984: E5D37008    ;     ldrb R7, [R3, #8] ;;load the width
00000988: E5D38009    ;     ldrb R8, [R3, #9] ;;load the height
0000098C:             ; 
0000098C: E28F007B    ;     adrl R0, gridloadpindex
00000990: E2800C16    ; 
00000994: EF000003    ;     swi 3
00000998:             ; 
00000998: E3A0003A    ;     mov R0, #':'
0000099C: EF000000    ;     swi 0
000009A0:             ; 
000009A0: E1A00001    ;     mov R0, R1
000009A4: EF000004    ;     swi 4
000009A8:             ; 
000009A8: EBFFFFBE    ;     bl newline
000009AC:             ; 
000009AC: E28F0F99    ;     adrl R0, gridloadpname
000009B0: E2800B05    ; 
000009B4: EF000003    ;     swi 3
000009B8:             ; 
000009B8: E1A00006    ;     mov R0, R6
000009BC: EF000003    ;     swi 3
000009C0:             ; 
000009C0: EBFFFFB8    ;     bl newline
000009C4:             ; 
000009C4: E28F0F95    ;     adrl R0, gridloadpwidth
000009C8: E2800B05    ; 
000009CC: EF000003    ;     swi 3
000009D0:             ; 
000009D0: E1A00007    ;     mov R0, R7
000009D4: EF000004    ;     swi 4
000009D8:             ; 
000009D8: EBFFFFB2    ;     bl newline
000009DC:             ; 
000009DC: E28F0045    ;     adrl R0, gridloadpheight
000009E0: E2800C16    ; 
000009E4: EF000003    ;     swi 3
000009E8:             ; 
000009E8: E1A00008    ;     mov R0, R8
000009EC: EF000004    ;     swi 4
000009F0:             ; 
000009F0: EBFFFFAC    ;     bl newline
000009F4:             ; 
000009F4:             ;     ;;[[Prob]  Printing the grid uses the stored width and height, I could change it to use a p
                      ; assed in
000009F4:             ;     ;;             version but do the other areas have enough registers to cope? probably not.
000009F4:             ;     ;;             Would have to swap the width and height with the loaded versions - I really 
                      ; don't like this idea
000009F4:             ; 
000009F4: E2811001    ;     add R1, R1, #1
000009F8:             ; 
000009F8: E28F007E    ;     adrl R0, cutoff
000009FC: E2800C17    ; 
00000A00: EF000003    ;     swi 3
00000A04:             ; 
00000A04: EAFFFFDA    ;     b listGridsLoop
00000A08:             ; 
00000A08:             ; listGridsEmpty
00000A08: E28F0F69    ;     adrl R0, gridloadempty
00000A0C: E2800B05    ; 
00000A10: EF000003    ;     swi 3
00000A14:             ; 
00000A14:             ; listGridsLend
00000A14:             ; listGridsEnd
00000A14: E8BD47F0    ;     pop {R14, R4-R10}
00000A18: E1A0F00E    ;     mov R15, R14
00000A1C:             ; 
00000A1C:             ; saveGrid
00000A1C:             ; ;;INP in R0 is the ptr gridInfo struct (in the main's stackframe)
00000A1C:             ; ;;INP in R1 is the char* to the name
00000A1C:             ; ;;INP in R2 is the active grid
00000A1C:             ; ;;RET in R0 is an errcode or 0 for success. 1 for malloc error
00000A1C:             ; 
00000A1C:             ; ;;if reachedCap -> realloc + inc maxsize
00000A1C:             ; ;;copy the current grid to another loc and place info in gridArr
00000A1C:             ; ;;inc current index
00000A1C: E92D47F0    ;     push {R14, R4-R10}
00000A20:             ; 
00000A20: E1A04000    ;     mov R4, R0
00000A24: E1A05001    ;     mov R5, R1
00000A28: E1A0A002    ;     mov R10, R2
00000A2C:             ; 
00000A2C: E5942008    ;     ldr R2, [R4, #8] ;;get the current index
00000A30: E5943004    ;     ldr R3, [R4, #4] ;;get the maxsize
00000A34:             ; 
00000A34: E1520003    ;     cmp R2, R3
00000A38: 0A000000    ;     beq saveGridResize
00000A3C: EA00000D    ;     b saveGridAdd
00000A40:             ; 
00000A40:             ; saveGridResize
00000A40:             ;     ;;maxsize in R3
00000A40: E1A06083    ;     mov R6, R3, lsl #1 ;;double the capacity
00000A44: E3A0700C    ;     ldr R7, =sizeofSaveI
00000A48: E0070796    ;     mul R7, R6, R7 ;;get the number of bytes
00000A4C:             ; 
00000A4C: E1A00007    ;     mov R0, R7
00000A50: EB0002B5    ;     bl malloc ;;get the new grid
00000A54:             ; 
00000A54: E3500000    ;     cmp R0, #0 ;;if malloc failed then don't do any saving
00000A58: 0A000020    ;     beq saveGridFailMalloc
00000A5C:             ; 
00000A5C: E1A01000    ;     mov R1, R0
00000A60: E1A08000    ;     mov R8, R0 ;;save of ptr
00000A64:             ; 
00000A64:             ;     ;;now that we have the new grid we need to memcpy the bytes from the original into the new 
                      ; one
00000A64: E5940000    ;     ldr R0, [R4, #0] ;;get the array ptr
00000A68:             ;     ;;R1 has the malloced address
00000A68: E1A020A7    ;     mov R2, R7, lsr #1 ;;not great, this is the double cap halfed, means no mul again
00000A6C: EB000073    ;     bl memcpy
00000A70:             ; 
00000A70:             ;     ;;assume success because I didn't give memcpy an err code :)
00000A70:             ;     ;;need to store the new size and arr ptr in the gridinfo struct
00000A70:             ; 
00000A70: E5848000    ;     str R8, [R4, #0]
00000A74: E5846004    ;     str R6, [R4, #4]
00000A78:             ; 
00000A78:             ; saveGridAdd
00000A78:             ; ;;add the current grid to the array
00000A78: E5946000    ;     ldr R6, [R4, #0] ;;get the arr ptr
00000A7C: E5947008    ;     ldr R7, [R4, #8] ;;get current index
00000A80:             ; 
00000A80:             ;     ;;ptr is 4 bytes
00000A80:             ;     ;;we're adding the struct of 
00000A80:             ;     ;;  |-grid*     (ptr)
00000A80:             ;     ;;  |-char*     (ptr)
00000A80:             ;     ;;  |-width     (byte)
00000A80:             ;     ;;  `-height    (byte)
00000A80:             ; 
00000A80:             ;     ;;we need to copy the current array
00000A80: E55F8A35    ;     ldrb R8, width
00000A84: E55F9A38    ;     ldrb R9, height
00000A88: E0080998    ;     mul R8, R8, R9 ;;get the number of bytes in grid
00000A8C:             ; 
00000A8C: E1A00008    ;     mov R0, R8
00000A90: EB0002A5    ;     bl malloc ;;allocate a new grid
00000A94:             ; 
00000A94: E3500000    ;     cmp R0, #0
00000A98: 0A000010    ;     beq saveGridFailMalloc
00000A9C:             ; 
00000A9C: E92D0100    ;     push {R8} ;; :(
00000AA0:             ; 
00000AA0: E3A0800C    ;     ldr R8, =sizeofSaveI
00000AA4: E0266897    ;     mla R6, R7, R8, R6 ;;currentindex * sizeof(Gridinfo) + arrptr
00000AA8: E5860000    ;     str R0, [R6, #0] ;;store the grid*
00000AAC: E5865004    ;     str R5, [R6, #4] ;;store the char*
00000AB0: E55F8A65    ;     ldrb R8, width
00000AB4: E5C68008    ;     strb R8, [R6, #8]
00000AB8: E5C69009    ;     strb R9, [R6, #9]
00000ABC:             ; 
00000ABC: E8BD0100    ;     pop {R8}
00000AC0:             ; 
00000AC0: E1A01000    ;     mov R1, R0 ;;dst
00000AC4: E1A0000A    ;     mov R0, R10 ;;src
00000AC8: E1A02008    ;     mov R2, R8 ;;num bytes
00000ACC: EB00005B    ;     bl memcpy ;;copy the grid into the new location
00000AD0:             ; 
00000AD0:             ;     ;;inc the position
00000AD0: E5940008    ;     ldr R0, [R4, #8]
00000AD4: E2800001    ;     add R0, R0, #1
00000AD8: E5840008    ;     str R0, [R4, #8]
00000ADC:             ; 
00000ADC: EA000001    ;     b saveGridSucc
00000AE0:             ; 
00000AE0:             ; saveGridFailMalloc
00000AE0: E3A00001    ;     mov R0, #1
00000AE4: EA000000    ;     b saveGridEnd
00000AE8:             ; 
00000AE8:             ; saveGridSucc
00000AE8: E3A00000    ;     mov R0, #0
00000AEC:             ; 
00000AEC:             ; saveGridEnd
00000AEC: E8BD47F0    ;     pop {R14, R4-R10}
00000AF0: E1A0F00E    ;     mov R15, R14
00000AF4:             ; 
00000AF4:             ; erase
00000AF4:             ; ;;INP in R0 is the itters
00000AF4:             ; ;;for (width * height + 1) * 2 + 1
00000AF4:             ; ;;      print('\b')
00000AF4: E1A01000    ;     mov R1, R0
00000AF8:             ; 
00000AF8:             ; eraseloop
00000AF8: E3510000    ;     cmp R1, #0
00000AFC: 0A000003    ;     beq eraseend
00000B00:             ; 
00000B00: E3A00008    ;     ldr R0, =backspace
00000B04: EF000000    ;     swi 0
00000B08:             ; 
00000B08: E2411001    ;     sub R1, R1, #1
00000B0C: EAFFFFF9    ;     b eraseloop
00000B10:             ; 
00000B10:             ; eraseend
00000B10: E1A0F00E    ;     mov R15, R14
00000B14:             ; 
00000B14:             ; slow
00000B14: E3A010FF    ;     mov R1, #0xFF
00000B18: E1A01081    ;     mov R1, R1, lsl #1
00000B1C:             ; 
00000B1C:             ; slowloop
00000B1C: E3510000    ;     cmp R1, #0
00000B20: 0A000005    ;     beq slowend
00000B24:             ; 
00000B24: E3A00020    ;     mov R0, #' '
00000B28: EF000000    ;     swi 0
00000B2C: E3A00008    ;     ldr R0, =backspace
00000B30: EF000000    ;     swi 0
00000B34:             ; 
00000B34: E2411001    ;     sub R1, R1, #1
00000B38: EAFFFFF7    ;     b slowloop
00000B3C:             ; 
00000B3C:             ; slowend
00000B3C: E1A0F00E    ;     mov R15, R14
00000B40:             ; 
00000B40:             ; heapclean
00000B40:             ; ;;zero out all memory in the heap (debugging uses)
00000B40: E28F0FF7    ;     adrl R0, heapstart
00000B44: E2800B06    ; 
00000B48: E3A01601    ;     ldr R1, =max_addr ;;stores the end of the heap
00000B4C: E3A02801    ;     ldr R2, =stack_size
00000B50: E0411002    ;     sub R1, R1, R2 ;; R1 = max_addr - stack_size which should be the heap end
00000B54: E3C11003    ;     and R1, R1, #-4 ;;align to 4 byte boundry just in case
00000B58: E3A03000    ;     mov R3, #0
00000B5C:             ; heapcleanloop ;;starting at heapstart
00000B5C: E1500001    ;     cmp R0, R1
00000B60: 0A000002    ;     beq heapcleanend
00000B64: E5003000    ;     str R3, [R0] ;;store 0 in loc
00000B68: E2800004    ;     add R0, R0, #4 ;;inc by a word
00000B6C: EAFFFFFA    ;     b heapcleanloop
00000B70:             ; heapcleanend
00000B70: E1A0F00E    ;     mov R15, R14
00000B74:             ; 
00000B74:             ; strlen
00000B74:             ; ;;INP in R0 is the address of the string
00000B74:             ; ;;OUT in R0 is the length of the null terminated string
00000B74:             ; 
00000B74:             ; ;;len = 0
00000B74:             ; ;;while(inp[len] != \0) {len++;}
00000B74:             ; ;;return len
00000B74:             ; 
00000B74: E3A01000    ;     mov R1, #0 ;;len
00000B78: E3500000    ;     cmp R0, #0
00000B7C: 0A000004    ;     beq strlenend
00000B80:             ; 
00000B80:             ; strlenloop
00000B80: E7D02001    ;     ldrb R2, [R0, R1]
00000B84: E3520000    ;     cmp R2, #0
00000B88: 0A000001    ;     beq strlenend
00000B8C: E2811001    ;     add R1, R1, #1
00000B90: EAFFFFFA    ;     b strlenloop
00000B94:             ; 
00000B94:             ; strlenend
00000B94: E1A00001    ;     mov R0, R1
00000B98: E1A0F00E    ;     mov R15, R14
00000B9C:             ; 
00000B9C:             ; 
00000B9C:             ; strtoi
00000B9C:             ; ;;INP in R0 is the address of the string
00000B9C:             ; ;;OUT in R0 is the value created
00000B9C:             ; ;;OUT in R1 is the err code
00000B9C:             ; ;;
00000B9C:             ; ;;ERR codes
00000B9C:             ; ;;  0 is success
00000B9C:             ; ;;  1 is attempted -ve
00000B9C:             ; ;;  2 is use of non-numeric characters
00000B9C:             ; ;;  3 is value out of range of integer
00000B9C:             ; ;;  4 is null string given
00000B9C:             ; 
00000B9C:             ; ;;  example inp
00000B9C:             ; ;;  12234       len = 5
00000B9C:             ; ;;      ^-find end
00000B9C:             ; ;;  tot = 0
00000B9C:             ; ;;  for i from end to 0:
00000B9C:             ; ;;      tot += inp[i] * (10 ** (len(inp) - i - 1))
00000B9C:             ; ;;  +some checks for valid input
00000B9C:             ; 
00000B9C:             ; ;;This will take in an address to the start of a string and attempt to convert it into an integ
                      ; er
00000B9C:             ; ;;String is only valid when all characters are numerical
00000B9C:             ; ;;For now it does not accept -ve numbers
00000B9C:             ; 
00000B9C: E92D41F0    ;     push {R14, R4-R8}
00000BA0: E1A04000    ;     mov R4, R0  ;;R4 holds the addr
00000BA4:             ; 
00000BA4: E3500000    ;     cmp R0, #0
00000BA8: 03A01004    ;     moveq R1, #4
00000BAC: 0A00001E    ;     beq strtoiendfail ;;null given so err code = 4 and end
00000BB0:             ; 
00000BB0: EBFFFFEF    ;     bl strlen
00000BB4: E1A05000    ;     mov R5, R0  ;;R5 holds the len of the string
00000BB8:             ; 
00000BB8: E3550000    ;     cmp R5, #0
00000BBC: 0A00001C    ;     beq strtoiendsucc ;;if len(string) == 0 then return 0
00000BC0:             ; 
00000BC0: E5D46000    ;     ldrb R6, [R4, #0]
00000BC4: E356002D    ;     cmp R6, #45
00000BC8: 0A000012    ;     beq strtoifailminus
00000BCC:             ; 
00000BCC: E3A06000    ;     mov R6, #0  ;;R6 holds the total
00000BD0: E3A07001    ;     mov R7, #1  ;;R7 holds the **
00000BD4: E2458001    ;     sub R8, R5, #1  ;;R8 is i which starts at end (len - 1)
00000BD8: E3A0300A    ;     mov R3, #10 ;;mul to **
00000BDC:             ; 
00000BDC:             ; strtoiloop
00000BDC: E3580000    ;     cmp R8, #0
00000BE0: BA00000A    ;     blt strtoilend
00000BE4:             ; 
00000BE4: E7D42008    ;     ldrb R2, [R4, R8]
00000BE8: E2422030    ;     sub R2, R2, #48
00000BEC:             ; 
00000BEC: E3520000    ;     cmp R2, #0
00000BF0: BA00000C    ;     blt strtoifailnonnum
00000BF4: E3520009    ;     cmp R2, #9
00000BF8: CA00000A    ;     bgt strtoifailnonnum
00000BFC:             ; 
00000BFC: E0266792    ;     mla R6, R2, R7, R6 ;;total = (inp[i] * (**)) + total -> total += inp[i] * (**)
00000C00: 6A000006    ;     bvs strtoifailoutrange
00000C04: E0070397    ;     mul R7, R7, R3
00000C08:             ; 
00000C08: E2488001    ;     sub R8, R8, #1
00000C0C:             ; 
00000C0C: EAFFFFF2    ;     b strtoiloop
00000C10:             ; 
00000C10:             ; 
00000C10:             ; ;;branches are expensive - should this just be rep RET? probably doesn't matter at this scale
00000C10:             ; strtoilend
00000C10: E1A00006    ;     mov R0, R6
00000C14: EA000006    ;     b strtoiendsucc
00000C18:             ; 
00000C18:             ; strtoifailminus
00000C18: E3A01001    ;     mov R1, #1
00000C1C: EA000002    ;     b strtoiendfail
00000C20:             ; 
00000C20:             ; strtoifailoutrange
00000C20: E3A01003    ;     mov R1, #3
00000C24: EA000000    ;     b strtoiendfail
00000C28:             ; 
00000C28:             ; strtoifailnonnum
00000C28: E3A01002    ;     mov R1, #2
00000C2C:             ; 
00000C2C:             ; strtoiendfail
00000C2C: E3A00000    ;     mov R0, #0
00000C30: EA000000    ;     b strtoiend
00000C34:             ; 
00000C34:             ; strtoiendsucc
00000C34: E3A01000    ;     mov R1, #0
00000C38:             ; 
00000C38:             ; strtoiend
00000C38: E8BD41F0    ;     pop {R14, R4-R8}
00000C3C: E1A0F00E    ;     mov R15, R14
00000C40:             ; 
00000C40:             ; memcpy
00000C40:             ; ;;INP in R0 is the addr of src
00000C40:             ; ;;INP in R1 is the addr of dst
00000C40:             ; ;;INP in R2 is the number of bytes to copy
00000C40:             ; 
00000C40:             ; ;;check if src and dst are alliged
00000C40:             ; ;;If different then write bytes
00000C40:             ; ;;If same then go to 4byte boundry
00000C40:             ; ;;  Write words of bytes2copy / 4
00000C40:             ; ;;  Write remaining bytes
00000C40: E92D41F0    ;     push {R14, R4-R8}
00000C44:             ; 
00000C44: E2004003    ;     and R4, R0, #0b11
00000C48: E2015003    ;     and R5, R1, #0b11
00000C4C:             ; 
00000C4C: E1540005    ;     cmp R4, R5
00000C50: 1A00000E    ;     bne memcpyallbytes
00000C54:             ; 
00000C54:             ;     ;;If they are the same then cpy R4 bytes and then do words
00000C54: E0422004    ;     sub R2, R2, R4;; bytes2cpy -= bytes we are about to write
00000C58: E1A03004    ;     mov R3, R4
00000C5C: EB00000E    ;     bl memcpybytes
00000C60:             ; 
00000C60:             ;     ;;Now find the number of words that can be written i.e. bytes2cpy / 4 (bytes2cpy >> 2)
00000C60: E3C23003    ;     and R3, R2, #-4 ;;the number of bytes to write that make up the words
00000C64: E3A04000    ;     mov R4, #0 ;;i
00000C68:             ; memcpywordsloop
00000C68: E1540003    ;     cmp R4, R3
00000C6C: 0A000003    ;     beq memcpywordslend
00000C70:             ; 
00000C70: E7906004    ;     ldr R6, [R0, R4]
00000C74: E7816004    ;     str R6, [R1, R4]
00000C78:             ;     
00000C78: E2844004    ;     add R4, R4, #4
00000C7C:             ; 
00000C7C: EAFFFFF9    ;     b memcpywordsloop
00000C80:             ;     
00000C80:             ; memcpywordslend
00000C80:             ; ;;Now copy the remaining bytes
00000C80: E2022003    ;     and R2, R2, #0b11
00000C84: E1A03002    ;     mov R3, R2
00000C88: EB000003    ;     bl memcpybytes
00000C8C: EA00000A    ;     b memcpyend
00000C90:             ; 
00000C90:             ; memcpyallbytes
00000C90: E1A03002    ;     mov R3, R2
00000C94: EB000000    ;     bl memcpybytes
00000C98: EA000007    ;     b memcpyend
00000C9C:             ; 
00000C9C:             ; memcpybytes
00000C9C:             ; ;;This is an internal function to memcpy and so doesn't follow the calling convention, it also 
                      ; assumes values are in place from memcpy
00000C9C:             ; ;;for (int i = 0; i < byte2cpy; i++) {
00000C9C:             ; ;;      *(dst + i) = *(src + i)
00000C9C:             ; ;;INP in R3 is the number of bytes to copy
00000C9C: E3A05000    ;     mov R5, #0 ;;i
00000CA0:             ; memcpybytesloop
00000CA0: E1550003    ;     cmp R5, R3
00000CA4: 0A000003    ;     beq memcpybyteslend ;;i < bytes2cpy
00000CA8:             ; 
00000CA8: E7D04005    ;     ldrb R4, [R0, R5]
00000CAC: E7C14005    ;     strb R4, [R1, R5] ;;dst[i] = src[i]
00000CB0:             ; 
00000CB0: E2855001    ;     add R5, R5, #1 ;;i++
00000CB4:             ; 
00000CB4: EAFFFFF9    ;     b memcpybytesloop
00000CB8:             ; 
00000CB8:             ; memcpybyteslend
00000CB8: E1A0F00E    ;     mov R15, R14
00000CBC:             ; 
00000CBC:             ; memcpyend
00000CBC: E8BD41F0    ;     pop {R14, R4-R8}
00000CC0: E1A0F00E    ;     mov R15, R14
00000CC4:             ; 
00000CC4:             ; getstring
00000CC4:             ; ;;INP in R0 the terminator character
00000CC4:             ; ;;INP in R1 the max number of characters or -1 for no max
00000CC4:             ; ;;INP in R2 boolean (non-0/0) for if letters should be printed out as well
00000CC4:             ; ;;RET in R0 a ptr to the memory address
00000CC4:             ; ;;
00000CC4:             ; ;;Dynamically allocate memory to support large string
00000CC4:             ; 
00000CC4:             ; ;;buff = malloc(minBytes)
00000CC4:             ; ;;while (input != terminator && pos < maxchars) 
00000CC4:             ; ;;  buff[pos] = input
00000CC4:             ; ;;  putchar(input)
00000CC4:             ; ;;  if (pos > buffSize)
00000CC4:             ; ;;      nBuff = malloc(buffSize << 1)
00000CC4:             ; ;;      memcpy from buff to nBuff
00000CC4:             ; ;;      free buff
00000CC4:             ; ;;      buff = nBuff
00000CC4:             ; 
00000CC4: E92D47F0    ;     push {R14, R4-R10}
00000CC8:             ; 
00000CC8: E1A08000    ;     mov R8, R0 ;;now holds terminator
00000CCC: E1A09001    ;     mov R9, R1 ;;nax chars
00000CD0: E3590000    ;     cmp R9, #0
00000CD4: 0A000031    ;     beq getstringEnd
00000CD8:             ;     ;sub R9, R9, #1 ;;reduce by 1 to use later
00000CD8: E1A0A002    ;     mov R10, R2 ;;print bool
00000CDC:             ; 
00000CDC: E3A06008    ;     ldr R6, =minBuffSize ;;R6 will hold the current size of the buffer
00000CE0: E1A00006    ;     mov R0, R6
00000CE4: EB000210    ;     bl malloc
00000CE8: E1A04000    ;     mov R4, R0 ;;R4 is the address of the buffer
00000CEC:             ; 
00000CEC: E3A05000    ;     mov R5, #0 ;;R5 is the loop counter/index into buffer
00000CF0:             ; getstringloop
00000CF0: E3790001    ;     cmp R9, #-1
00000CF4: 0A000001    ;     beq getstringloopskipsize
00000CF8: E1550009    ;     cmp R5, R9 ;;position - maxsize
00000CFC:             ;                       ;;pos 2 means 3 characters written
00000CFC: AA000019    ;     bge getstringlend ;;if position >= maxsize
00000D00:             ; getstringloopskipsize
00000D00: EF000001    ;     swi 1 ;;get input
00000D04: E1500008    ;     cmp R0, R8 ;;is input == terminator character
00000D08: 0A000016    ;     beq getstringlend
00000D0C:             ; 
00000D0C: E3790001    ;     cmp R9, #-1
00000D10: 0AFFFFFF    ;     beq skipMax
00000D14:             ;     
00000D14:             ; skipMax
00000D14: E1550006    ;     cmp R5, R6
00000D18: E92D0001    ;     push {R0}
00000D1C: AA000005    ;     bge getstringresize
00000D20:             ; 
00000D20:             ; getstringlcont
00000D20: E8BD0001    ;     pop {R0}
00000D24: E7C40005    ;     strb R0, [R4, R5] ;;buff[pos] = input
00000D28:             ; 
00000D28: E35A0000    ;     cmp R10, #0
00000D2C: 1F000000    ;     swine 0 ;;output the character to the screen if R10 is not 0
00000D30:             ; 
00000D30: E2855001    ;     add R5, R5, #1
00000D34:             ; 
00000D34: EAFFFFED    ;     b getstringloop
00000D38:             ; 
00000D38:             ; getstringresize
00000D38:             ;     ;;r6 will hold new buffer
00000D38: E1A00086    ;     mov R0, R6, lsl #1
00000D3C: EB0001FA    ;     bl malloc
00000D40: E1A07000    ;     mov R7, R0
00000D44:             ; 
00000D44: E1A00004    ;     mov R0, R4 ;;old buff
00000D48: E1A01007    ;     mov R1, R7 ;;newBuff
00000D4C: E1A02005    ;     mov R2, R5 ;;bytes to write
00000D50: EBFFFFBA    ;     bl memcpy
00000D54:             ; 
00000D54: E1A00004    ;     mov R0, R4
00000D58: EB00027C    ;     bl free
00000D5C: E1A04007    ;     mov R4, R7
00000D60:             ; 
00000D60: E1A06086    ;     mov R6, R6, lsl #1
00000D64:             ; 
00000D64: EAFFFFED    ;     b getstringlcont
00000D68:             ; 
00000D68:             ; getstringlend
00000D68:             ;     ;;need to add a \0
00000D68:             ;     ;;need to check if the buffer is completely full -> resize buffer to +1? (will be aligned t
                      ; o 8 in malloc!) then copy
00000D68:             ;     ;;I could have the buffers always leave a space open for the \0? but this is kind of an edg
                      ; e case?
00000D68: E1550006    ;     cmp R5, R6 ;;position to size of buffer
00000D6C: 0A000000    ;     beq getstringResizeEnd
00000D70:             ; 
00000D70: EA00000A    ;     b getstringEnd
00000D74:             ; 
00000D74:             ; getstringResizeEnd
00000D74: E2860001    ;     add R0, R6, #1
00000D78: EB0001EB    ;     bl malloc
00000D7C: E1A07000    ;     mov R7, R0
00000D80:             ; 
00000D80: E1A00004    ;     mov R0, R4;;old buff
00000D84: E1A01007    ;     mov R1, R7;;new buff
00000D88: E1A02005    ;     mov R2, R5;;bytes2write
00000D8C: EBFFFFAB    ;     bl memcpy
00000D90:             ; 
00000D90: E1A00004    ;     mov R0, R4
00000D94: EB00026D    ;     bl free
00000D98: E1A04007    ;     mov R4, R7
00000D9C:             ; 
00000D9C: E2866001    ;     add R6, R6, #1 ;;not needed
00000DA0:             ; 
00000DA0:             ; getstringEnd
00000DA0: E3A00000    ;     mov R0, #0
00000DA4: E7C40005    ;     strb R0, [R4, R5]
00000DA8:             ; 
00000DA8: E1A00004    ;     mov R0, R4
00000DAC:             ; 
00000DAC: E8BD47F0    ;     pop {R14, R4-R10}
00000DB0: E1A0F00E    ;     mov R15, R14
00000DB4:             ; 
00000DB4:             ; tolower
00000DB4:             ; ;;INP in R0 is a character
00000DB4:             ; ;;OUT in R0 is the character.lower()
00000DB4: E3800020    ;     orr R0, R0, #32
00000DB8: E1A0F00E    ;     mov R15, R14
00000DBC:             ; 
00000DBC:             ; setupGrid
00000DBC:             ; ;;INP --
00000DBC:             ; ;;RET --
00000DBC:             ; ;;The values addresses of the grids will now be set, can still be 0
00000DBC:             ; ;; ask for generation mode
00000DBC:             ; ;;      |-If random ask for seed
00000DBC:             ; ;;      |   `-For generation roll the seed to create a pseudorandom value for each `pixel`
00000DBC:             ; ;;      `-If draw then get them to draw the grid one `pixel` at a time
00000DBC: E92D47F0    ;     push {R14, R4-R10}
00000DC0:             ; 
00000DC0:             ;     ;;generate the main grid
00000DC0: E55F6D75    ;     ldrb R6, width
00000DC4: E55F7D78    ;     ldrb R7, height
00000DC8:             ; 
00000DC8: E0000796    ;     mul R0, R6, R7 ;;width * height = num of bytes to malloc
00000DCC:             ; 
00000DCC: E1A05000    ;     mov R5, R0
00000DD0: EB0001D5    ;     bl malloc
00000DD4: E1A04000    ;     mov R4, R0
00000DD8: E50F4D98    ;     str R4, gridA
00000DDC:             ; 
00000DDC: E1A00005    ;     mov R0, R5
00000DE0: EB0001D1    ;     bl malloc
00000DE4: E50F0DA0    ;     str R0, gridB
00000DE8:             ; 
00000DE8: E3550000    ;     cmp R5, #0
00000DEC: 0A000056    ;     beq setupGridFail
00000DF0: E3540000    ;     cmp R4, #0
00000DF4: 0A000054    ;     beq setupGridFail
00000DF8:             ; 
00000DF8:             ;     ;;R4 holds the gridA addr
00000DF8:             ;     ;;R6 holds the width
00000DF8:             ;     ;;R7 holds the height
00000DF8:             ; 
00000DF8: E28F00E9    ;     adrl R0, askgenoption
00000DFC: E2800C0F    ; 
00000E00: EF000003    ;     swi 3
00000E04:             ; setupGridAsk
00000E04: EF000001    ;     swi 1
00000E08: E3800020    ;     orr R0, R0, #32
00000E0C:             ; 
00000E0C: E1A01000    ;     mov R1, R0
00000E10: EBFFFEA4    ;     bl newline
00000E14:             ; 
00000E14: E3510064    ;     cmp R1, #'d'
00000E18: 0A000005    ;     beq setupdrawing
00000E1C:             ; 
00000E1C: E3510072    ;     cmp R1, #'r'
00000E20: 0A000008    ;     beq setuprandom
00000E24:             ; 
00000E24: E28F00F6    ;     adrl R0, setupGrdFailmsg
00000E28: E2800C0F    ; 
00000E2C: EF000003    ;     swi 3
00000E30: EAFFFFF3    ;     b setupGridAsk
00000E34:             ; 
00000E34:             ; setupdrawing
00000E34: E3A09000    ;     mov R9, #0
00000E38:             ; 
00000E38: E28F006F    ;     adrl R0, drawinfomsg
00000E3C: E2800A01    ; 
00000E40: EF000003    ;     swi 3
00000E44:             ; 
00000E44: EA00000A    ;     b setupstart
00000E48:             ; 
00000E48:             ; setuprandom
00000E48: E28F0033    ;     adrl R0, askseed
00000E4C: E2800A01    ; 
00000E50: EF000003    ;     swi 3
00000E54:             ; 
00000E54: E3A00000    ;     mov R0, #0
00000E58: E3A01004    ;     mov R1, #4
00000E5C: E3A02001    ;     mov R2, #1
00000E60: EBFFFF97    ;     bl getstring
00000E64:             ; 
00000E64: E5108000    ;     ldr R8, [R0]
00000E68:             ; 
00000E68: EB000238    ;     bl free
00000E6C:             ; 
00000E6C: EBFFFE8D    ;     bl newline
00000E70:             ; 
00000E70: E3A09001    ;     mov R9, #1
00000E74:             ; 
00000E74:             ; setupstart
00000E74:             ; ;;This is probably not a good way to do it as there is more branching in the middle of a loop t
                      ; hat is executed alot
00000E74:             ; ;;I'm doing it this way `not because it is easy, but because I though it would be easy`
00000E74:             ; ;;Reduces the need for writing another loop :)
00000E74:             ; ;;R9 holds the mode (1 for random, 0 for draw)
00000E74:             ; ;;R8 will hold the seed for random
00000E74:             ; ;;for row from 0 to height - 1
00000E74:             ; ;;  for col from 0 to width - 1
00000E74:             ; ;;      if (random)
00000E74:             ; ;;          grid[row][col] = ((seed rol 1) || row) && 1
00000E74:             ; ;;      else
00000E74:             ; ;;          grid[row][col] = input() == 1
00000E74: E3A05000    ;     mov R5, #0 ;; row
00000E78:             ; setuprowloop
00000E78: E1550007    ;     cmp R5, R7
00000E7C: 0A000032    ;     beq setuprowlend
00000E80:             ; 
00000E80: E3A0A000    ;     mov R10, #0 ;;col
00000E84:             ; setupcolloop
00000E84: E15A0006    ;     cmp R10, R6
00000E88: 0A00002D    ;     beq setupcollend
00000E8C:             ; 
00000E8C: E3590001    ;     cmp R9, #1
00000E90: 0A000000    ;     beq dorandom
00000E94: EA000004    ;     b dodrawstart
00000E98:             ; 
00000E98:             ; ;;dorandom and dodraw will get their value for this position and then place it in R2
00000E98:             ; ;;R3 is free at this point
00000E98:             ; dorandom
00000E98:             ;     ;;seed in R8
00000E98: E1A080E8    ;     mov R8, R8, ror #1
00000E9C: E00A3005    ;     and R3, R10, R5
00000EA0: E0288003    ;     eor R8, R8, R3
00000EA4: E2082001    ;     and R2, R8, #1
00000EA8: EA000021    ;     b setupcollcont
00000EAC:             ; 
00000EAC:             ; dodrawstart
00000EAC: E023A695    ;     mla R3, R5, R6, R10 ;;R3 = row * width + col
00000EB0:             ; 
00000EB0: E3A00002    ;     mov R0, #2
00000EB4: E7C40003    ;     strb R0, [R4, R3]
00000EB8:             ; 
00000EB8: E3590000    ;     cmp R9, #0
00000EBC: 01A00004    ;     moveq R0, R4
00000EC0: 0B000023    ;     bleq drawgrid ;;print the new state of the grid if this is drawing mode
00000EC4:             ; 
00000EC4:             ; dodraw
00000EC4:             ;     ;;get input, validate 1 or 0
00000EC4:             ;     ;;if invalid print error loop back
00000EC4:             ;     ;;-_- I've just realised I want to print the grid each time as well R0-R3 are scratch
00000EC4: EF000001    ;     swi 1
00000EC8:             ; 
00000EC8: E3500031    ;     cmp R0, #'1'
00000ECC: 0A00000D    ;     beq dodrawsucc
00000ED0: E3500030    ;     cmp R0, #'0'
00000ED4: 0A00000B    ;     beq dodrawsucc
00000ED8:             ; 
00000ED8: E3A0100A    ;     ldr R1, =enter
00000EDC: E1500001    ;     cmp R0, R1;;next line
00000EE0: 1A000004    ;     bne dodrawfail
00000EE4:             ; 
00000EE4: E023A695    ;     mla R3, R5, R6, R10 ;;R3 = row * width + col
00000EE8: E3A00000    ;     mov R0, #0
00000EEC: E7C40003    ;     strb R0, [R4, R3]
00000EF0:             ; 
00000EF0: E2855001    ;     add R5, R5, #1
00000EF4: EAFFFFDF    ;     b setuprowloop
00000EF8:             ; 
00000EF8:             ; dodrawfail
00000EF8:             ; 
00000EF8: E28F0005    ;     adrl R0, drawfailmsg
00000EFC: E2800A01    ; 
00000F00: EF000003    ;     swi 3
00000F04:             ; 
00000F04: EAFFFFEE    ;     b dodraw
00000F08:             ; 
00000F08:             ; dodrawsucc
00000F08: E92D0001    ;     push {R0}
00000F0C: E55F0EBC    ;     ldrb R0, drawerase
00000F10: E3500000    ;     cmp R0, #0
00000F14: 0A000004    ;     beq dodrawsuccskiperase
00000F18:             ; 
00000F18: E0000796    ;     mul R0, R6, R7      ;;I don't like having to do this every time :(
00000F1C: E1A00080    ;     mov R0, R0, lsl #1
00000F20: E2800001    ;     add R0, R0, #1
00000F24: E0800007    ;     add R0, R0, R7
00000F28: EBFFFEF1    ;     bl erase
00000F2C:             ;     
00000F2C:             ; dodrawsuccskiperase
00000F2C: E8BD0001    ;     pop {R0}
00000F30:             ; 
00000F30: E2402030    ;     sub R2, R0, #48 ;;could be xor?
00000F34:             ; 
00000F34:             ; setupcollcont
00000F34:             ;     ;;place the value in R2 into the grid[row][col]
00000F34:             ;     ;;row * width + col
00000F34: E023A695    ;     mla R3, R5, R6, R10 ;;R3 = row * width + col ;;I'm doing this twice \-(*v*)-/
00000F38: E7C42003    ;     strb R2, [R4, R3] ;;grid offset by R3
00000F3C:             ; 
00000F3C: E28AA001    ;     add R10, R10, #1
00000F40: EAFFFFCF    ;     b setupcolloop
00000F44:             ; setupcollend
00000F44: E2855001    ;     add R5, R5, #1
00000F48: EAFFFFCA    ;     b setuprowloop
00000F4C:             ; setuprowlend
00000F4C:             ;     ;;grid has been setup
00000F4C:             ; setupGridFail
00000F4C:             ; setupGridEnd
00000F4C: E8BD47F0    ;     pop {R14, R4-R10}
00000F50: E1A0F00E    ;     mov R15, R14
00000F54:             ; 
00000F54:             ; 
00000F54:             ; ;;[[TODO]] the heap may not be blank (when heapclean is removed) and so need to 0 the mem. Mayb
                      ; e add option to malloc or add calloc (not the same)
00000F54:             ; drawgrid
00000F54:             ; ;;INP in R0 is the grid address to draw
00000F54:             ; 
00000F54:             ; ;;for row from 0 to height - 1
00000F54:             ; ;;  for col from 0 to width - 1
00000F54:             ; ;;      print('X' if grid[row][col] else '_')
00000F54:             ; ;;  print(newline)
00000F54:             ; ;;print(newline)
00000F54: E92D01F0    ;     push {R4-R8}
00000F58:             ; 
00000F58: E1A06000    ;     mov R6, R0
00000F5C:             ; 
00000F5C: E55F4F11    ;     ldrb R4, width
00000F60: E55F5F14    ;     ldrb R5, height
00000F64:             ; 
00000F64: E3A02000    ;     mov R2, #0 ;;row
00000F68:             ; drawgridrowloop
00000F68: E1520005    ;     cmp R2, R5
00000F6C: 0A000016    ;     beq drawgridrowlend
00000F70:             ; 
00000F70: E3A01000    ;     mov R1, #0 ;;col
00000F74:             ; drawgridcolloop
00000F74: E1510004    ;     cmp R1, R4
00000F78: 0A00000E    ;     beq drawgridcollend
00000F7C:             ; 
00000F7C: E0231492    ;     mla R3, R2, R4, R1 ;;R3 = row * width + col
00000F80: E7D63003    ;     ldrb R3, [R6, R3]
00000F84:             ; 
00000F84: E3530002    ;     cmp R3, #2
00000F88: 0A000004    ;     beq drawgridprintcurrent
00000F8C: E3530001    ;     cmp R3, #1
00000F90: 051F0F3F    ;     ldreq R0, alive_c
00000F94: 151F0F42    ;     ldrne R0, dead_c
00000F98:             ; 
00000F98: EF000000    ;     swi 0
00000F9C:             ; 
00000F9C: EA000001    ;     b drawgridcollcont
00000FA0:             ; 
00000FA0:             ; drawgridprintcurrent
00000FA0: E51F0F4D    ;     ldr R0, ptr_c
00000FA4: EF000000    ;     swi 0
00000FA8:             ; 
00000FA8:             ; drawgridcollcont
00000FA8: E3A00020    ;     mov R0, #' '
00000FAC: EF000000    ;     swi 0
00000FB0:             ; 
00000FB0: E2811001    ;     add R1, R1, #1
00000FB4: EAFFFFEE    ;     b drawgridcolloop
00000FB8:             ; 
00000FB8:             ; drawgridcollend
00000FB8: E3A01000    ;     mov R1, #0
00000FBC: E2822001    ;     add R2, R2, #1
00000FC0: E3A0000A    ;     mov R0, #10
00000FC4: EF000000    ;     swi 0
00000FC8: EAFFFFE6    ;     b drawgridrowloop
00000FCC:             ; 
00000FCC:             ; drawgridrowlend
00000FCC: E3A0000A    ;     mov R0, #10
00000FD0: EF000000    ;     swi 0
00000FD4:             ; drawgridend
00000FD4: E8BD01F0    ;     pop {R4-R8}
00000FD8: E1A0F00E    ;     mov R15, R14
00000FDC:             ; 
00000FDC:             ; 
00000FDC:             ; printoptions
00000FDC:             ; ;;INP --
00000FDC:             ; ;;OUT --
00000FDC:             ; ;;optionsp_1-5
00000FDC: E28F0027    ;     adrl R0, optionsp_1
00000FE0: E2800C0D    ; 
00000FE4: EF000003    ;     swi 3
00000FE8:             ; 
00000FE8: E55F0F9D    ;     ldrb R0, width
00000FEC: EF000004    ;     swi 4
00000FF0:             ; 
00000FF0: E28F002B    ;     adrl R0, optionsp_2
00000FF4: E2800C0D    ; 
00000FF8: EF000003    ;     swi 3
00000FFC:             ; 
00000FFC: E55F0FB0    ;     ldrb R0, height
00001000: EF000004    ;     swi 4
00001004:             ; 
00001004: E28F001A    ;     adrl R0, optionsp_3
00001008: E2800C0D    ; 
0000100C: EF000003    ;     swi 3
00001010:             ; 
00001010: E55F0FC7    ;     ldrb R0, slow_b
00001014: E3500001    ;     cmp R0, #1
00001018: 128F00FD    ;     adrlne R0, off_msg
0000101C: 12800C16    ; 
00001020: 028F00F2    ;     adrleq R0, on_msg
00001024: 02800C16    ; 
00001028: EF000003    ;     swi 3
0000102C:             ; 
0000102C: E28F00FE    ;     adrl R0, optionsp_4
00001030: E2800B03    ; 
00001034: EF000003    ;     swi 3
00001038:             ; 
00001038: E55F0FF0    ;     ldrb R0, erase_b
0000103C: E3500001    ;     cmp R0, #1
00001040: 128F00D5    ;     adrlne R0, off_msg
00001044: 12800C16    ; 
00001048: 028F00CA    ;     adrleq R0, on_msg
0000104C: 02800C16    ; 
00001050: EF000003    ;     swi 3
00001054:             ; 
00001054: E28F00E2    ;     adrl R0, optionsp_5
00001058: E2800B03    ; 
0000105C: EF000003    ;     swi 3
00001060:             ; 
00001060: E24F0016    ;     adrl R0, step_b
00001064: E2400A01    ; 
00001068: E5500000    ;     ldrb R0, [R0]
0000106C: E3500001    ;     cmp R0, #1
00001070: 128F00A5    ;     adrlne R0, off_msg
00001074: 12800C16    ; 
00001078: 028F009A    ;     adrleq R0, on_msg
0000107C: 02800C16    ; 
00001080: EF000003    ;     swi 3
00001084:             ; 
00001084: E3A0000A    ;     ldr R0, =nl
00001088: EF000000    ;     swi 0
0000108C:             ; 
0000108C: E1A0F00E    ;     mov R15, R14
00001090:             ; 
00001090:             ; setupOptions
00001090:             ; ;;INP in R0 is 1 if should ask for dims 0 for skip
00001090: E92D4010    ;     push {R14, R4}
00001094: E1A04000    ;     mov R4, R0
00001098:             ; 
00001098: E28F0C0A    ;     adrl R0, askdefaults ;;ask q
0000109C: E2800000    ; 
000010A0: EF000003    ;     swi 3
000010A4: EF000001    ;     swi 1   ;;get character answer
000010A8: EF000000    ;     swi 0
000010AC: E3500059    ;     cmp R0, #'Y'
000010B0: E3A0000A    ;     ldr R0, =nl
000010B4: EF000000    ;     swi 0
000010B8:             ; 
000010B8: 1A000021    ;     bne setupCustom
000010BC:             ; 
000010BC: E24F0068    ;     adrl R0, erase_b_d
000010C0: E2400A01    ; 
000010C4: E5500000    ;     ldrb R0, [R0]
000010C8: E24F1D42    ;     adrl R1, erase_b
000010CC: E5410000    ;     strb R0, [R1]
000010D0:             ; 
000010D0: E24F007B    ;     adrl R0, slow_b_d
000010D4: E2400A01    ; 
000010D8: E5500000    ;     ldrb R0, [R0]
000010DC: E24F1093    ;     adrl R1, slow_b
000010E0: E2411A01    ; 
000010E4: E5410000    ;     strb R0, [R1]
000010E8:             ; 
000010E8: E24F0092    ;     adrl R0, step_b_d
000010EC: E2400A01    ; 
000010F0: E5500000    ;     ldrb R0, [R0]
000010F4: E24F10AA    ;     adrl R1, step_b
000010F8: E2411A01    ; 
000010FC: E5410000    ;     strb R0, [R1]
00001100:             ; 
00001100: E3540000    ;     cmp R4, #0
00001104: 0A00000B    ;     beq setupOptionsDEnd
00001108:             ; 
00001108: E24F00B1    ;     adrl R0, width_d
0000110C: E2400A01    ; 
00001110: E5500000    ;     ldrb R0, [R0]
00001114: E24F10C9    ;     adrl R1, width
00001118: E2411A01    ; 
0000111C: E5410000    ;     strb R0, [R1]
00001120: E24F00C8    ;     adrl R0, height_d
00001124: E2400A01    ; 
00001128: E5500000    ;     ldrb R0, [R0]
0000112C: E24F10E0    ;     adrl R1, height
00001130: E2411A01    ; 
00001134: E5410000    ;     strb R0, [R1]
00001138:             ; 
00001138:             ; setupOptionsDEnd
00001138: EBFFFFA7    ;     bl printoptions
0000113C:             ; 
0000113C: E8BD4010    ;     pop {R14, R4}
00001140: E1A0F00E    ;     mov R15, R14 ;;RET
00001144:             ; 
00001144:             ; setupCustom
00001144:             ; ;;ask for erase, slow, step, and conditionally dims
00001144:             ; 
00001144:             ; ;;ask step
00001144:             ; ;;ask erase
00001144:             ; ;;if (!step)
00001144:             ; ;;  if erase
00001144:             ; ;;      print(recommend slow)
00001144:             ; ;;  ask slow
00001144:             ; 
00001144: E3A01001    ;     mov R1, #1
00001148:             ; 
00001148: E28F00B3    ;     adrl R0, askstep
0000114C: E2800C09    ; 
00001150: EF000003    ;     swi 3
00001154: EF000001    ;     swi 1
00001158: EF000000    ;     swi 0 
0000115C: E3500059    ;     cmp R0, #'Y' 
00001160: E3A0000A    ;     ldr R0, =nl
00001164: EF000000    ;     swi 0
00001168: 13A01000    ;     movne R1, #0
0000116C: E24F0022    ;     adrl R0, step_b
00001170: E2400C11    ; 
00001174: E5401000    ;     strb R1, [R0]
00001178:             ; 
00001178: E3A01001    ;     mov R1, #1
0000117C:             ; 
0000117C: E28F004E    ;     adrl R0, askerase
00001180: E2800C09    ; 
00001184: EF000003    ;     swi 3
00001188: EF000001    ;     swi 1
0000118C: EF000000    ;     swi 0
00001190: E3500059    ;     cmp R0, #'Y'
00001194: E3A0000A    ;     ldr R0, =nl
00001198: EF000000    ;     swi 0
0000119C: 13A01000    ;     movne R1, #0
000011A0: E24F0F56    ;     adrl R0, erase_b
000011A4: E2400A01    ; 
000011A8: E5401000    ;     strb R1, [R0]
000011AC:             ; 
000011AC: E24F0062    ;     adrl R0, step_b
000011B0: E2400C11    ; 
000011B4: E5500000    ;     ldrb R0, [R0]
000011B8: E3500001    ;     cmp R0, #1
000011BC: 0A000011    ;     beq setupCustomskipslow
000011C0:             ; 
000011C0: E3510001    ;     cmp R1, #1 ;;if erase is on
000011C4: E28F00EA    ;     adrl R0, warneraseslow
000011C8: E2800C09    ; 
000011CC: 0F000003    ;     swieq 3
000011D0:             ; 
000011D0: E3A01001    ;     mov R1, #1
000011D4:             ;  
000011D4: E28F000F    ;     adrl R0, askslow
000011D8: E2800C09    ; 
000011DC: EF000003    ;     swi 3
000011E0: EF000001    ;     swi 1
000011E4: EF000000    ;     swi 0 
000011E8: E3500059    ;     cmp R0, #'Y' 
000011EC: E3A0000A    ;     ldr R0, =nl
000011F0: EF000000    ;     swi 0
000011F4: 13A01000    ;     movne R1, #0
000011F8: E24F00AF    ;     adrl R0, slow_b
000011FC: E2400C11    ; 
00001200: E5401000    ;     strb R1, [R0] ;;[[maybe]] changed but not checked, go here if error
00001204:             ; 
00001204: EA000016    ;     b setupCustomDimsCheck
00001208:             ; 
00001208:             ; setupCustomskipslow
00001208: E3A00000    ;     mov R0, #0
0000120C: E24F10C3    ;     adrl R1, slow_b
00001210: E2411C11    ; 
00001214: E5410000    ;     strb R0, [R1]
00001218:             ; 
00001218: EA000011    ;     b setupCustomDimsCheck
0000121C:             ; 
0000121C:             ; printrange
0000121C:             ; ;;INP --
0000121C:             ; ;;OUT --
0000121C: E28F007A    ;     adrl R0, bracket_open
00001220: E2800C12    ; 
00001224: EF000003    ;     swi 3
00001228:             ; 
00001228: E24F00DB    ;     adrl R0, range_min
0000122C: E2400C11    ; 
00001230: E5500000    ;     ldrb R0, [R0]
00001234: EF000004    ;     swi 4
00001238:             ; 
00001238: E28F00CB    ;     adrl R0, dash
0000123C: E2800C09    ; 
00001240: EF000003    ;     swi 3
00001244:             ; 
00001244: E24F00F6    ;     adrl R0, range_max
00001248: E2400C11    ; 
0000124C: E5500000    ;     ldrb R0, [R0]
00001250: EF000004    ;     swi 4
00001254:             ; 
00001254: E28F00B1    ;     adrl R0, b_close_colon
00001258: E2800C09    ; 
0000125C: EF000003    ;     swi 3
00001260:             ; 
00001260: E1A0F00E    ;     mov R15, R14
00001264:             ; 
00001264:             ; setupCustomDimsCheck
00001264: E3540000    ;     cmp R4, #0
00001268: 0A000043    ;     beq customend
0000126C:             ; 
0000126C: E28F0D26    ;     adrl R0, askwid
00001270: E2800000    ; 
00001274: EF000003    ;     swi 3
00001278:             ; 
00001278: EBFFFFE7    ;     bl printrange
0000127C:             ; 
0000127C:             ; getwid
0000127C: E3A0000A    ;     ldr R0, =enter
00001280: E3A01003    ;     mov R1, #3
00001284: E3A02001    ;     mov R2, #1
00001288: EBFFFE8D    ;     bl getstring
0000128C: E1A04000    ;     mov R4, R0
00001290:             ; 
00001290: EBFFFE41    ;     bl strtoi
00001294: E1A05000    ;     mov R5, R0
00001298:             ;     
00001298: E1A00004    ;     mov R0, R4
0000129C: EB00012B    ;     bl free ;;free the collected string
000012A0:             ; 
000012A0: E1A01005    ;     mov R1, R5
000012A4:             ; 
000012A4: EBFFFD7F    ;     bl newline
000012A8:             ; 
000012A8: E24F405B    ;     adrl R4, range_min
000012AC: E2444C12    ; 
000012B0: E5544000    ;     ldrb R4, [R4]
000012B4: E24F5066    ;     adrl R5, range_max
000012B8: E2455C12    ; 
000012BC: E5555000    ;     ldrb R5, [R5]
000012C0:             ; 
000012C0: E1510005    ;     cmp R1, R5
000012C4: CA000005    ;     bgt getwidFail
000012C8: E1510004    ;     cmp R1, R4
000012CC: BA000003    ;     blt getwidFail
000012D0:             ; 
000012D0: E24F0085    ;     adrl R0, width
000012D4: E2400C12    ; 
000012D8: E5401000    ;     strb R1, [R0]
000012DC:             ; 
000012DC: EA000004    ;     b getheisetup
000012E0:             ; 
000012E0:             ; getwidFail
000012E0: E28F0D25    ;     adrl R0, getwidfailmsg
000012E4: E2800000    ; 
000012E8: EF000003    ;     swi 3
000012EC:             ; 
000012EC: EBFFFFCA    ;     bl printrange
000012F0:             ; 
000012F0: EAFFFFE1    ;     b getwid
000012F4:             ; 
000012F4:             ; getheisetup
000012F4: E28F0015    ;     adrl R0, askhei
000012F8: E2800C09    ; 
000012FC: EF000003    ;     swi 3
00001300:             ; 
00001300: EBFFFFC5    ;     bl printrange
00001304:             ; 
00001304:             ; gethei
00001304: E3A0000A    ;     ldr R0, =enter
00001308: E3A01003    ;     mov R1, #3
0000130C: E3A02001    ;     mov R2, #1
00001310: EBFFFE6B    ;     bl getstring
00001314: E1A04000    ;     mov R4, R0
00001318:             ; 
00001318: EBFFFE1F    ;     bl strtoi
0000131C: E1A05000    ;     mov R5, R0
00001320:             ; 
00001320: E1A00004    ;     mov R0, R4
00001324: EB000109    ;     bl free
00001328:             ; 
00001328: E1A01005    ;     mov R1, R5
0000132C:             ; 
0000132C: EBFFFD5D    ;     bl newline
00001330:             ; 
00001330: E24F40E3    ;     adrl R4, range_min
00001334: E2444C12    ; 
00001338: E5544000    ;     ldrb R4, [R4]
0000133C: E24F50EE    ;     adrl R5, range_max
00001340: E2455C12    ; 
00001344: E5555000    ;     ldrb R5, [R5]
00001348:             ; 
00001348: E1510005    ;     cmp R1, R5
0000134C: CA000005    ;     bgt getheiFail
00001350: E1510004    ;     cmp R1, R4
00001354: BA000003    ;     blt getheiFail
00001358:             ; 
00001358: E24F2FC3    ;     adrl R2, height
0000135C: E2422A01    ; 
00001360: E5421000    ;     strb R1, [R2]
00001364:             ; 
00001364: EA000004    ;     b customend
00001368:             ; 
00001368:             ; getheiFail
00001368: E28F00E4    ;     adrl R0, getheifailmsg
0000136C: E2800B02    ; 
00001370: EF000003    ;     swi 3
00001374:             ; 
00001374: EBFFFFA8    ;     bl printrange
00001378:             ; 
00001378: EAFFFFE1    ;     b gethei
0000137C:             ; 
0000137C:             ; customend
0000137C: EBFFFF16    ;     bl printoptions
00001380:             ; 
00001380: E8BD4010    ;     pop {R14, R4}
00001384: E1A0F00E    ;     mov R15, R14 ;;RET
00001388:             ; 
00001388:             ; 
00001388:             ; updategrid
00001388:             ; ;;INP in R0 is the active grid
00001388:             ; ;;INP in R1 is the passive grid
00001388:             ; ;;passive grid is the one being updated based on the value in the activeGrid
00001388:             ; ;;RET --
00001388:             ; ;;for row from 0 to height - 1
00001388:             ; ;;  for col from 0 to width - 1
00001388:             ; ;;      int n = countNeighbours(activeGrid, row, col)
00001388:             ; ;;      int s = activeGrid[row][col]
00001388:             ; ;;      
00001388:             ; ;;      if (s == alive)
00001388:             ; ;;          passiveGrid[row][col] = n == 3 or n == 2
00001388:             ; ;;      else
00001388:             ; ;;          passiveGrid[row][col] = n == 3
00001388:             ; 
00001388:             ; ;;  R4 holds the row
00001388:             ; ;;  R5 holds the col
00001388:             ; ;;  R6 holds the width
00001388:             ; ;;  R7 holds the height
00001388:             ; ;;  R8 holds the active grid
00001388:             ; ;;  R9 holds the passive grid
00001388:             ; 
00001388: E92D47F0    ;     push {R14, R4-R10}
0000138C:             ; 
0000138C: E24F6041    ;     adrl R6, width
00001390: E2466C13    ; 
00001394: E5566000    ;     ldrb R6, [R6]
00001398: E24F7FD3    ;     adrl R7, height
0000139C: E2477A01    ; 
000013A0: E5577000    ;     ldrb R7, [R7]
000013A4:             ; 
000013A4: E1A08000    ;     mov R8, R0
000013A8: E1A09001    ;     mov R9, R1
000013AC:             ; 
000013AC: E3A04000    ;     mov R4, #0 ;;row
000013B0:             ; updategridrowloop
000013B0: E1540007    ;     cmp R4, R7
000013B4: 0A00001A    ;     beq updategridrowlend
000013B8:             ; 
000013B8: E3A05000    ;     mov R5, #0 ;;col
000013BC:             ; updategridcolloop
000013BC: E1550006    ;     cmp R5, R6
000013C0: 0A000014    ;     beq updategridccollend
000013C4:             ; 
000013C4: E1A00008    ;     mov R0, R8
000013C8: E1A01004    ;     mov R1, R4
000013CC: E1A02005    ;     mov R2, R5
000013D0: EB000015    ;     bl countneighbours
000013D4:             ; 
000013D4: E0215694    ;     mla R1, R4, R6, R5 ;;R1 = row * width + col
000013D8: E7D82001    ;     ldrb R2, [R8, R1] ;;grid[R1]
000013DC:             ;     ;;R0 holds the n count
000013DC: E3520000    ;     cmp R2, #0
000013E0: 0A000006    ;     beq updatedead
000013E4:             ; 
000013E4:             ; updatealive
000013E4: E3A03000    ;     mov R3, #0
000013E8: E3500003    ;     cmp R0, #3
000013EC: 03A03001    ;     moveq R3, #1
000013F0: E3500002    ;     cmp R0, #2
000013F4: 03A03001    ;     moveq R3, #1
000013F8: E7C93001    ;     strb R3, [R9, R1]
000013FC: EA000003    ;     b updatelcont
00001400:             ; 
00001400:             ; updatedead
00001400: E3A03001    ;     mov R3, #1
00001404: E3500003    ;     cmp R0, #3
00001408: 13A03000    ;     movne R3, #0
0000140C: E7C93001    ;     strb R3, [R9, R1]
00001410:             ; 
00001410:             ; updatelcont
00001410: E2855001    ;     add R5, R5, #1
00001414: EAFFFFE8    ;     b updategridcolloop
00001418:             ; 
00001418:             ; updategridccollend
00001418: E3A05000    ;     mov R5, #0
0000141C: E2844001    ;     add R4, R4, #1
00001420: EAFFFFE2    ;     b updategridrowloop
00001424:             ; 
00001424:             ; updategridrowlend
00001424:             ; updategridend
00001424: E8BD47F0    ;     pop {R14, R4-R10}
00001428: E1A0F00E    ;     mov R15, R14
0000142C:             ; 
0000142C:             ; 
0000142C:             ; countneighbours
0000142C:             ; ;;INP in R0 is the activeGrid
0000142C:             ; ;;INP in R1 is the row
0000142C:             ; ;;INP in R2 is the col
0000142C:             ; ;;OUT in R0 is the number of neighbours
0000142C:             ; 
0000142C:             ; ;;offsets = [[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]]
0000142C:             ; ;;tot = 0
0000142C:             ; ;;for offset in offsets
0000142C:             ; ;;  if (isinrange(row + offset[0], col + offset[1]))
0000142C:             ; ;;      tot += grid[row + offset[0]][col + offset[1]]
0000142C:             ; ;;return tot
0000142C: E92D4FF0    ;     push {R14, R4-R11} ;;I used the fp before I knew it wasn't a general purpose one, its fine 
                      ; in this context anyway
00001430:             ; 
00001430: E24F4E43    ;     adrl R4, offsets ;;holds the offset
00001434: E2444A01    ; 
00001438:             ; 
00001438: E1A07000    ;     mov R7, R0
0000143C: E1A08001    ;     mov R8, R1
00001440: E1A09002    ;     mov R9, R2
00001444: E3A0A000    ;     mov R10, #0 ;;R10 holds the total
00001448: E24FB0FD    ;     adrl R11, width
0000144C: E24BBC13    ; 
00001450: E55BB000    ;     ldrb R11, [R11];;R11 holds the width of the grid
00001454:             ; 
00001454: E3A03000    ;     mov R3, #0
00001458:             ; 
00001458:             ; countneighboursloop
00001458: E3530008    ;     cmp R3, #8 ;;change this ccheck to be for R4
0000145C: 0A00000F    ;     beq countneighbourslend
00001460:             ; 
00001460: E4945004    ;     ldr R5, [R4], #4
00001464: E4946004    ;     ldr R6, [R4], #4
00001468:             ; 
00001468: E0880005    ;     add R0, R8, R5
0000146C: E0891006    ;     add R1, R9, R6
00001470:             ; 
00001470: E2833001    ;     add R3, R3, #1
00001474:             ; 
00001474: E92D0008    ;     push {R3} ;;I should probably be using a local var on the stack, but I don't yet know how t
                      ; o setup a stack frame properly
00001478: EB00000B    ;     bl isinrange
0000147C: E8BD0008    ;     pop {R3}
00001480:             ; 
00001480: E3500000    ;     cmp R0, #0
00001484: 0A000004    ;     beq countneighboursskipadd
00001488:             ; 
00001488: E0880005    ;     add R0, R8, R5 ;;new row
0000148C: E0891006    ;     add R1, R9, R6 ;;new col ;;can assume that R0, R1 haven't changed as isinrange doesn't edit
                      ;  them, but I'm going to for now
00001490:             ; 
00001490: E0201B90    ;     mla R0, R0, R11, R1 ;;find offset
00001494: E7D70000    ;     ldrb R0, [R7, R0]
00001498: E08AA000    ;     add R10, R10, R0 ;;tot += grid[newrow][newcol]
0000149C:             ; 
0000149C:             ; countneighboursskipadd
0000149C: EAFFFFED    ;     b countneighboursloop
000014A0:             ; 
000014A0:             ; countneighbourslend
000014A0:             ; countneighboursend
000014A0: E1A0000A    ;     mov R0, R10
000014A4: E8BD4FF0    ;     pop {R14, R4-R11}
000014A8: E1A0F00E    ;     mov R15, R14
000014AC:             ; 
000014AC:             ; 
000014AC:             ; isinrange
000014AC:             ; ;;INP in R0 is the row
000014AC:             ; ;;INP in R1 is the col
000014AC:             ; ;;Uses defined width and height
000014AC:             ; ;;RET in R0 is 1 if is in range else 0
000014AC: E3A02001    ;     mov R2, #1 ;;is valid unless...
000014B0:             ; 
000014B0: E3500000    ;     cmp R0, #0
000014B4: BA00000D    ;     blt isinrangefail
000014B8:             ; 
000014B8: E3510000    ;     cmp R1, #0
000014BC: BA00000B    ;     blt isinrangefail
000014C0:             ; 
000014C0: E24F3075    ;     adrl R3, width
000014C4: E2433B05    ; 
000014C8: E5533000    ;     ldrb R3, [R3]
000014CC: E1510003    ;     cmp R1, R3
000014D0: AA000006    ;     bge isinrangefail
000014D4:             ; 
000014D4: E24F3088    ;     adrl R3, height
000014D8: E2433B05    ; 
000014DC: E5533000    ;     ldrb R3, [R3]
000014E0: E1500003    ;     cmp R0, R3
000014E4: AA000001    ;     bge isinrangefail
000014E8:             ; 
000014E8: E3A00001    ;     mov R0, #1
000014EC: EA000000    ;     b isinrangeend
000014F0:             ; 
000014F0:             ; isinrangefail
000014F0: E3A00000    ;     mov R0, #0
000014F4:             ; 
000014F4:             ; isinrangeend
000014F4: E1A0F00E    ;     mov R15, R14
000014F8:             ; 
000014F8:             ; 
000014F8:             ; ;; The heap will be a linked list of free blocks - unlike the Comodo version which stores both 
                      ; free & taken blocks 
000014F8:             ; ;; This is an idea I'm stealing from the C programming book
000014F8:             ; ;; Crate structure
000014F8:             ; ;;  |-ptr to next crate (1 word)
000014F8:             ; ;;  |-ptr to prev crate (1 word)
000014F8:             ; ;;  `-Size (bytes)      (1 word)
000014F8:             ; ;; 
000014F8:             ; 
000014F8:             ; ;;  Traversal of the heap
000014F8:             ; ;;  Unlink in my Comodo implimentation the heap is not a linked list of all Crates (free or not
                      ; )
000014F8:             ; ;;  That made traversing the heap for debugging purposes very easy, in this case taken crates d
                      ; o not point to the next
000014F8:             ; ;;  Instead could start at head and then just go to addr + sizeof(Crate) + size. This should ta
                      ; ke us to the next crate, free or not
000014F8:             ; ;;  
000014F8:             ; setupHeap
000014F8:             ; ;;NO INP
000014F8:             ; ;;NO OUT
000014F8:             ;     ;;we have the heapstart
000014F8:             ;     ;;the end of the heap will be 0x100000 (it will overlap with the stack :) )
000014F8: E24F00FC    ;     adrl R0, heaphead
000014FC: E2400B05    ; 
00001500: E5100000    ;     ldr R0, [R0] ;;stores the mem addr of the start of the heap
00001504: E3A01601    ;     ldr R1, =max_addr ;;stores the end of the heap
00001508: E3A02801    ;     ldr R2, =stack_size
0000150C: E0411002    ;     sub R1, R1, R2
00001510:             ; 
00001510: E0411000    ;     sub R1, R1, R0  ;;HEAPEND - HEAPSTART = TOTAL STORAGE (bytes)
00001514: E241100C    ;     sub R1, R1, #12 ;;SIZE -= SIZEOF(CRATE) (12 bytes)
00001518: E5801008    ;     str R1, [R0, #8] ;;set the size of the crate
0000151C: E3A01000    ;     mov R1, #0
00001520: E5801004    ;     str R1, [R0, #4] ;;set the prev ptr
00001524: E5801000    ;     str R1, [R0, #0] ;;set the next ptr
00001528:             ; 
00001528: E1A0F00E    ;     mov R15, R14
0000152C:             ; 
0000152C:             ; ;; The heap is a linked list of free Crates and so find the header and then go though until one
                      ;  satifies the size requirement
0000152C:             ; ;;  end if next is 0
0000152C:             ; ;;  once found either take over the crate or split it into two new crates
0000152C:             ; ;;  align the bytes amount to 8 byte boundry
0000152C:             ; malloc
0000152C:             ; ;;INP into R0 bytes to allocate
0000152C:             ; ;;OUT into R0 the ptr to the memory or 0 for no memory allocated
0000152C:             ;     ;;step 1 align the bytes
0000152C:             ;     ;;1001010 & 0111 = 0000010 ;2
0000152C:             ;     ;;if 0 goto alignend
0000152C:             ;     ;;1001010 + (8 - 2)
0000152C: E92D0010    ;     push {R4}
00001530:             ; 
00001530: E2001007    ;     and R1, R0, #0b0111
00001534: E3510000    ;     cmp R1, #0
00001538: 0A000002    ;     beq mallignend
0000153C: E3A03008    ;     mov R3, #0b1000
00001540: E0432001    ;     sub R2, R3, R1
00001544: E0800002    ;     add R0, R0, R2
00001548:             ; 
00001548:             ; mallignend
00001548: E24F1F53    ;     adrl R1, heaphead
0000154C: E2411B05    ; 
00001550: E5111000    ;     ldr R1, [R1] ;;stores a ptr to the first block
00001554:             ;     
00001554:             ; checkcrate
00001554: E5912008    ;     ldr R2, [R1, #8] ;;Size of the crate
00001558: E1500002    ;     cmp R0, R2 ;;bytes needed - bytes in crate
0000155C: DA000006    ;     ble foundcrate
00001560: E5912000    ;     ldr R2, [R1, #0] ;;get the next ptr
00001564: E3520000    ;     cmp R2, #0
00001568: 0A000001    ;     beq nocrates
0000156C: E1A01002    ;     mov R1, R2 ;;swap the current crate with the next crate
00001570: EAFFFFF7    ;     b checkcrate
00001574:             ; nocrates
00001574: E3A00000    ;     mov R0, #0
00001578: EA000015    ;     b mallocEnd
0000157C:             ; 
0000157C:             ; foundcrate
0000157C:             ;     ;;Once a crate that we can use has been found we need to either split the crate or use the 
                      ; crate
0000157C:             ;     ;;We should use the whole crate only when its size < bytesneeded + CrateHeader + 8
0000157C:             ;     ;;This would give the edge case crate 8 bytes
0000157C:             ;     
0000157C:             ;     ;;R1 holds the found crate ptr
0000157C:             ;     ;;R0 is the bytes requested and aligned
0000157C: E2802014    ;     add R2, R0, #20 ;;A crate header is 12 bytes + the extra 8 bytes minimum
00001580: E5913008    ;     ldr R3, [R1, #8]
00001584: E1530002    ;     cmp R3, R2
00001588: BA00000C    ;     blt usecrate
0000158C:             ; splitcrate
0000158C:             ;     ;;In this case we have a large crate that should be split up.
0000158C:             ;     ;;ATM the crate will just be split up to where the requested memory is at the end of the fr
                      ; ee Crate.
0000158C:             ; 
0000158C: E5913008    ;     ldr R3, [R1, #8] ;;The size of the toSplit Crate
00001590: E0433000    ;     sub R3, R3, R0 ;; size - bytesRequested
00001594: E243300C    ;     sub R3, R3, #12 ;; size - bytesRequested - sizeof(Crate)
00001598: E5813008    ;     str R3, [R1, #8] ;;toSplit->size = newSize
0000159C:             ; 
0000159C: E0833001    ;     add R3, R3, R1 ;; newSize + toSplit.addr
000015A0: E283400C    ;     add R4, R3, #12 ;; newSize + toSplit.addr + sizeof(Crate) = position of new Crate
000015A4:             ; 
000015A4:             ;     ;;Setup the header for the newCrate
000015A4: E3A02000    ;     mov R2, #0
000015A8: E5842000    ;     str R2, [R4, #0] ;;next = 0
000015AC: E5842004    ;     str R2, [R4, #4] ;;prev = 0
000015B0: E5840008    ;     str R0, [R4, #8] ;;size = requested and aligned
000015B4:             ; 
000015B4:             ;     ;;MAYBE: can the crates that are taken have a smaller header than those that are free. Take
                      ; n crates need not store the next, prev free nodes
000015B4:             ;     ;;This may complicate things as size would need to be moved around and the size from taken 
                      ; to free would be different. 
000015B4:             ; 
000015B4: E284400C    ;     add R4, R4, #12
000015B8:             ; 
000015B8: E1A00004    ;     mov R0, R4
000015BC:             ; 
000015BC: EA000004    ;     b mallocEnd
000015C0:             ; 
000015C0:             ; usecrate
000015C0:             ;     ;; Simplest option as we can just remove it from the list
000015C0:             ;     ;; c1 <-> c2 <-> c3 ==> c1 <-> c3
000015C0: E5912000    ;     ldr R2, [R1, #0] ;;next ptr
000015C4: E5913004    ;     ldr R3, [R1, #4] ;;prev ptr
000015C8: E5823004    ;     str R3, [R2, #4] ;;Store c1 into c3's previous
000015CC: E5832000    ;     str R2, [R3, #0] ;;Store c3 into c1's next
000015D0:             ; 
000015D0: E1A00001    ;     mov R0, R1 ;;move the found crate's address into the return register ;;The crate header is 
                      ; no longer needed
000015D4:             ; 
000015D4:             ; mallocEnd
000015D4: E8BD0010    ;     pop {R4}
000015D8: E1A0F00E    ;     mov R15, R14
000015DC:             ; 
000015DC:             ; 
000015DC:             ; printHeap
000015DC:             ; ;;This is a debugging function that will print the free and taken list
000015DC:             ; ;;,-----------------------------------------------------------------,
000015DC:             ; ;;|   large free block  |tkn1   |tkn2       | freed1    | tkn3      |
000015DC:             ; ;;|                     |       |           |           |           |
000015DC:             ; ;;|                     |       |           |           |           |
000015DC:             ; ;;`-----------------------------------------------------------------'
000015DC:             ; 
000015DC:             ; ;;  PrintFree() - follow the free list ptrs print addr + size
000015DC:             ; ;;  PrintAll()  - start at head and go addr + size + 12 to get next, continue to end
000015DC: E92D47F0    ;     push {R14, R4-R10}
000015E0:             ; 
000015E0: EB00001F    ;     bl printFree
000015E4:             ; 
000015E4: EB000001    ;     bl printAll
000015E8:             ; 
000015E8:             ; printHeapend
000015E8: E8BD47F0    ;     pop {R14, R4-R10}
000015EC: E1A0F00E    ;     mov R15, R14
000015F0:             ; 
000015F0:             ; printAll
000015F0: E92D41F0    ;     push {R14, R4-R8}
000015F4:             ; 
000015F4: E28F00A2    ;     adrl R0, printAll_m
000015F8: E2800A01    ; 
000015FC: EF000003    ;     swi 3
00001600:             ;     
00001600: E28F0F47    ;     adrl R0, heapstart
00001604: E2800A01    ; 
00001608: E1A04000    ;     mov R4, R0
0000160C:             ; 
0000160C: E1A05000    ;     mov R5, R0 ;;stores the next expected free node
00001610:             ; 
00001610:             ; printAllLoop
00001610: E5941000    ;     ldr R1, [R4, #0] ;;next ptr
00001614: E5942004    ;     ldr R2, [R4, #4] ;;prev ptr
00001618: E5943008    ;     ldr R3, [R4, #8] ;;size
0000161C:             ; 
0000161C:             ;     ;;check if this is a free node
0000161C: E1550004    ;     cmp R5, R4
00001620:             ; 
00001620: 028F0099    ;     adrleq R0, printAll_m_f
00001624: 02800A01    ; 
00001628: 128F00A7    ;     adrlne R0, printAll_m_t
0000162C: 12800A01    ; 
00001630: EF000003    ;     swi 3
00001634:             ; 
00001634: 1A000000    ;     bne printAllLoopCont
00001638:             ; 
00001638: E1A05001    ;     mov R5, R1
0000163C:             ; 
0000163C:             ; printAllLoopCont
0000163C: E1A00004    ;     mov R0, R4
00001640: EB00001C    ;     bl printblock
00001644:             ; 
00001644:             ;     ;;calculate the next block
00001644:             ;     ;;addr + 12 + size
00001644:             ; 
00001644: E284000C    ;     add R0, R4, #12
00001648: E0800003    ;     add R0, R0, R3
0000164C:             ; 
0000164C: E1A04000    ;     mov R4, R0
00001650:             ; 
00001650: E354080F    ;     cmp R4, #0xF0000
00001654: AA000000    ;     bge printAllLend
00001658:             ;     
00001658: EAFFFFEC    ;     b printAllLoop
0000165C:             ; 
0000165C:             ; printAllLend
0000165C:             ; printAllEnd
0000165C: E8BD41F0    ;     pop {R14, R4-R8}
00001660: E1A0F00E    ;     mov R15, R14
00001664:             ; 
00001664:             ; printFree
00001664: E92D41F0    ;     push {R14, R4-R8}
00001668:             ; 
00001668: E28F0FF7    ;     adrl R0, printFree_m
0000166C: E2800B03    ; 
00001670: EF000003    ;     swi 3
00001674:             ; 
00001674: E28F00A8    ;     adrl R0, heapstart
00001678: E2800A01    ; 
0000167C: E1A04000    ;     mov R4, R0
00001680:             ; 
00001680:             ; printFreeloop
00001680: E5941000    ;     ldr R1, [R4, #0] ;;next ptr
00001684: E5942004    ;     ldr R2, [R4, #4] ;;prev ptr
00001688: E5943008    ;     ldr R3, [R4, #8] ;;size
0000168C:             ; 
0000168C: E28F00CB    ;     adrl R0, printfree_f_m
00001690: E2800C0F    ; 
00001694: EF000003    ;     swi 3
00001698:             ; 
00001698: E1A00004    ;     mov R0, R4
0000169C: EB000005    ;     bl printblock
000016A0:             ; 
000016A0: E3510000    ;     cmp R1, #0
000016A4: 0A000001    ;     beq printFreelend
000016A8:             ; 
000016A8: E1A04001    ;     mov R4, R1
000016AC: EAFFFFF3    ;     b printFreeloop
000016B0:             ; 
000016B0:             ; printFreelend
000016B0:             ; printFreeEnd
000016B0: E8BD41F0    ;     pop {R14, R4-R8}
000016B4: E1A0F00E    ;     mov R15, R14
000016B8:             ; 
000016B8:             ; printblock
000016B8:             ; ;;INP in R0 is the addr
000016B8:             ; ;;INP in R1 is the next
000016B8:             ; ;;INP in R2 is the prev
000016B8:             ; ;;INP in R3 is the size
000016B8:             ; ;;RET --
000016B8: E92D0010    ;     push {R4}
000016BC: E1A04000    ;     mov R4, R0
000016C0:             ; 
000016C0: E28F00B6    ;     adrl R0, cutoff
000016C4: E2800C0A    ; 
000016C8: EF000003    ;     swi 3
000016CC:             ; 
000016CC: E28F00A2    ;     adrl R0, printfree_f_mad
000016D0: E2800C0F    ; 
000016D4: EF000003    ;     swi 3
000016D8:             ; 
000016D8: E1A00004    ;     mov R0, R4
000016DC: EF000004    ;     swi 4
000016E0:             ; 
000016E0: E3A0000A    ;     ldr R0, =nl
000016E4: EF000000    ;     swi 0
000016E8:             ; 
000016E8: E28F0EF9    ;     adrl R0, printfree_f_mnx
000016EC: E2800000    ; 
000016F0: EF000003    ;     swi 3
000016F4:             ; 
000016F4: E1A00001    ;     mov R0, R1
000016F8: EF000004    ;     swi 4
000016FC:             ; 
000016FC: E3A0000A    ;     ldr R0, =nl
00001700: EF000000    ;     swi 0
00001704:             ; 
00001704: E28F007E    ;     adrl R0, printfree_f_mpr
00001708: E2800C0F    ; 
0000170C: EF000003    ;     swi 3
00001710:             ; 
00001710: E1A00002    ;     mov R0, R2
00001714: EF000004    ;     swi 4
00001718:             ; 
00001718: E3A0000A    ;     ldr R0, =nl
0000171C: EF000000    ;     swi 0
00001720:             ; 
00001720: E28F0FDB    ;     adrl R0, printfree_f_msz
00001724: E2800B03    ; 
00001728: EF000003    ;     swi 3
0000172C:             ; 
0000172C: E1A00003    ;     mov R0, R3
00001730: EF000004    ;     swi 4
00001734:             ; 
00001734: E3A0000A    ;     ldr R0, =nl
00001738: EF000000    ;     swi 0
0000173C:             ; 
0000173C: E28F003A    ;     adrl R0, cutoff
00001740: E2800C0A    ; 
00001744: EF000003    ;     swi 3
00001748:             ; 
00001748: E8BD0010    ;     pop {R4}
0000174C: E1A0F00E    ;     mov R15, R14
00001750:             ; 
00001750:             ; 
00001750:             ; free
00001750:             ; ;;INP in R0 is the mem addr of the data to be freed
00001750:             ; ;;OUT in R0 is the success code - 0 for mem freed, ¬0 for error ;;probably won't be currently 
                      ; used `=(- -)=' 
00001750:             ;     ;;In order to free memory we need to add it back to the linked list
00001750:             ;     ;;Following K&R's version the linked list will be ordered by address this will make finding
                      ;  consecutive memory locations that should be combined easier
00001750:             ; 
00001750:             ;     ;;The inputted address of the crate is the address given in malloc and so the start of the 
                      ; crate is that addr - sizeof(Crate) (#12)
00001750:             ; 
00001750:             ;     ;;heapHead = first Crate
00001750:             ;     ;;current = heapHead
00001750:             ;     ;;while (toFree.addr > current.addr)
00001750:             ;     ;;  current = current.next
00001750:             ;     ;;
00001750:             ;     ;;//Add the toFree Crate inbetween the current and its previous i.e.  A<->B<->C, toFree = D
                      ;  (addr < C, addr > B) ==> A<->B<->D<->C
00001750:             ;     ;;current->prev->next = toFree
00001750:             ;     ;;toFree->prev = current.prev
00001750:             ;     ;;current->prev = toFree
00001750:             ;     ;;toFree->next = current
00001750:             ; 
00001750:             ;     ;; Crate structure
00001750:             ;     ;;  |-ptr to next crate (1 word)
00001750:             ;     ;;  |-ptr to prev crate (1 word)
00001750:             ;     ;;  `-Size (bytes)      (1 word)
00001750:             ; 
00001750: E92D41F0    ;     push {R14, R4-R8}
00001754:             ; 
00001754: E24F1FD6    ;     adrl R1, heaphead
00001758: E2411B05    ; 
0000175C: E5111000    ;     ldr R1, [R1] ;;R1 will hold the current
00001760: E240000C    ;     sub R0, R0, #12 ;;subtract sizeof(Crate) to get header pointer
00001764:             ; freeloop
00001764: E5912000    ;     ldr R2, [R1, #0] ;;load the ptr to the next
00001768: E1520000    ;     cmp R2, R0 ;;compare the address of the toFree to the address of current->next
0000176C:             ; 
0000176C: AA000003    ;     bge freelend ;;current->next.addr >= toFree.addr
00001770:             ; 
00001770: E3520000    ;     cmp R2, #0 ;;If there are no more Crates to the right then this could be a new Crate at the
                      ;  end or |F|T| it should merge left 
00001774: 0A000009    ;     beq freelendEnd
00001778:             ; 
00001778: E1A01002    ;     mov R1, R2 ;;current = current.next
0000177C:             ; 
0000177C: EAFFFFF8    ;     b freeloop
00001780:             ; 
00001780:             ; freelend
00001780:             ;     ;; R1 holds the current (left)
00001780:             ;     ;; R2 holds the c->next (right)
00001780: E5912000    ;     ldr R2, [R1, #0]
00001784:             ; 
00001784:             ;     ;;Setup the ptrs for the crates this will help later on   left<->toFree<->right ;;left,righ
                      ; t can be 0
00001784:             ;     ;;We're just adding the new crate to the linked list
00001784:             ;     ;;current->next->prev = toFree
00001784:             ;     ;;toFree->next = current->next
00001784:             ;     ;;current->next = toFree
00001784:             ;     ;;toFree->prev = current
00001784:             ; 
00001784: E5913000    ;     ldr R3, [R1, #0] ;;holds current->next
00001788: E3530000    ;     cmp R3, #0
0000178C: 15830004    ;     strne R0, [R3, #4] ;;current->next->prev = toFree
00001790: E5803000    ;     str R3, [R0, #0] ;;toFree->next = current->next
00001794: E5810000    ;     str R0, [R1, #0] ;;current->next = toFree
00001798: E5801004    ;     str R1, [R0, #4] ;;toFree->prev = current
0000179C:             ; 
0000179C: EA000001    ;     b freeMergeCheck
000017A0:             ; 
000017A0:             ; freelendEnd
000017A0:             ; ;;If there are no more Crates to the right then this could be a new Crate at the end or |F|T| i
                      ; t should merge left 
000017A0:             ; ;;Found a crate (current) that is to the left of the crate as we ran out of ->next ptrs
000017A0:             ; ;;Need to set current->next = toFree
000017A0:             ; ;;            toFree->prev = current
000017A0: E5801004    ;     str R1, [R0, #4] ;;toFree->prev = current
000017A4: E5810000    ;     str R0, [R1, #0] ;;current->next = toFree
000017A8:             ; 
000017A8:             ; freeMergeCheck
000017A8:             ;     ;;We have a ptr to current. This should be the closest Crate to the left of toFree
000017A8:             ;     ;;We also have the next Crate (null or not) which is to the right of toFree
000017A8:             ;     ;;Both of these crates MAY need to be merged but could also have taken crates in between
000017A8:             ;     ;;First is to check if the crates are adjacent
000017A8:             ;     ;;  If they are NOT then create a newCrate
000017A8:             ;     ;;  If they are     then merge both
000017A8:             ;     ;;  If only one     then merge either left or right
000017A8:             ; 
000017A8:             ;     ;;R1 will be left
000017A8:             ;     ;;R2 will be right
000017A8:             ; 
000017A8: E3510000    ;     cmp R1, #0
000017AC: 01A01000    ;     moveq R1, R0 ;;If there is no left crate then left=toFree
000017B0: E3520000    ;     cmp R2, #0
000017B4: 01A02000    ;     moveq R2, R0 ;;If there is no right crate (more likely) then right=toFree
000017B8:             ; 
000017B8:             ; verifyLeft
000017B8:             ;     ;;Check if the left is adjacent
000017B8:             ;     ;;It will be if (left.addr + sizeof(Crate) + left.size == toFree.addr)
000017B8:             ; 
000017B8: E5913008    ;     ldr R3, [R1, #8]
000017BC: E283300C    ;     add R3, R3, #12 ;;12 is sizeof(Crate) + toFree.size
000017C0: E0833001    ;     add R3, R3, R1 ;;left.addr + left->size ??
000017C4:             ; 
000017C4: E1530000    ;     cmp R3, R0
000017C8: 11A01000    ;     movne R1, R0
000017CC:             ; 
000017CC:             ; verifyRight
000017CC:             ;     ;;Going from toFree to Right
000017CC: E5903008    ;     ldr R3, [R0, #8] ;;get size of toFree
000017D0: E283300C    ;     add R3, R3, #12 ;;12 is sizeof(Crate) + toFree.size
000017D4: E0833000    ;     add R3, R3, R0 ;; + toFree.addr
000017D8:             ; 
000017D8: E1530002    ;     cmp R3, R2
000017DC: 11A02000    ;     movne R2, R0
000017E0:             ; 
000017E0:             ; merge
000017E0:             ;     ;;Merge the two Crates given in R1 and R2
000017E0:             ;     ;;left can be (left) or (toFree)
000017E0:             ;     ;;right can be (right) or (toFree)
000017E0:             ;     ;;If left == right: don't merge; create new Crate
000017E0:             ;     ;;If left != right: then add to left's size
000017E0:             ; 
000017E0: E1510002    ;     cmp R1, R2
000017E4: 0A000008    ;     beq mergeNew
000017E8:             ; 
000017E8:             ;     ;;The new size is right.addr - left.addr + right->size    from right.addr - left.addr - siz
                      ; eof(Crate) + sizeof(Crate) + right->size
000017E8:             ;     ;;                                                               |left      |right
000017E8:             ;     ;;                                                               |<12>|size||<12>|size|
000017E8:             ;     ;;
000017E8:             ;     ;;                                                               |left      
000017E8:             ;     ;;                                                               |<12>|size           |
000017E8:             ;     ;;
000017E8:             ;     ;;I'm doing it this way as the left and right may not be contiguous i.e. if toFree has a fr
                      ; ee crate on either side
000017E8:             ; 
000017E8: E0423001    ;     sub R3, R2, R1
000017EC: E5924008    ;     ldr R4, [R2, #8]
000017F0: E0833004    ;     add R3, R3, R4
000017F4: E5813008    ;     str R3, [R1, #8]
000017F8:             ; 
000017F8:             ;     ;;Time to switch some ptrs
000017F8:             ;     ;;Current state left.prev<->left<->right<->right.next (with left or right = toFree) or left
                      ; .prev<->left<->toFree<->right<->right.next
000017F8:             ;     ;;New state would be left.prev<->left<->right.next (with left or right = toFree) or left.pr
                      ; ev<->left<->right.next
000017F8:             ;     ;;Both cases end the same, so get right.next. These could be 0 but it doesn't matter
000017F8:             ;     ;;Next need to change the prev and next ptrs for adjacent Crates
000017F8:             ;     ;;i.e. right->next->prev = left
000017F8:             ; 
000017F8: E5924000    ;     ldr R4, [R2, #0] ;;right->next
000017FC: E1540001    ;     cmp R4, R1
00001800: 15814000    ;     strne R4, [R1, #0] ;;left->next = right->next
00001804:             ; 
00001804: E3540000    ;     cmp R4, #0
00001808: 15841004    ;     strne R1, [R4, #4] ;;right->next->prev = left
0000180C:             ; 
0000180C:             ; mergeNew
0000180C:             ;     ;;The crate has already been setup with its ptrs and had its size as well so don't need to 
                      ; do anything
0000180C:             ; 
0000180C:             ; freeEnd
0000180C: E8BD41F0    ;     pop {R14, R4-R8}
00001810: E1A0F00E    ;     mov R15, R14
00001814:             ; 
00001814:             ; align
00001814:             ; 
00001814:             ; ;;String defs -- The naming scheme is bad :(
00001814: 2D 2D 2D 2D ; welcomemsg      defb "-----------Welcome to JCGOL in ARM32-----------", nl, 0
00001818: 2D 2D 2D 2D ; 
0000181C: 2D 2D 2D 57 ; 
00001820: 65 6C 63 6F ; 
00001824: 6D 65 20 74 ; 
00001828: 6F 20 4A 43 ; 
0000182C: 47 4F 4C 20 ; 
00001830: 69 6E 20 41 ; 
00001834: 52 4D 33 32 ; 
00001838: 2D 2D 2D 2D ; 
0000183C: 2D 2D 2D 2D ; 
00001840: 2D 2D 2D 0A ; 
00001844: 00          ; 
00001845: 28 4E 29 65 ; welcome2msg     defb "(N)ew board\n(L)oad a saved board\n(H)elp msg\n(S)ettings\n(P)rint the he
00001849: 77 20 62 6F ; ap\n(Q)uit", nl, 0
0000184D: 61 72 64 0A ; 
00001851: 28 4C 29 6F ; 
00001855: 61 64 20 61 ; 
00001859: 20 73 61 76 ; 
0000185D: 65 64 20 62 ; 
00001861: 6F 61 72 64 ; 
00001865: 0A 28 48 29 ; 
00001869: 65 6C 70 20 ; 
0000186D: 6D 73 67 0A ; 
00001871: 28 53 29 65 ; 
00001875: 74 74 69 6E ; 
00001879: 67 73 0A 28 ; 
0000187D: 50 29 72 69 ; 
00001881: 6E 74 20 74 ; 
00001885: 68 65 20 68 ; 
00001889: 65 61 70 0A ; 
0000188D: 28 51 29 75 ; 
00001891: 69 74 0A 00 ; 
00001895: 49 6E 76 61 ; mainchoicefail  defb "Invalid choice please enter 'n' for new board, 'l' for load a board, 'h' 
00001899: 6C 69 64 20 ; to view help message, 's' to view settings, 'p' to view the heap, or 'q' to close. Not cases se
0000189D: 63 68 6F 69 ; nsative", nl, 0
000018A1: 63 65 20 70 ; 
000018A5: 6C 65 61 73 ; 
000018A9: 65 20 65 6E ; 
000018AD: 74 65 72 20 ; 
000018B1: 27 6E 27 20 ; 
000018B5: 66 6F 72 20 ; 
000018B9: 6E 65 77 20 ; 
000018BD: 62 6F 61 72 ; 
000018C1: 64 2C 20 27 ; 
000018C5: 6C 27 20 66 ; 
000018C9: 6F 72 20 6C ; 
000018CD: 6F 61 64 20 ; 
000018D1: 61 20 62 6F ; 
000018D5: 61 72 64 2C ; 
000018D9: 20 27 68 27 ; 
000018DD: 20 74 6F 20 ; 
000018E1: 76 69 65 77 ; 
000018E5: 20 68 65 6C ; 
000018E9: 70 20 6D 65 ; 
000018ED: 73 73 61 67 ; 
000018F1: 65 2C 20 27 ; 
000018F5: 73 27 20 74 ; 
000018F9: 6F 20 76 69 ; 
000018FD: 65 77 20 73 ; 
00001901: 65 74 74 69 ; 
00001905: 6E 67 73 2C ; 
00001909: 20 27 70 27 ; 
0000190D: 20 74 6F 20 ; 
00001911: 76 69 65 77 ; 
00001915: 20 74 68 65 ; 
00001919: 20 68 65 61 ; 
0000191D: 70 2C 20 6F ; 
00001921: 72 20 27 71 ; 
00001925: 27 20 74 6F ; 
00001929: 20 63 6C 6F ; 
0000192D: 73 65 2E 20 ; 
00001931: 4E 6F 74 20 ; 
00001935: 63 61 73 65 ; 
00001939: 73 20 73 65 ; 
0000193D: 6E 73 61 74 ; 
00001941: 69 76 65 0A ; 
00001945: 00          ; 
00001946: 53 6C 6F 77 ; helpmsg         defb "Slow mode will create a pause between each grid print to make it more rea
0000194A: 20 6D 6F 64 ; dable - can't use with step mode\nErase mode will erase the previous board before printing the 
0000194E: 65 20 77 69 ; next - [is 2x slower]\n", 0
00001952: 6C 6C 20 63 ; 
00001956: 72 65 61 74 ; 
0000195A: 65 20 61 20 ; 
0000195E: 70 61 75 73 ; 
00001962: 65 20 62 65 ; 
00001966: 74 77 65 65 ; 
0000196A: 6E 20 65 61 ; 
0000196E: 63 68 20 67 ; 
00001972: 72 69 64 20 ; 
00001976: 70 72 69 6E ; 
0000197A: 74 20 74 6F ; 
0000197E: 20 6D 61 6B ; 
00001982: 65 20 69 74 ; 
00001986: 20 6D 6F 72 ; 
0000198A: 65 20 72 65 ; 
0000198E: 61 64 61 62 ; 
00001992: 6C 65 20 2D ; 
00001996: 20 63 61 6E ; 
0000199A: 27 74 20 75 ; 
0000199E: 73 65 20 77 ; 
000019A2: 69 74 68 20 ; 
000019A6: 73 74 65 70 ; 
000019AA: 20 6D 6F 64 ; 
000019AE: 65 0A 45 72 ; 
000019B2: 61 73 65 20 ; 
000019B6: 6D 6F 64 65 ; 
000019BA: 20 77 69 6C ; 
000019BE: 6C 20 65 72 ; 
000019C2: 61 73 65 20 ; 
000019C6: 74 68 65 20 ; 
000019CA: 70 72 65 76 ; 
000019CE: 69 6F 75 73 ; 
000019D2: 20 62 6F 61 ; 
000019D6: 72 64 20 62 ; 
000019DA: 65 66 6F 72 ; 
000019DE: 65 20 70 72 ; 
000019E2: 69 6E 74 69 ; 
000019E6: 6E 67 20 74 ; 
000019EA: 68 65 20 6E ; 
000019EE: 65 78 74 20 ; 
000019F2: 2D 20 5B 69 ; 
000019F6: 73 20 32 78 ; 
000019FA: 20 73 6C 6F ; 
000019FE: 77 65 72 5D ; 
00001A02: 0A 00       ; 
00001A04: 53 69 6E 67 ; help2msg        defb "Single step mode will prompt for input each time a grid is drawn, you can
00001A08: 6C 65 20 73 ;  (s)ave the current state or (q)uit to menu", 0
00001A0C: 74 65 70 20 ; 
00001A10: 6D 6F 64 65 ; 
00001A14: 20 77 69 6C ; 
00001A18: 6C 20 70 72 ; 
00001A1C: 6F 6D 70 74 ; 
00001A20: 20 66 6F 72 ; 
00001A24: 20 69 6E 70 ; 
00001A28: 75 74 20 65 ; 
00001A2C: 61 63 68 20 ; 
00001A30: 74 69 6D 65 ; 
00001A34: 20 61 20 67 ; 
00001A38: 72 69 64 20 ; 
00001A3C: 69 73 20 64 ; 
00001A40: 72 61 77 6E ; 
00001A44: 2C 20 79 6F ; 
00001A48: 75 20 63 61 ; 
00001A4C: 6E 20 28 73 ; 
00001A50: 29 61 76 65 ; 
00001A54: 20 74 68 65 ; 
00001A58: 20 63 75 72 ; 
00001A5C: 72 65 6E 74 ; 
00001A60: 20 73 74 61 ; 
00001A64: 74 65 20 6F ; 
00001A68: 72 20 28 71 ; 
00001A6C: 29 75 69 74 ; 
00001A70: 20 74 6F 20 ; 
00001A74: 6D 65 6E 75 ; 
00001A78: 00          ; 
00001A79: 54 68 61 6E ; mainendmsg      defb "Thank you for playing JCGOL for ARM32", nl, 0
00001A7D: 6B 20 79 6F ; 
00001A81: 75 20 66 6F ; 
00001A85: 72 20 70 6C ; 
00001A89: 61 79 69 6E ; 
00001A8D: 67 20 4A 43 ; 
00001A91: 47 4F 4C 20 ; 
00001A95: 66 6F 72 20 ; 
00001A99: 41 52 4D 33 ; 
00001A9D: 32 0A 00    ; 
00001AA0: 57 6F 75 6C ; askdefaults     defb "Would you like to use the default settings? Y/n: ", 0
00001AA4: 64 20 79 6F ; 
00001AA8: 75 20 6C 69 ; 
00001AAC: 6B 65 20 74 ; 
00001AB0: 6F 20 75 73 ; 
00001AB4: 65 20 74 68 ; 
00001AB8: 65 20 64 65 ; 
00001ABC: 66 61 75 6C ; 
00001AC0: 74 20 73 65 ; 
00001AC4: 74 74 69 6E ; 
00001AC8: 67 73 3F 20 ; 
00001ACC: 59 2F 6E 3A ; 
00001AD0: 20 00       ; 
00001AD2: 45 6E 61 62 ; askerase        defb "Enable erase mode? Y/n: ", 0
00001AD6: 6C 65 20 65 ; 
00001ADA: 72 61 73 65 ; 
00001ADE: 20 6D 6F 64 ; 
00001AE2: 65 3F 20 59 ; 
00001AE6: 2F 6E 3A 20 ; 
00001AEA: 00          ; 
00001AEB: 45 6E 61 62 ; askslow         defb "Enable slow mode? Y/n: ", 0
00001AEF: 6C 65 20 73 ; 
00001AF3: 6C 6F 77 20 ; 
00001AF7: 6D 6F 64 65 ; 
00001AFB: 3F 20 59 2F ; 
00001AFF: 6E 3A 20 00 ; 
00001B03: 45 6E 61 62 ; askstep         defb "Enable step mode? Y/n: ", 0
00001B07: 6C 65 20 73 ; 
00001B0B: 74 65 70 20 ; 
00001B0F: 6D 6F 64 65 ; 
00001B13: 3F 20 59 2F ; 
00001B17: 6E 3A 20 00 ; 
00001B1B: 43 61 6E 6E ; stepslowwarning defb "Cannot have slow and step mode active at the same time, disabling slow mo
00001B1F: 6F 74 20 68 ; de", nl, 0
00001B23: 61 76 65 20 ; 
00001B27: 73 6C 6F 77 ; 
00001B2B: 20 61 6E 64 ; 
00001B2F: 20 73 74 65 ; 
00001B33: 70 20 6D 6F ; 
00001B37: 64 65 20 61 ; 
00001B3B: 63 74 69 76 ; 
00001B3F: 65 20 61 74 ; 
00001B43: 20 74 68 65 ; 
00001B47: 20 73 61 6D ; 
00001B4B: 65 20 74 69 ; 
00001B4F: 6D 65 2C 20 ; 
00001B53: 64 69 73 61 ; 
00001B57: 62 6C 69 6E ; 
00001B5B: 67 20 73 6C ; 
00001B5F: 6F 77 20 6D ; 
00001B63: 6F 64 65 0A ; 
00001B67: 00          ; 
00001B68: 52 65 74 75 ; savedchoice     defb "Return to menu? (n for continue sim) Y/n: ", 0
00001B6C: 72 6E 20 74 ; 
00001B70: 6F 20 6D 65 ; 
00001B74: 6E 75 3F 20 ; 
00001B78: 28 6E 20 66 ; 
00001B7C: 6F 72 20 63 ; 
00001B80: 6F 6E 74 69 ; 
00001B84: 6E 75 65 20 ; 
00001B88: 73 69 6D 29 ; 
00001B8C: 20 59 2F 6E ; 
00001B90: 3A 20 00    ; 
00001B93: 50 6C 65 61 ; askname         defb "Please enter a name for the grid: ", 0
00001B97: 73 65 20 65 ; 
00001B9B: 6E 74 65 72 ; 
00001B9F: 20 61 20 6E ; 
00001BA3: 61 6D 65 20 ; 
00001BA7: 66 6F 72 20 ; 
00001BAB: 74 68 65 20 ; 
00001BAF: 67 72 69 64 ; 
00001BB3: 3A 20 00    ; 
00001BB6: 45 72 61 73 ; warneraseslow   defb "Erase mode is active it is recommended to also use slow mode", nl, 0
00001BBA: 65 20 6D 6F ; 
00001BBE: 64 65 20 69 ; 
00001BC2: 73 20 61 63 ; 
00001BC6: 74 69 76 65 ; 
00001BCA: 20 69 74 20 ; 
00001BCE: 69 73 20 72 ; 
00001BD2: 65 63 6F 6D ; 
00001BD6: 6D 65 6E 64 ; 
00001BDA: 65 64 20 74 ; 
00001BDE: 6F 20 61 6C ; 
00001BE2: 73 6F 20 75 ; 
00001BE6: 73 65 20 73 ; 
00001BEA: 6C 6F 77 20 ; 
00001BEE: 6D 6F 64 65 ; 
00001BF2: 0A 00       ; 
00001BF4: 50 6C 65 61 ; askwid          defb "Please enter a width (", 0
00001BF8: 73 65 20 65 ; 
00001BFC: 6E 74 65 72 ; 
00001C00: 20 61 20 77 ; 
00001C04: 69 64 74 68 ; 
00001C08: 20 28 00    ; 
00001C0B: 2D 00       ; dash            defb "-", 0
00001C0D: 29 3A 20 00 ; b_close_colon   defb "): ",0
00001C11: 50 6C 65 61 ; askhei          defb "Please enter a height ", 0
00001C15: 73 65 20 65 ; 
00001C19: 6E 74 65 72 ; 
00001C1D: 20 61 20 68 ; 
00001C21: 65 69 67 68 ; 
00001C25: 74 20 00    ; 
00001C28: 49 6E 76 61 ; getwidfailmsg   defb "Invalid width please enter a value between ", 0
00001C2C: 6C 69 64 20 ; 
00001C30: 77 69 64 74 ; 
00001C34: 68 20 70 6C ; 
00001C38: 65 61 73 65 ; 
00001C3C: 20 65 6E 74 ; 
00001C40: 65 72 20 61 ; 
00001C44: 20 76 61 6C ; 
00001C48: 75 65 20 62 ; 
00001C4C: 65 74 77 65 ; 
00001C50: 65 6E 20 00 ; 
00001C54: 49 6E 76 61 ; getheifailmsg   defb "Invalid height please enter a value between ", 0
00001C58: 6C 69 64 20 ; 
00001C5C: 68 65 69 67 ; 
00001C60: 68 74 20 70 ; 
00001C64: 6C 65 61 73 ; 
00001C68: 65 20 65 6E ; 
00001C6C: 74 65 72 20 ; 
00001C70: 61 20 76 61 ; 
00001C74: 6C 75 65 20 ; 
00001C78: 62 65 74 77 ; 
00001C7C: 65 65 6E 20 ; 
00001C80: 00          ; 
00001C81:             ; 
00001C81:             ; ;;[[todo]] change to printing the current options
00001C81: 55 73 69 6E ; usingDefault    defb "Using default values: dims=(18, 18) slowMode=Off eraseMode=Off stepMode=O
00001C85: 67 20 64 65 ; n", nl, 0
00001C89: 66 61 75 6C ; 
00001C8D: 74 20 76 61 ; 
00001C91: 6C 75 65 73 ; 
00001C95: 3A 20 64 69 ; 
00001C99: 6D 73 3D 28 ; 
00001C9D: 31 38 2C 20 ; 
00001CA1: 31 38 29 20 ; 
00001CA5: 73 6C 6F 77 ; 
00001CA9: 4D 6F 64 65 ; 
00001CAD: 3D 4F 66 66 ; 
00001CB1: 20 65 72 61 ; 
00001CB5: 73 65 4D 6F ; 
00001CB9: 64 65 3D 4F ; 
00001CBD: 66 66 20 73 ; 
00001CC1: 74 65 70 4D ; 
00001CC5: 6F 64 65 3D ; 
00001CC9: 4F 6E 0A 00 ; 
00001CCD: 55 73 69 6E ; usingDefWODims  defb "Using default values: slowMode=Off eraseMode=Off stepMode=On", nl, 0
00001CD1: 67 20 64 65 ; 
00001CD5: 66 61 75 6C ; 
00001CD9: 74 20 76 61 ; 
00001CDD: 6C 75 65 73 ; 
00001CE1: 3A 20 73 6C ; 
00001CE5: 6F 77 4D 6F ; 
00001CE9: 64 65 3D 4F ; 
00001CED: 66 66 20 65 ; 
00001CF1: 72 61 73 65 ; 
00001CF5: 4D 6F 64 65 ; 
00001CF9: 3D 4F 66 66 ; 
00001CFD: 20 73 74 65 ; 
00001D01: 70 4D 6F 64 ; 
00001D05: 65 3D 4F 6E ; 
00001D09: 0A 00       ; 
00001D0B:             ; 
00001D0B: 43 75 72 72 ; optionsp_1      defb "Current options: dims=(", 0 ;;width
00001D0F: 65 6E 74 20 ; 
00001D13: 6F 70 74 69 ; 
00001D17: 6F 6E 73 3A ; 
00001D1B: 20 64 69 6D ; 
00001D1F: 73 3D 28 00 ; 
00001D23: 2C 20 00    ; optionsp_2      defb ", ", 0 ;;height
00001D26: 29 20 73 6C ; optionsp_3      defb ") slowMode=", 0 ;;OFF/ON
00001D2A: 6F 77 4D 6F ; 
00001D2E: 64 65 3D 00 ; 
00001D32: 20 65 72 61 ; optionsp_4      defb " eraseMode=", 0 ;;^
00001D36: 73 65 4D 6F ; 
00001D3A: 64 65 3D 00 ; 
00001D3E: 20 73 74 65 ; optionsp_5      defb " stepMode=", 0  ;;^
00001D42: 70 4D 6F 64 ; 
00001D46: 65 3D 00    ; 
00001D49:             ; 
00001D49: 59 6F 75 27 ; mainloopittsmsg defb "You've reached the max itterations before waiting for input. You can chan
00001D4D: 76 65 20 72 ; ge this in settings. Press any key to continue, 'q' to quit, and 's' to save the grid", nl, 0
00001D51: 65 61 63 68 ; 
00001D55: 65 64 20 74 ; 
00001D59: 68 65 20 6D ; 
00001D5D: 61 78 20 69 ; 
00001D61: 74 74 65 72 ; 
00001D65: 61 74 69 6F ; 
00001D69: 6E 73 20 62 ; 
00001D6D: 65 66 6F 72 ; 
00001D71: 65 20 77 61 ; 
00001D75: 69 74 69 6E ; 
00001D79: 67 20 66 6F ; 
00001D7D: 72 20 69 6E ; 
00001D81: 70 75 74 2E ; 
00001D85: 20 59 6F 75 ; 
00001D89: 20 63 61 6E ; 
00001D8D: 20 63 68 61 ; 
00001D91: 6E 67 65 20 ; 
00001D95: 74 68 69 73 ; 
00001D99: 20 69 6E 20 ; 
00001D9D: 73 65 74 74 ; 
00001DA1: 69 6E 67 73 ; 
00001DA5: 2E 20 50 72 ; 
00001DA9: 65 73 73 20 ; 
00001DAD: 61 6E 79 20 ; 
00001DB1: 6B 65 79 20 ; 
00001DB5: 74 6F 20 63 ; 
00001DB9: 6F 6E 74 69 ; 
00001DBD: 6E 75 65 2C ; 
00001DC1: 20 27 71 27 ; 
00001DC5: 20 74 6F 20 ; 
00001DC9: 71 75 69 74 ; 
00001DCD: 2C 20 61 6E ; 
00001DD1: 64 20 27 73 ; 
00001DD5: 27 20 74 6F ; 
00001DD9: 20 73 61 76 ; 
00001DDD: 65 20 74 68 ; 
00001DE1: 65 20 67 72 ; 
00001DE5: 69 64 0A 00 ; 
00001DE9:             ; 
00001DE9: 43 68 6F 6F ; askgenoption    defb "Choose between (R)andom generation or (D)rawing the grid", 0
00001DED: 73 65 20 62 ; 
00001DF1: 65 74 77 65 ; 
00001DF5: 65 6E 20 28 ; 
00001DF9: 52 29 61 6E ; 
00001DFD: 64 6F 6D 20 ; 
00001E01: 67 65 6E 65 ; 
00001E05: 72 61 74 69 ; 
00001E09: 6F 6E 20 6F ; 
00001E0D: 72 20 28 44 ; 
00001E11: 29 72 61 77 ; 
00001E15: 69 6E 67 20 ; 
00001E19: 74 68 65 20 ; 
00001E1D: 67 72 69 64 ; 
00001E21: 00          ; 
00001E22: 49 6E 76 61 ; setupGrdFailmsg defb "Invalid choice, use `R` for random generation and `d` for drawing the gri
00001E26: 6C 69 64 20 ; d. Not case sensative: ", 0
00001E2A: 63 68 6F 69 ; 
00001E2E: 63 65 2C 20 ; 
00001E32: 75 73 65 20 ; 
00001E36: 60 52 60 20 ; 
00001E3A: 66 6F 72 20 ; 
00001E3E: 72 61 6E 64 ; 
00001E42: 6F 6D 20 67 ; 
00001E46: 65 6E 65 72 ; 
00001E4A: 61 74 69 6F ; 
00001E4E: 6E 20 61 6E ; 
00001E52: 64 20 60 64 ; 
00001E56: 60 20 66 6F ; 
00001E5A: 72 20 64 72 ; 
00001E5E: 61 77 69 6E ; 
00001E62: 67 20 74 68 ; 
00001E66: 65 20 67 72 ; 
00001E6A: 69 64 2E 20 ; 
00001E6E: 4E 6F 74 20 ; 
00001E72: 63 61 73 65 ; 
00001E76: 20 73 65 6E ; 
00001E7A: 73 61 74 69 ; 
00001E7E: 76 65 3A 20 ; 
00001E82: 00          ; 
00001E83: 45 6E 74 65 ; askseed         defb "Enter 4 characters to be used as the seed: ", 0
00001E87: 72 20 34 20 ; 
00001E8B: 63 68 61 72 ; 
00001E8F: 61 63 74 65 ; 
00001E93: 72 73 20 74 ; 
00001E97: 6F 20 62 65 ; 
00001E9B: 20 75 73 65 ; 
00001E9F: 64 20 61 73 ; 
00001EA3: 20 74 68 65 ; 
00001EA7: 20 73 65 65 ; 
00001EAB: 64 3A 20 00 ; 
00001EAF: 55 73 69 6E ; drawinfomsg     defb "Using '1' and '0' choose the value of the current cell. Use enter to go t
00001EB3: 67 20 27 31 ; o next line", nl, 0
00001EB7: 27 20 61 6E ; 
00001EBB: 64 20 27 30 ; 
00001EBF: 27 20 63 68 ; 
00001EC3: 6F 6F 73 65 ; 
00001EC7: 20 74 68 65 ; 
00001ECB: 20 76 61 6C ; 
00001ECF: 75 65 20 6F ; 
00001ED3: 66 20 74 68 ; 
00001ED7: 65 20 63 75 ; 
00001EDB: 72 72 65 6E ; 
00001EDF: 74 20 63 65 ; 
00001EE3: 6C 6C 2E 20 ; 
00001EE7: 55 73 65 20 ; 
00001EEB: 65 6E 74 65 ; 
00001EEF: 72 20 74 6F ; 
00001EF3: 20 67 6F 20 ; 
00001EF7: 74 6F 20 6E ; 
00001EFB: 65 78 74 20 ; 
00001EFF: 6C 69 6E 65 ; 
00001F03: 0A 00       ; 
00001F05: 49 6E 76 61 ; drawfailmsg     defb "Invalid input please enter 1 or 0, or enter for next line: ", nl, 0
00001F09: 6C 69 64 20 ; 
00001F0D: 69 6E 70 75 ; 
00001F11: 74 20 70 6C ; 
00001F15: 65 61 73 65 ; 
00001F19: 20 65 6E 74 ; 
00001F1D: 65 72 20 31 ; 
00001F21: 20 6F 72 20 ; 
00001F25: 30 2C 20 6F ; 
00001F29: 72 20 65 6E ; 
00001F2D: 74 65 72 20 ; 
00001F31: 66 6F 72 20 ; 
00001F35: 6E 65 78 74 ; 
00001F39: 20 6C 69 6E ; 
00001F3D: 65 3A 20 0A ; 
00001F41: 00          ; 
00001F42: 47 72 69 64 ; gridfailmsg     defb "Grid was not properly initialised, consider smaller dims", nl, 0
00001F46: 20 77 61 73 ; 
00001F4A: 20 6E 6F 74 ; 
00001F4E: 20 70 72 6F ; 
00001F52: 70 65 72 6C ; 
00001F56: 79 20 69 6E ; 
00001F5A: 69 74 69 61 ; 
00001F5E: 6C 69 73 65 ; 
00001F62: 64 2C 20 63 ; 
00001F66: 6F 6E 73 69 ; 
00001F6A: 64 65 72 20 ; 
00001F6E: 73 6D 61 6C ; 
00001F72: 6C 65 72 20 ; 
00001F76: 64 69 6D 73 ; 
00001F7A: 0A 00       ; 
00001F7C: 54 68 65 72 ; gridsavefail    defb "There was an error allocating memory for the grid save", nl, 0
00001F80: 65 20 77 61 ; 
00001F84: 73 20 61 6E ; 
00001F88: 20 65 72 72 ; 
00001F8C: 6F 72 20 61 ; 
00001F90: 6C 6C 6F 63 ; 
00001F94: 61 74 69 6E ; 
00001F98: 67 20 6D 65 ; 
00001F9C: 6D 6F 72 79 ; 
00001FA0: 20 66 6F 72 ; 
00001FA4: 20 74 68 65 ; 
00001FA8: 20 67 72 69 ; 
00001FAC: 64 20 73 61 ; 
00001FB0: 76 65 0A 00 ; 
00001FB4: 54 68 65 72 ; gridloadempty   defb "There are no saved grids, start a step mode sim and save the grid, return
00001FB8: 65 20 61 72 ; ing to main menu", nl, 0
00001FBC: 65 20 6E 6F ; 
00001FC0: 20 73 61 76 ; 
00001FC4: 65 64 20 67 ; 
00001FC8: 72 69 64 73 ; 
00001FCC: 2C 20 73 74 ; 
00001FD0: 61 72 74 20 ; 
00001FD4: 61 20 73 74 ; 
00001FD8: 65 70 20 6D ; 
00001FDC: 6F 64 65 20 ; 
00001FE0: 73 69 6D 20 ; 
00001FE4: 61 6E 64 20 ; 
00001FE8: 73 61 76 65 ; 
00001FEC: 20 74 68 65 ; 
00001FF0: 20 67 72 69 ; 
00001FF4: 64 2C 20 72 ; 
00001FF8: 65 74 75 72 ; 
00001FFC: 6E 69 6E 67 ; 
00002000: 20 74 6F 20 ; 
00002004: 6D 61 69 6E ; 
00002008: 20 6D 65 6E ; 
0000200C: 75 0A 00    ; 
0000200F: 7C 69 6E 64 ; gridloadpindex  defb "|index: ", 0
00002013: 65 78 3A 20 ; 
00002017: 00          ; 
00002018: 7C 6E 61 6D ; gridloadpname   defb "|name: ", 0
0000201C: 65 3A 20 00 ; 
00002020: 7C 77 69 64 ; gridloadpwidth  defb "|width: ", 0
00002024: 74 68 3A 20 ; 
00002028: 00          ; 
00002029: 7C 68 65 69 ; gridloadpheight defb "|height: ", 0
0000202D: 67 68 74 3A ; 
00002031: 20 00       ; 
00002033: 50 6C 65 61 ; loadboardaski   defb "Please enter the index of the grid to load, or enter a negative index to 
00002037: 73 65 20 65 ; not load a grid. (press enter to input)", nl, 0
0000203B: 6E 74 65 72 ; 
0000203F: 20 74 68 65 ; 
00002043: 20 69 6E 64 ; 
00002047: 65 78 20 6F ; 
0000204B: 66 20 74 68 ; 
0000204F: 65 20 67 72 ; 
00002053: 69 64 20 74 ; 
00002057: 6F 20 6C 6F ; 
0000205B: 61 64 2C 20 ; 
0000205F: 6F 72 20 65 ; 
00002063: 6E 74 65 72 ; 
00002067: 20 61 20 6E ; 
0000206B: 65 67 61 74 ; 
0000206F: 69 76 65 20 ; 
00002073: 69 6E 64 65 ; 
00002077: 78 20 74 6F ; 
0000207B: 20 6E 6F 74 ; 
0000207F: 20 6C 6F 61 ; 
00002083: 64 20 61 20 ; 
00002087: 67 72 69 64 ; 
0000208B: 2E 20 28 70 ; 
0000208F: 72 65 73 73 ; 
00002093: 20 65 6E 74 ; 
00002097: 65 72 20 74 ; 
0000209B: 6F 20 69 6E ; 
0000209F: 70 75 74 29 ; 
000020A3: 0A 00       ; 
000020A5: 52 65 74 75 ; loadboardretmsg defb "Returning to main menu", nl, 0
000020A9: 72 6E 69 6E ; 
000020AD: 67 20 74 6F ; 
000020B1: 20 6D 61 69 ; 
000020B5: 6E 20 6D 65 ; 
000020B9: 6E 75 0A 00 ; 
000020BD: 49 6E 76 61 ; loadboardifail  defb "Invalid input given for the index", nl, 0
000020C1: 6C 69 64 20 ; 
000020C5: 69 6E 70 75 ; 
000020C9: 74 20 67 69 ; 
000020CD: 76 65 6E 20 ; 
000020D1: 66 6F 72 20 ; 
000020D5: 74 68 65 20 ; 
000020D9: 69 6E 64 65 ; 
000020DD: 78 0A 00    ; 
000020E0: 49 6E 76 61 ; loadboardirerr  defb "Invalid index, out of range", nl, 0
000020E4: 6C 69 64 20 ; 
000020E8: 69 6E 64 65 ; 
000020EC: 78 2C 20 6F ; 
000020F0: 75 74 20 6F ; 
000020F4: 66 20 72 61 ; 
000020F8: 6E 67 65 0A ; 
000020FC: 00          ; 
000020FD: 45 72 72 6F ; loadboardmlcerr defb "Error allocating memory for loaded grid. Returing to main menu", nl, 0
00002101: 72 20 61 6C ; 
00002105: 6C 6F 63 61 ; 
00002109: 74 69 6E 67 ; 
0000210D: 20 6D 65 6D ; 
00002111: 6F 72 79 20 ; 
00002115: 66 6F 72 20 ; 
00002119: 6C 6F 61 64 ; 
0000211D: 65 64 20 67 ; 
00002121: 72 69 64 2E ; 
00002125: 20 52 65 74 ; 
00002129: 75 72 69 6E ; 
0000212D: 67 20 74 6F ; 
00002131: 20 6D 61 69 ; 
00002135: 6E 20 6D 65 ; 
00002139: 6E 75 0A 00 ; 
0000213D: 53 75 63 63 ; loadboardsucmsg defb "Successfully loaded the grid", nl, 0
00002141: 65 73 73 66 ; 
00002145: 75 6C 6C 79 ; 
00002149: 20 6C 6F 61 ; 
0000214D: 64 65 64 20 ; 
00002151: 74 68 65 20 ; 
00002155: 67 72 69 64 ; 
00002159: 0A 00       ; 
0000215B: 4C 69 73 74 ; listgridmsg     defb "Listing all availible saved grids", nl, 0
0000215F: 69 6E 67 20 ; 
00002163: 61 6C 6C 20 ; 
00002167: 61 76 61 69 ; 
0000216B: 6C 69 62 6C ; 
0000216F: 65 20 73 61 ; 
00002173: 76 65 64 20 ; 
00002177: 67 72 69 64 ; 
0000217B: 73 0A 00    ; 
0000217E: 2D 2D 2D 2D ; cutoff          defb "-----------------", nl, 0
00002182: 2D 2D 2D 2D ; 
00002186: 2D 2D 2D 2D ; 
0000218A: 2D 2D 2D 2D ; 
0000218E: 2D 0A 00    ; 
00002191: 5B 5B 61 64 ; helpinfomsg     defb "[[add]]"
00002195: 64 5D 5D    ; 
00002198: 5B 5B 61 64 ; settingsmsg     defb "[[add]]"
0000219C: 64 5D 5D    ; 
0000219F: 45 72 72 6F ; changearrverr_m defb "Error invalid value given (1-255) inclusive. Re-enter: ", nl, 0
000021A3: 72 20 69 6E ; 
000021A7: 76 61 6C 69 ; 
000021AB: 64 20 76 61 ; 
000021AF: 6C 75 65 20 ; 
000021B3: 67 69 76 65 ; 
000021B7: 6E 20 28 31 ; 
000021BB: 2D 32 35 35 ; 
000021BF: 29 20 69 6E ; 
000021C3: 63 6C 75 73 ; 
000021C7: 69 76 65 2E ; 
000021CB: 20 52 65 2D ; 
000021CF: 65 6E 74 65 ; 
000021D3: 72 3A 20 0A ; 
000021D7: 00          ; 
000021D8:             ; 
000021D8: 53 65 74 74 ; s_m1            defb "Settings", nl, "|-[0] stepMode_d     - The following 4 settings are the d
000021DC: 69 6E 67 73 ; efault values for the options", nl, "|-[1] slowMode_d", nl, "|-[2] eraseMode_d", nl, "|-[3] Dim
000021E0: 0A 7C 2D 5B ; s_d", nl, 0
000021E4: 30 5D 20 73 ; 
000021E8: 74 65 70 4D ; 
000021EC: 6F 64 65 5F ; 
000021F0: 64 20 20 20 ; 
000021F4: 20 20 2D 20 ; 
000021F8: 54 68 65 20 ; 
000021FC: 66 6F 6C 6C ; 
00002200: 6F 77 69 6E ; 
00002204: 67 20 34 20 ; 
00002208: 73 65 74 74 ; 
0000220C: 69 6E 67 73 ; 
00002210: 20 61 72 65 ; 
00002214: 20 74 68 65 ; 
00002218: 20 64 65 66 ; 
0000221C: 61 75 6C 74 ; 
00002220: 20 76 61 6C ; 
00002224: 75 65 73 20 ; 
00002228: 66 6F 72 20 ; 
0000222C: 74 68 65 20 ; 
00002230: 6F 70 74 69 ; 
00002234: 6F 6E 73 0A ; 
00002238: 7C 2D 5B 31 ; 
0000223C: 5D 20 73 6C ; 
00002240: 6F 77 4D 6F ; 
00002244: 64 65 5F 64 ; 
00002248: 0A 7C 2D 5B ; 
0000224C: 32 5D 20 65 ; 
00002250: 72 61 73 65 ; 
00002254: 4D 6F 64 65 ; 
00002258: 5F 64 0A 7C ; 
0000225C: 2D 5B 33 5D ; 
00002260: 20 44 69 6D ; 
00002264: 73 5F 64 0A ; 
00002268: 00          ; 
00002269: 7C 2D 5B 34 ; s_m2            defb "|-[4] range          - The range of values that the dims can have (1-255 
0000226D: 5D 20 72 61 ; && range_min < range_max)", nl, 0
00002271: 6E 67 65 20 ; 
00002275: 20 20 20 20 ; 
00002279: 20 20 20 20 ; 
0000227D: 20 2D 20 54 ; 
00002281: 68 65 20 72 ; 
00002285: 61 6E 67 65 ; 
00002289: 20 6F 66 20 ; 
0000228D: 76 61 6C 75 ; 
00002291: 65 73 20 74 ; 
00002295: 68 61 74 20 ; 
00002299: 74 68 65 20 ; 
0000229D: 64 69 6D 73 ; 
000022A1: 20 63 61 6E ; 
000022A5: 20 68 61 76 ; 
000022A9: 65 20 28 31 ; 
000022AD: 2D 32 35 35 ; 
000022B1: 20 26 26 20 ; 
000022B5: 72 61 6E 67 ; 
000022B9: 65 5F 6D 69 ; 
000022BD: 6E 20 3C 20 ; 
000022C1: 72 61 6E 67 ; 
000022C5: 65 5F 6D 61 ; 
000022C9: 78 29 0A 00 ; 
000022CD: 7C 2D 5B 35 ; s_m3            defb "|-[5] Icons          - The characters printed for an alive/dead/ptr cell"
000022D1: 5D 20 49 63 ; ,nl, "`-[6] itters         - The number of itterations in the non-step version before it will w
000022D5: 6F 6E 73 20 ; ait for input", nl, 0
000022D9: 20 20 20 20 ; 
000022DD: 20 20 20 20 ; 
000022E1: 20 2D 20 54 ; 
000022E5: 68 65 20 63 ; 
000022E9: 68 61 72 61 ; 
000022ED: 63 74 65 72 ; 
000022F1: 73 20 70 72 ; 
000022F5: 69 6E 74 65 ; 
000022F9: 64 20 66 6F ; 
000022FD: 72 20 61 6E ; 
00002301: 20 61 6C 69 ; 
00002305: 76 65 2F 64 ; 
00002309: 65 61 64 2F ; 
0000230D: 70 74 72 20 ; 
00002311: 63 65 6C 6C ; 
00002315: 0A 60 2D 5B ; 
00002319: 36 5D 20 69 ; 
0000231D: 74 74 65 72 ; 
00002321: 73 20 20 20 ; 
00002325: 20 20 20 20 ; 
00002329: 20 20 2D 20 ; 
0000232D: 54 68 65 20 ; 
00002331: 6E 75 6D 62 ; 
00002335: 65 72 20 6F ; 
00002339: 66 20 69 74 ; 
0000233D: 74 65 72 61 ; 
00002341: 74 69 6F 6E ; 
00002345: 73 20 69 6E ; 
00002349: 20 74 68 65 ; 
0000234D: 20 6E 6F 6E ; 
00002351: 2D 73 74 65 ; 
00002355: 70 20 76 65 ; 
00002359: 72 73 69 6F ; 
0000235D: 6E 20 62 65 ; 
00002361: 66 6F 72 65 ; 
00002365: 20 69 74 20 ; 
00002369: 77 69 6C 6C ; 
0000236D: 20 77 61 69 ; 
00002371: 74 20 66 6F ; 
00002375: 72 20 69 6E ; 
00002379: 70 75 74 0A ; 
0000237D: 00          ; 
0000237E: 7C 2D 5B 37 ; s_m4            defb "|-[7] Drawing erase  - Bool for if when drawing the grid it should erase 
00002382: 5D 20 44 72 ; the previous one", nl, 0
00002386: 61 77 69 6E ; 
0000238A: 67 20 65 72 ; 
0000238E: 61 73 65 20 ; 
00002392: 20 2D 20 42 ; 
00002396: 6F 6F 6C 20 ; 
0000239A: 66 6F 72 20 ; 
0000239E: 69 66 20 77 ; 
000023A2: 68 65 6E 20 ; 
000023A6: 64 72 61 77 ; 
000023AA: 69 6E 67 20 ; 
000023AE: 74 68 65 20 ; 
000023B2: 67 72 69 64 ; 
000023B6: 20 69 74 20 ; 
000023BA: 73 68 6F 75 ; 
000023BE: 6C 64 20 65 ; 
000023C2: 72 61 73 65 ; 
000023C6: 20 74 68 65 ; 
000023CA: 20 70 72 65 ; 
000023CE: 76 69 6F 75 ; 
000023D2: 73 20 6F 6E ; 
000023D6: 65 0A 00    ; 
000023D9: 45 6E 74 65 ; s_m             defb "Enter the index of the setting to edit or -1 to return to the menu (press
000023DD: 72 20 74 68 ;  enter to input): ", 0
000023E1: 65 20 69 6E ; 
000023E5: 64 65 78 20 ; 
000023E9: 6F 66 20 74 ; 
000023ED: 68 65 20 73 ; 
000023F1: 65 74 74 69 ; 
000023F5: 6E 67 20 74 ; 
000023F9: 6F 20 65 64 ; 
000023FD: 69 74 20 6F ; 
00002401: 72 20 2D 31 ; 
00002405: 20 74 6F 20 ; 
00002409: 72 65 74 75 ; 
0000240D: 72 6E 20 74 ; 
00002411: 6F 20 74 68 ; 
00002415: 65 20 6D 65 ; 
00002419: 6E 75 20 28 ; 
0000241D: 70 72 65 73 ; 
00002421: 73 20 65 6E ; 
00002425: 74 65 72 20 ; 
00002429: 74 6F 20 69 ; 
0000242D: 6E 70 75 74 ; 
00002431: 29 3A 20 00 ; 
00002435: 45 72 72 6F ; s_m_err         defb "Error invalid index. Re-enter: ", 0
00002439: 72 20 69 6E ; 
0000243D: 76 61 6C 69 ; 
00002441: 64 20 69 6E ; 
00002445: 64 65 78 2E ; 
00002449: 20 52 65 2D ; 
0000244D: 65 6E 74 65 ; 
00002451: 72 3A 20 00 ; 
00002455:             ; 
00002455: 53 6C 6F 77 ; currentslow     defb "Slow_d: ", 0
00002459: 5F 64 3A 20 ; 
0000245D: 00          ; 
0000245E: 45 72 61 73 ; currenterase    defb "Erase_d: ", 0
00002462: 65 5F 64 3A ; 
00002466: 20 00       ; 
00002468: 53 74 65 70 ; currentstep     defb "Step_d: ", 0
0000246C: 5F 64 3A 20 ; 
00002470: 00          ; 
00002471: 44 69 6D 73 ; currentDims     defb "Dims: ", 0
00002475: 3A 20 00    ; 
00002478: 52 61 6E 67 ; currentRange    defb "Range: ", 0
0000247C: 65 3A 20 00 ; 
00002480: 49 74 74 65 ; currentItters   defb "Itters: ", 0
00002484: 72 73 3A 20 ; 
00002488: 00          ; 
00002489: 45 72 61 73 ; currentdraweras defb "Erase when drawing: ", 0
0000248D: 65 20 77 68 ; 
00002491: 65 6E 20 64 ; 
00002495: 72 61 77 69 ; 
00002499: 6E 67 3A 20 ; 
0000249D: 00          ; 
0000249E: 28 00       ; bracket_open    defb "(", 0
000024A0: 2C 20 00    ; comma_space     defb ", ", 0
000024A3: 29 00       ; bracket_close   defb ")", 0
000024A5: 41 6C 69 76 ; currenticons_1  defb "Alive: ", 0
000024A9: 65 3A 20 00 ; 
000024AD: 44 65 61 64 ; currenticons_2  defb "Dead: ", 0
000024B1: 3A 20 00    ; 
000024B4: 50 74 72 3A ; currenticons_3  defb "Ptr: ", 0
000024B8: 20 00       ; 
000024BA: 45 6E 74 65 ; currenticons_a  defb "Enter 3 character (not seperated) for the values of the alive/dead/ptr ch
000024BE: 72 20 33 20 ; aracters: ", 0
000024C2: 63 68 61 72 ; 
000024C6: 61 63 74 65 ; 
000024CA: 72 20 28 6E ; 
000024CE: 6F 74 20 73 ; 
000024D2: 65 70 65 72 ; 
000024D6: 61 74 65 64 ; 
000024DA: 29 20 66 6F ; 
000024DE: 72 20 74 68 ; 
000024E2: 65 20 76 61 ; 
000024E6: 6C 75 65 73 ; 
000024EA: 20 6F 66 20 ; 
000024EE: 74 68 65 20 ; 
000024F2: 61 6C 69 76 ; 
000024F6: 65 2F 64 65 ; 
000024FA: 61 64 2F 70 ; 
000024FE: 74 72 20 63 ; 
00002502: 68 61 72 61 ; 
00002506: 63 74 65 72 ; 
0000250A: 73 3A 20 00 ; 
0000250E: 45 72 72 6F ; mallocerr_m     defb "Error getting memory from malloc", nl, 0
00002512: 72 20 67 65 ; 
00002516: 74 74 69 6E ; 
0000251A: 67 20 6D 65 ; 
0000251E: 6D 6F 72 79 ; 
00002522: 20 66 72 6F ; 
00002526: 6D 20 6D 61 ; 
0000252A: 6C 6C 6F 63 ; 
0000252E: 0A 00       ; 
00002530: 45 72 72 6F ; getstringerr_m  defb "Error getting string, could be malloc error", nl, 0
00002534: 72 20 67 65 ; 
00002538: 74 74 69 6E ; 
0000253C: 67 20 73 74 ; 
00002540: 72 69 6E 67 ; 
00002544: 2C 20 63 6F ; 
00002548: 75 6C 64 20 ; 
0000254C: 62 65 20 6D ; 
00002550: 61 6C 6C 6F ; 
00002554: 63 20 65 72 ; 
00002558: 72 6F 72 0A ; 
0000255C: 00          ; 
0000255D: 49 74 74 65 ; currentitter    defb "Itters: ", 0
00002561: 72 73 3A 20 ; 
00002565: 00          ; 
00002566: 45 6E 74 65 ; currentaskx     defb "Enter value for x: ", 0
0000256A: 72 20 76 61 ; 
0000256E: 6C 75 65 20 ; 
00002572: 66 6F 72 20 ; 
00002576: 78 3A 20 00 ; 
0000257A: 45 6E 74 65 ; currentasky     defb "Enter value for y: ", 0
0000257E: 72 20 76 61 ; 
00002582: 6C 75 65 20 ; 
00002586: 66 6F 72 20 ; 
0000258A: 79 3A 20 00 ; 
0000258E: 45 6E 74 65 ; currentasknew   defb "Enter new value: ", 0
00002592: 72 20 6E 65 ; 
00002596: 77 20 76 61 ; 
0000259A: 6C 75 65 3A ; 
0000259E: 20 00       ; 
000025A0: 45 6E 74 65 ; currentasknew_B defb "Enter new value (0 or 1): ", 0
000025A4: 72 20 6E 65 ; 
000025A8: 77 20 76 61 ; 
000025AC: 6C 75 65 20 ; 
000025B0: 28 30 20 6F ; 
000025B4: 72 20 31 29 ; 
000025B8: 3A 20 00    ; 
000025BB: 45 72 72 6F ; currentasknew_E defb "Error invalid re-enter: ", 0
000025BF: 72 20 69 6E ; 
000025C3: 76 61 6C 69 ; 
000025C7: 64 20 72 65 ; 
000025CB: 2D 65 6E 74 ; 
000025CF: 65 72 3A 20 ; 
000025D3: 00          ; 
000025D4: 49 6E 76 61 ; currentarrerr   defb "Invalid value entered re-enter: ", 0
000025D8: 6C 69 64 20 ; 
000025DC: 76 61 6C 75 ; 
000025E0: 65 20 65 6E ; 
000025E4: 74 65 72 65 ; 
000025E8: 64 20 72 65 ; 
000025EC: 2D 65 6E 74 ; 
000025F0: 65 72 3A 20 ; 
000025F4: 00          ; 
000025F5: 49 6E 76 61 ; changearrsizmsg defb "Invalid, x >= y.", nl, 0
000025F9: 6C 69 64 2C ; 
000025FD: 20 78 20 3E ; 
00002601: 3D 20 79 2E ; 
00002605: 0A 00       ; 
00002607: 49 6E 76 61 ; changeittere_m  defb "Invalid itter value. Re-enter: ", nl, 0
0000260B: 6C 69 64 20 ; 
0000260F: 69 74 74 65 ; 
00002613: 72 20 76 61 ; 
00002617: 6C 75 65 2E ; 
0000261B: 20 52 65 2D ; 
0000261F: 65 6E 74 65 ; 
00002623: 72 3A 20 0A ; 
00002627: 00          ; 
00002628: 45 6E 74 65 ; getitters_m     defb "Enter the max itterations (1-255): ", 0
0000262C: 72 20 74 68 ; 
00002630: 65 20 6D 61 ; 
00002634: 78 20 69 74 ; 
00002638: 74 65 72 61 ; 
0000263C: 74 69 6F 6E ; 
00002640: 73 20 28 31 ; 
00002644: 2D 32 35 35 ; 
00002648: 29 3A 20 00 ; 
0000264C:             ; 
0000264C:             ; ;;debug for heap
0000264C: 50 72 69 6E ; printFree_m     defb "Printing free list", nl
00002650: 74 69 6E 67 ; 
00002654: 20 66 72 65 ; 
00002658: 65 20 6C 69 ; 
0000265C: 73 74 0A    ; 
0000265F: 46 6F 75 6E ; printfree_f_m   defb "Found a new free item", nl, 0
00002663: 64 20 61 20 ; 
00002667: 6E 65 77 20 ; 
0000266B: 66 72 65 65 ; 
0000266F: 20 69 74 65 ; 
00002673: 6D 0A 00    ; 
00002676: 41 64 64 72 ; printfree_f_mad defb "Address: ", 0
0000267A: 65 73 73 3A ; 
0000267E: 20 00       ; 
00002680: 4E 65 78 74 ; printfree_f_mnx defb "Next   : ", 0
00002684: 20 20 20 3A ; 
00002688: 20 00       ; 
0000268A: 50 72 65 76 ; printfree_f_mpr defb "Prev   : ", 0
0000268E: 20 20 20 3A ; 
00002692: 20 00       ; 
00002694: 53 69 7A 65 ; printfree_f_msz defb "Size   : ", 0
00002698: 20 20 20 3A ; 
0000269C: 20 00       ; 
0000269E:             ; 
0000269E: 50 72 69 6E ; printAll_m      defb "Printing all elements in the heap", nl, 0
000026A2: 74 69 6E 67 ; 
000026A6: 20 61 6C 6C ; 
000026AA: 20 65 6C 65 ; 
000026AE: 6D 65 6E 74 ; 
000026B2: 73 20 69 6E ; 
000026B6: 20 74 68 65 ; 
000026BA: 20 68 65 61 ; 
000026BE: 70 0A 00    ; 
000026C1: 54 68 69 73 ; printAll_m_f    defb "This is a Free block", nl, 0
000026C5: 20 69 73 20 ; 
000026C9: 61 20 46 72 ; 
000026CD: 65 65 20 62 ; 
000026D1: 6C 6F 63 6B ; 
000026D5: 0A 00       ; 
000026D7: 54 68 69 73 ; printAll_m_t    defb "This is a Taken block", nl, 0
000026DB: 20 69 73 20 ; 
000026DF: 61 20 54 61 ; 
000026E3: 6B 65 6E 20 ; 
000026E7: 62 6C 6F 63 ; 
000026EB: 6B 0A 00    ; 
000026EE:             ; 
000026EE: 48 65 72 65 ; printHeap_end_m defb "Here's the heap at the end of the program!", nl, 0
000026F2: 27 73 20 74 ; 
000026F6: 68 65 20 68 ; 
000026FA: 65 61 70 20 ; 
000026FE: 61 74 20 74 ; 
00002702: 68 65 20 65 ; 
00002706: 6E 64 20 6F ; 
0000270A: 66 20 74 68 ; 
0000270E: 65 20 70 72 ; 
00002712: 6F 67 72 61 ; 
00002716: 6D 21 0A 00 ; 
0000271A:             ; 
0000271A: 4F 4E 00    ; on_msg          defb "ON", 0
0000271D: 4F 46 46 00 ; off_msg         defb "OFF", 0
00002721: 2C 00       ; comma           defb ",", 0
00002723:             ; 
00002724:             ; align
00002724: 00000000    ; heapstart       defw 0 ;;points to the end of the data this is where the heap can then begin
00002728:             ; Remaining literals

Symbol Table: Labels
: max_addr                          00100000  Value
: stack_size                        00010000  Value
: nl                                0000000A  Value
: backspace                         00000008  Value
: minBuffSize                       00000008  Value
: enter                             0000000A  Value
: minSaveSize                       00000008  Value
: sizeofSaveI                       0000000C  Value
: heaphead                          00000004  Local -- ARM
: offsets                           00000008  Local -- ARM
: gridA                             00000048  Local -- ARM
: gridB                             0000004C  Local -- ARM
: erase_b                           00000050  Local -- ARM
: slow_b                            00000051  Local -- ARM
: step_b                            00000052  Local -- ARM
: width                             00000053  Local -- ARM
: height                            00000054  Local -- ARM
: range_min                         00000055  Local -- ARM
: range_max                         00000056  Local -- ARM
: maxitters                         00000057  Local -- ARM
: drawerase                         00000058  Local -- ARM
: alive_c                           00000059  Local -- ARM
: dead_c                            0000005A  Local -- ARM
: ptr_c                             0000005B  Local -- ARM
: erase_b_d                         0000005C  Local -- ARM
: slow_b_d                          0000005D  Local -- ARM
: step_b_d                          0000005E  Local -- ARM
: width_d                           0000005F  Local -- ARM
: height_d                          00000060  Local -- ARM
: _start                            00000064  Local -- ARM
: main                              00000094  Local -- ARM
: mainmenu                          000000C0  Local -- ARM
: mainchoice                        000000D8  Local -- ARM
: showHeap                          00000128  Local -- ARM
: mainloopstart                     00000130  Local -- ARM
: mainloop                          00000164  Local -- ARM
: mainloopcont                      00000188  Local -- ARM
: mainloopdostep                    000001A4  Local -- ARM
: mainloopskipstep                  000001CC  Local -- ARM
: gridFail                          000001F0  Local -- ARM
: mainEnd                           000001FC  Local -- ARM
: mainfree                          0000022C  Local -- ARM
: mainfreeloop                      00000240  Local -- ARM
: mainfreelend                      00000268  Local -- ARM
: mainfreeend                       00000270  Local -- ARM
: settingsmenu                      00000278  Local -- ARM
: changesetting                     000002A8  Local -- ARM
: changesettingget                  000002B4  Local -- ARM
: changesettingserr                 000002F0  Local -- ARM
: changesettingscont                00000300  Local -- ARM
: changearr                         00000348  Local -- ARM
: changearrget                      0000035C  Local -- ARM
: changearrsizeerr                  000003A0  Local -- ARM
: changearrset                      000003B0  Local -- ARM
: changearrend                      000003C4  Local -- ARM
: changearrgetvalidint              000003CC  Local -- ARM
: changearrgetvalidintget           000003D0  Local -- ARM
: changearrgetvalidinterr           00000400  Local -- ARM
: changearrgetvalidintcont          00000414  Local -- ARM
: changearrgetvalidintend           00000424  Local -- ARM
: printdims                         00000430  Local -- ARM
: changestep                        00000484  Local -- ARM
: changeslow                        0000049C  Local -- ARM
: changeerase                       000004B4  Local -- ARM
: changebool                        000004C8  Local -- ARM
: changebool_cont                   00000508  Local -- ARM
: changebool_set                    00000534  Local -- ARM
: changeboolend                     00000564  Local -- ARM
: changedims                        0000056C  Local -- ARM
: changerange                       00000588  Local -- ARM
: changeicons                       000005A4  Local -- ARM
: changeiconsmallerr                000005F0  Local -- ARM
: printicons                        00000600  Local -- ARM
: printiconsend                     00000654  Local -- ARM
: changeitter                       00000658  Local -- ARM
: changeitterget                    0000067C  Local -- ARM
: changeittererr                    000006C4  Local -- ARM
: changeitterend                    000006D8  Local -- ARM
: changedrawerase                   000006F4  Local -- ARM
: changedraweraseend                0000070C  Local -- ARM
: printhelp                         00000710  Local -- ARM
: newboard                          00000724  Local -- ARM
: loadboard                         0000074C  Local -- ARM
: loadboardaskindex                 00000760  Local -- ARM
: loadboardindex                    000007C4  Local -- ARM
: loadboardmain                     000007E0  Local -- ARM
: loadboardmallocB                  00000848  Local -- ARM
: loadboardskipB                    00000864  Local -- ARM
: loadboardmallocfail               00000884  Local -- ARM
: loadboardret                      00000894  Local -- ARM
: loadboardempty                    000008A0  Local -- ARM
: loadboarderr                      000008A0  Local -- ARM
: loadboardsucc                     000008A4  Local -- ARM
: newline                           000008A8  Local -- ARM
: step                              000008B4  Local -- ARM
: stependfail                       0000092C  Local -- ARM
: stependsucc                       00000934  Local -- ARM
: stepend                           00000938  Local -- ARM
: listGrids                         00000940  Local -- ARM
: listGridsLoop                     00000974  Local -- ARM
: listGridsEmpty                    00000A08  Local -- ARM
: listGridsLend                     00000A14  Local -- ARM
: listGridsEnd                      00000A14  Local -- ARM
: saveGrid                          00000A1C  Local -- ARM
: saveGridResize                    00000A40  Local -- ARM
: saveGridAdd                       00000A78  Local -- ARM
: saveGridFailMalloc                00000AE0  Local -- ARM
: saveGridSucc                      00000AE8  Local -- ARM
: saveGridEnd                       00000AEC  Local -- ARM
: erase                             00000AF4  Local -- ARM
: eraseloop                         00000AF8  Local -- ARM
: eraseend                          00000B10  Local -- ARM
: slow                              00000B14  Local -- ARM
: slowloop                          00000B1C  Local -- ARM
: slowend                           00000B3C  Local -- ARM
: heapclean                         00000B40  Local -- ARM
: heapcleanloop                     00000B5C  Local -- ARM
: heapcleanend                      00000B70  Local -- ARM
: strlen                            00000B74  Local -- ARM
: strlenloop                        00000B80  Local -- ARM
: strlenend                         00000B94  Local -- ARM
: strtoi                            00000B9C  Local -- ARM
: strtoiloop                        00000BDC  Local -- ARM
: strtoilend                        00000C10  Local -- ARM
: strtoifailminus                   00000C18  Local -- ARM
: strtoifailoutrange                00000C20  Local -- ARM
: strtoifailnonnum                  00000C28  Local -- ARM
: strtoiendfail                     00000C2C  Local -- ARM
: strtoiendsucc                     00000C34  Local -- ARM
: strtoiend                         00000C38  Local -- ARM
: memcpy                            00000C40  Local -- ARM
: memcpywordsloop                   00000C68  Local -- ARM
: memcpywordslend                   00000C80  Local -- ARM
: memcpyallbytes                    00000C90  Local -- ARM
: memcpybytes                       00000C9C  Local -- ARM
: memcpybytesloop                   00000CA0  Local -- ARM
: memcpybyteslend                   00000CB8  Local -- ARM
: memcpyend                         00000CBC  Local -- ARM
: getstring                         00000CC4  Local -- ARM
: getstringloop                     00000CF0  Local -- ARM
: getstringloopskipsize             00000D00  Local -- ARM
: skipMax                           00000D14  Local -- ARM
: getstringlcont                    00000D20  Local -- ARM
: getstringresize                   00000D38  Local -- ARM
: getstringlend                     00000D68  Local -- ARM
: getstringResizeEnd                00000D74  Local -- ARM
: getstringEnd                      00000DA0  Local -- ARM
: tolower                           00000DB4  Local -- ARM
: setupGrid                         00000DBC  Local -- ARM
: setupGridAsk                      00000E04  Local -- ARM
: setupdrawing                      00000E34  Local -- ARM
: setuprandom                       00000E48  Local -- ARM
: setupstart                        00000E74  Local -- ARM
: setuprowloop                      00000E78  Local -- ARM
: setupcolloop                      00000E84  Local -- ARM
: dorandom                          00000E98  Local -- ARM
: dodrawstart                       00000EAC  Local -- ARM
: dodraw                            00000EC4  Local -- ARM
: dodrawfail                        00000EF8  Local -- ARM
: dodrawsucc                        00000F08  Local -- ARM
: dodrawsuccskiperase               00000F2C  Local -- ARM
: setupcollcont                     00000F34  Local -- ARM
: setupcollend                      00000F44  Local -- ARM
: setuprowlend                      00000F4C  Local -- ARM
: setupGridFail                     00000F4C  Local -- ARM
: setupGridEnd                      00000F4C  Local -- ARM
: drawgrid                          00000F54  Local -- ARM
: drawgridrowloop                   00000F68  Local -- ARM
: drawgridcolloop                   00000F74  Local -- ARM
: drawgridprintcurrent              00000FA0  Local -- ARM
: drawgridcollcont                  00000FA8  Local -- ARM
: drawgridcollend                   00000FB8  Local -- ARM
: drawgridrowlend                   00000FCC  Local -- ARM
: drawgridend                       00000FD4  Local -- ARM
: printoptions                      00000FDC  Local -- ARM
: setupOptions                      00001090  Local -- ARM
: setupOptionsDEnd                  00001138  Local -- ARM
: setupCustom                       00001144  Local -- ARM
: setupCustomskipslow               00001208  Local -- ARM
: printrange                        0000121C  Local -- ARM
: setupCustomDimsCheck              00001264  Local -- ARM
: getwid                            0000127C  Local -- ARM
: getwidFail                        000012E0  Local -- ARM
: getheisetup                       000012F4  Local -- ARM
: gethei                            00001304  Local -- ARM
: getheiFail                        00001368  Local -- ARM
: customend                         0000137C  Local -- ARM
: updategrid                        00001388  Local -- ARM
: updategridrowloop                 000013B0  Local -- ARM
: updategridcolloop                 000013BC  Local -- ARM
: updatealive                       000013E4  Local -- ARM
: updatedead                        00001400  Local -- ARM
: updatelcont                       00001410  Local -- ARM
: updategridccollend                00001418  Local -- ARM
: updategridrowlend                 00001424  Local -- ARM
: updategridend                     00001424  Local -- ARM
: countneighbours                   0000142C  Local -- ARM
: countneighboursloop               00001458  Local -- ARM
: countneighboursskipadd            0000149C  Local -- ARM
: countneighbourslend               000014A0  Local -- ARM
: countneighboursend                000014A0  Local -- ARM
: isinrange                         000014AC  Local -- ARM
: isinrangefail                     000014F0  Local -- ARM
: isinrangeend                      000014F4  Local -- ARM
: setupHeap                         000014F8  Local -- ARM
: malloc                            0000152C  Local -- ARM
: mallignend                        00001548  Local -- ARM
: checkcrate                        00001554  Local -- ARM
: nocrates                          00001574  Local -- ARM
: foundcrate                        0000157C  Local -- ARM
: splitcrate                        0000158C  Local -- ARM
: usecrate                          000015C0  Local -- ARM
: mallocEnd                         000015D4  Local -- ARM
: printHeap                         000015DC  Local -- ARM
: printHeapend                      000015E8  Local -- ARM
: printAll                          000015F0  Local -- ARM
: printAllLoop                      00001610  Local -- ARM
: printAllLoopCont                  0000163C  Local -- ARM
: printAllLend                      0000165C  Local -- ARM
: printAllEnd                       0000165C  Local -- ARM
: printFree                         00001664  Local -- ARM
: printFreeloop                     00001680  Local -- ARM
: printFreelend                     000016B0  Local -- ARM
: printFreeEnd                      000016B0  Local -- ARM
: printblock                        000016B8  Local -- ARM
: free                              00001750  Local -- ARM
: freeloop                          00001764  Local -- ARM
: freelend                          00001780  Local -- ARM
: freelendEnd                       000017A0  Local -- ARM
: freeMergeCheck                    000017A8  Local -- ARM
: verifyLeft                        000017B8  Local -- ARM
: verifyRight                       000017CC  Local -- ARM
: merge                             000017E0  Local -- ARM
: mergeNew                          0000180C  Local -- ARM
: freeEnd                           0000180C  Local -- ARM
: welcomemsg                        00001814  Local -- ARM
: welcome2msg                       00001845  Local -- ARM
: mainchoicefail                    00001895  Local -- ARM
: helpmsg                           00001946  Local -- ARM
: help2msg                          00001A04  Local -- ARM
: mainendmsg                        00001A79  Local -- ARM
: askdefaults                       00001AA0  Local -- ARM
: askerase                          00001AD2  Local -- ARM
: askslow                           00001AEB  Local -- ARM
: askstep                           00001B03  Local -- ARM
: stepslowwarning                   00001B1B  Local -- ARM
: savedchoice                       00001B68  Local -- ARM
: askname                           00001B93  Local -- ARM
: warneraseslow                     00001BB6  Local -- ARM
: askwid                            00001BF4  Local -- ARM
: dash                              00001C0B  Local -- ARM
: b_close_colon                     00001C0D  Local -- ARM
: askhei                            00001C11  Local -- ARM
: getwidfailmsg                     00001C28  Local -- ARM
: getheifailmsg                     00001C54  Local -- ARM
: usingDefault                      00001C81  Local -- ARM
: usingDefWODims                    00001CCD  Local -- ARM
: optionsp_1                        00001D0B  Local -- ARM
: optionsp_2                        00001D23  Local -- ARM
: optionsp_3                        00001D26  Local -- ARM
: optionsp_4                        00001D32  Local -- ARM
: optionsp_5                        00001D3E  Local -- ARM
: mainloopittsmsg                   00001D49  Local -- ARM
: askgenoption                      00001DE9  Local -- ARM
: setupGrdFailmsg                   00001E22  Local -- ARM
: askseed                           00001E83  Local -- ARM
: drawinfomsg                       00001EAF  Local -- ARM
: drawfailmsg                       00001F05  Local -- ARM
: gridfailmsg                       00001F42  Local -- ARM
: gridsavefail                      00001F7C  Local -- ARM
: gridloadempty                     00001FB4  Local -- ARM
: gridloadpindex                    0000200F  Local -- ARM
: gridloadpname                     00002018  Local -- ARM
: gridloadpwidth                    00002020  Local -- ARM
: gridloadpheight                   00002029  Local -- ARM
: loadboardaski                     00002033  Local -- ARM
: loadboardretmsg                   000020A5  Local -- ARM
: loadboardifail                    000020BD  Local -- ARM
: loadboardirerr                    000020E0  Local -- ARM
: loadboardmlcerr                   000020FD  Local -- ARM
: loadboardsucmsg                   0000213D  Local -- ARM
: listgridmsg                       0000215B  Local -- ARM
: cutoff                            0000217E  Local -- ARM
: helpinfomsg                       00002191  Local -- ARM
: settingsmsg                       00002198  Local -- ARM
: changearrverr_m                   0000219F  Local -- ARM
: s_m1                              000021D8  Local -- ARM
: s_m2                              00002269  Local -- ARM
: s_m3                              000022CD  Local -- ARM
: s_m4                              0000237E  Local -- ARM
: s_m                               000023D9  Local -- ARM
: s_m_err                           00002435  Local -- ARM
: currentslow                       00002455  Local -- ARM
: currenterase                      0000245E  Local -- ARM
: currentstep                       00002468  Local -- ARM
: currentDims                       00002471  Local -- ARM
: currentRange                      00002478  Local -- ARM
: currentItters                     00002480  Local -- ARM
: currentdraweras                   00002489  Local -- ARM
: bracket_open                      0000249E  Local -- ARM
: comma_space                       000024A0  Local -- ARM
: bracket_close                     000024A3  Local -- ARM
: currenticons_1                    000024A5  Local -- ARM
: currenticons_2                    000024AD  Local -- ARM
: currenticons_3                    000024B4  Local -- ARM
: currenticons_a                    000024BA  Local -- ARM
: mallocerr_m                       0000250E  Local -- ARM
: getstringerr_m                    00002530  Local -- ARM
: currentitter                      0000255D  Local -- ARM
: currentaskx                       00002566  Local -- ARM
: currentasky                       0000257A  Local -- ARM
: currentasknew                     0000258E  Local -- ARM
: currentasknew_B                   000025A0  Local -- ARM
: currentasknew_E                   000025BB  Local -- ARM
: currentarrerr                     000025D4  Local -- ARM
: changearrsizmsg                   000025F5  Local -- ARM
: changeittere_m                    00002607  Local -- ARM
: getitters_m                       00002628  Local -- ARM
: printFree_m                       0000264C  Local -- ARM
: printfree_f_m                     0000265F  Local -- ARM
: printfree_f_mad                   00002676  Local -- ARM
: printfree_f_mnx                   00002680  Local -- ARM
: printfree_f_mpr                   0000268A  Local -- ARM
: printfree_f_msz                   00002694  Local -- ARM
: printAll_m                        0000269E  Local -- ARM
: printAll_m_f                      000026C1  Local -- ARM
: printAll_m_t                      000026D7  Local -- ARM
: printHeap_end_m                   000026EE  Local -- ARM
: on_msg                            0000271A  Local -- ARM
: off_msg                           0000271D  Local -- ARM
: comma                             00002721  Local -- ARM
: heapstart                         00002724  Local -- ARM
