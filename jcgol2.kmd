KMD
00000000:             ; ;;  This is my second rendition of JCGOL in ARM assembly for Komodo
00000000:             ; ;;  
00000000:             ; ;;  This will attempt to follow the ARM 32bit calling convention 
00000000:             ; ;;      R0-3 are argument registers, scratch
00000000:             ; ;;      R4-10 are local variable registers and should be saved before use in a function
00000000:             ; ;;      R11 - FP
00000000:             ; ;;      R12 - IPC
00000000:             ; ;;      R13 - SP
00000000:             ; ;;      R14 - LR
00000000:             ; ;;      R15 - PC
00000000:             ; ;;
00000000:             ; ;;  The plan
00000000:             ; ;;  - Create a simple `heap` allocator for the grid and input
00000000:             ; ;;  - Ask the user
00000000:             ; ;;      |-Use default? Y - skip below
00000000:             ; ;;      |-dims of the grid
00000000:             ; ;;      |   `-Will need a way to get a string input and convert to an integer (make sure to cat
                      ; ch -ve)
00000000:             ; ;;      |-slow mode
00000000:             ; ;;      `-erase mode
00000000:             ; ;;  - ask for generation mode
00000000:             ; ;;      |-If random ask for seed
00000000:             ; ;;      |   `-For generation roll the seed to create a pseudorandom value for each `pixel`
00000000:             ; ;;      `-If draw then get them to draw the grid one `pixel` at a time
00000000:             ; ;;  - Allocate two grids, the pointers to which will swap after a frame. One is used to count t
                      ; he neighbours the other for the new cell value.
00000000:             ; ;;  - loop
00000000:             ; ;;      |-count neighbours
00000000:             ; ;;      |-update inactive grid
00000000:             ; ;;      |-swap grids
00000000:             ; ;;      |-draw active grid
00000000:             ; ;;      `-goto loop
00000000:             ; 
00000000:             ; ;;SINGLE STEP mode allows you to save the current state of the board into a list, also give it 
                      ; a name
00000000:             ; ;;At the main menu you can load a saved grid
00000000:             ; 
00000000:             ; ;;Grid info struct
00000000:             ; ;;  - SaveInfoStruct* array
00000000:             ; ;;  - int max size of arr
00000000:             ; ;;  - int current position in arr
00000000:             ; 
00000000:             ; ;;Save info struct
00000000:             ; ;;  -address of grid [4 BYTES]
00000000:             ; ;;  -char* to the name [4 BYTES]
00000000:             ; ;;  -width of grid (1 BYTE)
00000000:             ; ;;  -height of grid (1 BYTE)
00000000:             ; 
00000000:             ; 
00000000:             ; ;;  CURRENT ISSUES/TODOS
00000000:             ; ;;  `-Think about minimising the fragmentation of the heap - find the best free block instead o
                      ; f the first
00000000:             ;   
00000000:             ; max_addr    EQU  0x100000
00000000:             ; stack_size  EQU  0x10000
00000000:             ; nl          EQU  10
00000000:             ; backspace   EQU  8
00000000:             ; minBuffSize EQU  8
00000000:             ; enter       EQU  nl
00000000:             ; minSaveSize EQU  8
00000000:             ; sizeofSaveI EQU  12 ;;10 bytes + 2 bytes of padding to align to 4 byte boundry for arr
00000000:             ; 
00000000: EA000017    ; b _start
00000004:             ; 
00000004:             ; align
00000004:             ; ;;[[note]]
00000004:             ; ;;ldr instructions out of range (for pc-relative offsets?) of ldr (-4096/+4095?) use below
00000004:             ; ;;  adrl Rx, label
00000004:             ; ;;  ldr  Rx, [Rx]
00000004: 00010000    ; heaphead        defw 0x10000 ;;default start changed to addr of heapstart 
00000008:             ; 
00000008:             ; ;;Integer defs
00000008: FFFFFFFF    ; offsets         defw -1,-1,-1,0,-1,1,0,-1,0,1,1,-1,1,0,1,1 ;;[[-1,-1],[-1,0],[-1,1],[0,-1],[0,1
0000000C: FFFFFFFF    ; ],[1,-1],[1,0],[1,1]]
00000010: FFFFFFFF    ; 
00000014: 00000000    ; 
00000018: FFFFFFFF    ; 
0000001C: 00000001    ; 
00000020: 00000000    ; 
00000024: FFFFFFFF    ; 
00000028: 00000000    ; 
0000002C: 00000001    ; 
00000030: 00000001    ; 
00000034: FFFFFFFF    ; 
00000038: 00000001    ; 
0000003C: 00000000    ; 
00000040: 00000001    ; 
00000044: 00000001    ; 
00000048:             ; 
00000048:             ; ;;Grid addresses
00000048: 00000000    ; gridA           defw 0
0000004C: 00000000    ; gridB           defw 0
00000050:             ; 
00000050:             ; ;;options
00000050: 00          ; erase_b         defb 0
00000051: 00          ; slow_b          defb 0
00000052: 00          ; step_b          defb 0
00000053: 12          ; width           defb 18
00000054: 12          ; height          defb 18
00000055: 01          ; range_min       defb 1
00000056: 1E          ; range_max       defb 30
00000057: 19          ; maxitters       defb 25
00000058: 01          ; drawerase_b     defb 1  ;;Should the draw mode erase previous
00000059:             ; 
00000059: 58          ; alive_c         defb 'X'
0000005A: 2D          ; dead_c          defb '-'
0000005B: 23          ; ptr_c           defb '#'
0000005C:             ; 
0000005C:             ; ;;default options
0000005C: 00          ; erase_b_d       defb 0
0000005D: 00          ; slow_b_d        defb 0
0000005E: 01          ; step_b_d        defb 1
0000005F: 12          ; width_d         defb 18
00000060: 12          ; height_d        defb 18
00000061:             ; 
00000064:             ; align
00000064:             ; 
00000064:             ; _start
00000064:             ;     ;;prepare the stack
00000064: E3A0D601    ;     ldr R13, =max_addr
00000068: E3A0E000    ;     mov R14, #0 ;; allow for `returning` from _start
0000006C: E92D4000    ;     push {R14}
00000070:             ; 
00000070:             ;     ;;[[temp]] clean the heap (zero out)
00000070: EB000394    ;     bl heapclean
00000074:             ; 
00000074:             ;     ;;setup heap
00000074: E28F0ECB    ;     adrl R0, heapstart
00000078: E2800A02    ; 
0000007C: E50F0080    ;     str R0, heaphead    ;;place address of last instruction (heapstart label) into the heaphead
                      ;  variable
00000080: EB000644    ;     bl setupHeap
00000084:             ; 
00000084: EB000002    ;     bl main
00000088:             ; 
00000088: E8BD4000    ;     pop {R14}
0000008C: EF000002    ;     swi 2
00000090: E1A0F00E    ;     mov R15, R14
00000094:             ; 
00000094:             ; main
00000094: E92D4FF0    ;     push {fp, R14, R4-R10} ;;8 registers saved
00000098:             ; 
00000098: E28DB01C    ;     add fp, sp, #28 ;;(r - 1) * 4
0000009C: E24DD010    ;     sub sp, sp, #16 ;;reserve 12 bytes (4 bytes to align?) on the stack for the pointer to the 
                      ; list of saved grids + the maxSize of the array
000000A0:             ; 
000000A0:             ;     ;;The gridInfo struct
000000A0:             ;     ;;set the current position of the pointer
000000A0: E3A00000    ;     mov R0, #0
000000A4: E58D0008    ;     str R0, [sp, #8]
000000A8:             ; 
000000A8:             ;     ;;set the number of elements(save info structs) that can be stored in the array at the mome
                      ; nt
000000A8: E3A00008    ;     ldr R0, =minSaveSize
000000AC: E58D0004    ;     str R0, [sp, #4]
000000B0:             ; 
000000B0:             ;     ;;minsize * sizeof(SaveInfo) = number of bytes needed for the array
000000B0: E3A0100C    ;     ldr R1, =sizeofSaveI
000000B4: E0000190    ;     mul R0, R0, R1
000000B8: EB000643    ;     bl malloc ;;allocate the array on the heap
000000BC:             ; 
000000BC: E3500000    ;     cmp R0, #0
000000C0: 0A000051    ;     beq mainMallocFail
000000C4:             ; 
000000C4: E58D0000    ;     str R0, [sp, #0] ;;store the address
000000C8:             ; 
000000C8:             ; mainmenu
000000C8: E28F0064    ;     adrl R0, welcomemsg
000000CC: E2800B07    ; 
000000D0: EF000003    ;     swi 3
000000D4:             ; 
000000D4: E28F008C    ;     adrl R0, welcome2msg
000000D8: E2800B07    ; 
000000DC: EF000003    ;     swi 3
000000E0:             ; 
000000E0:             ; mainchoice
000000E0: EF000001    ;     swi 1
000000E4: E3800020    ;     orr R0, R0, #32
000000E8: E1A04000    ;     mov R4, R0
000000EC:             ; 
000000EC:             ;     ;;These should really be functions
000000EC:             ; 
000000EC: E354006E    ;     cmp R4, #'n' ;;new board generation
000000F0: 0A00025E    ;     beq newboard
000000F4:             ; 
000000F4: E354006C    ;     cmp R4, #'l' ;;load a saved board
000000F8: E1A0000D    ;     mov R0, sp ;;load the info ptr
000000FC: 0A00026F    ;     beq loadboard
00000100:             ; 
00000100: E3540073    ;     cmp R4, #'s'
00000104: 0A000101    ;     beq settingsmenu
00000108:             ; 
00000108: E3540070    ;     cmp R4, #'p'
0000010C: 0A000005    ;     beq showHeap
00000110:             ; 
00000110: E3540071    ;     cmp R4, #'q' ;;quit
00000114: 0A000040    ;     beq mainEnd
00000118:             ; 
00000118: E28F008D    ;     adrl R0, mainchoicefail
0000011C: E2800B07    ; 
00000120: EF000003    ;     swi 3
00000124:             ; 
00000124: EAFFFFED    ;     b mainchoice
00000128:             ; 
00000128:             ;     ;;R4 will hold the active grid, R5 will hold the passive grid
00000128:             ;     ;;Active is used to count neighbours, passive is used to place updated values in 
00000128:             ;     ;;either can be drawn, just drawn in a different position
00000128:             ; 
00000128:             ; 
00000128:             ; showHeap
00000128: EB000661    ;     bl printHeap
0000012C:             ; 
0000012C: EAFFFFE5    ;     b mainmenu
00000130:             ; 
00000130:             ; ;;update loop
00000130:             ; ;;    - loop
00000130:             ; ;;      |-count neighbours
00000130:             ; ;;      |-update inactive grid
00000130:             ; ;;      |-swap grids
00000130:             ; ;;      |-draw grid
00000130:             ; ;;      |-[slow?] - slow() - loops for some time to increase waiting time
00000130:             ; ;;      |-[step?] - step() - waits for input, s and q will have effects
00000130:             ; ;;      |-[erase?] - erase() - \b until grid is gone
00000130:             ; ;;      `-goto loop
00000130:             ; mainloopstart
00000130:             ;     ;;load the slow, step, and erase booleans
00000130: E55F60E7    ;     ldrb R6, slow_b
00000134: E55F70EC    ;     ldrb R7, erase_b
00000138: E55F80EE    ;     ldrb R8, step_b
0000013C:             ; 
0000013C: E51F40FC    ;     ldr R4, gridA
00000140: E51F50FC    ;     ldr R5, gridB
00000144:             ; 
00000144:             ;     ;;(width * height) * 2 + 1 + height
00000144: E55F00F9    ;     ldrb R0, width
00000148: E55F10FC    ;     ldrb R1, height
0000014C: E0000190    ;     mul R0, R0, R1
00000150: E1A00080    ;     mov R0, R0, lsl #1
00000154: E2800001    ;     add R0, R0, #1
00000158: E0800001    ;     add R0, R0, R1
0000015C: E1A09000    ;     mov R9, R0      ;;R9 holds the itterations for erase, so it doesn't have to calc it every t
                      ; ime
00000160:             ; 
00000160: E3A0A000    ;     mov R10, #0 ;;This will hold the number of itterations, when it reaches 
00000164:             ; 
00000164:             ; mainloop
00000164: E55F0115    ;     ldrb R0, maxitters ;;run out of registers @-@
00000168: E15A0000    ;     cmp R10, R0
0000016C: E28AA001    ;     add R10, R10, #1
00000170: 1A000004    ;     bne mainloopcont
00000174:             ; 
00000174: E3A0A000    ;     mov R10, #0
00000178:             ; 
00000178: E28F009B    ;     adrl R0, mainloopittsmsg
0000017C: E2800C1F    ; 
00000180: EF000003    ;     swi 3
00000184:             ; 
00000184: EA000006    ;     b mainloopdostep
00000188:             ; 
00000188:             ; mainloopcont
00000188: E1A00004    ;     mov R0, R4
0000018C: E1A01005    ;     mov R1, R5
00000190: EB00059D    ;     bl updategrid
00000194:             ; 
00000194: E1A00004    ;     mov R0, R4
00000198: EB000474    ;     bl drawgrid
0000019C:             ; 
0000019C: E3580001    ;     cmp R8, #1
000001A0: 1A00000D    ;     bne mainloopskipstep
000001A4:             ; 
000001A4:             ; mainloopdostep
000001A4: E1A0000D    ;     mov R0, sp
000001A8: E1A01004    ;     mov R1, R4 ;;give the active grid
000001AC: EB00029C    ;     bl step
000001B0: E3500000    ;     cmp R0, #0
000001B4: 0A000008    ;     beq mainloopskipstep
000001B8:             ;     
000001B8:             ;     ;;If R0 is #1 then free and go to the main menu
000001B8:             ;     ;;free the current grid
000001B8: E51F0178    ;     ldr R0, gridA
000001BC: EB0006A3    ;     bl free
000001C0: E3A01000    ;     mov R1, #0
000001C4: E50F1184    ;     str R1, gridA
000001C8:             ; 
000001C8: E51F0184    ;     ldr R0, gridB
000001CC: EB00069F    ;     bl free
000001D0: E3A01000    ;     mov R1, #0
000001D4: E50F1190    ;     str R1, gridB
000001D8:             ; 
000001D8: EAFFFFBA    ;     b mainmenu
000001DC:             ; 
000001DC:             ; mainloopskipstep
000001DC: E3560001    ;     cmp R6, #1
000001E0: 0B00032D    ;     bleq slow
000001E4:             ; 
000001E4: E3570001    ;     cmp R7, #1
000001E8: 01A00009    ;     moveq R0, R9
000001EC: 0B000322    ;     bleq erase
000001F0:             ; 
000001F0: E1A00004    ;     mov R0, R4
000001F4: E1A04005    ;     mov R4, R5
000001F8: E1A05000    ;     mov R5, R0 ;;SWAP the active and passive
000001FC:             ; 
000001FC: EAFFFFD8    ;     b mainloop
00000200:             ; 
00000200:             ; gridFail
00000200: E28F0F43    ;     adrl R0, gridfailmsg
00000204: E2800A02    ; 
00000208: EF000003    ;     swi 3
0000020C:             ; 
0000020C:             ; mainMallocFail
0000020C: E28F0069    ;     adrl R0, malloc_panic
00000210: E2800C29    ; 
00000214: EF000003    ;     swi 3
00000218:             ; 
00000218: EA00001F    ;     b mainEndEnd
0000021C:             ; 
0000021C:             ; mainEnd
0000021C: E28F0EC2    ;     adrl R0, mainendmsg
00000220: E2800A01    ; 
00000224: EF000003    ;     swi 3
00000228:             ; 
00000228: E1A0000D    ;     mov R0, sp
0000022C: EB00001D    ;     bl mainfree
00000230:             ; 
00000230: E28F0019    ;     adrl R0, printHeap_end_m
00000234: E2800C29    ; 
00000238: EF000003    ;     swi 3
0000023C:             ; 
0000023C: EB00061C    ;     bl printHeap
00000240:             ; 
00000240:             ; assertheapempty     ;;this should maybe be in _start?
00000240: E51F0244    ;     ldr R0, heaphead
00000244: E5901000    ;     ldr R1, [R0, #0] ;;next
00000248: E5902008    ;     ldr R2, [R0, #8] ;;size
0000024C:             ; 
0000024C: E3510000    ;     cmp R1, #0
00000250: 1A00000A    ;     bne assertionfail
00000254:             ; 
00000254: E282200C    ;     add R2, R2, #12
00000258: E0822000    ;     add R2, R2, R0
0000025C:             ; 
0000025C: E28F0F67    ;     adrl R0, max_addr
00000260: E2800BFF    ; 
00000264: E2800703    ; 
00000268: E28F1ED9    ;     adrl R1, stack_size
0000026C: E2811A0F    ; 
00000270: E0400001    ;     sub R0, R0, R1
00000274:             ; 
00000274: E1500002    ;     cmp R0, R2
00000278: 1A000000    ;     bne assertionfail
0000027C:             ; 
0000027C: EA000003    ;     b assertionsuccess
00000280:             ; 
00000280:             ; assertionfail
00000280: E28F0049    ;     adrl R0, heapNotEmpty_m
00000284: E2800C29    ; 
00000288: EF000003    ;     swi 3
0000028C:             ; 
0000028C: EA000002    ;     b mainEndEnd
00000290:             ; 
00000290:             ; assertionsuccess
00000290: E28F00FD    ;     adrl R0, heapEmpty_m
00000294: E2800C29    ; 
00000298: EF000003    ;     swi 3
0000029C:             ; mainEndEnd
0000029C: E24BD018    ;     sub sp, fp, #24 ;;???
000002A0: E8BD47F0    ;     pop {R14, R4-R10}
000002A4: E1A0F00E    ;     mov R15, R14
000002A8:             ; 
000002A8:             ; mainfree
000002A8:             ; ;;INP in R0 is the saveInfoStruct
000002A8:             ; ;;OUT --
000002A8:             ; ;;free all of the memory that we used i.e. any saved grids, saved grid names, and the arr of sa
                      ; ved grids
000002A8: E92D47F0    ;     push {R14, R4-R10}
000002AC:             ; 
000002AC: E5905008    ;     ldr R5, [R0, #8] ;;get the current index this is the number of elements in the arr
000002B0: E5906000    ;     ldr R6, [R0, #0] ;;This is the array address
000002B4: E3A0700C    ;     ldr R7, =sizeofSaveI
000002B8:             ; 
000002B8: E1A0A000    ;     mov R10, R0
000002BC: E3A04000    ;     mov R4, #0
000002C0:             ; mainfreeloop
000002C0:             ;     ;;loop through the savedGrids
000002C0: E1540005    ;     cmp R4, R5
000002C4: 0A00000B    ;     beq mainfreelend
000002C8:             ; 
000002C8: E0286794    ;     mla R8, R4, R7, R6
000002CC: E5980000    ;     ldr R0, [R8, #0] ;;get the address of the grid
000002D0: E5989004    ;     ldr R9, [R8, #4] ;;get the address of the char*
000002D4:             ; 
000002D4: EB00065D    ;     bl free
000002D8: E3A00000    ;     mov R0, #0
000002DC: E5880000    ;     str R0, [R8, #0]
000002E0:             ; 
000002E0: E1A00009    ;     mov R0, R9
000002E4: EB000659    ;     bl free
000002E8: E3A00000    ;     mov R0, #0
000002EC: E5880004    ;     str R0, [R8, #4]
000002F0:             ; 
000002F0: E2844001    ;     add R4, R4, #1
000002F4: EAFFFFF1    ;     b mainfreeloop
000002F8:             ; 
000002F8:             ; mainfreelend
000002F8:             ;     ;;free the array
000002F8: E1A00006    ;     mov R0, R6
000002FC: EB000653    ;     bl free
00000300: E3A00000    ;     mov R0, #0
00000304: E58A0000    ;     str R0, [R10, #0]
00000308:             ; 
00000308:             ; mainfreeend
00000308: E8BD47F0    ;     pop {R14, R4-R10}
0000030C: E1A0F00E    ;     mov R15, R14
00000310:             ; 
00000310:             ; printcurrentsettinglist
00000310:             ; ;;INP in R0 is x addr
00000310:             ; ;;INP in R1 is y addr
00000310: E1A02000    ;     mov R2, R0
00000314:             ; 
00000314: E28F0046    ;     adrl R0, bracket_open
00000318: E2800C25    ; 
0000031C: EF000003    ;     swi 3
00000320:             ; 
00000320: E5520000    ;     ldrb R0, [R2]
00000324: EF000004    ;     swi 4
00000328:             ; 
00000328: E28F0F4D    ;     adrl R0, comma_space
0000032C: E2800B09    ; 
00000330: EF000003    ;     swi 3
00000334:             ; 
00000334: E5510000    ;     ldrb R0, [R1]
00000338: EF000004    ;     swi 4
0000033C:             ; 
0000033C: E28F0023    ;     adrl R0, bracket_close
00000340: E2800C25    ; 
00000344: EF000003    ;     swi 3
00000348:             ; 
00000348: E1A0F00E    ;     mov R15, R14
0000034C:             ; 
0000034C:             ; 
0000034C:             ; printcurrentsettings
0000034C:             ; ;;INP --
0000034C:             ; ;;OUT --
0000034C: E92D4000    ;     push {R14}
00000350:             ; 
00000350: E28F0FAE    ;     adrl R0, currentset_m
00000354: E2800B09    ; 
00000358: EF000003    ;     swi 3
0000035C:             ; 
0000035C:             ;     ;;STEP
0000035C: E28F00C8    ;     adrl R0, currentstep
00000360: E2800B09    ; 
00000364: EF000003    ;     swi 3
00000368:             ; 
00000368: E55F1312    ;     ldrb R1, step_b_d
0000036C: E3510000    ;     cmp R1, #0
00000370: 028F0F6B    ;     adrleq R0, off_msg
00000374: 02800B0A    ; 
00000378: 128F00A1    ;     adrlne R0, on_msg
0000037C: 12800C29    ; 
00000380: EF000003    ;     swi 3
00000384:             ; 
00000384: E28F00D8    ;     adrl R0, comma_space
00000388: E2800B09    ; 
0000038C: EF000003    ;     swi 3
00000390:             ; 
00000390:             ;     ;;SLOW
00000390: E28F0081    ;     adrl R0, currentslow
00000394: E2800B09    ; 
00000398: EF000003    ;     swi 3
0000039C:             ; 
0000039C: E55F1347    ;     ldrb R1, slow_b_d
000003A0: E3510000    ;     cmp R1, #0
000003A4: 028F0F5E    ;     adrleq R0, off_msg
000003A8: 02800B0A    ; 
000003AC: 128F006D    ;     adrlne R0, on_msg
000003B0: 12800C29    ; 
000003B4: EF000003    ;     swi 3
000003B8:             ; 
000003B8: E28F00A4    ;     adrl R0, comma_space
000003BC: E2800B09    ; 
000003C0: EF000003    ;     swi 3
000003C4:             ; 
000003C4:             ;     ;;ERASE
000003C4: E28F0056    ;     adrl R0, currenterase
000003C8: E2800B09    ; 
000003CC: EF000003    ;     swi 3
000003D0:             ; 
000003D0: E55F137C    ;     ldrb R1, erase_b_d
000003D4: E3510000    ;     cmp R1, #0
000003D8: 028F0F51    ;     adrleq R0, off_msg
000003DC: 02800B0A    ; 
000003E0: 128F0039    ;     adrlne R0, on_msg
000003E4: 12800C29    ; 
000003E8: EF000003    ;     swi 3
000003EC:             ; 
000003EC: E28F0E47    ;     adrl R0, comma_space
000003F0: E2800A02    ; 
000003F4: EF000003    ;     swi 3
000003F8:             ; 
000003F8:             ;     ;;DIMS
000003F8: E28F0035    ;     adrl R0, currentDims
000003FC: E2800B09    ; 
00000400: EF000003    ;     swi 3
00000404:             ; 
00000404: E24F00B9    ;     adrl R0, width
00000408: E2400C03    ; 
0000040C: E24F1D0F    ;     adrl R1, height
00000410: EBFFFFBE    ;     bl printcurrentsettinglist
00000414:             ; 
00000414: E28F0048    ;     adrl R0, comma_space
00000418: E2800B09    ; 
0000041C: EF000003    ;     swi 3
00000420:             ; 
00000420:             ;     ;;RANGE
00000420: E28F0014    ;     adrl R0, currentRange
00000424: E2800B09    ; 
00000428: EF000003    ;     swi 3
0000042C:             ; 
0000042C: E24F00DF    ;     adrl R0, range_min
00000430: E2400C03    ; 
00000434: E24F10E6    ;     adrl R1, range_max
00000438: E2411C03    ; 
0000043C: EBFFFFB3    ;     bl printcurrentsettinglist
00000440:             ; 
00000440: E28F001C    ;     adrl R0, comma_space
00000444: E2800B09    ; 
00000448: EF000003    ;     swi 3
0000044C:             ; 
0000044C:             ;     ;;Alive_c
0000044C: E28F0015    ;     adrl R0,  currenticons_1
00000450: E2800B09    ; 
00000454: EF000003    ;     swi 3
00000458:             ; 
00000458: E55F0407    ;     ldrb R0, alive_c
0000045C: EF000000    ;     swi 0
00000460:             ; 
00000460: E28F0FFF    ;     adrl R0, comma_space
00000464: E2800A02    ; 
00000468: EF000003    ;     swi 3
0000046C:             ; 
0000046C:             ;     ;;Dead_c
0000046C: E28F00FD    ;     adrl R0, currenticons_2
00000470: E2800C23    ; 
00000474: EF000003    ;     swi 3
00000478:             ; 
00000478: E55F0426    ;     ldrb R0, dead_c
0000047C: EF000000    ;     swi 0
00000480:             ; 
00000480: E28F0FF7    ;     adrl R0, comma_space
00000484: E2800A02    ; 
00000488: EF000003    ;     swi 3
0000048C:             ; 
0000048C:             ;     ;;Ptr_c
0000048C: E28F0FF9    ;     adrl R0, currenticons_3
00000490: E2800A02    ; 
00000494: EF000003    ;     swi 3
00000498:             ; 
00000498: E55F0445    ;     ldrb R0, ptr_c
0000049C: EF000000    ;     swi 0
000004A0:             ; 
000004A0: E28F0FEF    ;     adrl R0, comma_space
000004A4: E2800A02    ; 
000004A8: EF000003    ;     swi 3
000004AC:             ; 
000004AC:             ;     ;;Itters
000004AC: E28F0E39    ;     adrl R0, currentItters
000004B0: E2800A02    ; 
000004B4: EF000003    ;     swi 3
000004B8:             ; 
000004B8: E55F0469    ;     ldrb R0, maxitters
000004BC: EF000004    ;     swi 4
000004C0:             ; 
000004C0: E28F0FE7    ;     adrl R0, comma_space
000004C4: E2800A02    ; 
000004C8: EF000003    ;     swi 3
000004CC:             ; 
000004CC:             ;     ;;Draw erase
000004CC: E28F0079    ;     adrl R0, currentdraweras
000004D0: E2800C23    ; 
000004D4: EF000003    ;     swi 3
000004D8:             ; 
000004D8: E55F1488    ;     ldrb R1, drawerase_b
000004DC: E3510000    ;     cmp R1, #0
000004E0: 028F003C    ;     adrleq R0, off_msg
000004E4: 02800B0A    ; 
000004E8: 128F0031    ;     adrlne R0, on_msg
000004EC: 12800B0A    ; 
000004F0: EF000003    ;     swi 3
000004F4:             ; 
000004F4:             ;     ;;END
000004F4: E28F006B    ;     adrl R0, bracket_close
000004F8: E2800C23    ; 
000004FC: EF000003    ;     swi 3
00000500:             ; 
00000500: E3A0000A    ;     ldr R0, =nl
00000504: EF000000    ;     swi 0
00000508:             ; 
00000508: E8BD4000    ;     pop {R14}
0000050C: E1A0F00E    ;     mov R15, R14
00000510:             ; 
00000510:             ; 
00000510:             ; settingsmenu
00000510:             ; ;;https://media.giphy.com/media/jOpLbiGmHR9S0/giphy.gif
00000510:             ; ;;I think there's a limit on the defined string length
00000510: E28F0084    ;     adrl R0, s_m1
00000514: E2800A02    ; 
00000518: EF000003    ;     swi 3
0000051C:             ; 
0000051C: E28F0009    ;     adrl R0, s_m2
00000520: E2800C21    ; 
00000524: EF000003    ;     swi 3
00000528:             ;     
00000528: E28F0061    ;     adrl R0, s_m3
0000052C: E2800C21    ; 
00000530: EF000003    ;     swi 3
00000534:             ; 
00000534: E28F0006    ;     adrl R0, s_m4
00000538: E2800C22    ; 
0000053C: EF000003    ;     swi 3
00000540:             ; 
00000540:             ; changesetting
00000540: EBFFFF81    ;     bl printcurrentsettings
00000544:             ; 
00000544: E28F0051    ;     adrl R0, s_m
00000548: E2800C22    ; 
0000054C: EF000003    ;     swi 3
00000550:             ; 
00000550:             ; changesettingget
00000550: E3A0000A    ;     ldr R0, =enter
00000554: E3A01002    ;     mov R1, #2
00000558: E3A02001    ;     mov R2, #1
0000055C: EB0002BA    ;     bl getstring
00000560:             ; 
00000560: E3500000    ;     cmp R0, #0
00000564: 0A00000E    ;     beq changesettingsmallocfail
00000568:             ; 
00000568: E1A05000    ;     mov R5, R0
0000056C:             ; 
0000056C: EB00026C    ;     bl strtoi
00000570:             ; 
00000570: E1A04000    ;     mov R4, R0
00000574: E1A06001    ;     mov R6, R1
00000578: E1A00005    ;     mov R0, R5
0000057C:             ; 
0000057C: EB0005B3    ;     bl free
00000580:             ; 
00000580: EB0001A4    ;     bl newline
00000584:             ; 
00000584: E3560001    ;     cmp R6, #1
00000588: 0AFFFECE    ;     beq mainmenu
0000058C:             ; 
0000058C: E3560000    ;     cmp R6, #0
00000590: 0A000007    ;     beq changesettingscont
00000594:             ; 
00000594:             ; changesettingserr
00000594: E28F005D    ;     adrl R0, s_m_err
00000598: E2800C22    ; 
0000059C: EF000003    ;     swi 3
000005A0:             ; 
000005A0: EAFFFFEA    ;     b changesettingget
000005A4:             ; 
000005A4:             ; changesettingsmallocfail
000005A4: E28F00D1    ;     adrl R0, malloc_panic
000005A8: E2800C25    ; 
000005AC: EF000003    ;     swi 3
000005B0:             ; 
000005B0: EAFFFEC4    ;     b mainmenu
000005B4:             ; 
000005B4:             ; changesettingscont
000005B4: E3540007    ;     cmp R4, #7
000005B8: CAFFFFF5    ;     bgt changesettingserr
000005BC:             ; 
000005BC:             ;     ;;now we have the index we can print the current value and prompt for a new one then loop b
                      ; ack up to the getsetting
000005BC: EA000007    ;     b getjump
000005C0:             ; 
000005C0: 000007A0    ;     jumps defw changestep, changeslow, changeerase, changedims, changerange, changeicons, chang
000005C4: 000007B8    ; eitter, changedrawerase
000005C8: 000007D0    ; 
000005CC: 00000888    ; 
000005D0: 000008BC    ; 
000005D4: 000008F0    ; 
000005D8: 000009A4    ; 
000005DC: 00000A54    ; 
000005E0:             ;     align
000005E0:             ; 
000005E0:             ; getjump
000005E0: E1A04104    ;     mov R4, R4, lsl #2
000005E4: E24F002C    ;     adr R0, jumps
000005E8: E0840000    ;     add R0, R4, R0
000005EC: E5104000    ;     ldr R4, [R0]
000005F0: E12FFF14    ;     bx R4 ;[[flag]]
000005F4:             ; 
000005F4: E3540000    ;     cmp R4, #0
000005F8: 0A000068    ;     beq changestep
000005FC:             ; 
000005FC: E3540001    ;     cmp R4, #1
00000600: 0A00006C    ;     beq changeslow
00000604:             ; 
00000604: E3540002    ;     cmp R4, #2
00000608: 0A000070    ;     beq changeerase
0000060C:             ; 
0000060C: E3540003    ;     cmp R4, #3
00000610: 0A00009C    ;     beq changedims
00000614:             ; 
00000614: E3540004    ;     cmp R4, #4
00000618: 0A0000A7    ;     beq changerange
0000061C:             ; 
0000061C: E3540005    ;     cmp R4, #5
00000620: 0A0000B2    ;     beq changeicons
00000624:             ; 
00000624: E3540006    ;     cmp R4, #6
00000628: 0A0000DD    ;     beq changeitter
0000062C:             ; 
0000062C: E3540007    ;     cmp R4, #7
00000630: 0A000107    ;     beq changedrawerase
00000634:             ; 
00000634:             ; changearr
00000634:             ; ;;generic for changedims and change range
00000634:             ; ;;INP in R0 is addr. for x
00000634:             ; ;;INP in R1 is addr. for y
00000634:             ; ;;INP in R2 is boolean for require x < y. 1 for require
00000634:             ; ;;OUT in R0 is err code non-0 for error
00000634: E92D41F0    ;     push {R14, R4-R8}
00000638:             ; 
00000638: E1A06000    ;     mov R6, R0
0000063C: E1A07001    ;     mov R7, R1
00000640: E1A08002    ;     mov R8, R2
00000644:             ; 
00000644: EB000040    ;     bl printdims
00000648:             ; 
00000648:             ; changearrget
00000648: E28F00DA    ;     adrl R0, currentaskx
0000064C: E2800C22    ; 
00000650: EF000003    ;     swi 3
00000654:             ; 
00000654: EB00001D    ;     bl changearrgetvalidint
00000658: E1A04000    ;     mov R4, R0
0000065C: E3510000    ;     cmp R1, #0
00000660: 1A000015    ;     bne changearrmallocerr
00000664:             ; 
00000664: EB00016B    ;     bl newline
00000668:             ; 
00000668: E28F00CE    ;     adrl R0, currentasky
0000066C: E2800C22    ; 
00000670: EF000003    ;     swi 3
00000674:             ; 
00000674: EB000015    ;     bl changearrgetvalidint
00000678: E1A05000    ;     mov R5, R0
0000067C:             ; 
0000067C: EB000165    ;     bl newline
00000680:             ; 
00000680: E3580001    ;     cmp R8, #1
00000684: 1A000006    ;     bne changearrset
00000688:             ; 
00000688: E1540005    ;     cmp R4, R5
0000068C: AA000000    ;     bge changearrsizeerr
00000690:             ; 
00000690: EA000003    ;     b changearrset
00000694:             ; 
00000694:             ; changearrsizeerr
00000694: E28F001D    ;     adrl R0, changearrsizmsg
00000698: E2800C23    ; 
0000069C: EF000003    ;     swi 3
000006A0:             ; 
000006A0: EAFFFFE8    ;     b changearrget
000006A4:             ; 
000006A4:             ; changearrset
000006A4:             ;     ;;now we have the two valid values so str them back
000006A4: E5464000    ;     strb R4, [R6]
000006A8: E5475000    ;     strb R5, [R7] 
000006AC:             ; 
000006AC: E1A00006    ;     mov R0, R6
000006B0: E1A01007    ;     mov R1, R7
000006B4:             ; 
000006B4: EB000024    ;     bl printdims
000006B8:             ; 
000006B8: EA000001    ;     b changearrend
000006BC:             ; 
000006BC:             ; changearrmallocerr
000006BC: E3A00001    ;     mov R0, #1
000006C0: EA000000    ;     b changearrendend
000006C4:             ; 
000006C4:             ; changearrend
000006C4: E3A00000    ;     mov R0, #0
000006C8:             ; 
000006C8:             ; changearrendend
000006C8: E8BD41F0    ;     pop {R14, R4-R8}
000006CC: E1A0F00E    ;     mov R15, R14
000006D0:             ; 
000006D0:             ; ;;And you thought the naming couldn't get worse \(*0*)/
000006D0:             ; changearrgetvalidint ;;basically an inner function
000006D0:             ; ;;INP --
000006D0:             ; ;;OUT in R0 is the gotten value
000006D0:             ; ;;OUT in R1 is err code non-0 for fail
000006D0: E92D41F0    ;     push {R14, R4-R8}
000006D4:             ; changearrgetvalidintget
000006D4: E3A0000A    ;     ldr R0, =enter
000006D8: E3A01003    ;     mov R1, #3
000006DC: E3A02001    ;     mov R2, #1
000006E0: EB000259    ;     bl getstring
000006E4:             ; 
000006E4: E3500000    ;     cmp R0, #0
000006E8: 0A000011    ;     beq changearrgvmallocerr
000006EC:             ; 
000006EC: E1A04000    ;     mov R4, R0 ;;save the string to free
000006F0:             ; 
000006F0: EB00020B    ;     bl strtoi
000006F4:             ; 
000006F4: E1A05000    ;     mov R5, R0 ;;save the int value
000006F8: E1A06001    ;     mov R6, R1 ;;save err code
000006FC:             ; 
000006FC: E1A00004    ;     mov R0, R4
00000700: EB000552    ;     bl free
00000704:             ; 
00000704: E3560000    ;     cmp R6, #0
00000708: 0A000004    ;     beq changearrgetvalidintcont
0000070C:             ; 
0000070C:             ; changearrgetvalidinterr
0000070C: EB000141    ;     bl newline
00000710:             ; 
00000710: E28F004B    ;     adrl R0, changearrverr_m
00000714: E2800C1E    ; 
00000718: EF000003    ;     swi 3
0000071C:             ; 
0000071C: EAFFFFEC    ;     b changearrgetvalidintget
00000720:             ; 
00000720:             ; changearrgetvalidintcont
00000720:             ;     ;;we now have an int value, need to do bounds checks
00000720: E3550000    ;     cmp R5, #0
00000724: DAFFFFF8    ;     ble changearrgetvalidinterr
00000728:             ; 
00000728: E35500FF    ;     cmp R5, #255
0000072C: CAFFFFF6    ;     bgt changearrgetvalidinterr
00000730:             ; 
00000730: EA000001    ;     b changearrgetvalidintend
00000734:             ; 
00000734:             ; changearrgvmallocerr
00000734: E3A01001    ;     mov R1, #1
00000738:             ; 
00000738: EA000001    ;     b changearrgvendend
0000073C:             ; 
0000073C:             ; changearrgetvalidintend
0000073C: E1A00005    ;     mov R0, R5
00000740: E3A01000    ;     mov R1, #0
00000744:             ; changearrgvendend
00000744: E8BD41F0    ;     pop {R14, R4-R8}
00000748: E1A0F00E    ;     mov R15, R14
0000074C:             ; 
0000074C:             ; printdims
0000074C:             ; ;;INP in R0 is addr. for x
0000074C:             ; ;;INP in R1 is addr. for y
0000074C:             ; ;;(_, _)
0000074C:             ;     
0000074C: E1A02000    ;     mov R2, R0
00000750: E1A03001    ;     mov R3, R1
00000754:             ; 
00000754: E28F00D9    ;     adrl R0, currentDims
00000758: E2800A02    ; 
0000075C: EF000003    ;     swi 3
00000760:             ; 
00000760: E28F00FA    ;     adrl R0, bracket_open
00000764: E2800A02    ; 
00000768: EF000003    ;     swi 3
0000076C:             ; 
0000076C: E5520000    ;     ldrb R0, [R2]
00000770: EF000004    ;     swi 4
00000774:             ; 
00000774: E28F00E8    ;     adrl R0, comma_space
00000778: E2800A02    ; 
0000077C: EF000003    ;     swi 3
00000780:             ; 
00000780: E5530000    ;     ldrb R0, [R3]
00000784: EF000004    ;     swi 4
00000788:             ; 
00000788: E28F00D7    ;     adrl R0, bracket_close
0000078C: E2800A02    ; 
00000790: EF000003    ;     swi 3
00000794:             ; 
00000794: E3A0000A    ;     ldr R0, =nl
00000798: EF000000    ;     swi 0
0000079C:             ; 
0000079C: E1A0F00E    ;     mov R15, R14
000007A0:             ; 
000007A0:             ; changestep
000007A0: E24F004A    ;     adrl R0, step_b_d
000007A4: E2400C07    ; 
000007A8: E28F107C    ;     adrl R1, currentstep
000007AC: E2811A02    ; 
000007B0:             ; 
000007B0: EB00000C    ;     bl changebool
000007B4:             ; 
000007B4: EAFFFF61    ;     b changesetting
000007B8:             ; 
000007B8:             ; changeslow
000007B8: E24F0063    ;     adrl R0, slow_b_d
000007BC: E2400C07    ; 
000007C0: E28F1051    ;     adrl R1, currentslow
000007C4: E2811A02    ; 
000007C8:             ; 
000007C8: EB000006    ;     bl changebool
000007CC:             ; 
000007CC: EAFFFF5B    ;     b changesetting
000007D0:             ; 
000007D0:             ; changeerase
000007D0: E24F0FDF    ;     adrl R0, erase_b_d
000007D4: E2400B01    ; 
000007D8: E28F1042    ;     adrl R1, currenterase
000007DC: E2811A02    ; 
000007E0:             ; 
000007E0: EB000000    ;     bl changebool
000007E4:             ; 
000007E4: EAFFFF55    ;     b changesetting
000007E8:             ; 
000007E8:             ; changebool
000007E8:             ; ;;INP in R0 is the address of ___b_d
000007E8:             ; ;;INP in R1 is the address of the printing name
000007E8:             ; ;;OUT --
000007E8: E92D41F0    ;     push {R14, R4-R8}
000007EC:             ; 
000007EC: E1A04000    ;     mov R4, R0
000007F0: E1A05001    ;     mov R5, R1
000007F4:             ; 
000007F4: E1A00001    ;     mov R0, R1
000007F8: EF000003    ;     swi 3
000007FC:             ; 
000007FC: E5540000    ;     ldrb R0, [R4]
00000800: E3500001    ;     cmp R0, #1
00000804: 128F0F46    ;     adrlne R0, off_msg
00000808: 12800B09    ; 
0000080C: 028F000D    ;     adrleq R0, on_msg
00000810: 02800C25    ; 
00000814: EF000003    ;     swi 3
00000818:             ; 
00000818: EB0000FE    ;     bl newline
0000081C:             ; 
0000081C: E28F0D85    ;     adrl R0, currentasknew_B
00000820: EF000003    ;     swi 3
00000824:             ; 
00000824:             ; changebool_cont
00000824: EF000001    ;     swi 1
00000828:             ; 
00000828: E2400030    ;     sub R0, R0, #48
0000082C: E3500001    ;     cmp R0, #1
00000830: 0A000006    ;     beq changebool_set
00000834: E3500000    ;     cmp R0, #0
00000838: 0A000004    ;     beq changebool_set
0000083C:             ; 
0000083C: EB0000F5    ;     bl newline
00000840:             ; 
00000840: E28F0037    ;     adrl R0, currentasknew_E
00000844: E2800C21    ; 
00000848: EF000003    ;     swi 3
0000084C:             ; 
0000084C: EAFFFFF4    ;     b changebool_cont
00000850:             ; 
00000850:             ; changebool_set
00000850: E5440000    ;     strb R0, [R4]
00000854:             ; 
00000854: EB0000EF    ;     bl newline
00000858:             ; 
00000858: E1A00005    ;     mov R0, R5
0000085C: EF000003    ;     swi 3
00000860:             ; 
00000860: E5540000    ;     ldrb R0, [R4]
00000864: E3500001    ;     cmp R0, #1
00000868: 128F00B4    ;     adrlne R0, off_msg
0000086C: 12800B09    ; 
00000870: 028F00A9    ;     adrleq R0, on_msg
00000874: 02800B09    ; 
00000878: EF000003    ;     swi 3
0000087C:             ; 
0000087C: EB0000E5    ;     bl newline
00000880:             ; 
00000880:             ; changeboolend
00000880: E8BD41F0    ;     pop {R14, R4-R8}
00000884: E1A0F00E    ;     mov R15, R14
00000888:             ; 
00000888:             ; changedims
00000888:             ; ;;INP in R0 is addr. for x
00000888:             ; ;;INP in R1 is addr. for y
00000888:             ; ;;INP in R2 is boolean for require x < y. 1 for require
00000888: E24F0031    ;     adrl R0, width_d
0000088C: E2400B02    ; 
00000890: E24F1038    ;     adrl R1, height_d
00000894: E2411B02    ; 
00000898: E3A02000    ;     mov R2, #0
0000089C: EBFFFF64    ;     bl changearr
000008A0:             ; 
000008A0: E3500000    ;     cmp R0, #0
000008A4: 0A000003    ;     beq changedimscont
000008A8:             ; 
000008A8: E28F00CD    ;     adrl R0, malloc_panic
000008AC: E2800C22    ; 
000008B0: EF000003    ;     swi 3
000008B4:             ; 
000008B4: EAFFFE03    ;     b mainmenu
000008B8:             ; 
000008B8:             ; changedimscont
000008B8:             ; 
000008B8: EAFFFF20    ;     b changesetting
000008BC:             ; 
000008BC:             ; changerange
000008BC: E24F006F    ;     adrl R0, range_min
000008C0: E2400B02    ; 
000008C4: E24F1076    ;     adrl R1, range_max
000008C8: E2411B02    ; 
000008CC: E3A02001    ;     mov R2, #1
000008D0: EBFFFF57    ;     bl changearr
000008D4:             ; 
000008D4: E3500000    ;     cmp R0, #0
000008D8: 0A000003    ;     beq changerangecont
000008DC:             ; 
000008DC: E28F0099    ;     adrl R0, malloc_panic
000008E0: E2800C22    ; 
000008E4: EF000003    ;     swi 3
000008E8:             ; 
000008E8: EAFFFDF6    ;     b mainmenu
000008EC:             ; 
000008EC:             ; changerangecont
000008EC:             ; 
000008EC: EAFFFF13    ;     b changesetting
000008F0:             ; 
000008F0:             ; changeicons
000008F0:             ; ;;print the current icons, ask for 3 characters in sequence for alive/dead/ptr
000008F0: EB000015    ;     bl printicons
000008F4:             ; 
000008F4: E28F0082    ;     adrl R0, currenticons_a
000008F8: E2800C1F    ; 
000008FC: EF000003    ;     swi 3
00000900:             ; 
00000900: E3A00000    ;     mov R0, #0
00000904: E3A01003    ;     mov R1, #3
00000908: E3A02001    ;     mov R2, #1
0000090C: EB0001CE    ;     bl getstring
00000910:             ; 
00000910: E3500000    ;     cmp R0, #0
00000914: 0A000008    ;     beq changeiconsmallerr
00000918:             ; 
00000918: E5D01000    ;     ldrb R1, [R0, #0]
0000091C: E5D02001    ;     ldrb R2, [R0, #1]
00000920: E5D03002    ;     ldrb R3, [R0, #2]
00000924:             ; 
00000924: E54F18D3    ;     strb R1, alive_c
00000928: E54F28D6    ;     strb R2, dead_c
0000092C: E54F38D9    ;     strb R3, ptr_c
00000930:             ; 
00000930: EB0000B8    ;     bl newline
00000934:             ; 
00000934: EB000004    ;     bl printicons
00000938:             ; 
00000938: EAFFFF00    ;     b changesetting
0000093C:             ; 
0000093C:             ; changeiconsmallerr
0000093C: E28F0EFB    ;     adrl R0, getstringerr_m
00000940: E2800A01    ; 
00000944: EF000003    ;     swi 3
00000948:             ; 
00000948: EAFFFEFC    ;     b changesetting
0000094C:             ; 
0000094C:             ; printicons
0000094C:             ; ;;INP --
0000094C:             ; ;;OUT --
0000094C: E28F0015    ;     adrl R0, currenticons_1
00000950: E2800C1F    ; 
00000954: EF000003    ;     swi 3
00000958:             ; 
00000958: E55F0907    ;     ldrb R0, alive_c
0000095C: EF000000    ;     swi 0
00000960:             ; 
00000960: E3A0000A    ;     ldr R0, =nl
00000964: EF000000    ;     swi 0
00000968:             ; 
00000968: E28F0001    ;     adrl R0, currenticons_2
0000096C: E2800C1F    ; 
00000970: EF000003    ;     swi 3
00000974:             ; 
00000974: E55F0922    ;     ldrb R0, dead_c
00000978: EF000000    ;     swi 0
0000097C:             ; 
0000097C: E3A0000A    ;     ldr R0, =nl
00000980: EF000000    ;     swi 0
00000984:             ; 
00000984: E28F0FBB    ;     adrl R0, currenticons_3
00000988: E2800B07    ; 
0000098C: EF000003    ;     swi 3
00000990:             ; 
00000990: E55F093D    ;     ldrb R0, ptr_c
00000994: EF000000    ;     swi 0
00000998:             ; 
00000998: E3A0000A    ;     ldr R0, =nl
0000099C: EF000000    ;     swi 0
000009A0:             ; 
000009A0:             ; printiconsend
000009A0: E1A0F00E    ;     mov R15, R14
000009A4:             ; 
000009A4:             ; changeitter
000009A4: E28F0FA6    ;     adrl R0, currentItters
000009A8: E2800B07    ; 
000009AC: EF000003    ;     swi 3
000009B0:             ; 
000009B0: E55F0961    ;     ldrb R0, maxitters
000009B4: EF000004    ;     swi 4
000009B8:             ; 
000009B8: EB000096    ;     bl newline
000009BC:             ; 
000009BC: E28F0028    ;     adrl R0, getitters_m
000009C0: E2800A02    ; 
000009C4: EF000003    ;     swi 3
000009C8:             ; 
000009C8:             ; changeitterget
000009C8: E3A0000A    ;     ldr R0, =enter
000009CC: E3E01000    ;     mov R1, #-1
000009D0: E3A02001    ;     mov R2, #1
000009D4: EB00019C    ;     bl getstring
000009D8:             ; 
000009D8: E3500000    ;     cmp R0, #0
000009DC: 1A000003    ;     bne changeittergetcont
000009E0:             ; 
000009E0: E28F0095    ;     adrl R0, malloc_panic
000009E4: E2800C21    ; 
000009E8: EF000003    ;     swi 3
000009EC:             ; 
000009EC: EAFFFDB5    ;     b mainmenu 
000009F0:             ; 
000009F0:             ; changeittergetcont
000009F0:             ; 
000009F0: E1A04000    ;     mov R4, R0
000009F4:             ; 
000009F4: EB00014A    ;     bl strtoi
000009F8: E1A03000    ;     mov R3, R0
000009FC:             ; 
000009FC: E1A05000    ;     mov R5, R0
00000A00: E1A06001    ;     mov R6, R1
00000A04:             ; 
00000A04: E1A00004    ;     mov R0, R4
00000A08: EB000490    ;     bl free
00000A0C:             ; 
00000A0C: EB000081    ;     bl newline
00000A10:             ; 
00000A10: E3560000    ;     cmp R6, #0
00000A14: 1A000003    ;     bne changeittererr
00000A18:             ; 
00000A18: E24F00C9    ;     adrl R0, maxitters
00000A1C: E2400C09    ; 
00000A20: E5405000    ;     strb R5, [R0]
00000A24:             ; 
00000A24: EA000004    ;     b changeitterend
00000A28:             ; 
00000A28:             ; changeittererr
00000A28: EB00007A    ;     bl newline
00000A2C:             ; 
00000A2C: E28F0097    ;     adrl R0, changeittere_m
00000A30: E2800C1F    ; 
00000A34: EF000003    ;     swi 3
00000A38: EAFFFFE2    ;     b changeitterget
00000A3C:             ; changeitterend
00000A3C: E28F0C1E    ;     adrl R0, currentItters
00000A40: EF000003    ;     swi 3
00000A44:             ; 
00000A44: E55F09F5    ;     ldrb R0, maxitters
00000A48: EF000004    ;     swi 4
00000A4C:             ; 
00000A4C: EB000071    ;     bl newline
00000A50:             ; 
00000A50: EAFFFEBA    ;     b changesetting
00000A54:             ; 
00000A54:             ; changedrawerase
00000A54: E24F0F81    ;     adrl R0, drawerase_b
00000A58: E2400B02    ; 
00000A5C: E28F10E9    ;     adrl R1, currentdraweras
00000A60: E2811C1D    ; 
00000A64: EBFFFF5F    ;     bl changebool
00000A68:             ; 
00000A68: EAFFFEB4    ;     b changesetting
00000A6C:             ; 
00000A6C:             ; changedraweraseend
00000A6C: EAFFFEB3    ;     b changesetting
00000A70:             ; 
00000A70:             ; newboard
00000A70: E3A00001    ;     mov R0, #1;;should get dims
00000A74: EB00029D    ;     bl setupOptions
00000A78:             ; 
00000A78: E24F002E    ;     adrl R0, step_b
00000A7C: E2400C0A    ; 
00000A80: E5500000    ;     ldrb R0, [R0]
00000A84:             ; 
00000A84: E3500001    ;     cmp R0, #1
00000A88: 1A000002    ;     bne newboardcont
00000A8C:             ; 
00000A8C: E28F0F6E    ;     adrl R0, stepmode_m
00000A90: E2800B05    ; 
00000A94: EF000003    ;     swi 3
00000A98:             ; 
00000A98:             ; newboardcont
00000A98:             ; 
00000A98: EB0001B2    ;     bl setupGrid
00000A9C:             ; 
00000A9C: E3500000    ;     cmp R0, #0
00000AA0: 1AFFFDD9    ;     bne mainMallocFail
00000AA4:             ;     
00000AA4: E51F4A64    ;     ldr R4, gridA
00000AA8: E51F5A64    ;     ldr R5, gridB
00000AAC:             ; 
00000AAC: E3540000    ;     cmp R4, #0
00000AB0: 0AFFFDD2    ;     beq gridFail
00000AB4: E3550000    ;     cmp R5, #0
00000AB8: 0AFFFDD0    ;     beq gridFail
00000ABC:             ; 
00000ABC: EAFFFD9B    ;     b mainloopstart
00000AC0:             ; 
00000AC0:             ; loadboard
00000AC0:             ; ;;INP in R0 is the ptr to the SaveInfoHeader struct i.e. ptr to arr, current pos, max size
00000AC0:             ; ;;RET in R0 0 for success in which case go to main loop, n/0 for err in which case return to ma
                      ; in menu
00000AC0:             ; ;;display the saved grids
00000AC0:             ; ;;ask for the index
00000AC0:             ; ;;load the grids with the saved info
00000AC0:             ; ;;ask the user for the settings
00000AC0: E1A04000    ;     mov R4, R0 ;;save the struct ptr
00000AC4:             ; 
00000AC4:             ;     ;;pass ptr to listgrids
00000AC4: EB00007F    ;     bl listGrids
00000AC8:             ; 
00000AC8: E5940008    ;     ldr R0, [R4, #8] ;;get the current position
00000ACC: E3500000    ;     cmp R0, #0
00000AD0: 0A00004E    ;     beq loadboardempty
00000AD4:             ; 
00000AD4:             ; loadboardaskindex
00000AD4:             ;     ;;The grid has now been printed out we need to get the index to load
00000AD4: E28F0029    ;     adrl R0, loadboardaski
00000AD8: E2800C19    ; 
00000ADC: EF000003    ;     swi 3
00000AE0:             ; 
00000AE0: E3A0000A    ;     ldr R0, =enter
00000AE4: E3E01000    ;     mov R1, #-1
00000AE8: E3A02001    ;     mov R2, #1
00000AEC: EB000156    ;     bl getstring
00000AF0:             ; 
00000AF0: E3500000    ;     cmp R0, #0
00000AF4: 1A000003    ;     bne loadboardaskindexcont
00000AF8:             ; 
00000AF8: E28F007D    ;     adrl R0, malloc_panic
00000AFC: E2800A02    ; 
00000B00: EF000003    ;     swi 3
00000B04:             ; 
00000B04: EAFFFD6F    ;     b mainmenu 
00000B08:             ; 
00000B08:             ; loadboardaskindexcont
00000B08:             ; 
00000B08: E1A05000    ;     mov R5, R0
00000B0C:             ; 
00000B0C: EB000041    ;     bl newline
00000B10:             ; 
00000B10: E1A00005    ;     mov R0, R5
00000B14: EB000102    ;     bl strtoi
00000B18: E1A06000    ;     mov R6, R0
00000B1C: E1A07001    ;     mov R7, R1
00000B20:             ;     ;;ERR codes
00000B20:             ;     ;;  0 is success
00000B20:             ;     ;;  1 is attempted -ve
00000B20:             ;     ;;  2 is use of non-numeric characters
00000B20:             ;     ;;  3 is value out of range of integer
00000B20:             ;     ;;  4 is null string given
00000B20:             ; 
00000B20: E1A00005    ;     mov R0, R5
00000B24: EB000449    ;     bl free
00000B28:             ; 
00000B28: E1A00006    ;     mov R0, R6
00000B2C: E1A01007    ;     mov R1, R7
00000B30:             ; 
00000B30: E3510001    ;     cmp R1, #1
00000B34: 0A000032    ;     beq loadboardret
00000B38:             ; 
00000B38: E3510000    ;     cmp R1, #0
00000B3C: 0A000003    ;     beq loadboardindex
00000B40:             ; 
00000B40: E28F0047    ;     adrl R0, loadboardifail
00000B44: E2800C19    ; 
00000B48: EF000003    ;     swi 3
00000B4C:             ; 
00000B4C: EAFFFFE0    ;     b loadboardaskindex
00000B50:             ; 
00000B50:             ; loadboardindex
00000B50:             ; ;;we now have an index lets check if its in range and then load the board
00000B50:             ;     ;;should be +ve so don't need to check < 0
00000B50: E5941008    ;     ldr R1, [R4, #8] ;;get the current position, this is where things get added so index < curr
                      ; entposition
00000B54: E1500001    ;     cmp R0, R1
00000B58: BA000003    ;     blt loadboardmain
00000B5C:             ; 
00000B5C: E28F004E    ;     adrl R0, loadboardirerr
00000B60: E2800C19    ; 
00000B64: EF000003    ;     swi 3
00000B68: EAFFFFD9    ;     b loadboardaskindex
00000B6C:             ; 
00000B6C:             ; loadboardmain
00000B6C:             ; ;;now we know that the index is valid we can load the grid
00000B6C:             ; ;;
00000B6C:             ; ;;need to free current grid
00000B6C:             ; ;;need to create a copy of the snapshot and set gridA to it 
00000B6C:             ; ;;return to main menu
00000B6C: E5941000    ;     ldr R1, [R4, #0] ;;get the array of grids
00000B70: E3A0200C    ;     ldr R2, =sizeofSaveI
00000B74: E0201290    ;     mla R0, R0, R2, R1 ;;R0 = index * sizeofSaveI + grid.addr
00000B78:             ; 
00000B78: E5905000    ;     ldr R5, [R0, #0] ;;get the address of that grid
00000B7C: E5D06008    ;     ldrb R6, [R0, #8] ;;get the width
00000B80: E5D07009    ;     ldrb R7, [R0, #9] ;;get the height
00000B84:             ; 
00000B84: E0000796    ;     mul R0, R6, R7 ;;get the required size
00000B88: E1A09000    ;     mov R9, R0 ;;save the number of bytes
00000B8C:             ; 
00000B8C: EB00038E    ;     bl malloc
00000B90:             ; 
00000B90: E3500000    ;     cmp R0, #0
00000B94: 0A000016    ;     beq loadboardmallocfail
00000B98:             ; 
00000B98: E1A08000    ;     mov R8, R0 ;;save the new grid arr
00000B9C:             ; 
00000B9C:             ;     ;;need to copy the saved grid into the new grid
00000B9C:             ; 
00000B9C: E1A00005    ;     mov R0, R5  ;;src is the saved grid
00000BA0: E1A01008    ;     mov R1, R8  ;;dst is the new grid
00000BA4: E1A02009    ;     mov R2, R9  ;;bytes is in R9 already from width and height
00000BA8: EB000106    ;     bl memcpy
00000BAC:             ; 
00000BAC: E51F0B6C    ;     ldr R0, gridA
00000BB0: EB000426    ;     bl free
00000BB4:             ; 
00000BB4: E50F8B74    ;     str R8, gridA
00000BB8:             ; 
00000BB8:             ;     ;;also need to check if the old gridB is big enough --NO!
00000BB8:             ;     ;;The old grid has been freed when returning to the main menu so we must make a new one
00000BB8:             ; loadboardmallocB
00000BB8: E51F0B74    ;     ldr R0, gridB
00000BBC: EB000423    ;     bl free
00000BC0:             ; 
00000BC0: E1A00009    ;     mov R0, R9
00000BC4: EB000380    ;     bl malloc
00000BC8:             ; 
00000BC8: E3500000    ;     cmp R0, #0
00000BCC: 0A000008    ;     beq loadboardmallocfail
00000BD0:             ; 
00000BD0: E50F0B8C    ;     str R0, gridB
00000BD4:             ; 
00000BD4:             ; loadboardskipB
00000BD4: E54F6B89    ;     strb R6, width
00000BD8: E54F7B8C    ;     strb R7, height ;;overwrite the active grid information
00000BDC:             ; 
00000BDC: E28F002B    ;     adrl R0, loadboardsucmsg
00000BE0: E2800C19    ; 
00000BE4: EF000003    ;     swi 3
00000BE8:             ; 
00000BE8: E3A00000    ;     mov R0, #0 ;;skip asking dims as they've been loaded
00000BEC: EB00023F    ;     bl setupOptions
00000BF0:             ; 
00000BF0: EA000007    ;     b loadboardsucc
00000BF4:             ; 
00000BF4:             ; loadboardmallocfail
00000BF4: E28F00D3    ;     adrl R0, loadboardmlcerr
00000BF8: E2800B06    ; 
00000BFC: EF000003    ;     swi 3
00000C00:             ; 
00000C00: EA000002    ;     b loadboarderr
00000C04:             ; 
00000C04:             ; loadboardret
00000C04: E28F006B    ;     adrl R0, loadboardretmsg
00000C08: E2800B06    ; 
00000C0C: EF000003    ;     swi 3
00000C10:             ; 
00000C10:             ; loadboardempty
00000C10:             ; loadboarderr
00000C10: EAFFFD2C    ;     b mainmenu
00000C14:             ; loadboardsucc
00000C14: EAFFFD45    ;     b mainloopstart
00000C18:             ; 
00000C18:             ; newline
00000C18: E3A0000A    ;     ldr R0, =nl
00000C1C: EF000000    ;     swi 0
00000C20:             ; 
00000C20: E1A0F00E    ;     mov R15, R14
00000C24:             ; 
00000C24:             ; step
00000C24:             ; ;;INP in R0 is the gridHeaderStruct ptr [[todo]]
00000C24:             ; ;;INP in R1 is the active grid ptr
00000C24:             ; ;;OUT in R0 is 1 if should return to main menu, else 0.
00000C24:             ; 
00000C24:             ; ;;get user input
00000C24:             ; ;;if q -> jump to main menu
00000C24:             ; ;;if s -> ask for name, bl saveGrid with name
00000C24: E92D41F0    ;     push {R14, R4-R8}
00000C28: E1A04000    ;     mov R4, R0 ;;save the struct 
00000C2C: E1A05001    ;     mov R5, R1
00000C30:             ; 
00000C30: EF000001    ;     swi 1
00000C34:             ; 
00000C34: E3500071    ;     cmp R0, #'q'
00000C38: 0A00001D    ;     beq stependfail ;;bad name, shame I can't change it eh
00000C3C:             ; 
00000C3C: E3500073    ;     cmp R0, #'s'
00000C40: 1A00001D    ;     bne stependsucc
00000C44:             ; 
00000C44: E28F0012    ;     adrl R0, askname
00000C48: E2800C13    ; 
00000C4C: EF000003    ;     swi 3
00000C50:             ; 
00000C50: E3A0000A    ;     ldr R0, =enter
00000C54: E3E01000    ;     mov R1, #-1
00000C58: E3A02001    ;     mov R2, #1
00000C5C: EB0000FA    ;     bl getstring
00000C60:             ; 
00000C60: E3500000    ;     cmp R0, #0
00000C64: 1A000003    ;     bne stepcont
00000C68:             ; 
00000C68: E28F000D    ;     adrl R0, malloc_panic
00000C6C: E2800C1F    ; 
00000C70: EF000003    ;     swi 3
00000C74:             ; 
00000C74: EA00000E    ;     b stependfail
00000C78:             ; 
00000C78:             ; stepcont
00000C78:             ; 
00000C78: E1A01000    ;     mov R1, R0 ;;char* name
00000C7C: E1A00004    ;     mov R0, R4 ;;gridinfo* 
00000C80: E1A02005    ;     mov R2, R5 ;;active grid
00000C84: EB000046    ;     bl saveGrid
00000C88:             ; 
00000C88: EBFFFFE2    ;     bl newline
00000C8C:             ; 
00000C8C: E28F009F    ;     adrl R0, savedchoice
00000C90: E2800C12    ; 
00000C94: EF000003    ;     swi 3
00000C98:             ; 
00000C98: EF000001    ;     swi 1
00000C9C: EF000000    ;     swi 0
00000CA0: E3500059    ;     cmp R0, #'Y'
00000CA4:             ; 
00000CA4: E3A0000A    ;     ldr R0, =nl
00000CA8: EF000000    ;     swi 0
00000CAC:             ; 
00000CAC: 0A000000    ;     beq stependfail
00000CB0: EA000001    ;     b stependsucc
00000CB4:             ; 
00000CB4:             ; stependfail
00000CB4: E3A00001    ;     mov R0, #1
00000CB8: EA000000    ;     b stepend
00000CBC:             ; 
00000CBC:             ; stependsucc
00000CBC: E3A00000    ;     mov R0, #0
00000CC0:             ; 
00000CC0:             ; stepend
00000CC0: E8BD41F0    ;     pop {R14, R4-R8}
00000CC4: E1A0F00E    ;     mov R15, R14
00000CC8:             ; 
00000CC8:             ; listGrids
00000CC8:             ; ;;INP in R0 is the ptr to the gridInfo struct
00000CC8:             ; ;;RET --
00000CC8:             ; ;;Grid info struct
00000CC8:             ; ;;  - SaveInfoStruct* array
00000CC8:             ; ;;  - int max size of arr
00000CC8:             ; ;;  - int current position in arr
00000CC8:             ; 
00000CC8:             ; ;;loops through the array of grids (if any) printing their names, and dims, ask to print grid
00000CC8: E92D47F0    ;     push {R14, R4-R10}
00000CCC:             ; 
00000CCC: E5904000    ;     ldr R4, [R0, #0] ;;get the array ptr
00000CD0: E5905008    ;     ldr R5, [R0, #8] ;;current position
00000CD4:             ; 
00000CD4: E3550000    ;     cmp R5, #0
00000CD8: 0A00002C    ;     beq listGridsEmpty
00000CDC:             ; 
00000CDC:             ; ;;if current position == 1: print("There are no saved grids")
00000CDC:             ; ;;for i from 0 to current position
00000CDC:             ; ;;  getname(4)
00000CDC:             ; ;;  getwidth(8)
00000CDC:             ; ;;  getheight(9)
00000CDC:             ; ;;  print("There is a grid called %s with dims (%d, %d)")
00000CDC: E3A01000    ;     mov R1, #0 ;;i
00000CE0: E3A0200C    ;     ldr R2, =sizeofSaveI
00000CE4:             ; 
00000CE4: E28F0041    ;     adrl R0, listgridmsg
00000CE8: E2800B06    ; 
00000CEC: EF000003    ;     swi 3
00000CF0:             ; 
00000CF0: E28F0058    ;     adrl R0, cutoff
00000CF4: E2800B06    ; 
00000CF8: EF000003    ;     swi 3
00000CFC:             ; 
00000CFC:             ; listGridsLoop
00000CFC: E1510005    ;     cmp R1, R5
00000D00: 0A000025    ;     beq listGridsLend
00000D04:             ; 
00000D04: E0234291    ;     mla R3, R1, R2, R4 ;;R3 = i * sizeof(saveInfo) + array
00000D08: E5936004    ;     ldr R6, [R3, #4] ;;load the name ptr
00000D0C: E5D37008    ;     ldrb R7, [R3, #8] ;;load the width
00000D10: E5D38009    ;     ldrb R8, [R3, #9] ;;load the height
00000D14:             ; 
00000D14: E28F00C5    ;     adrl R0, gridloadpindex
00000D18: E2800C16    ; 
00000D1C: EF000003    ;     swi 3
00000D20:             ; 
00000D20: E3A0003A    ;     mov R0, #':'
00000D24: EF000000    ;     swi 0
00000D28:             ; 
00000D28: E1A00001    ;     mov R0, R1
00000D2C: EF000004    ;     swi 4
00000D30:             ; 
00000D30: EBFFFFB8    ;     bl newline
00000D34:             ; 
00000D34: E28F00AE    ;     adrl R0, gridloadpname
00000D38: E2800C16    ; 
00000D3C: EF000003    ;     swi 3
00000D40:             ; 
00000D40: E1A00006    ;     mov R0, R6
00000D44: EF000003    ;     swi 3
00000D48:             ; 
00000D48: EBFFFFB2    ;     bl newline
00000D4C:             ; 
00000D4C: E28F009E    ;     adrl R0, gridloadpwidth
00000D50: E2800C16    ; 
00000D54: EF000003    ;     swi 3
00000D58:             ; 
00000D58: E1A00007    ;     mov R0, R7
00000D5C: EF000004    ;     swi 4
00000D60:             ; 
00000D60: EBFFFFAC    ;     bl newline
00000D64:             ; 
00000D64: E28F008F    ;     adrl R0, gridloadpheight
00000D68: E2800C16    ; 
00000D6C: EF000003    ;     swi 3
00000D70:             ; 
00000D70: E1A00008    ;     mov R0, R8
00000D74: EF000004    ;     swi 4
00000D78:             ; 
00000D78: EBFFFFA6    ;     bl newline
00000D7C:             ; 
00000D7C:             ;     ;;[[Prob]  Printing the grid uses the stored width and height, I could change it to use a p
                      ; assed in
00000D7C:             ;     ;;             version but do the other areas have enough registers to cope? probably not.
00000D7C:             ;     ;;             Would have to swap the width and height with the loaded versions - I really 
                      ; don't like this idea
00000D7C:             ; 
00000D7C: E2811001    ;     add R1, R1, #1
00000D80:             ; 
00000D80: E28F0FF2    ;     adrl R0, cutoff
00000D84: E2800B05    ; 
00000D88: EF000003    ;     swi 3
00000D8C:             ; 
00000D8C: EAFFFFDA    ;     b listGridsLoop
00000D90:             ; 
00000D90:             ; listGridsEmpty
00000D90: E28F00EE    ;     adrl R0, gridloadempty
00000D94: E2800C15    ; 
00000D98: EF000003    ;     swi 3
00000D9C:             ; 
00000D9C:             ; listGridsLend
00000D9C:             ; listGridsEnd
00000D9C: E8BD47F0    ;     pop {R14, R4-R10}
00000DA0: E1A0F00E    ;     mov R15, R14
00000DA4:             ; 
00000DA4:             ; saveGrid
00000DA4:             ; ;;INP in R0 is the ptr gridInfo struct (in the main's stackframe)
00000DA4:             ; ;;INP in R1 is the char* to the name
00000DA4:             ; ;;INP in R2 is the active grid
00000DA4:             ; ;;RET in R0 is an errcode or 0 for success. 1 for malloc error
00000DA4:             ; 
00000DA4:             ; ;;if reachedCap -> realloc + inc maxsize
00000DA4:             ; ;;copy the current grid to another loc and place info in gridArr
00000DA4:             ; ;;inc current index
00000DA4: E92D47F0    ;     push {R14, R4-R10}
00000DA8:             ; 
00000DA8: E1A04000    ;     mov R4, R0
00000DAC: E1A05001    ;     mov R5, R1
00000DB0: E1A0A002    ;     mov R10, R2
00000DB4:             ; 
00000DB4: E5942008    ;     ldr R2, [R4, #8] ;;get the current index
00000DB8: E5943004    ;     ldr R3, [R4, #4] ;;get the maxsize
00000DBC:             ; 
00000DBC: E1520003    ;     cmp R2, R3
00000DC0: 0A000000    ;     beq saveGridResize
00000DC4: EA00000D    ;     b saveGridAdd
00000DC8:             ; 
00000DC8:             ; saveGridResize
00000DC8:             ;     ;;maxsize in R3
00000DC8: E1A06083    ;     mov R6, R3, lsl #1 ;;double the capacity
00000DCC: E3A0700C    ;     ldr R7, =sizeofSaveI
00000DD0: E0070796    ;     mul R7, R6, R7 ;;get the number of bytes
00000DD4:             ; 
00000DD4: E1A00007    ;     mov R0, R7
00000DD8: EB0002FB    ;     bl malloc ;;get the new grid
00000DDC:             ; 
00000DDC: E3500000    ;     cmp R0, #0 ;;if malloc failed then don't do any saving
00000DE0: 0A000020    ;     beq saveGridFailMalloc
00000DE4:             ; 
00000DE4: E1A01000    ;     mov R1, R0
00000DE8: E1A08000    ;     mov R8, R0 ;;save of ptr
00000DEC:             ; 
00000DEC:             ;     ;;now that we have the new grid we need to memcpy the bytes from the original into the new 
                      ; one
00000DEC: E5940000    ;     ldr R0, [R4, #0] ;;get the array ptr
00000DF0:             ;     ;;R1 has the malloced address
00000DF0: E1A020A7    ;     mov R2, R7, lsr #1 ;;not great, this is the double cap halfed, means no mul again
00000DF4: EB000073    ;     bl memcpy
00000DF8:             ; 
00000DF8:             ;     ;;assume success because I didn't give memcpy an err code :)
00000DF8:             ;     ;;need to store the new size and arr ptr in the gridinfo struct
00000DF8:             ; 
00000DF8: E5848000    ;     str R8, [R4, #0]
00000DFC: E5846004    ;     str R6, [R4, #4]
00000E00:             ; 
00000E00:             ; saveGridAdd
00000E00:             ; ;;add the current grid to the array
00000E00: E5946000    ;     ldr R6, [R4, #0] ;;get the arr ptr
00000E04: E5947008    ;     ldr R7, [R4, #8] ;;get current index
00000E08:             ; 
00000E08:             ;     ;;ptr is 4 bytes
00000E08:             ;     ;;we're adding the struct of 
00000E08:             ;     ;;  |-grid*     (ptr)
00000E08:             ;     ;;  |-char*     (ptr)
00000E08:             ;     ;;  |-width     (byte)
00000E08:             ;     ;;  `-height    (byte)
00000E08:             ; 
00000E08:             ;     ;;we need to copy the current array
00000E08: E55F8DBD    ;     ldrb R8, width
00000E0C: E55F9DC0    ;     ldrb R9, height
00000E10: E0080998    ;     mul R8, R8, R9 ;;get the number of bytes in grid
00000E14:             ; 
00000E14: E1A00008    ;     mov R0, R8
00000E18: EB0002EB    ;     bl malloc ;;allocate a new grid
00000E1C:             ; 
00000E1C: E3500000    ;     cmp R0, #0
00000E20: 0A000010    ;     beq saveGridFailMalloc
00000E24:             ; 
00000E24: E92D0100    ;     push {R8} ;; :(
00000E28:             ; 
00000E28: E3A0800C    ;     ldr R8, =sizeofSaveI
00000E2C: E0266897    ;     mla R6, R7, R8, R6 ;;currentindex * sizeof(Gridinfo) + arrptr
00000E30: E5860000    ;     str R0, [R6, #0] ;;store the grid*
00000E34: E5865004    ;     str R5, [R6, #4] ;;store the char*
00000E38: E55F8DED    ;     ldrb R8, width
00000E3C: E5C68008    ;     strb R8, [R6, #8]
00000E40: E5C69009    ;     strb R9, [R6, #9]
00000E44:             ; 
00000E44: E8BD0100    ;     pop {R8}
00000E48:             ; 
00000E48: E1A01000    ;     mov R1, R0 ;;dst
00000E4C: E1A0000A    ;     mov R0, R10 ;;src
00000E50: E1A02008    ;     mov R2, R8 ;;num bytes
00000E54: EB00005B    ;     bl memcpy ;;copy the grid into the new location
00000E58:             ; 
00000E58:             ;     ;;inc the position
00000E58: E5940008    ;     ldr R0, [R4, #8]
00000E5C: E2800001    ;     add R0, R0, #1
00000E60: E5840008    ;     str R0, [R4, #8]
00000E64:             ; 
00000E64: EA000001    ;     b saveGridSucc
00000E68:             ; 
00000E68:             ; saveGridFailMalloc
00000E68: E3A00001    ;     mov R0, #1
00000E6C: EA000000    ;     b saveGridEnd
00000E70:             ; 
00000E70:             ; saveGridSucc
00000E70: E3A00000    ;     mov R0, #0
00000E74:             ; 
00000E74:             ; saveGridEnd
00000E74: E8BD47F0    ;     pop {R14, R4-R10}
00000E78: E1A0F00E    ;     mov R15, R14
00000E7C:             ; 
00000E7C:             ; erase
00000E7C:             ; ;;INP in R0 is the itters
00000E7C:             ; ;;for (width * height + 1) * 2 + 1
00000E7C:             ; ;;      print('\b')
00000E7C: E1A01000    ;     mov R1, R0
00000E80:             ; 
00000E80:             ; eraseloop
00000E80: E3510000    ;     cmp R1, #0
00000E84: 0A000003    ;     beq eraseend
00000E88:             ; 
00000E88: E3A00008    ;     ldr R0, =backspace
00000E8C: EF000000    ;     swi 0
00000E90:             ; 
00000E90: E2411001    ;     sub R1, R1, #1
00000E94: EAFFFFF9    ;     b eraseloop
00000E98:             ; 
00000E98:             ; eraseend
00000E98: E1A0F00E    ;     mov R15, R14
00000E9C:             ; 
00000E9C:             ; slow
00000E9C: E3A010FF    ;     mov R1, #0xFF
00000EA0: E1A01081    ;     mov R1, R1, lsl #1
00000EA4:             ; 
00000EA4:             ; slowloop
00000EA4: E3510000    ;     cmp R1, #0
00000EA8: 0A000005    ;     beq slowend
00000EAC:             ; 
00000EAC: E3A00020    ;     mov R0, #' '
00000EB0: EF000000    ;     swi 0
00000EB4: E3A00008    ;     ldr R0, =backspace
00000EB8: EF000000    ;     swi 0
00000EBC:             ; 
00000EBC: E2411001    ;     sub R1, R1, #1
00000EC0: EAFFFFF7    ;     b slowloop
00000EC4:             ; 
00000EC4:             ; slowend
00000EC4: E1A0F00E    ;     mov R15, R14
00000EC8:             ; 
00000EC8:             ; heapclean
00000EC8:             ; ;;zero out all memory in the heap (debugging uses)
00000EC8: E28F0F97    ;     adrl R0, heapstart
00000ECC: E2800B07    ; 
00000ED0: E3A01601    ;     ldr R1, =max_addr ;;stores the end of the heap
00000ED4: E3A02801    ;     ldr R2, =stack_size
00000ED8: E0411002    ;     sub R1, R1, R2 ;; R1 = max_addr - stack_size which should be the heap end
00000EDC: E3C11003    ;     and R1, R1, #-4 ;;align to 4 byte boundry just in case
00000EE0: E3A03000    ;     mov R3, #0
00000EE4:             ; heapcleanloop ;;starting at heapstart
00000EE4: E1500001    ;     cmp R0, R1
00000EE8: 0A000002    ;     beq heapcleanend
00000EEC: E5003000    ;     str R3, [R0] ;;store 0 in loc
00000EF0: E2800004    ;     add R0, R0, #4 ;;inc by a word
00000EF4: EAFFFFFA    ;     b heapcleanloop
00000EF8:             ; heapcleanend
00000EF8: E1A0F00E    ;     mov R15, R14
00000EFC:             ; 
00000EFC:             ; strlen
00000EFC:             ; ;;INP in R0 is the address of the string
00000EFC:             ; ;;OUT in R0 is the length of the null terminated string
00000EFC:             ; 
00000EFC:             ; ;;len = 0
00000EFC:             ; ;;while(inp[len] != \0) {len++;}
00000EFC:             ; ;;return len
00000EFC:             ; 
00000EFC: E3A01000    ;     mov R1, #0 ;;len
00000F00: E3500000    ;     cmp R0, #0
00000F04: 0A000004    ;     beq strlenend
00000F08:             ; 
00000F08:             ; strlenloop
00000F08: E7D02001    ;     ldrb R2, [R0, R1]
00000F0C: E3520000    ;     cmp R2, #0
00000F10: 0A000001    ;     beq strlenend
00000F14: E2811001    ;     add R1, R1, #1
00000F18: EAFFFFFA    ;     b strlenloop
00000F1C:             ; 
00000F1C:             ; strlenend
00000F1C: E1A00001    ;     mov R0, R1
00000F20: E1A0F00E    ;     mov R15, R14
00000F24:             ; 
00000F24:             ; 
00000F24:             ; strtoi
00000F24:             ; ;;INP in R0 is the address of the string
00000F24:             ; ;;OUT in R0 is the value created
00000F24:             ; ;;OUT in R1 is the err code
00000F24:             ; ;;
00000F24:             ; ;;ERR codes
00000F24:             ; ;;  0 is success
00000F24:             ; ;;  1 is attempted -ve
00000F24:             ; ;;  2 is use of non-numeric characters
00000F24:             ; ;;  3 is value out of range of integer
00000F24:             ; ;;  4 is null string given
00000F24:             ; 
00000F24:             ; ;;  example inp
00000F24:             ; ;;  12234       len = 5
00000F24:             ; ;;      ^-find end
00000F24:             ; ;;  tot = 0
00000F24:             ; ;;  for i from end to 0:
00000F24:             ; ;;      tot += inp[i] * (10 ** (len(inp) - i - 1))
00000F24:             ; ;;  +some checks for valid input
00000F24:             ; 
00000F24:             ; ;;This will take in an address to the start of a string and attempt to convert it into an integ
                      ; er
00000F24:             ; ;;String is only valid when all characters are numerical
00000F24:             ; ;;For now it does not accept -ve numbers
00000F24:             ; 
00000F24: E92D41F0    ;     push {R14, R4-R8}
00000F28: E1A04000    ;     mov R4, R0  ;;R4 holds the addr
00000F2C:             ; 
00000F2C: E3500000    ;     cmp R0, #0
00000F30: 03A01004    ;     moveq R1, #4
00000F34: 0A00001E    ;     beq strtoiendfail ;;null given so err code = 4 and end
00000F38:             ; 
00000F38: EBFFFFEF    ;     bl strlen
00000F3C: E1A05000    ;     mov R5, R0  ;;R5 holds the len of the string
00000F40:             ; 
00000F40: E3550000    ;     cmp R5, #0
00000F44: 0A00001C    ;     beq strtoiendsucc ;;if len(string) == 0 then return 0
00000F48:             ; 
00000F48: E5D46000    ;     ldrb R6, [R4, #0]
00000F4C: E356002D    ;     cmp R6, #45
00000F50: 0A000012    ;     beq strtoifailminus
00000F54:             ; 
00000F54: E3A06000    ;     mov R6, #0  ;;R6 holds the total
00000F58: E3A07001    ;     mov R7, #1  ;;R7 holds the **
00000F5C: E2458001    ;     sub R8, R5, #1  ;;R8 is i which starts at end (len - 1)
00000F60: E3A0300A    ;     mov R3, #10 ;;mul to **
00000F64:             ; 
00000F64:             ; strtoiloop
00000F64: E3580000    ;     cmp R8, #0
00000F68: BA00000A    ;     blt strtoilend
00000F6C:             ; 
00000F6C: E7D42008    ;     ldrb R2, [R4, R8]
00000F70: E2422030    ;     sub R2, R2, #48
00000F74:             ; 
00000F74: E3520000    ;     cmp R2, #0
00000F78: BA00000C    ;     blt strtoifailnonnum
00000F7C: E3520009    ;     cmp R2, #9
00000F80: CA00000A    ;     bgt strtoifailnonnum
00000F84:             ; 
00000F84: E0266792    ;     mla R6, R2, R7, R6 ;;total = (inp[i] * (**)) + total -> total += inp[i] * (**)
00000F88: 6A000006    ;     bvs strtoifailoutrange
00000F8C: E0070397    ;     mul R7, R7, R3
00000F90:             ; 
00000F90: E2488001    ;     sub R8, R8, #1
00000F94:             ; 
00000F94: EAFFFFF2    ;     b strtoiloop
00000F98:             ; 
00000F98:             ; 
00000F98:             ; ;;branches are expensive - should this just be rep RET? probably doesn't matter at this scale
00000F98:             ; strtoilend
00000F98: E1A00006    ;     mov R0, R6
00000F9C: EA000006    ;     b strtoiendsucc
00000FA0:             ; 
00000FA0:             ; strtoifailminus
00000FA0: E3A01001    ;     mov R1, #1
00000FA4: EA000002    ;     b strtoiendfail
00000FA8:             ; 
00000FA8:             ; strtoifailoutrange
00000FA8: E3A01003    ;     mov R1, #3
00000FAC: EA000000    ;     b strtoiendfail
00000FB0:             ; 
00000FB0:             ; strtoifailnonnum
00000FB0: E3A01002    ;     mov R1, #2
00000FB4:             ; 
00000FB4:             ; strtoiendfail
00000FB4: E3A00000    ;     mov R0, #0
00000FB8: EA000000    ;     b strtoiend
00000FBC:             ; 
00000FBC:             ; strtoiendsucc
00000FBC: E3A01000    ;     mov R1, #0
00000FC0:             ; 
00000FC0:             ; strtoiend
00000FC0: E8BD41F0    ;     pop {R14, R4-R8}
00000FC4: E1A0F00E    ;     mov R15, R14
00000FC8:             ; 
00000FC8:             ; memcpy
00000FC8:             ; ;;INP in R0 is the addr of src
00000FC8:             ; ;;INP in R1 is the addr of dst
00000FC8:             ; ;;INP in R2 is the number of bytes to copy
00000FC8:             ; 
00000FC8:             ; ;;check if src and dst are alliged
00000FC8:             ; ;;If different then write bytes
00000FC8:             ; ;;If same then go to 4byte boundry
00000FC8:             ; ;;  Write words of bytes2copy / 4
00000FC8:             ; ;;  Write remaining bytes
00000FC8: E92D41F0    ;     push {R14, R4-R8}
00000FCC:             ; 
00000FCC: E2004003    ;     and R4, R0, #0b11
00000FD0: E2015003    ;     and R5, R1, #0b11
00000FD4:             ; 
00000FD4: E1540005    ;     cmp R4, R5
00000FD8: 1A00000E    ;     bne memcpyallbytes
00000FDC:             ; 
00000FDC:             ;     ;;If they are the same then cpy R4 bytes and then do words
00000FDC: E0422004    ;     sub R2, R2, R4;; bytes2cpy -= bytes we are about to write
00000FE0: E1A03004    ;     mov R3, R4
00000FE4: EB00000E    ;     bl memcpybytes
00000FE8:             ; 
00000FE8:             ;     ;;Now find the number of words that can be written i.e. bytes2cpy / 4 (bytes2cpy >> 2)
00000FE8: E3C23003    ;     and R3, R2, #-4 ;;the number of bytes to write that make up the words
00000FEC: E3A04000    ;     mov R4, #0 ;;i
00000FF0:             ; memcpywordsloop
00000FF0: E1540003    ;     cmp R4, R3
00000FF4: 0A000003    ;     beq memcpywordslend
00000FF8:             ; 
00000FF8: E7906004    ;     ldr R6, [R0, R4]
00000FFC: E7816004    ;     str R6, [R1, R4]
00001000:             ;     
00001000: E2844004    ;     add R4, R4, #4
00001004:             ; 
00001004: EAFFFFF9    ;     b memcpywordsloop
00001008:             ;     
00001008:             ; memcpywordslend
00001008:             ; ;;Now copy the remaining bytes
00001008: E2022003    ;     and R2, R2, #0b11
0000100C: E1A03002    ;     mov R3, R2
00001010: EB000003    ;     bl memcpybytes
00001014: EA00000A    ;     b memcpyend
00001018:             ; 
00001018:             ; memcpyallbytes
00001018: E1A03002    ;     mov R3, R2
0000101C: EB000000    ;     bl memcpybytes
00001020: EA000007    ;     b memcpyend
00001024:             ; 
00001024:             ; memcpybytes
00001024:             ; ;;This is an internal function to memcpy and so doesn't follow the calling convention, it also 
                      ; assumes values are in place from memcpy
00001024:             ; ;;for (int i = 0; i < byte2cpy; i++) {
00001024:             ; ;;      *(dst + i) = *(src + i)
00001024:             ; ;;INP in R3 is the number of bytes to copy
00001024: E3A05000    ;     mov R5, #0 ;;i
00001028:             ; memcpybytesloop
00001028: E1550003    ;     cmp R5, R3
0000102C: 0A000003    ;     beq memcpybyteslend ;;i < bytes2cpy
00001030:             ; 
00001030: E7D04005    ;     ldrb R4, [R0, R5]
00001034: E7C14005    ;     strb R4, [R1, R5] ;;dst[i] = src[i]
00001038:             ; 
00001038: E2855001    ;     add R5, R5, #1 ;;i++
0000103C:             ; 
0000103C: EAFFFFF9    ;     b memcpybytesloop
00001040:             ; 
00001040:             ; memcpybyteslend
00001040: E1A0F00E    ;     mov R15, R14
00001044:             ; 
00001044:             ; memcpyend
00001044: E8BD41F0    ;     pop {R14, R4-R8}
00001048: E1A0F00E    ;     mov R15, R14
0000104C:             ; 
0000104C:             ; getstring
0000104C:             ; ;;INP in R0 the terminator character
0000104C:             ; ;;INP in R1 the max number of characters or -1 for no max
0000104C:             ; ;;INP in R2 boolean (non-0/0) for if letters should be printed out as well
0000104C:             ; ;;RET in R0 a ptr to the memory address
0000104C:             ; ;;
0000104C:             ; ;;Dynamically allocate memory to support large string
0000104C:             ; 
0000104C:             ; ;;buff = malloc(minBytes)
0000104C:             ; ;;while (input != terminator && pos < maxchars) 
0000104C:             ; ;;  buff[pos] = input
0000104C:             ; ;;  putchar(input)
0000104C:             ; ;;  if (pos > buffSize)
0000104C:             ; ;;      nBuff = malloc(buffSize << 1)
0000104C:             ; ;;      memcpy from buff to nBuff
0000104C:             ; ;;      free buff
0000104C:             ; ;;      buff = nBuff
0000104C:             ; 
0000104C: E92D47F0    ;     push {R14, R4-R10}
00001050:             ; 
00001050: E1A08000    ;     mov R8, R0 ;;now holds terminator
00001054: E1A09001    ;     mov R9, R1 ;;nax chars
00001058: E3590000    ;     cmp R9, #0
0000105C: 0A00003A    ;     beq getstringEnd
00001060:             ;     ;sub R9, R9, #1 ;;reduce by 1 to use later
00001060: E1A0A002    ;     mov R10, R2 ;;print bool
00001064:             ; 
00001064: E3A06008    ;     ldr R6, =minBuffSize ;;R6 will hold the current size of the buffer
00001068: E1A00006    ;     mov R0, R6
0000106C: EB000256    ;     bl malloc
00001070:             ; 
00001070: E3500000    ;     cmp R0, #0
00001074: 0A000032    ;     beq getstringErr
00001078:             ; 
00001078: E1A04000    ;     mov R4, R0 ;;R4 is the address of the buffer
0000107C:             ; 
0000107C: E3A05000    ;     mov R5, #0 ;;R5 is the loop counter/index into buffer
00001080:             ; getstringloop
00001080: E3790001    ;     cmp R9, #-1
00001084: 0A000001    ;     beq getstringloopskipsize
00001088: E1550009    ;     cmp R5, R9 ;;position - maxsize
0000108C:             ;                       ;;pos 2 means 3 characters written
0000108C: AA00001B    ;     bge getstringlend ;;if position >= maxsize
00001090:             ; getstringloopskipsize
00001090: EF000001    ;     swi 1 ;;get input
00001094: E1500008    ;     cmp R0, R8 ;;is input == terminator character
00001098: 0A000018    ;     beq getstringlend
0000109C:             ; 
0000109C: E3790001    ;     cmp R9, #-1
000010A0: 0AFFFFFF    ;     beq skipMax
000010A4:             ;     
000010A4:             ; skipMax
000010A4: E1550006    ;     cmp R5, R6
000010A8: E92D0001    ;     push {R0}
000010AC: AA000005    ;     bge getstringresize
000010B0:             ; 
000010B0:             ; getstringlcont
000010B0: E8BD0001    ;     pop {R0}
000010B4: E7C40005    ;     strb R0, [R4, R5] ;;buff[pos] = input
000010B8:             ; 
000010B8: E35A0000    ;     cmp R10, #0
000010BC: 1F000000    ;     swine 0 ;;output the character to the screen if R10 is not 0
000010C0:             ; 
000010C0: E2855001    ;     add R5, R5, #1
000010C4:             ; 
000010C4: EAFFFFED    ;     b getstringloop
000010C8:             ; 
000010C8:             ; getstringresize
000010C8:             ;     ;;r6 will hold new buffer
000010C8: E1A00086    ;     mov R0, R6, lsl #1
000010CC: EB00023E    ;     bl malloc
000010D0:             ; 
000010D0: E3500000    ;     cmp R0, #0
000010D4: 0A00001A    ;     beq getstringErr
000010D8:             ; 
000010D8: E1A07000    ;     mov R7, R0
000010DC:             ; 
000010DC: E1A00004    ;     mov R0, R4 ;;old buff
000010E0: E1A01007    ;     mov R1, R7 ;;newBuff
000010E4: E1A02005    ;     mov R2, R5 ;;bytes to write
000010E8: EBFFFFB6    ;     bl memcpy
000010EC:             ; 
000010EC: E1A00004    ;     mov R0, R4
000010F0: EB0002D6    ;     bl free
000010F4: E1A04007    ;     mov R4, R7
000010F8:             ; 
000010F8: E1A06086    ;     mov R6, R6, lsl #1
000010FC:             ; 
000010FC: EAFFFFEB    ;     b getstringlcont
00001100:             ; 
00001100:             ; getstringlend
00001100:             ;     ;;need to add a \0
00001100:             ;     ;;need to check if the buffer is completely full -> resize buffer to +1? (will be aligned t
                      ; o 8 in malloc!) then copy
00001100:             ;     ;;I could have the buffers always leave a space open for the \0? but this is kind of an edg
                      ; e case?
00001100: E1550006    ;     cmp R5, R6 ;;position to size of buffer
00001104: 0A000000    ;     beq getstringResizeEnd
00001108:             ; 
00001108: EA00000F    ;     b getstringEnd
0000110C:             ; 
0000110C:             ; getstringResizeEnd
0000110C: E2860001    ;     add R0, R6, #1
00001110: EB00022D    ;     bl malloc
00001114:             ; 
00001114: E3500000    ;     cmp R0, #0
00001118: 0A000009    ;     beq getstringErr
0000111C:             ; 
0000111C: E1A07000    ;     mov R7, R0
00001120:             ; 
00001120: E1A00004    ;     mov R0, R4;;old buff
00001124: E1A01007    ;     mov R1, R7;;new buff
00001128: E1A02005    ;     mov R2, R5;;bytes2write
0000112C: EBFFFFA5    ;     bl memcpy
00001130:             ; 
00001130: E1A00004    ;     mov R0, R4
00001134: EB0002C5    ;     bl free
00001138: E1A04007    ;     mov R4, R7
0000113C:             ; 
0000113C: E2866001    ;     add R6, R6, #1 ;;not needed
00001140:             ; 
00001140: EA000001    ;     b getstringEnd
00001144:             ; 
00001144:             ; getstringErr
00001144: E3A00000    ;     mov R0, #0
00001148: EA000002    ;     b getstringEndEnd
0000114C:             ; 
0000114C:             ; getstringEnd
0000114C: E3A00000    ;     mov R0, #0
00001150: E7C40005    ;     strb R0, [R4, R5]
00001154:             ; 
00001154: E1A00004    ;     mov R0, R4
00001158:             ; 
00001158:             ; getstringEndEnd
00001158: E8BD47F0    ;     pop {R14, R4-R10}
0000115C: E1A0F00E    ;     mov R15, R14
00001160:             ; 
00001160:             ; tolower
00001160:             ; ;;INP in R0 is a character
00001160:             ; ;;OUT in R0 is the character.lower()
00001160: E3800020    ;     orr R0, R0, #32
00001164: E1A0F00E    ;     mov R15, R14
00001168:             ; 
00001168:             ; setupGrid
00001168:             ; ;;INP --
00001168:             ; ;;RET in R0 is err code, non-0 is error
00001168:             ; ;;The values addresses of the grids will now be set, can still be 0
00001168:             ; ;; ask for generation mode
00001168:             ; ;;      |-If random ask for seed
00001168:             ; ;;      |   `-For generation roll the seed to create a pseudorandom value for each `pixel`
00001168:             ; ;;      `-If draw then get them to draw the grid one `pixel` at a time
00001168: E92D47F0    ;     push {R14, R4-R10}
0000116C:             ; 
0000116C:             ;     ;;generate the main grid
0000116C: E24F6021    ;     adrl R6, width
00001170: E2466C11    ; 
00001174: E5566000    ;     ldrb R6, [R6]
00001178: E24F7F4B    ;     adrl R7, height
0000117C: E2477A01    ; 
00001180: E5577000    ;     ldrb R7, [R7]
00001184:             ; 
00001184: E0000796    ;     mul R0, R6, R7 ;;width * height = num of bytes to malloc
00001188:             ; 
00001188: E1A05000    ;     mov R5, R0
0000118C: EB00020E    ;     bl malloc
00001190:             ; 
00001190: E1A04000    ;     mov R4, R0
00001194: E24F1F55    ;     adrl R1, gridA
00001198: E2411A01    ; 
0000119C: E5014000    ;     str R4, [R1]
000011A0:             ; 
000011A0: E1A00005    ;     mov R0, R5
000011A4: EB000208    ;     bl malloc
000011A8: E24F1F59    ;     adrl R1, gridB
000011AC: E2411A01    ; 
000011B0: E5010000    ;     str R0, [R1]
000011B4:             ; 
000011B4: E3500000    ;     cmp R0, #0      ;;If either grid failed to malloc
000011B8: 0A000066    ;     beq setupGridFail
000011BC: E3540000    ;     cmp R4, #0
000011C0: 0A000064    ;     beq setupGridFail
000011C4:             ; 
000011C4:             ;     ;;R4 holds the gridA addr
000011C4:             ;     ;;R6 holds the width
000011C4:             ;     ;;R7 holds the height
000011C4:             ; 
000011C4: E28F00EF    ;     adrl R0, askgenoption
000011C8: E2800C0F    ; 
000011CC: EF000003    ;     swi 3
000011D0:             ; setupGridAsk
000011D0: EF000001    ;     swi 1
000011D4: E3800020    ;     orr R0, R0, #32
000011D8:             ; 
000011D8: E1A01000    ;     mov R1, R0
000011DC: EBFFFE8D    ;     bl newline
000011E0:             ; 
000011E0: E3510064    ;     cmp R1, #'d'
000011E4: 0A000005    ;     beq setupdrawing
000011E8:             ; 
000011E8: E3510072    ;     cmp R1, #'r'
000011EC: 0A000008    ;     beq setuprandom
000011F0:             ; 
000011F0: E28F0FFF    ;     adrl R0, setupGrdFailmsg
000011F4: E2800B03    ; 
000011F8: EF000003    ;     swi 3
000011FC: EAFFFFF3    ;     b setupGridAsk
00001200:             ; 
00001200:             ; setupdrawing
00001200: E3A09000    ;     mov R9, #0
00001204:             ; 
00001204: E28F0075    ;     adrl R0, drawinfomsg
00001208: E2800A01    ; 
0000120C: EF000003    ;     swi 3
00001210:             ; 
00001210: EA00000C    ;     b setupstart
00001214:             ; 
00001214:             ; setuprandom
00001214: E28F0039    ;     adrl R0, askseed
00001218: E2800A01    ; 
0000121C: EF000003    ;     swi 3
00001220:             ; 
00001220: E3A00000    ;     mov R0, #0
00001224: E3A01004    ;     mov R1, #4
00001228: E3A02001    ;     mov R2, #1
0000122C: EBFFFF86    ;     bl getstring
00001230:             ; 
00001230: E3500000    ;     cmp R0, #0
00001234: 0A000047    ;     beq setupGridFail
00001238:             ; 
00001238: E5108000    ;     ldr R8, [R0]
0000123C:             ; 
0000123C: EB000283    ;     bl free
00001240:             ; 
00001240: EBFFFE74    ;     bl newline
00001244:             ; 
00001244: E3A09001    ;     mov R9, #1
00001248:             ; 
00001248:             ; setupstart
00001248:             ; ;;This is probably not a good way to do it as there is more branching in the middle of a loop t
                      ; hat is executed alot
00001248:             ; ;;I'm doing it this way `not because it is easy, but because I though it would be easy`
00001248:             ; ;;Reduces the need for writing another loop :)
00001248:             ; ;;R9 holds the mode (1 for random, 0 for draw)
00001248:             ; ;;R8 will hold the seed for random
00001248:             ; ;;for row from 0 to height - 1
00001248:             ; ;;  for col from 0 to width - 1
00001248:             ; ;;      if (random)
00001248:             ; ;;          grid[row][col] = ((seed rol 1) || row) && 1
00001248:             ; ;;      else
00001248:             ; ;;          grid[row][col] = input() == 1
00001248: E3A05000    ;     mov R5, #0 ;; row
0000124C:             ; setuprowloop
0000124C: E1550007    ;     cmp R5, R7
00001250: 0A00003E    ;     beq setuprowlend
00001254:             ; 
00001254: E3A0A000    ;     mov R10, #0 ;;col
00001258:             ; setupcolloop
00001258: E15A0006    ;     cmp R10, R6
0000125C: 0A000039    ;     beq setupcollend
00001260:             ; 
00001260: E3590001    ;     cmp R9, #1
00001264: 0A000000    ;     beq dorandom
00001268: EA000004    ;     b dodrawstart
0000126C:             ; 
0000126C:             ; ;;dorandom and dodraw will get their value for this position and then place it in R2
0000126C:             ; ;;R3 is free at this point
0000126C:             ; dorandom
0000126C:             ;     ;;seed in R8
0000126C: E1A080E8    ;     mov R8, R8, ror #1
00001270: E00A3005    ;     and R3, R10, R5
00001274: E0288003    ;     eor R8, R8, R3
00001278: E2082001    ;     and R2, R8, #1
0000127C: EA00002D    ;     b setupcollcont
00001280:             ; 
00001280:             ; dodrawstart
00001280: E023A695    ;     mla R3, R5, R6, R10 ;;R3 = row * width + col
00001284:             ; 
00001284: E3A00002    ;     mov R0, #2
00001288: E7C40003    ;     strb R0, [R4, R3]
0000128C:             ; 
0000128C: E3590000    ;     cmp R9, #0
00001290: 01A00004    ;     moveq R0, R4
00001294: 0B000035    ;     bleq drawgrid ;;print the new state of the grid if this is drawing mode
00001298:             ; 
00001298:             ; dodraw
00001298:             ;     ;;get input, validate 1 or 0
00001298:             ;     ;;if invalid print error loop back
00001298:             ;     ;;-_- I've just realised I want to print the grid each time as well R0-R3 are scratch
00001298: EF000001    ;     swi 1
0000129C:             ; 
0000129C: E3500031    ;     cmp R0, #'1'
000012A0: 0A000017    ;     beq dodrawsucc
000012A4: E3500030    ;     cmp R0, #'0'
000012A8: 0A000015    ;     beq dodrawsucc
000012AC:             ; 
000012AC: E3A0100A    ;     ldr R1, =enter
000012B0: E1500001    ;     cmp R0, R1;;next line
000012B4: 1A00000E    ;     bne dodrawfail
000012B8:             ; 
000012B8: E023A695    ;     mla R3, R5, R6, R10 ;;R3 = row * width + col
000012BC: E3A00000    ;     mov R0, #0
000012C0: E7C40003    ;     strb R0, [R4, R3]
000012C4:             ; 
000012C4: E2855001    ;     add R5, R5, #1
000012C8:             ; 
000012C8: E24F0F9E    ;     adrl R0, drawerase_b
000012CC: E2400A01    ; 
000012D0: E5500000    ;     ldrb R0, [R0]
000012D4: E3500000    ;     cmp R0, #0
000012D8: 0AFFFFDB    ;     beq setuprowloop
000012DC:             ; 
000012DC: E0000796    ;     mul R0, R6, R7      ;;I don't like having to do this every time :(
000012E0: E1A00080    ;     mov R0, R0, lsl #1
000012E4: E2800001    ;     add R0, R0, #1
000012E8: E0800007    ;     add R0, R0, R7
000012EC: EBFFFEE2    ;     bl erase
000012F0:             ; 
000012F0: EAFFFFD5    ;     b setuprowloop
000012F4:             ; 
000012F4:             ; dodrawfail
000012F4:             ; 
000012F4: E28F00DB    ;     adrl R0, drawfailmsg
000012F8: E2800C0F    ; 
000012FC: EF000003    ;     swi 3
00001300:             ; 
00001300: EAFFFFE4    ;     b dodraw
00001304:             ; 
00001304:             ; dodrawsucc
00001304: E92D0001    ;     push {R0}
00001308: E24F0FAE    ;     adrl R0, drawerase_b
0000130C: E2400A01    ; 
00001310: E5500000    ;     ldrb R0, [R0]
00001314: E3500000    ;     cmp R0, #0
00001318: 0A000004    ;     beq dodrawsuccskiperase
0000131C:             ; 
0000131C: E0000796    ;     mul R0, R6, R7      ;;I don't like having to do this every time :(
00001320: E1A00080    ;     mov R0, R0, lsl #1
00001324: E2800001    ;     add R0, R0, #1
00001328: E0800007    ;     add R0, R0, R7
0000132C: EBFFFED2    ;     bl erase
00001330:             ;     
00001330:             ; dodrawsuccskiperase
00001330: E8BD0001    ;     pop {R0}
00001334:             ; 
00001334: E2402030    ;     sub R2, R0, #48 ;;could be xor?
00001338:             ; 
00001338:             ; setupcollcont
00001338:             ;     ;;place the value in R2 into the grid[row][col]
00001338:             ;     ;;row * width + col
00001338: E023A695    ;     mla R3, R5, R6, R10 ;;R3 = row * width + col ;;I'm doing this twice \-(*v*)-/
0000133C: E7C42003    ;     strb R2, [R4, R3] ;;grid offset by R3
00001340:             ; 
00001340: E28AA001    ;     add R10, R10, #1
00001344: EAFFFFC3    ;     b setupcolloop
00001348:             ; setupcollend
00001348: E2855001    ;     add R5, R5, #1
0000134C: EAFFFFBE    ;     b setuprowloop
00001350:             ; setuprowlend
00001350:             ;     ;;grid has been setup
00001350: E3A00000    ;     mov R0, #0 ;;success
00001354: EA000003    ;     b setupGridEnd
00001358:             ; 
00001358:             ; setupGridFail
00001358: E28F001D    ;     adrl R0, malloc_panic
0000135C: E2800B06    ; 
00001360: EF000003    ;     swi 3
00001364:             ; 
00001364: E3A00001    ;     mov R0, #1 ;;fail!
00001368:             ; 
00001368:             ; setupGridEnd
00001368: E8BD47F0    ;     pop {R14, R4-R10}
0000136C: E1A0F00E    ;     mov R15, R14
00001370:             ; 
00001370:             ; 
00001370:             ; ;;[[TODO]] the heap may not be blank (when heapclean is removed) and so need to 0 the mem. Mayb
                      ; e add option to malloc or add calloc (not the same)
00001370:             ; drawgrid
00001370:             ; ;;INP in R0 is the grid address to draw
00001370:             ; 
00001370:             ; ;;for row from 0 to height - 1
00001370:             ; ;;  for col from 0 to width - 1
00001370:             ; ;;      print('X' if grid[row][col] else '_')
00001370:             ; ;;  print(newline)
00001370:             ; ;;print(newline)
00001370: E92D01F0    ;     push {R4-R8}
00001374:             ; 
00001374: E1A06000    ;     mov R6, R0
00001378:             ; 
00001378: E24F402D    ;     adrl R4, width
0000137C: E2444C13    ; 
00001380: E5544000    ;     ldrb R4, [R4]
00001384: E24F5FCE    ;     adrl R5, height
00001388: E2455A01    ; 
0000138C: E5555000    ;     ldrb R5, [R5]
00001390:             ; 
00001390: E3A02000    ;     mov R2, #0 ;;row
00001394:             ; drawgridrowloop
00001394: E1520005    ;     cmp R2, R5
00001398: 0A00001C    ;     beq drawgridrowlend
0000139C:             ; 
0000139C: E3A01000    ;     mov R1, #0 ;;col
000013A0:             ; drawgridcolloop
000013A0: E1510004    ;     cmp R1, R4
000013A4: 0A000014    ;     beq drawgridcollend
000013A8:             ; 
000013A8: E0231492    ;     mla R3, R2, R4, R1 ;;R3 = row * width + col
000013AC: E7D63003    ;     ldrb R3, [R6, R3]
000013B0:             ; 
000013B0: E3530002    ;     cmp R3, #2
000013B4: 0A000008    ;     beq drawgridprintcurrent
000013B8: E3530001    ;     cmp R3, #1
000013BC: 024F006B    ;     adrleq R0, alive_c
000013C0: 02400C13    ; 
000013C4: 05100000    ;     ldreq R0, [R0]
000013C8: 124F0076    ;     adrlne R0, dead_c
000013CC: 12400C13    ; 
000013D0: 15100000    ;     ldrne R0, [R0]
000013D4:             ; 
000013D4: EF000000    ;     swi 0
000013D8:             ; 
000013D8: EA000003    ;     b drawgridcollcont
000013DC:             ; 
000013DC:             ; drawgridprintcurrent
000013DC: E24F0089    ;     adrl R0, ptr_c
000013E0: E2400C13    ; 
000013E4: E5100000    ;     ldr R0, [R0]
000013E8: EF000000    ;     swi 0
000013EC:             ; 
000013EC:             ; drawgridcollcont
000013EC: E3A00020    ;     mov R0, #' '
000013F0: EF000000    ;     swi 0
000013F4:             ; 
000013F4: E2811001    ;     add R1, R1, #1
000013F8: EAFFFFE8    ;     b drawgridcolloop
000013FC:             ; 
000013FC:             ; drawgridcollend
000013FC: E3A01000    ;     mov R1, #0
00001400: E2822001    ;     add R2, R2, #1
00001404: E3A0000A    ;     mov R0, #10
00001408: EF000000    ;     swi 0
0000140C: EAFFFFE0    ;     b drawgridrowloop
00001410:             ; 
00001410:             ; drawgridrowlend
00001410: E3A0000A    ;     mov R0, #10
00001414: EF000000    ;     swi 0
00001418:             ; drawgridend
00001418: E8BD01F0    ;     pop {R4-R8}
0000141C: E1A0F00E    ;     mov R15, R14
00001420:             ; 
00001420:             ; 
00001420:             ; printoptions
00001420:             ; ;;INP --
00001420:             ; ;;OUT --
00001420:             ; ;;optionsp_1-5
00001420: E28F00B5    ;     adrl R0, optionsp_1
00001424: E2800B03    ; 
00001428: EF000003    ;     swi 3
0000142C:             ; 
0000142C: E24F00E1    ;     adrl R0, width
00001430: E2400C13    ; 
00001434: E5500000    ;     ldrb R0, [R0]
00001438: EF000004    ;     swi 4
0000143C:             ; 
0000143C: E28F00B1    ;     adrl R0, optionsp_2
00001440: E2800B03    ; 
00001444: EF000003    ;     swi 3
00001448:             ; 
00001448: E24F0FFF    ;     adrl R0, height
0000144C: E2400A01    ; 
00001450: E5500000    ;     ldrb R0, [R0]
00001454: EF000004    ;     swi 4
00001458:             ; 
00001458: E28F0098    ;     adrl R0, optionsp_3
0000145C: E2800B03    ; 
00001460: EF000003    ;     swi 3
00001464:             ; 
00001464: E24F001B    ;     adrl R0, slow_b
00001468: E2400B05    ; 
0000146C: E5500000    ;     ldrb R0, [R0]
00001470: E3500001    ;     cmp R0, #1
00001474: 128F00A8    ;     adrlne R0, off_msg
00001478: 12800B06    ; 
0000147C: 028F009D    ;     adrleq R0, on_msg
00001480: 02800B06    ; 
00001484: EF000003    ;     swi 3
00001488:             ; 
00001488: E28F0074    ;     adrl R0, optionsp_4
0000148C: E2800B03    ; 
00001490: EF000003    ;     swi 3
00001494:             ; 
00001494: E24F004C    ;     adrl R0, erase_b
00001498: E2400B05    ; 
0000149C: E5500000    ;     ldrb R0, [R0]
000014A0: E3500001    ;     cmp R0, #1
000014A4: 128F0078    ;     adrlne R0, off_msg
000014A8: 12800B06    ; 
000014AC: 028F006D    ;     adrleq R0, on_msg
000014B0: 02800B06    ; 
000014B4: EF000003    ;     swi 3
000014B8:             ; 
000014B8: E28F0EC5    ;     adrl R0, optionsp_5
000014BC: EF000003    ;     swi 3
000014C0:             ; 
000014C0: E24F0076    ;     adrl R0, step_b
000014C4: E2400B05    ; 
000014C8: E5500000    ;     ldrb R0, [R0]
000014CC: E3500001    ;     cmp R0, #1
000014D0: 128F004C    ;     adrlne R0, off_msg
000014D4: 12800B06    ; 
000014D8: 028F0041    ;     adrleq R0, on_msg
000014DC: 02800B06    ; 
000014E0: EF000003    ;     swi 3
000014E4:             ; 
000014E4: E3A0000A    ;     ldr R0, =nl
000014E8: EF000000    ;     swi 0
000014EC:             ; 
000014EC: E1A0F00E    ;     mov R15, R14
000014F0:             ; 
000014F0:             ; setupOptions
000014F0:             ; ;;INP in R0 is 1 if should ask for dims 0 for skip
000014F0: E92D4010    ;     push {R14, R4}
000014F4: E1A04000    ;     mov R4, R0
000014F8:             ; 
000014F8: E28F006B    ;     adrl R0, askdefaults ;;ask q
000014FC: E2800C09    ; 
00001500: EF000003    ;     swi 3
00001504: EF000001    ;     swi 1   ;;get character answer
00001508: EF000000    ;     swi 0
0000150C: E3500059    ;     cmp R0, #'Y'
00001510: E3A0000A    ;     ldr R0, =nl
00001514: EF000000    ;     swi 0
00001518:             ; 
00001518: 1A000022    ;     bne setupCustom
0000151C:             ; 
0000151C: E24F00C8    ;     adrl R0, erase_b_d
00001520: E2400B05    ; 
00001524: E5500000    ;     ldrb R0, [R0]
00001528: E24F1E4E    ;     adrl R1, erase_b
0000152C: E2411A01    ; 
00001530: E5410000    ;     strb R0, [R1]
00001534:             ; 
00001534: E24F00DF    ;     adrl R0, slow_b_d
00001538: E2400B05    ; 
0000153C: E5500000    ;     ldrb R0, [R0]
00001540: E24F10F7    ;     adrl R1, slow_b
00001544: E2411B05    ; 
00001548: E5410000    ;     strb R0, [R1]
0000154C:             ; 
0000154C: E24F00F6    ;     adrl R0, step_b_d
00001550: E2400B05    ; 
00001554: E5500000    ;     ldrb R0, [R0]
00001558: E24F100E    ;     adrl R1, step_b
0000155C: E2411C15    ; 
00001560: E5410000    ;     strb R0, [R1]
00001564:             ; 
00001564: E3540000    ;     cmp R4, #0
00001568: 0A00000B    ;     beq setupOptionsDEnd
0000156C:             ; 
0000156C: E24F0015    ;     adrl R0, width_d
00001570: E2400C15    ; 
00001574: E5500000    ;     ldrb R0, [R0]
00001578: E24F102D    ;     adrl R1, width
0000157C: E2411C15    ; 
00001580: E5410000    ;     strb R0, [R1]
00001584: E24F0F4B    ;     adrl R0, height_d
00001588: E2400B05    ; 
0000158C: E5500000    ;     ldrb R0, [R0]
00001590: E24F1F51    ;     adrl R1, height
00001594: E2411B05    ; 
00001598: E5410000    ;     strb R0, [R1]
0000159C:             ; 
0000159C:             ; setupOptionsDEnd
0000159C: EBFFFF9F    ;     bl printoptions
000015A0:             ; 
000015A0: E8BD4010    ;     pop {R14, R4}
000015A4: E1A0F00E    ;     mov R15, R14 ;;RET
000015A8:             ; 
000015A8:             ; setupCustom
000015A8:             ; ;;ask for erase, slow, step, and conditionally dims
000015A8:             ; 
000015A8:             ; ;;ask step
000015A8:             ; ;;ask erase
000015A8:             ; ;;if (!step)
000015A8:             ; ;;  if erase
000015A8:             ; ;;      print(recommend slow)
000015A8:             ; ;;  ask slow
000015A8:             ; 
000015A8: E3A01001    ;     mov R1, #1
000015AC:             ; 
000015AC: E28F001A    ;     adrl R0, askstep
000015B0: E2800C09    ; 
000015B4: EF000003    ;     swi 3
000015B8: EF000001    ;     swi 1
000015BC: EF000000    ;     swi 0 
000015C0: E3500059    ;     cmp R0, #'Y' 
000015C4: E3A0000A    ;     ldr R0, =nl
000015C8: EF000000    ;     swi 0
000015CC: 13A01000    ;     movne R1, #0
000015D0: E24F0086    ;     adrl R0, step_b
000015D4: E2400C15    ; 
000015D8: E5401000    ;     strb R1, [R0]
000015DC:             ; 
000015DC: E3A01001    ;     mov R1, #1
000015E0:             ; 
000015E0: E28F00B5    ;     adrl R0, askerase
000015E4: E2800B02    ; 
000015E8: EF000003    ;     swi 3
000015EC: EF000001    ;     swi 1
000015F0: EF000000    ;     swi 0
000015F4: E3500059    ;     cmp R0, #'Y'
000015F8: E3A0000A    ;     ldr R0, =nl
000015FC: EF000000    ;     swi 0
00001600: 13A01000    ;     movne R1, #0
00001604: E24F0F6F    ;     adrl R0, erase_b
00001608: E2400B05    ; 
0000160C: E5401000    ;     strb R1, [R0]
00001610:             ; 
00001610: E24F00C6    ;     adrl R0, step_b
00001614: E2400C15    ; 
00001618: E5500000    ;     ldrb R0, [R0]
0000161C: E3500001    ;     cmp R0, #1
00001620: 0A000011    ;     beq setupCustomskipslow
00001624:             ; 
00001624: E3510001    ;     cmp R1, #1 ;;if erase is on
00001628: E28F0051    ;     adrl R0, warneraseslow
0000162C: E2800C09    ; 
00001630: 0F000003    ;     swieq 3
00001634:             ; 
00001634: E3A01001    ;     mov R1, #1
00001638:             ;  
00001638: E28F0076    ;     adrl R0, askslow
0000163C: E2800B02    ; 
00001640: EF000003    ;     swi 3
00001644: EF000001    ;     swi 1
00001648: EF000000    ;     swi 0 
0000164C: E3500059    ;     cmp R0, #'Y' 
00001650: E3A0000A    ;     ldr R0, =nl
00001654: EF000000    ;     swi 0
00001658: 13A01000    ;     movne R1, #0
0000165C: E24F0013    ;     adrl R0, slow_b
00001660: E2400C16    ; 
00001664: E5401000    ;     strb R1, [R0] ;;[[maybe]] changed but not checked, go here if error
00001668:             ; 
00001668: EA000016    ;     b setupCustomDimsCheck
0000166C:             ; 
0000166C:             ; setupCustomskipslow
0000166C: E3A00000    ;     mov R0, #0
00001670: E24F1027    ;     adrl R1, slow_b
00001674: E2411C16    ; 
00001678: E5410000    ;     strb R0, [R1]
0000167C:             ; 
0000167C: EA000011    ;     b setupCustomDimsCheck
00001680:             ; 
00001680:             ; printrange
00001680:             ; ;;INP --
00001680:             ; ;;OUT --
00001680: E28F00DA    ;     adrl R0, bracket_open
00001684: E2800C11    ; 
00001688: EF000003    ;     swi 3
0000168C:             ; 
0000168C: E24F003F    ;     adrl R0, range_min
00001690: E2400C16    ; 
00001694: E5500000    ;     ldrb R0, [R0]
00001698: EF000004    ;     swi 4
0000169C:             ; 
0000169C: E28F0032    ;     adrl R0, dash
000016A0: E2800C09    ; 
000016A4: EF000003    ;     swi 3
000016A8:             ; 
000016A8: E24F005A    ;     adrl R0, range_max
000016AC: E2400C16    ; 
000016B0: E5500000    ;     ldrb R0, [R0]
000016B4: EF000004    ;     swi 4
000016B8:             ; 
000016B8: E28F0F46    ;     adrl R0, b_close_colon
000016BC: E2800B02    ; 
000016C0: EF000003    ;     swi 3
000016C4:             ; 
000016C4: E1A0F00E    ;     mov R15, R14
000016C8:             ; 
000016C8:             ; setupCustomDimsCheck
000016C8: E3540000    ;     cmp R4, #0
000016CC: 0A00004B    ;     beq customend
000016D0:             ; 
000016D0: E28F00E7    ;     adrl R0, askwid
000016D4: E2800B02    ; 
000016D8: EF000003    ;     swi 3
000016DC:             ; 
000016DC: EBFFFFE7    ;     bl printrange
000016E0:             ; 
000016E0:             ; getwid
000016E0: E3A0000A    ;     ldr R0, =enter
000016E4: E3A01003    ;     mov R1, #3
000016E8: E3A02001    ;     mov R2, #1
000016EC: EBFFFE56    ;     bl getstring
000016F0:             ; 
000016F0: E3500000    ;     cmp R0, #0
000016F4: 0A00003D    ;     beq customfail
000016F8:             ; 
000016F8: E1A04000    ;     mov R4, R0
000016FC:             ; 
000016FC: EBFFFE08    ;     bl strtoi
00001700: E1A05000    ;     mov R5, R0
00001704:             ;     
00001704: E1A00004    ;     mov R0, R4
00001708: EB000150    ;     bl free ;;free the collected string
0000170C:             ; 
0000170C: E1A01005    ;     mov R1, R5
00001710:             ; 
00001710: EBFFFD40    ;     bl newline
00001714:             ; 
00001714: E24F40C7    ;     adrl R4, range_min
00001718: E2444C16    ; 
0000171C: E5544000    ;     ldrb R4, [R4]
00001720: E24F50D2    ;     adrl R5, range_max
00001724: E2455C16    ; 
00001728: E5555000    ;     ldrb R5, [R5]
0000172C:             ; 
0000172C: E1510005    ;     cmp R1, R5
00001730: CA000005    ;     bgt getwidFail
00001734: E1510004    ;     cmp R1, R4
00001738: BA000003    ;     blt getwidFail
0000173C:             ; 
0000173C: E24F00F1    ;     adrl R0, width
00001740: E2400C16    ; 
00001744: E5401000    ;     strb R1, [R0]
00001748:             ; 
00001748: EA000004    ;     b getheisetup
0000174C:             ; 
0000174C:             ; getwidFail
0000174C: E28F009F    ;     adrl R0, getwidfailmsg
00001750: E2800B02    ; 
00001754: EF000003    ;     swi 3
00001758:             ; 
00001758: EBFFFFC8    ;     bl printrange
0000175C:             ; 
0000175C: EAFFFFDF    ;     b getwid
00001760:             ; 
00001760:             ; getheisetup
00001760: E28F0074    ;     adrl R0, askhei
00001764: E2800B02    ; 
00001768: EF000003    ;     swi 3
0000176C:             ; 
0000176C: EBFFFFC3    ;     bl printrange
00001770:             ; 
00001770:             ; gethei
00001770: E3A0000A    ;     ldr R0, =enter
00001774: E3A01003    ;     mov R1, #3
00001778: E3A02001    ;     mov R2, #1
0000177C: EBFFFE32    ;     bl getstring
00001780:             ; 
00001780: E3500000    ;     cmp R0, #0
00001784: 0A000019    ;     beq customfail
00001788:             ; 
00001788: E1A04000    ;     mov R4, R0
0000178C:             ; 
0000178C: EBFFFDE4    ;     bl strtoi
00001790: E1A05000    ;     mov R5, R0
00001794:             ; 
00001794: E1A00004    ;     mov R0, R4
00001798: EB00012C    ;     bl free
0000179C:             ; 
0000179C: E1A01005    ;     mov R1, R5
000017A0:             ; 
000017A0: EBFFFD1C    ;     bl newline
000017A4:             ; 
000017A4: E24F4057    ;     adrl R4, range_min
000017A8: E2444C17    ; 
000017AC: E5544000    ;     ldrb R4, [R4]
000017B0: E24F5062    ;     adrl R5, range_max
000017B4: E2455C17    ; 
000017B8: E5555000    ;     ldrb R5, [R5]
000017BC:             ; 
000017BC: E1510005    ;     cmp R1, R5
000017C0: CA000004    ;     bgt getheiFail
000017C4: E1510004    ;     cmp R1, R4
000017C8: BA000002    ;     blt getheiFail
000017CC:             ; 
000017CC: E24F2D5E    ;     adrl R2, height
000017D0: E5421000    ;     strb R1, [R2]
000017D4:             ; 
000017D4: EA000009    ;     b customend
000017D8:             ; 
000017D8:             ; getheiFail
000017D8: E28F003F    ;     adrl R0, getheifailmsg
000017DC: E2800B02    ; 
000017E0: EF000003    ;     swi 3
000017E4:             ; 
000017E4: EBFFFFA5    ;     bl printrange
000017E8:             ; 
000017E8: EAFFFFE0    ;     b gethei
000017EC:             ; 
000017EC: EA000003    ;     b customend
000017F0:             ; 
000017F0:             ; customfail
000017F0: E28F0085    ;     adrl R0, malloc_panic
000017F4: E2800C13    ; 
000017F8: EF000003    ;     swi 3
000017FC:             ; 
000017FC: EA000000    ;     b customret
00001800:             ; 
00001800:             ; customend
00001800: EBFFFF06    ;     bl printoptions
00001804:             ; 
00001804:             ; customret
00001804: E8BD4010    ;     pop {R14, R4}
00001808: E1A0F00E    ;     mov R15, R14 ;;RET
0000180C:             ; 
0000180C:             ; 
0000180C:             ; updategrid
0000180C:             ; ;;INP in R0 is the active grid
0000180C:             ; ;;INP in R1 is the passive grid
0000180C:             ; ;;passive grid is the one being updated based on the value in the activeGrid
0000180C:             ; ;;RET --
0000180C:             ; ;;for row from 0 to height - 1
0000180C:             ; ;;  for col from 0 to width - 1
0000180C:             ; ;;      int n = countNeighbours(activeGrid, row, col)
0000180C:             ; ;;      int s = activeGrid[row][col]
0000180C:             ; ;;      
0000180C:             ; ;;      if (s == alive)
0000180C:             ; ;;          passiveGrid[row][col] = n == 3 or n == 2
0000180C:             ; ;;      else
0000180C:             ; ;;          passiveGrid[row][col] = n == 3
0000180C:             ; 
0000180C:             ; ;;  R4 holds the row
0000180C:             ; ;;  R5 holds the col
0000180C:             ; ;;  R6 holds the width
0000180C:             ; ;;  R7 holds the height
0000180C:             ; ;;  R8 holds the active grid
0000180C:             ; ;;  R9 holds the passive grid
0000180C:             ; 
0000180C: E92D47F0    ;     push {R14, R4-R10}
00001810:             ; 
00001810: E3500000    ;     cmp R0, #0
00001814: 0A000027    ;     beq updategridfail
00001818: E3510000    ;     cmp R1, #0
0000181C: 0A000025    ;     beq updategridfail
00001820:             ; 
00001820: E24F60D5    ;     adrl R6, width
00001824: E2466C17    ; 
00001828: E5566000    ;     ldrb R6, [R6]
0000182C: E24F7E7E    ;     adrl R7, height
00001830: E2477A01    ; 
00001834: E5577000    ;     ldrb R7, [R7]
00001838:             ; 
00001838: E1A08000    ;     mov R8, R0
0000183C: E1A09001    ;     mov R9, R1
00001840:             ; 
00001840: E3A04000    ;     mov R4, #0 ;;row
00001844:             ; updategridrowloop
00001844: E1540007    ;     cmp R4, R7
00001848: 0A00001D    ;     beq updategridrowlend
0000184C:             ; 
0000184C: E3A05000    ;     mov R5, #0 ;;col
00001850:             ; updategridcolloop
00001850: E1550006    ;     cmp R5, R6
00001854: 0A000014    ;     beq updategridccollend
00001858:             ; 
00001858: E1A00008    ;     mov R0, R8
0000185C: E1A01004    ;     mov R1, R4
00001860: E1A02005    ;     mov R2, R5
00001864: EB000018    ;     bl countneighbours
00001868:             ; 
00001868: E0215694    ;     mla R1, R4, R6, R5 ;;R1 = row * width + col
0000186C: E7D82001    ;     ldrb R2, [R8, R1] ;;grid[R1]
00001870:             ;     ;;R0 holds the n count
00001870: E3520000    ;     cmp R2, #0
00001874: 0A000006    ;     beq updatedead
00001878:             ; 
00001878:             ; updatealive
00001878: E3A03000    ;     mov R3, #0
0000187C: E3500003    ;     cmp R0, #3
00001880: 03A03001    ;     moveq R3, #1
00001884: E3500002    ;     cmp R0, #2
00001888: 03A03001    ;     moveq R3, #1
0000188C: E7C93001    ;     strb R3, [R9, R1]
00001890: EA000003    ;     b updatelcont
00001894:             ; 
00001894:             ; updatedead
00001894: E3A03001    ;     mov R3, #1
00001898: E3500003    ;     cmp R0, #3
0000189C: 13A03000    ;     movne R3, #0
000018A0: E7C93001    ;     strb R3, [R9, R1]
000018A4:             ; 
000018A4:             ; updatelcont
000018A4: E2855001    ;     add R5, R5, #1
000018A8: EAFFFFE8    ;     b updategridcolloop
000018AC:             ; 
000018AC:             ; updategridccollend
000018AC: E3A05000    ;     mov R5, #0
000018B0: E2844001    ;     add R4, R4, #1
000018B4: EAFFFFE2    ;     b updategridrowloop
000018B8:             ; 
000018B8:             ; updategridfail
000018B8: E28F0033    ;     adrl R0, updatergrid_m_f
000018BC: E2800B05    ; 
000018C0: EF000003    ;     swi 3
000018C4:             ; 
000018C4:             ; updategridrowlend
000018C4:             ; updategridend
000018C4: E8BD47F0    ;     pop {R14, R4-R10}
000018C8: E1A0F00E    ;     mov R15, R14
000018CC:             ; 
000018CC:             ; 
000018CC:             ; countneighbours
000018CC:             ; ;;INP in R0 is the activeGrid
000018CC:             ; ;;INP in R1 is the row
000018CC:             ; ;;INP in R2 is the col
000018CC:             ; ;;OUT in R0 is the number of neighbours
000018CC:             ; 
000018CC:             ; ;;offsets = [[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]]
000018CC:             ; ;;tot = 0
000018CC:             ; ;;for offset in offsets
000018CC:             ; ;;  if (isinrange(row + offset[0], col + offset[1]))
000018CC:             ; ;;      tot += grid[row + offset[0]][col + offset[1]]
000018CC:             ; ;;return tot
000018CC: E92D4FF0    ;     push {R14, R4-R11} ;;I used the fp before I knew it wasn't a general purpose one, its fine 
                      ; in this context anyway
000018D0:             ; 
000018D0: E24F4E8D    ;     adrl R4, offsets ;;holds the offset
000018D4: E2444A01    ; 
000018D8:             ; 
000018D8: E1A07000    ;     mov R7, R0
000018DC: E1A08001    ;     mov R8, R1
000018E0: E1A09002    ;     mov R9, R2
000018E4: E3A0A000    ;     mov R10, #0 ;;R10 holds the total
000018E8: E24FB09D    ;     adrl R11, width
000018EC: E24BBB06    ; 
000018F0: E55BB000    ;     ldrb R11, [R11];;R11 holds the width of the grid
000018F4:             ; 
000018F4: E3A03000    ;     mov R3, #0
000018F8:             ; 
000018F8:             ; countneighboursloop
000018F8: E3530008    ;     cmp R3, #8 ;;change this ccheck to be for R4
000018FC: 0A00000F    ;     beq countneighbourslend
00001900:             ; 
00001900: E4945004    ;     ldr R5, [R4], #4
00001904: E4946004    ;     ldr R6, [R4], #4
00001908:             ; 
00001908: E0880005    ;     add R0, R8, R5
0000190C: E0891006    ;     add R1, R9, R6
00001910:             ; 
00001910: E2833001    ;     add R3, R3, #1
00001914:             ; 
00001914: E92D0008    ;     push {R3} ;;I should probably be using a local var on the stack, but I don't yet know how t
                      ; o setup a stack frame properly
00001918: EB00000B    ;     bl isinrange
0000191C: E8BD0008    ;     pop {R3}
00001920:             ; 
00001920: E3500000    ;     cmp R0, #0
00001924: 0A000004    ;     beq countneighboursskipadd
00001928:             ; 
00001928: E0880005    ;     add R0, R8, R5 ;;new row
0000192C: E0891006    ;     add R1, R9, R6 ;;new col ;;can assume that R0, R1 haven't changed as isinrange doesn't edit
                      ;  them, but I'm going to for now
00001930:             ; 
00001930: E0201B90    ;     mla R0, R0, R11, R1 ;;find offset
00001934: E7D70000    ;     ldrb R0, [R7, R0]
00001938: E08AA000    ;     add R10, R10, R0 ;;tot += grid[newrow][newcol]
0000193C:             ; 
0000193C:             ; countneighboursskipadd
0000193C: EAFFFFED    ;     b countneighboursloop
00001940:             ; 
00001940:             ; countneighbourslend
00001940:             ; countneighboursend
00001940: E1A0000A    ;     mov R0, R10
00001944: E8BD4FF0    ;     pop {R14, R4-R11}
00001948: E1A0F00E    ;     mov R15, R14
0000194C:             ; 
0000194C:             ; 
0000194C:             ; isinrange
0000194C:             ; ;;INP in R0 is the row
0000194C:             ; ;;INP in R1 is the col
0000194C:             ; ;;Uses defined width and height
0000194C:             ; ;;RET in R0 is 1 if is in range else 0
0000194C: E3A02001    ;     mov R2, #1 ;;is valid unless...
00001950:             ; 
00001950: E3500000    ;     cmp R0, #0
00001954: BA00000D    ;     blt isinrangefail
00001958:             ; 
00001958: E3510000    ;     cmp R1, #0
0000195C: BA00000B    ;     blt isinrangefail
00001960:             ; 
00001960: E24F3015    ;     adrl R3, width
00001964: E2433C19    ; 
00001968: E5533000    ;     ldrb R3, [R3]
0000196C: E1510003    ;     cmp R1, R3
00001970: AA000006    ;     bge isinrangefail
00001974:             ; 
00001974: E24F3F4A    ;     adrl R3, height
00001978: E2433B06    ; 
0000197C: E5533000    ;     ldrb R3, [R3]
00001980: E1500003    ;     cmp R0, R3
00001984: AA000001    ;     bge isinrangefail
00001988:             ; 
00001988: E3A00001    ;     mov R0, #1
0000198C: EA000000    ;     b isinrangeend
00001990:             ; 
00001990:             ; isinrangefail
00001990: E3A00000    ;     mov R0, #0
00001994:             ; 
00001994:             ; isinrangeend
00001994: E1A0F00E    ;     mov R15, R14
00001998:             ; 
00001998:             ; 
00001998:             ; ;; The heap will be a linked list of free blocks - unlike the Comodo version which stores both 
                      ; free & taken blocks 
00001998:             ; ;; This is an idea I'm stealing from the C programming book
00001998:             ; ;; Crate structure
00001998:             ; ;;  |-ptr to next crate (1 word)
00001998:             ; ;;  |-ptr to prev crate (1 word)
00001998:             ; ;;  `-Size (bytes)      (1 word)
00001998:             ; ;; 
00001998:             ; 
00001998:             ; ;;  Traversal of the heap
00001998:             ; ;;  Unlink in my Comodo implimentation the heap is not a linked list of all Crates (free or not
                      ; )
00001998:             ; ;;  That made traversing the heap for debugging purposes very easy, in this case taken crates d
                      ; o not point to the next
00001998:             ; ;;  Instead could start at head and then just go to addr + sizeof(Crate) + size. This should ta
                      ; ke us to the next crate, free or not
00001998:             ; ;;  
00001998:             ; setupHeap
00001998:             ; ;;NO INP
00001998:             ; ;;NO OUT
00001998:             ;     ;;we have the heapstart
00001998:             ;     ;;the end of the heap will be 0x100000 (it will overlap with the stack :) )
00001998: E24F0F67    ;     adrl R0, heaphead
0000199C: E2400B06    ; 
000019A0: E5100000    ;     ldr R0, [R0] ;;stores the mem addr of the start of the heap
000019A4: E3A01601    ;     ldr R1, =max_addr ;;stores the end of the heap
000019A8: E3A02801    ;     ldr R2, =stack_size
000019AC: E0411002    ;     sub R1, R1, R2
000019B0:             ; 
000019B0: E0411000    ;     sub R1, R1, R0  ;;HEAPEND - HEAPSTART = TOTAL STORAGE (bytes)
000019B4: E241100C    ;     sub R1, R1, #12 ;;SIZE -= SIZEOF(CRATE) (12 bytes)
000019B8: E5801008    ;     str R1, [R0, #8] ;;set the size of the crate
000019BC: E3A01000    ;     mov R1, #0
000019C0: E5801004    ;     str R1, [R0, #4] ;;set the prev ptr
000019C4: E5801000    ;     str R1, [R0, #0] ;;set the next ptr
000019C8:             ; 
000019C8: E1A0F00E    ;     mov R15, R14
000019CC:             ; 
000019CC:             ; ;; The heap is a linked list of free Crates and so find the header and then go though until one
                      ;  satifies the size requirement
000019CC:             ; ;;  end if next is 0
000019CC:             ; ;;  once found either take over the crate or split it into two new crates
000019CC:             ; ;;  align the bytes amount to 8 byte boundry
000019CC:             ; malloc
000019CC:             ; ;;INP into R0 bytes to allocate
000019CC:             ; ;;OUT into R0 the ptr to the memory or 0 for no memory allocated
000019CC:             ;     ;;step 1 align the bytes
000019CC:             ;     ;;1001010 & 0111 = 0000010 ;2
000019CC:             ;     ;;if 0 goto alignend
000019CC:             ;     ;;1001010 + (8 - 2)
000019CC:             ; 
000019CC:             ; ;;[[NEW]] In order to reduce heap fragmentation I'm going to find the 'best' free crate
000019CC:             ; ;;bestCrateAddr = 0
000019CC:             ; ;;bestCrateSize = INT_MAX
000019CC:             ; ;;currentCrate = heapstart
000019CC:             ; ;;While (currentCrate != 0)
000019CC:             ; ;;  if (currentCrate.size >= requestedSize && bestCrateSize > currentCrate.size)
000019CC:             ; ;;      bestCrateSize = currentCrate.size
000019CC:             ; ;;      bestCrateAddr = currentCrate.addr
000019CC:             ; ;;  currentCrate = currentCrate.next
000019CC:             ; 
000019CC: E92D01F0    ;     push {R4-R8}
000019D0:             ; 
000019D0: E2001007    ;     and R1, R0, #0b0111
000019D4: E3510000    ;     cmp R1, #0
000019D8: 0A000002    ;     beq mallignend
000019DC: E3A03008    ;     mov R3, #0b1000
000019E0: E0432001    ;     sub R2, R3, R1
000019E4: E0800002    ;     add R0, R0, R2
000019E8:             ; 
000019E8:             ; mallignend
000019E8: E24F1F7B    ;     adrl R1, heaphead
000019EC: E2411B06    ; 
000019F0: E5111000    ;     ldr R1, [R1] ;;stores a ptr to the first block
000019F4:             ; 
000019F4: E3A05000    ;     mov R5, #0 ;;bestCrateAddr
000019F8: E3E06000    ;     mov R6, #-1 ;;bestCrateSize
000019FC:             ;     
000019FC:             ; checkcrate
000019FC: E5912008    ;     ldr R2, [R1, #8] ;;Size of the crate
00001A00: E1520000    ;     cmp R2, R0 ;;bytes in crate - bytes needed
00001A04:             ; 
00001A04: 3A000003    ;     blo nextcrate
00001A08:             ; 
00001A08: E1560002    ;     cmp R6, R2 ;;bestCrateSize - currentCrate.size
00001A0C: 3A000001    ;     blo nextcrate
00001A10:             ; 
00001A10: E1A06002    ;     mov R6, R2
00001A14: E1A05001    ;     mov R5, R1
00001A18:             ; 
00001A18:             ; nextcrate
00001A18: E5912000    ;     ldr R2, [R1, #0] ;;get the next ptr
00001A1C: E3520000    ;     cmp R2, #0
00001A20: 0A000001    ;     beq cratelend
00001A24: E1A01002    ;     mov R1, R2 ;;swap the current crate with the next crate
00001A28: EAFFFFF3    ;     b checkcrate
00001A2C:             ; 
00001A2C:             ; cratelend
00001A2C: E3550000    ;     cmp R5, #0
00001A30: 0A000001    ;     beq nocrates
00001A34:             ; 
00001A34: E1A01005    ;     mov R1, R5 ;;for legacy reasons it should be in R1 
00001A38:             ; 
00001A38: EA000001    ;     b foundcrate
00001A3C:             ; 
00001A3C:             ; nocrates
00001A3C: E3A00000    ;     mov R0, #0
00001A40: EA000019    ;     b mallocEnd
00001A44:             ; 
00001A44:             ; foundcrate
00001A44:             ;     ;;Once a crate that we can use has been found we need to either split the crate or use the 
                      ; crate
00001A44:             ;         ;;We should use the whole crate only when its size < bytesneeded + CrateHeader + 8
00001A44:             ;     ;;This would give the edge case crate 8 bytes [[flag]]
00001A44:             ;     
00001A44:             ;     ;;R1 holds the found crate ptr
00001A44:             ;     ;;R0 is the bytes requested and aligned
00001A44: E2802014    ;     add R2, R0, #20 ;;A crate header is 12 bytes + the extra 8 bytes minimum
00001A48: E5913008    ;     ldr R3, [R1, #8]
00001A4C: E1530002    ;     cmp R3, R2
00001A50: BA00000C    ;     blt usecrate
00001A54:             ; splitcrate
00001A54:             ;     ;;In this case we have a large crate that should be split up.
00001A54:             ;     ;;ATM the crate will just be split up to where the requested memory is at the end of the fr
                      ; ee Crate.
00001A54:             ; 
00001A54: E5913008    ;     ldr R3, [R1, #8] ;;The size of the toSplit Crate
00001A58: E0433000    ;     sub R3, R3, R0 ;; size - bytesRequested
00001A5C: E243300C    ;     sub R3, R3, #12 ;; size - bytesRequested - sizeof(Crate)
00001A60: E5813008    ;     str R3, [R1, #8] ;;toSplit->size = newSize
00001A64:             ; 
00001A64: E0833001    ;     add R3, R3, R1 ;; newSize + toSplit.addr
00001A68: E283400C    ;     add R4, R3, #12 ;; newSize + toSplit.addr + sizeof(Crate) = position of new Crate
00001A6C:             ; 
00001A6C:             ;     ;;Setup the header for the newCrate
00001A6C: E3A02000    ;     mov R2, #0
00001A70: E5842000    ;     str R2, [R4, #0] ;;next = 0
00001A74: E5842004    ;     str R2, [R4, #4] ;;prev = 0
00001A78: E5840008    ;     str R0, [R4, #8] ;;size = requested and aligned
00001A7C:             ; 
00001A7C:             ;     ;;MAYBE: can the crates that are taken have a smaller header than those that are free. Take
                      ; n crates need not store the next, prev free nodes
00001A7C:             ;     ;;This may complicate things as size would need to be moved around and the size from taken 
                      ; to free would be different. 
00001A7C:             ;     ;;This would have been easier if the size of the Crate was stored at the start but it's not
                      ; , I'm probably not going to add this its not worth it.
00001A7C:             ; 
00001A7C: E284400C    ;     add R4, R4, #12
00001A80:             ; 
00001A80: E1A00004    ;     mov R0, R4
00001A84:             ; 
00001A84: EA000008    ;     b mallocEnd
00001A88:             ; 
00001A88:             ; usecrate
00001A88:             ;     ;; Simplest option as we can just remove it from the list
00001A88:             ;     ;; c1 <-> c2 <-> c3 ==> c1 <-> c3
00001A88: E5912000    ;     ldr R2, [R1, #0] ;;next ptr
00001A8C: E5913004    ;     ldr R3, [R1, #4] ;;prev ptr
00001A90: E5823004    ;     str R3, [R2, #4] ;;Store c1 into c3's previous
00001A94: E5832000    ;     str R2, [R3, #0] ;;Store c3 into c1's next
00001A98:             ; 
00001A98: E3A00000    ;     mov R0, #0
00001A9C: E5810000    ;     str R0, [R1, #0] ;;clear next
00001AA0: E5810004    ;     str R0, [R1, #4] ;;clear prev (for debugging uses)
00001AA4:             ; 
00001AA4: E1A00001    ;     mov R0, R1 ;;move the found crate's address into the return register
00001AA8: E280000C    ;     add R0, R0, #12
00001AAC:             ; 
00001AAC:             ; mallocEnd
00001AAC: E8BD01F0    ;     pop {R4-R8}
00001AB0: E1A0F00E    ;     mov R15, R14
00001AB4:             ; 
00001AB4:             ; 
00001AB4:             ; printHeap
00001AB4:             ; ;;This is a debugging function that will print the free and taken list
00001AB4:             ; ;;,-----------------------------------------------------------------,
00001AB4:             ; ;;|   large free block  |tkn1   |tkn2       | freed1    | tkn3      |
00001AB4:             ; ;;|                     |       |           |           |           |
00001AB4:             ; ;;|                     |       |           |           |           |
00001AB4:             ; ;;`-----------------------------------------------------------------'
00001AB4:             ; 
00001AB4:             ; ;;  PrintFree() - follow the free list ptrs print addr + size
00001AB4:             ; ;;  PrintAll()  - start at head and go addr + size + 12 to get next, continue to end
00001AB4: E92D47F0    ;     push {R14, R4-R10}
00001AB8:             ; 
00001AB8: EB000025    ;     bl printFree
00001ABC:             ; 
00001ABC: EB000001    ;     bl printAll
00001AC0:             ; 
00001AC0:             ; printHeapend
00001AC0: E8BD47F0    ;     pop {R14, R4-R10}
00001AC4: E1A0F00E    ;     mov R15, R14
00001AC8:             ; 
00001AC8:             ; printAll
00001AC8: E92D41F0    ;     push {R14, R4-R8}
00001ACC:             ; 
00001ACC: E28F00DE    ;     adrl R0, printAll_m
00001AD0: E2800C0F    ; 
00001AD4: EF000003    ;     swi 3
00001AD8:             ;     
00001AD8: E28F0F93    ;     adrl R0, heapstart
00001ADC: E2800A01    ; 
00001AE0: E1A04000    ;     mov R4, R0
00001AE4:             ; 
00001AE4: E1A05000    ;     mov R5, R0 ;;stores the next expected free node
00001AE8:             ; 
00001AE8:             ; printAllLoop
00001AE8: E5941000    ;     ldr R1, [R4, #0] ;;next ptr
00001AEC: E5942004    ;     ldr R2, [R4, #4] ;;prev ptr
00001AF0: E5943008    ;     ldr R3, [R4, #8] ;;size
00001AF4:             ; 
00001AF4: E1540001    ;     cmp R4, R1
00001AF8: 1A000003    ;     bne printAllLoopSkipWarning
00001AFC:             ; 
00001AFC: E28F00FE    ;     adrl R0, printAll_m_e
00001B00: E2800C0F    ; 
00001B04: EF000003    ;     swi 3
00001B08:             ; 
00001B08: E3A05000    ;     mov R5, #0
00001B0C:             ; 
00001B0C:             ; printAllLoopSkipWarning
00001B0C:             ; 
00001B0C:             ;     ;;check if this is a free node
00001B0C: E1550004    ;     cmp R5, R4
00001B10:             ; 
00001B10: 028F00BD    ;     adrleq R0, printAll_m_f
00001B14: 02800C0F    ; 
00001B18: 128F00CB    ;     adrlne R0, printAll_m_t
00001B1C: 12800C0F    ; 
00001B20: EF000003    ;     swi 3
00001B24:             ; 
00001B24: 1A000000    ;     bne printAllLoopCont
00001B28:             ; 
00001B28: E1A05001    ;     mov R5, R1
00001B2C:             ; 
00001B2C:             ; printAllLoopCont
00001B2C: E1A00004    ;     mov R0, R4
00001B30: EB000021    ;     bl printblock
00001B34:             ; 
00001B34:             ;     ;;calculate the next block
00001B34:             ;     ;;addr + 12 + size
00001B34:             ; 
00001B34: E284000C    ;     add R0, R4, #12
00001B38: E0800003    ;     add R0, R0, R3
00001B3C:             ; 
00001B3C: E1A04000    ;     mov R4, R0
00001B40:             ; 
00001B40: E354080F    ;     cmp R4, #0xF0000
00001B44: AA000000    ;     bge printAllLend
00001B48:             ;     
00001B48: EAFFFFE6    ;     b printAllLoop
00001B4C:             ; 
00001B4C:             ; printAllLend
00001B4C:             ; printAllEnd
00001B4C: E8BD41F0    ;     pop {R14, R4-R8}
00001B50: E1A0F00E    ;     mov R15, R14
00001B54:             ; 
00001B54:             ; printFree
00001B54: E92D41F0    ;     push {R14, R4-R8}
00001B58:             ; 
00001B58: E28F0FB1    ;     adrl R0, printFree_m
00001B5C: E2800B03    ; 
00001B60: EF000003    ;     swi 3
00001B64:             ; 
00001B64: E28F0D47    ;     adrl R0, heapstart
00001B68: E1A04000    ;     mov R4, R0
00001B6C:             ; 
00001B6C:             ; printFreeloop
00001B6C: E5941000    ;     ldr R1, [R4, #0] ;;next ptr
00001B70: E5942004    ;     ldr R2, [R4, #4] ;;prev ptr
00001B74: E5943008    ;     ldr R3, [R4, #8] ;;size
00001B78:             ; 
00001B78: E28F00B7    ;     adrl R0, printfree_f_m
00001B7C: E2800C0E    ; 
00001B80: EF000003    ;     swi 3
00001B84:             ; 
00001B84: E1A00004    ;     mov R0, R4
00001B88: EB00000B    ;     bl printblock
00001B8C:             ; 
00001B8C: E3510000    ;     cmp R1, #0
00001B90: 0A000003    ;     beq printFreelend
00001B94:             ; 
00001B94: E1510004    ;     cmp R1, R4
00001B98: 0A000002    ;     beq printFreeErr
00001B9C:             ; 
00001B9C: E1A04001    ;     mov R4, R1
00001BA0: EAFFFFF1    ;     b printFreeloop
00001BA4:             ; 
00001BA4:             ; printFreelend
00001BA4: EA000002    ;     b printFreeEnd
00001BA8:             ; 
00001BA8:             ; printFreeErr
00001BA8: E28F00C6    ;     adrl R0, printFree_m_e
00001BAC: E2800C0E    ; 
00001BB0: EF000003    ;     swi 3
00001BB4:             ; 
00001BB4:             ; printFreeEnd
00001BB4: E8BD41F0    ;     pop {R14, R4-R8}
00001BB8: E1A0F00E    ;     mov R15, R14
00001BBC:             ; 
00001BBC:             ; printblock
00001BBC:             ; ;;INP in R0 is the addr
00001BBC:             ; ;;INP in R1 is the next
00001BBC:             ; ;;INP in R2 is the prev
00001BBC:             ; ;;INP in R3 is the size
00001BBC:             ; ;;RET --
00001BBC: E92D0010    ;     push {R4}
00001BC0: E1A04000    ;     mov R4, R0
00001BC4:             ; 
00001BC4: E28F0F61    ;     adrl R0, cutoff
00001BC8: E2800B02    ; 
00001BCC: EF000003    ;     swi 3
00001BD0:             ; 
00001BD0: E28F0076    ;     adrl R0, printfree_f_mad
00001BD4: E2800C0E    ; 
00001BD8: EF000003    ;     swi 3
00001BDC:             ; 
00001BDC: E1A00004    ;     mov R0, R4
00001BE0: EF000004    ;     swi 4
00001BE4:             ; 
00001BE4: E3A0000A    ;     ldr R0, =nl
00001BE8: EF000000    ;     swi 0
00001BEC:             ; 
00001BEC: E28F0F99    ;     adrl R0, printfree_f_mnx
00001BF0: E2800B03    ; 
00001BF4: EF000003    ;     swi 3
00001BF8:             ; 
00001BF8: E1A00001    ;     mov R0, R1
00001BFC: EF000004    ;     swi 4
00001C00:             ; 
00001C00: E3A0000A    ;     ldr R0, =nl
00001C04: EF000000    ;     swi 0
00001C08:             ; 
00001C08: E28F0052    ;     adrl R0, printfree_f_mpr
00001C0C: E2800C0E    ; 
00001C10: EF000003    ;     swi 3
00001C14:             ; 
00001C14: E1A00002    ;     mov R0, R2
00001C18: EF000004    ;     swi 4
00001C1C:             ; 
00001C1C: E3A0000A    ;     ldr R0, =nl
00001C20: EF000000    ;     swi 0
00001C24:             ; 
00001C24: E28F0D39    ;     adrl R0, printfree_f_msz
00001C28: EF000003    ;     swi 3
00001C2C:             ; 
00001C2C: E1A00003    ;     mov R0, R3
00001C30: EF000004    ;     swi 4
00001C34:             ; 
00001C34: E3A0000A    ;     ldr R0, =nl
00001C38: EF000000    ;     swi 0
00001C3C:             ; 
00001C3C: E28F0F43    ;     adrl R0, cutoff
00001C40: E2800B02    ; 
00001C44: EF000003    ;     swi 3
00001C48:             ; 
00001C48: E8BD0010    ;     pop {R4}
00001C4C: E1A0F00E    ;     mov R15, R14
00001C50:             ; 
00001C50:             ; 
00001C50:             ; free
00001C50:             ; ;;INP in R0 is the mem addr of the data to be freed
00001C50:             ; ;;OUT in R0 is the success code - 0 for mem freed, ¬0 for error ;;probably won't be currently 
                      ; used `=(- -)=' 
00001C50:             ;     ;;In order to free memory we need to add it back to the linked list
00001C50:             ;     ;;Following K&R's version the linked list will be ordered by address this will make finding
                      ;  consecutive memory locations that should be combined easier
00001C50:             ; 
00001C50:             ;     ;;The inputted address of the crate is the address given in malloc and so the start of the 
                      ; crate is that addr - sizeof(Crate) (#12)
00001C50:             ; 
00001C50:             ;     ;;heapHead = first Crate
00001C50:             ;     ;;current = heapHead
00001C50:             ;     ;;while (toFree.addr > current.addr)
00001C50:             ;     ;;  current = current.next
00001C50:             ;     ;;
00001C50:             ;     ;;//Add the toFree Crate inbetween the current and its previous i.e.  A<->B<->C, toFree = D
                      ;  (addr < C, addr > B) ==> A<->B<->D<->C
00001C50:             ;     ;;current->prev->next = toFree
00001C50:             ;     ;;toFree->prev = current.prev
00001C50:             ;     ;;current->prev = toFree
00001C50:             ;     ;;toFree->next = current
00001C50:             ; 
00001C50:             ;     ;; Crate structure
00001C50:             ;     ;;  |-ptr to next crate (1 word)
00001C50:             ;     ;;  |-ptr to prev crate (1 word)
00001C50:             ;     ;;  `-Size (bytes)      (1 word)
00001C50:             ; 
00001C50: E92D41F0    ;     push {R14, R4-R8}
00001C54:             ; 
00001C54: E3500000    ;     cmp R0, #0
00001C58: 0A000030    ;     beq freeEndZero
00001C5C:             ; 
00001C5C: E24F1EC6    ;     adrl R1, heaphead
00001C60: E2411A01    ; 
00001C64: E5111000    ;     ldr R1, [R1] ;;R1 will hold the current
00001C68: E240000C    ;     sub R0, R0, #12 ;;subtract sizeof(Crate) to get header pointer
00001C6C:             ; freeloop
00001C6C: E5912000    ;     ldr R2, [R1, #0] ;;load the ptr to the next
00001C70: E1520000    ;     cmp R2, R0 ;;compare the address of the toFree to the address of current->next
00001C74:             ; 
00001C74: AA000003    ;     bge freelend ;;current->next.addr >= toFree.addr
00001C78:             ; 
00001C78: E3520000    ;     cmp R2, #0 ;;If there are no more Crates to the right then this could be a new Crate at the
                      ;  end or |F|T| it should merge left 
00001C7C: 0A000009    ;     beq freelendEnd
00001C80:             ; 
00001C80: E1A01002    ;     mov R1, R2 ;;current = current.next
00001C84:             ; 
00001C84: EAFFFFF8    ;     b freeloop
00001C88:             ; 
00001C88:             ; freelend
00001C88:             ;     ;; R1 holds the current (left)
00001C88:             ;     ;; R2 holds the c->next (right)
00001C88: E5912000    ;     ldr R2, [R1, #0]
00001C8C:             ; 
00001C8C:             ;     ;;Setup the ptrs for the crates this will help later on   left<->toFree<->right ;;left,righ
                      ; t can be 0
00001C8C:             ;     ;;We're just adding the new crate to the linked list
00001C8C:             ;     ;;current->next->prev = toFree
00001C8C:             ;     ;;toFree->next = current->next
00001C8C:             ;     ;;current->next = toFree
00001C8C:             ;     ;;toFree->prev = current
00001C8C:             ; 
00001C8C: E5913000    ;     ldr R3, [R1, #0] ;;holds current->next
00001C90: E3530000    ;     cmp R3, #0
00001C94: 15830004    ;     strne R0, [R3, #4] ;;current->next->prev = toFree
00001C98: E5803000    ;     str R3, [R0, #0] ;;toFree->next = current->next
00001C9C: E5810000    ;     str R0, [R1, #0] ;;current->next = toFree
00001CA0: E5801004    ;     str R1, [R0, #4] ;;toFree->prev = current
00001CA4:             ; 
00001CA4: EA000001    ;     b freeMergeCheck
00001CA8:             ; 
00001CA8:             ; freelendEnd
00001CA8:             ; ;;If there are no more Crates to the right then this could be a new Crate at the end or |F|T| i
                      ; t should merge left 
00001CA8:             ; ;;Found a crate (current) that is to the left of the crate as we ran out of ->next ptrs
00001CA8:             ; ;;Need to set current->next = toFree
00001CA8:             ; ;;            toFree->prev = current
00001CA8: E5801004    ;     str R1, [R0, #4] ;;toFree->prev = current
00001CAC: E5810000    ;     str R0, [R1, #0] ;;current->next = toFree
00001CB0:             ; 
00001CB0:             ; freeMergeCheck
00001CB0:             ;     ;;We have a ptr to current. This should be the closest Crate to the left of toFree
00001CB0:             ;     ;;We also have the next Crate (null or not) which is to the right of toFree
00001CB0:             ;     ;;Both of these crates MAY need to be merged but could also have taken crates in between
00001CB0:             ;     ;;First is to check if the crates are adjacent
00001CB0:             ;     ;;  If they are NOT then create a newCrate
00001CB0:             ;     ;;  If they are     then merge both
00001CB0:             ;     ;;  If only one     then merge either left or right
00001CB0:             ; 
00001CB0:             ;     ;;R1 will be left
00001CB0:             ;     ;;R2 will be right
00001CB0:             ; 
00001CB0: E3510000    ;     cmp R1, #0
00001CB4: 01A01000    ;     moveq R1, R0 ;;If there is no left crate then left=toFree
00001CB8: E3520000    ;     cmp R2, #0
00001CBC: 01A02000    ;     moveq R2, R0 ;;If there is no right crate (more likely) then right=toFree
00001CC0:             ; 
00001CC0:             ; verifyLeft
00001CC0:             ;     ;;Check if the left is adjacent
00001CC0:             ;     ;;It will be if (left.addr + sizeof(Crate) + left.size == toFree.addr)
00001CC0:             ; 
00001CC0: E5913008    ;     ldr R3, [R1, #8]
00001CC4: E283300C    ;     add R3, R3, #12 ;;12 is sizeof(Crate) + toFree.size
00001CC8: E0833001    ;     add R3, R3, R1 ;;left.addr + left->size ??
00001CCC:             ; 
00001CCC: E1530000    ;     cmp R3, R0
00001CD0: 11A01000    ;     movne R1, R0
00001CD4:             ; 
00001CD4:             ; verifyRight
00001CD4:             ;     ;;Going from toFree to Right
00001CD4: E5903008    ;     ldr R3, [R0, #8] ;;get size of toFree
00001CD8: E283300C    ;     add R3, R3, #12 ;;12 is sizeof(Crate) + toFree.size
00001CDC: E0833000    ;     add R3, R3, R0 ;; + toFree.addr
00001CE0:             ; 
00001CE0: E1530002    ;     cmp R3, R2
00001CE4: 11A02000    ;     movne R2, R0
00001CE8:             ; 
00001CE8:             ; merge
00001CE8:             ;     ;;Merge the two Crates given in R1 and R2
00001CE8:             ;     ;;left can be (left) or (toFree)
00001CE8:             ;     ;;right can be (right) or (toFree)
00001CE8:             ;     ;;If left == right: don't merge; create new Crate
00001CE8:             ;     ;;If left != right: then add to left's size
00001CE8:             ; 
00001CE8: E1510002    ;     cmp R1, R2
00001CEC: 0A00000A    ;     beq mergeNew
00001CF0:             ; 
00001CF0:             ;     ;;The new size is right.addr - left.addr + right->size    from right.addr - left.addr - siz
                      ; eof(Crate) + sizeof(Crate) + right->size
00001CF0:             ;     ;;                                                               |left      |right
00001CF0:             ;     ;;                                                               |<12>|size||<12>|size|
00001CF0:             ;     ;;
00001CF0:             ;     ;;                                                               |left      
00001CF0:             ;     ;;                                                               |<12>|size           |
00001CF0:             ;     ;;
00001CF0:             ;     ;;I'm doing it this way as the left and right may not be contiguous i.e. if toFree has a fr
                      ; ee crate on either side
00001CF0:             ; 
00001CF0: E0423001    ;     sub R3, R2, R1
00001CF4: E5924008    ;     ldr R4, [R2, #8]
00001CF8: E0833004    ;     add R3, R3, R4
00001CFC: E5813008    ;     str R3, [R1, #8]
00001D00:             ; 
00001D00:             ;     ;;Time to switch some ptrs
00001D00:             ;     ;;Current state left.prev<->left<->right<->right.next (with left or right = toFree) or left
                      ; .prev<->left<->toFree<->right<->right.next
00001D00:             ;     ;;New state would be left.prev<->left<->right.next (with left or right = toFree) or left.pr
                      ; ev<->left<->right.next
00001D00:             ;     ;;Both cases end the same, so get right.next. These could be 0 but it doesn't matter
00001D00:             ;     ;;Next need to change the prev and next ptrs for adjacent Crates
00001D00:             ;     ;;i.e. right->next->prev = left
00001D00:             ; 
00001D00: E5924000    ;     ldr R4, [R2, #0] ;;right->next
00001D04: E1540001    ;     cmp R4, R1      ;;If right->next == current {left->next = 0} else {left->next = right->next
                      ; }
00001D08: 15814000    ;     strne R4, [R1, #0] ;;left->next = right->next
00001D0C: 03A04000    ;     moveq R4, #0       ;;This shouldn't ever be true? how could rnext point to left? left<->mid
                      ; ?<->right<->rnext
00001D10: 05814000    ;     streq R4, [R1, #0] ;;left->next = 0
00001D14:             ; 
00001D14: E3540000    ;     cmp R4, #0
00001D18: 15841004    ;     strne R1, [R4, #4] ;;right->next->prev = left
00001D1C:             ; 
00001D1C:             ; mergeNew
00001D1C:             ;     ;;The crate has already been setup with its ptrs and had its size as well so don't need to 
                      ; do anything
00001D1C: EA000002    ;     b freeEnd
00001D20:             ; 
00001D20:             ; freeEndZero
00001D20: E28F00A3    ;     adrl R0, free_m_zero
00001D24: E2800C0F    ; 
00001D28: EF000003    ;     swi 3
00001D2C:             ; 
00001D2C:             ; freeEnd
00001D2C: E8BD41F0    ;     pop {R14, R4-R8}
00001D30: E1A0F00E    ;     mov R15, R14
00001D34:             ; 
00001D34:             ; align
00001D34:             ; 
00001D34:             ; ;;String defs -- The naming scheme is bad :(
00001D34: 2D 2D 2D 2D ; welcomemsg      defb "-----------Welcome to JCGOL in ARM32-----------", nl, 0
00001D38: 2D 2D 2D 2D ; 
00001D3C: 2D 2D 2D 57 ; 
00001D40: 65 6C 63 6F ; 
00001D44: 6D 65 20 74 ; 
00001D48: 6F 20 4A 43 ; 
00001D4C: 47 4F 4C 20 ; 
00001D50: 69 6E 20 41 ; 
00001D54: 52 4D 33 32 ; 
00001D58: 2D 2D 2D 2D ; 
00001D5C: 2D 2D 2D 2D ; 
00001D60: 2D 2D 2D 0A ; 
00001D64: 00          ; 
00001D68:             ; align ;;WHY WHY?!?!??!?!
00001D68: 28 4E 29 65 ; welcome2msg     defb "(N)ew board\n(L)oad a saved board\n(S)ettings\n(P)rint the heap\n(Q)uit",
00001D6C: 77 20 62 6F ;  nl, 0
00001D70: 61 72 64 0A ; 
00001D74: 28 4C 29 6F ; 
00001D78: 61 64 20 61 ; 
00001D7C: 20 73 61 76 ; 
00001D80: 65 64 20 62 ; 
00001D84: 6F 61 72 64 ; 
00001D88: 0A 28 53 29 ; 
00001D8C: 65 74 74 69 ; 
00001D90: 6E 67 73 0A ; 
00001D94: 28 50 29 72 ; 
00001D98: 69 6E 74 20 ; 
00001D9C: 74 68 65 20 ; 
00001DA0: 68 65 61 70 ; 
00001DA4: 0A 28 51 29 ; 
00001DA8: 75 69 74 0A ; 
00001DAC: 00          ; 
00001DAD: 49 6E 76 61 ; mainchoicefail  defb "Invalid choice please enter 'n' for new board, 'l' for load a board, 's' 
00001DB1: 6C 69 64 20 ; to view settings, 'p' to view the heap, or 'q' to close. Not cases sensative", nl, 0
00001DB5: 63 68 6F 69 ; 
00001DB9: 63 65 20 70 ; 
00001DBD: 6C 65 61 73 ; 
00001DC1: 65 20 65 6E ; 
00001DC5: 74 65 72 20 ; 
00001DC9: 27 6E 27 20 ; 
00001DCD: 66 6F 72 20 ; 
00001DD1: 6E 65 77 20 ; 
00001DD5: 62 6F 61 72 ; 
00001DD9: 64 2C 20 27 ; 
00001DDD: 6C 27 20 66 ; 
00001DE1: 6F 72 20 6C ; 
00001DE5: 6F 61 64 20 ; 
00001DE9: 61 20 62 6F ; 
00001DED: 61 72 64 2C ; 
00001DF1: 20 27 73 27 ; 
00001DF5: 20 74 6F 20 ; 
00001DF9: 76 69 65 77 ; 
00001DFD: 20 73 65 74 ; 
00001E01: 74 69 6E 67 ; 
00001E05: 73 2C 20 27 ; 
00001E09: 70 27 20 74 ; 
00001E0D: 6F 20 76 69 ; 
00001E11: 65 77 20 74 ; 
00001E15: 68 65 20 68 ; 
00001E19: 65 61 70 2C ; 
00001E1D: 20 6F 72 20 ; 
00001E21: 27 71 27 20 ; 
00001E25: 74 6F 20 63 ; 
00001E29: 6C 6F 73 65 ; 
00001E2D: 2E 20 4E 6F ; 
00001E31: 74 20 63 61 ; 
00001E35: 73 65 73 20 ; 
00001E39: 73 65 6E 73 ; 
00001E3D: 61 74 69 76 ; 
00001E41: 65 0A 00    ; 
00001E44: 54 68 61 6E ; mainendmsg      defb "Thank you for playing JCGOL for ARM32", nl, 0
00001E48: 6B 20 79 6F ; 
00001E4C: 75 20 66 6F ; 
00001E50: 72 20 70 6C ; 
00001E54: 61 79 69 6E ; 
00001E58: 67 20 4A 43 ; 
00001E5C: 47 4F 4C 20 ; 
00001E60: 66 6F 72 20 ; 
00001E64: 41 52 4D 33 ; 
00001E68: 32 0A 00    ; 
00001E6B: 57 6F 75 6C ; askdefaults     defb "Would you like to use the default settings? Y/n: ", 0
00001E6F: 64 20 79 6F ; 
00001E73: 75 20 6C 69 ; 
00001E77: 6B 65 20 74 ; 
00001E7B: 6F 20 75 73 ; 
00001E7F: 65 20 74 68 ; 
00001E83: 65 20 64 65 ; 
00001E87: 66 61 75 6C ; 
00001E8B: 74 20 73 65 ; 
00001E8F: 74 74 69 6E ; 
00001E93: 67 73 3F 20 ; 
00001E97: 59 2F 6E 3A ; 
00001E9B: 20 00       ; 
00001E9D: 45 6E 61 62 ; askerase        defb "Enable erase mode? Y/n: ", 0
00001EA1: 6C 65 20 65 ; 
00001EA5: 72 61 73 65 ; 
00001EA9: 20 6D 6F 64 ; 
00001EAD: 65 3F 20 59 ; 
00001EB1: 2F 6E 3A 20 ; 
00001EB5: 00          ; 
00001EB6: 45 6E 61 62 ; askslow         defb "Enable slow mode? Y/n: ", 0
00001EBA: 6C 65 20 73 ; 
00001EBE: 6C 6F 77 20 ; 
00001EC2: 6D 6F 64 65 ; 
00001EC6: 3F 20 59 2F ; 
00001ECA: 6E 3A 20 00 ; 
00001ECE: 45 6E 61 62 ; askstep         defb "Enable step mode? Y/n: ", 0
00001ED2: 6C 65 20 73 ; 
00001ED6: 74 65 70 20 ; 
00001EDA: 6D 6F 64 65 ; 
00001EDE: 3F 20 59 2F ; 
00001EE2: 6E 3A 20 00 ; 
00001EE6: 43 61 6E 6E ; stepslowwarning defb "Cannot have slow and step mode active at the same time, disabling slow mo
00001EEA: 6F 74 20 68 ; de", nl, 0
00001EEE: 61 76 65 20 ; 
00001EF2: 73 6C 6F 77 ; 
00001EF6: 20 61 6E 64 ; 
00001EFA: 20 73 74 65 ; 
00001EFE: 70 20 6D 6F ; 
00001F02: 64 65 20 61 ; 
00001F06: 63 74 69 76 ; 
00001F0A: 65 20 61 74 ; 
00001F0E: 20 74 68 65 ; 
00001F12: 20 73 61 6D ; 
00001F16: 65 20 74 69 ; 
00001F1A: 6D 65 2C 20 ; 
00001F1E: 64 69 73 61 ; 
00001F22: 62 6C 69 6E ; 
00001F26: 67 20 73 6C ; 
00001F2A: 6F 77 20 6D ; 
00001F2E: 6F 64 65 0A ; 
00001F32: 00          ; 
00001F33: 52 65 74 75 ; savedchoice     defb "Return to menu? (n for continue sim) Y/n: ", 0
00001F37: 72 6E 20 74 ; 
00001F3B: 6F 20 6D 65 ; 
00001F3F: 6E 75 3F 20 ; 
00001F43: 28 6E 20 66 ; 
00001F47: 6F 72 20 63 ; 
00001F4B: 6F 6E 74 69 ; 
00001F4F: 6E 75 65 20 ; 
00001F53: 73 69 6D 29 ; 
00001F57: 20 59 2F 6E ; 
00001F5B: 3A 20 00    ; 
00001F5E: 50 6C 65 61 ; askname         defb "Please enter a name for the grid: ", 0
00001F62: 73 65 20 65 ; 
00001F66: 6E 74 65 72 ; 
00001F6A: 20 61 20 6E ; 
00001F6E: 61 6D 65 20 ; 
00001F72: 66 6F 72 20 ; 
00001F76: 74 68 65 20 ; 
00001F7A: 67 72 69 64 ; 
00001F7E: 3A 20 00    ; 
00001F81: 45 72 61 73 ; warneraseslow   defb "Erase mode is active it is recommended to also use slow mode", nl, 0
00001F85: 65 20 6D 6F ; 
00001F89: 64 65 20 69 ; 
00001F8D: 73 20 61 63 ; 
00001F91: 74 69 76 65 ; 
00001F95: 20 69 74 20 ; 
00001F99: 69 73 20 72 ; 
00001F9D: 65 63 6F 6D ; 
00001FA1: 6D 65 6E 64 ; 
00001FA5: 65 64 20 74 ; 
00001FA9: 6F 20 61 6C ; 
00001FAD: 73 6F 20 75 ; 
00001FB1: 73 65 20 73 ; 
00001FB5: 6C 6F 77 20 ; 
00001FB9: 6D 6F 64 65 ; 
00001FBD: 0A 00       ; 
00001FBF: 50 6C 65 61 ; askwid          defb "Please enter a width (", 0
00001FC3: 73 65 20 65 ; 
00001FC7: 6E 74 65 72 ; 
00001FCB: 20 61 20 77 ; 
00001FCF: 69 64 74 68 ; 
00001FD3: 20 28 00    ; 
00001FD6: 2D 00       ; dash            defb "-", 0
00001FD8: 29 3A 20 00 ; b_close_colon   defb "): ",0
00001FDC: 50 6C 65 61 ; askhei          defb "Please enter a height ", 0
00001FE0: 73 65 20 65 ; 
00001FE4: 6E 74 65 72 ; 
00001FE8: 20 61 20 68 ; 
00001FEC: 65 69 67 68 ; 
00001FF0: 74 20 00    ; 
00001FF3: 49 6E 76 61 ; getwidfailmsg   defb "Invalid width please enter a value between ", 0
00001FF7: 6C 69 64 20 ; 
00001FFB: 77 69 64 74 ; 
00001FFF: 68 20 70 6C ; 
00002003: 65 61 73 65 ; 
00002007: 20 65 6E 74 ; 
0000200B: 65 72 20 61 ; 
0000200F: 20 76 61 6C ; 
00002013: 75 65 20 62 ; 
00002017: 65 74 77 65 ; 
0000201B: 65 6E 20 00 ; 
0000201F: 49 6E 76 61 ; getheifailmsg   defb "Invalid height please enter a value between ", 0
00002023: 6C 69 64 20 ; 
00002027: 68 65 69 67 ; 
0000202B: 68 74 20 70 ; 
0000202F: 6C 65 61 73 ; 
00002033: 65 20 65 6E ; 
00002037: 74 65 72 20 ; 
0000203B: 61 20 76 61 ; 
0000203F: 6C 75 65 20 ; 
00002043: 62 65 74 77 ; 
00002047: 65 65 6E 20 ; 
0000204B: 00          ; 
0000204C: 53 74 65 70 ; stepmode_m      defb "Step mode is active. After each itteration of the grid press any key to c
00002050: 20 6D 6F 64 ; ontinue to the next or (q)uit to main menu, or (s)ave the current grid", nl, 0
00002054: 65 20 69 73 ; 
00002058: 20 61 63 74 ; 
0000205C: 69 76 65 2E ; 
00002060: 20 41 66 74 ; 
00002064: 65 72 20 65 ; 
00002068: 61 63 68 20 ; 
0000206C: 69 74 74 65 ; 
00002070: 72 61 74 69 ; 
00002074: 6F 6E 20 6F ; 
00002078: 66 20 74 68 ; 
0000207C: 65 20 67 72 ; 
00002080: 69 64 20 70 ; 
00002084: 72 65 73 73 ; 
00002088: 20 61 6E 79 ; 
0000208C: 20 6B 65 79 ; 
00002090: 20 74 6F 20 ; 
00002094: 63 6F 6E 74 ; 
00002098: 69 6E 75 65 ; 
0000209C: 20 74 6F 20 ; 
000020A0: 74 68 65 20 ; 
000020A4: 6E 65 78 74 ; 
000020A8: 20 6F 72 20 ; 
000020AC: 28 71 29 75 ; 
000020B0: 69 74 20 74 ; 
000020B4: 6F 20 6D 61 ; 
000020B8: 69 6E 20 6D ; 
000020BC: 65 6E 75 2C ; 
000020C0: 20 6F 72 20 ; 
000020C4: 28 73 29 61 ; 
000020C8: 76 65 20 74 ; 
000020CC: 68 65 20 63 ; 
000020D0: 75 72 72 65 ; 
000020D4: 6E 74 20 67 ; 
000020D8: 72 69 64 0A ; 
000020DC: 00          ; 
000020DD:             ; 
000020DD: 43 75 72 72 ; optionsp_1      defb "Current options: dims=(", 0 ;;width
000020E1: 65 6E 74 20 ; 
000020E5: 6F 70 74 69 ; 
000020E9: 6F 6E 73 3A ; 
000020ED: 20 64 69 6D ; 
000020F1: 73 3D 28 00 ; 
000020F5: 2C 20 00    ; optionsp_2      defb ", ", 0 ;;height
000020F8: 29 20 73 6C ; optionsp_3      defb ") slowMode=", 0 ;;OFF/ON
000020FC: 6F 77 4D 6F ; 
00002100: 64 65 3D 00 ; 
00002104: 20 65 72 61 ; optionsp_4      defb " eraseMode=", 0 ;;^
00002108: 73 65 4D 6F ; 
0000210C: 64 65 3D 00 ; 
00002110: 20 73 74 65 ; optionsp_5      defb " stepMode=", 0  ;;^
00002114: 70 4D 6F 64 ; 
00002118: 65 3D 00    ; 
0000211B:             ; 
0000211B: 59 6F 75 27 ; mainloopittsmsg defb "You've reached the max itterations before waiting for input. You can chan
0000211F: 76 65 20 72 ; ge this in settings. Press any key to continue, 'q' to quit, and 's' to save the grid", nl, 0
00002123: 65 61 63 68 ; 
00002127: 65 64 20 74 ; 
0000212B: 68 65 20 6D ; 
0000212F: 61 78 20 69 ; 
00002133: 74 74 65 72 ; 
00002137: 61 74 69 6F ; 
0000213B: 6E 73 20 62 ; 
0000213F: 65 66 6F 72 ; 
00002143: 65 20 77 61 ; 
00002147: 69 74 69 6E ; 
0000214B: 67 20 66 6F ; 
0000214F: 72 20 69 6E ; 
00002153: 70 75 74 2E ; 
00002157: 20 59 6F 75 ; 
0000215B: 20 63 61 6E ; 
0000215F: 20 63 68 61 ; 
00002163: 6E 67 65 20 ; 
00002167: 74 68 69 73 ; 
0000216B: 20 69 6E 20 ; 
0000216F: 73 65 74 74 ; 
00002173: 69 6E 67 73 ; 
00002177: 2E 20 50 72 ; 
0000217B: 65 73 73 20 ; 
0000217F: 61 6E 79 20 ; 
00002183: 6B 65 79 20 ; 
00002187: 74 6F 20 63 ; 
0000218B: 6F 6E 74 69 ; 
0000218F: 6E 75 65 2C ; 
00002193: 20 27 71 27 ; 
00002197: 20 74 6F 20 ; 
0000219B: 71 75 69 74 ; 
0000219F: 2C 20 61 6E ; 
000021A3: 64 20 27 73 ; 
000021A7: 27 20 74 6F ; 
000021AB: 20 73 61 76 ; 
000021AF: 65 20 74 68 ; 
000021B3: 65 20 67 72 ; 
000021B7: 69 64 0A 00 ; 
000021BB:             ; 
000021BB: 43 68 6F 6F ; askgenoption    defb "Choose between (R)andom generation or (D)rawing the grid", 0
000021BF: 73 65 20 62 ; 
000021C3: 65 74 77 65 ; 
000021C7: 65 6E 20 28 ; 
000021CB: 52 29 61 6E ; 
000021CF: 64 6F 6D 20 ; 
000021D3: 67 65 6E 65 ; 
000021D7: 72 61 74 69 ; 
000021DB: 6F 6E 20 6F ; 
000021DF: 72 20 28 44 ; 
000021E3: 29 72 61 77 ; 
000021E7: 69 6E 67 20 ; 
000021EB: 74 68 65 20 ; 
000021EF: 67 72 69 64 ; 
000021F3: 00          ; 
000021F4: 49 6E 76 61 ; setupGrdFailmsg defb "Invalid choice, use `R` for random generation and `d` for drawing the gri
000021F8: 6C 69 64 20 ; d. Not case sensative: ", 0
000021FC: 63 68 6F 69 ; 
00002200: 63 65 2C 20 ; 
00002204: 75 73 65 20 ; 
00002208: 60 52 60 20 ; 
0000220C: 66 6F 72 20 ; 
00002210: 72 61 6E 64 ; 
00002214: 6F 6D 20 67 ; 
00002218: 65 6E 65 72 ; 
0000221C: 61 74 69 6F ; 
00002220: 6E 20 61 6E ; 
00002224: 64 20 60 64 ; 
00002228: 60 20 66 6F ; 
0000222C: 72 20 64 72 ; 
00002230: 61 77 69 6E ; 
00002234: 67 20 74 68 ; 
00002238: 65 20 67 72 ; 
0000223C: 69 64 2E 20 ; 
00002240: 4E 6F 74 20 ; 
00002244: 63 61 73 65 ; 
00002248: 20 73 65 6E ; 
0000224C: 73 61 74 69 ; 
00002250: 76 65 3A 20 ; 
00002254: 00          ; 
00002255: 45 6E 74 65 ; askseed         defb "Enter 4 characters to be used as the seed: ", 0
00002259: 72 20 34 20 ; 
0000225D: 63 68 61 72 ; 
00002261: 61 63 74 65 ; 
00002265: 72 73 20 74 ; 
00002269: 6F 20 62 65 ; 
0000226D: 20 75 73 65 ; 
00002271: 64 20 61 73 ; 
00002275: 20 74 68 65 ; 
00002279: 20 73 65 65 ; 
0000227D: 64 3A 20 00 ; 
00002281: 55 73 69 6E ; drawinfomsg     defb "Using '1' and '0' choose the value of the current cell. Use enter to go t
00002285: 67 20 27 31 ; o next line", nl, 0
00002289: 27 20 61 6E ; 
0000228D: 64 20 27 30 ; 
00002291: 27 20 63 68 ; 
00002295: 6F 6F 73 65 ; 
00002299: 20 74 68 65 ; 
0000229D: 20 76 61 6C ; 
000022A1: 75 65 20 6F ; 
000022A5: 66 20 74 68 ; 
000022A9: 65 20 63 75 ; 
000022AD: 72 72 65 6E ; 
000022B1: 74 20 63 65 ; 
000022B5: 6C 6C 2E 20 ; 
000022B9: 55 73 65 20 ; 
000022BD: 65 6E 74 65 ; 
000022C1: 72 20 74 6F ; 
000022C5: 20 67 6F 20 ; 
000022C9: 74 6F 20 6E ; 
000022CD: 65 78 74 20 ; 
000022D1: 6C 69 6E 65 ; 
000022D5: 0A 00       ; 
000022D7: 49 6E 76 61 ; drawfailmsg     defb "Invalid input please enter 1 or 0, or enter for next line: ", nl, 0
000022DB: 6C 69 64 20 ; 
000022DF: 69 6E 70 75 ; 
000022E3: 74 20 70 6C ; 
000022E7: 65 61 73 65 ; 
000022EB: 20 65 6E 74 ; 
000022EF: 65 72 20 31 ; 
000022F3: 20 6F 72 20 ; 
000022F7: 30 2C 20 6F ; 
000022FB: 72 20 65 6E ; 
000022FF: 74 65 72 20 ; 
00002303: 66 6F 72 20 ; 
00002307: 6E 65 78 74 ; 
0000230B: 20 6C 69 6E ; 
0000230F: 65 3A 20 0A ; 
00002313: 00          ; 
00002314: 47 72 69 64 ; gridfailmsg     defb "Grid was not properly initialised, consider smaller dims", nl, 0
00002318: 20 77 61 73 ; 
0000231C: 20 6E 6F 74 ; 
00002320: 20 70 72 6F ; 
00002324: 70 65 72 6C ; 
00002328: 79 20 69 6E ; 
0000232C: 69 74 69 61 ; 
00002330: 6C 69 73 65 ; 
00002334: 64 2C 20 63 ; 
00002338: 6F 6E 73 69 ; 
0000233C: 64 65 72 20 ; 
00002340: 73 6D 61 6C ; 
00002344: 6C 65 72 20 ; 
00002348: 64 69 6D 73 ; 
0000234C: 0A 00       ; 
0000234E: 54 68 65 72 ; gridsavefail    defb "There was an error allocating memory for the grid save", nl, 0
00002352: 65 20 77 61 ; 
00002356: 73 20 61 6E ; 
0000235A: 20 65 72 72 ; 
0000235E: 6F 72 20 61 ; 
00002362: 6C 6C 6F 63 ; 
00002366: 61 74 69 6E ; 
0000236A: 67 20 6D 65 ; 
0000236E: 6D 6F 72 79 ; 
00002372: 20 66 6F 72 ; 
00002376: 20 74 68 65 ; 
0000237A: 20 67 72 69 ; 
0000237E: 64 20 73 61 ; 
00002382: 76 65 0A 00 ; 
00002386: 54 68 65 72 ; gridloadempty   defb "There are no saved grids, start a step mode sim and save the grid, return
0000238A: 65 20 61 72 ; ing to main menu", nl, 0
0000238E: 65 20 6E 6F ; 
00002392: 20 73 61 76 ; 
00002396: 65 64 20 67 ; 
0000239A: 72 69 64 73 ; 
0000239E: 2C 20 73 74 ; 
000023A2: 61 72 74 20 ; 
000023A6: 61 20 73 74 ; 
000023AA: 65 70 20 6D ; 
000023AE: 6F 64 65 20 ; 
000023B2: 73 69 6D 20 ; 
000023B6: 61 6E 64 20 ; 
000023BA: 73 61 76 65 ; 
000023BE: 20 74 68 65 ; 
000023C2: 20 67 72 69 ; 
000023C6: 64 2C 20 72 ; 
000023CA: 65 74 75 72 ; 
000023CE: 6E 69 6E 67 ; 
000023D2: 20 74 6F 20 ; 
000023D6: 6D 61 69 6E ; 
000023DA: 20 6D 65 6E ; 
000023DE: 75 0A 00    ; 
000023E1: 7C 69 6E 64 ; gridloadpindex  defb "|index: ", 0
000023E5: 65 78 3A 20 ; 
000023E9: 00          ; 
000023EA: 7C 6E 61 6D ; gridloadpname   defb "|name: ", 0
000023EE: 65 3A 20 00 ; 
000023F2: 7C 77 69 64 ; gridloadpwidth  defb "|width: ", 0
000023F6: 74 68 3A 20 ; 
000023FA: 00          ; 
000023FB: 7C 68 65 69 ; gridloadpheight defb "|height: ", 0
000023FF: 67 68 74 3A ; 
00002403: 20 00       ; 
00002405: 50 6C 65 61 ; loadboardaski   defb "Please enter the index of the grid to load, or enter a negative index to 
00002409: 73 65 20 65 ; not load a grid. (press enter to input)", nl, 0
0000240D: 6E 74 65 72 ; 
00002411: 20 74 68 65 ; 
00002415: 20 69 6E 64 ; 
00002419: 65 78 20 6F ; 
0000241D: 66 20 74 68 ; 
00002421: 65 20 67 72 ; 
00002425: 69 64 20 74 ; 
00002429: 6F 20 6C 6F ; 
0000242D: 61 64 2C 20 ; 
00002431: 6F 72 20 65 ; 
00002435: 6E 74 65 72 ; 
00002439: 20 61 20 6E ; 
0000243D: 65 67 61 74 ; 
00002441: 69 76 65 20 ; 
00002445: 69 6E 64 65 ; 
00002449: 78 20 74 6F ; 
0000244D: 20 6E 6F 74 ; 
00002451: 20 6C 6F 61 ; 
00002455: 64 20 61 20 ; 
00002459: 67 72 69 64 ; 
0000245D: 2E 20 28 70 ; 
00002461: 72 65 73 73 ; 
00002465: 20 65 6E 74 ; 
00002469: 65 72 20 74 ; 
0000246D: 6F 20 69 6E ; 
00002471: 70 75 74 29 ; 
00002475: 0A 00       ; 
00002477: 52 65 74 75 ; loadboardretmsg defb "Returning to main menu", nl, 0
0000247B: 72 6E 69 6E ; 
0000247F: 67 20 74 6F ; 
00002483: 20 6D 61 69 ; 
00002487: 6E 20 6D 65 ; 
0000248B: 6E 75 0A 00 ; 
0000248F: 49 6E 76 61 ; loadboardifail  defb "Invalid input given for the index", nl, 0
00002493: 6C 69 64 20 ; 
00002497: 69 6E 70 75 ; 
0000249B: 74 20 67 69 ; 
0000249F: 76 65 6E 20 ; 
000024A3: 66 6F 72 20 ; 
000024A7: 74 68 65 20 ; 
000024AB: 69 6E 64 65 ; 
000024AF: 78 0A 00    ; 
000024B2: 49 6E 76 61 ; loadboardirerr  defb "Invalid index, out of range", nl, 0
000024B6: 6C 69 64 20 ; 
000024BA: 69 6E 64 65 ; 
000024BE: 78 2C 20 6F ; 
000024C2: 75 74 20 6F ; 
000024C6: 66 20 72 61 ; 
000024CA: 6E 67 65 0A ; 
000024CE: 00          ; 
000024CF: 45 72 72 6F ; loadboardmlcerr defb "Error allocating memory for loaded grid. Returing to main menu", nl, 0
000024D3: 72 20 61 6C ; 
000024D7: 6C 6F 63 61 ; 
000024DB: 74 69 6E 67 ; 
000024DF: 20 6D 65 6D ; 
000024E3: 6F 72 79 20 ; 
000024E7: 66 6F 72 20 ; 
000024EB: 6C 6F 61 64 ; 
000024EF: 65 64 20 67 ; 
000024F3: 72 69 64 2E ; 
000024F7: 20 52 65 74 ; 
000024FB: 75 72 69 6E ; 
000024FF: 67 20 74 6F ; 
00002503: 20 6D 61 69 ; 
00002507: 6E 20 6D 65 ; 
0000250B: 6E 75 0A 00 ; 
0000250F: 53 75 63 63 ; loadboardsucmsg defb "Successfully loaded the grid", nl, 0
00002513: 65 73 73 66 ; 
00002517: 75 6C 6C 79 ; 
0000251B: 20 6C 6F 61 ; 
0000251F: 64 65 64 20 ; 
00002523: 74 68 65 20 ; 
00002527: 67 72 69 64 ; 
0000252B: 0A 00       ; 
0000252D: 4C 69 73 74 ; listgridmsg     defb "Listing all availible saved grids", nl, 0
00002531: 69 6E 67 20 ; 
00002535: 61 6C 6C 20 ; 
00002539: 61 76 61 69 ; 
0000253D: 6C 69 62 6C ; 
00002541: 65 20 73 61 ; 
00002545: 76 65 64 20 ; 
00002549: 67 72 69 64 ; 
0000254D: 73 0A 00    ; 
00002550: 2D 2D 2D 2D ; cutoff          defb "-----------------", nl, 0
00002554: 2D 2D 2D 2D ; 
00002558: 2D 2D 2D 2D ; 
0000255C: 2D 2D 2D 2D ; 
00002560: 2D 0A 00    ; 
00002563: 45 72 72 6F ; changearrverr_m defb "Error invalid value given (1-255) inclusive. Re-enter: ", nl, 0
00002567: 72 20 69 6E ; 
0000256B: 76 61 6C 69 ; 
0000256F: 64 20 76 61 ; 
00002573: 6C 75 65 20 ; 
00002577: 67 69 76 65 ; 
0000257B: 6E 20 28 31 ; 
0000257F: 2D 32 35 35 ; 
00002583: 29 20 69 6E ; 
00002587: 63 6C 75 73 ; 
0000258B: 69 76 65 2E ; 
0000258F: 20 52 65 2D ; 
00002593: 65 6E 74 65 ; 
00002597: 72 3A 20 0A ; 
0000259B: 00          ; 
0000259C:             ; 
0000259C: 53 65 74 74 ; s_m1            defb "Settings", nl, "|-[0] stepMode_d     - The following 4 settings are the d
000025A0: 69 6E 67 73 ; efault values for the options", nl, "|-[1] slowMode_d", nl, "|-[2] eraseMode_d", nl, "|-[3] Dim
000025A4: 0A 7C 2D 5B ; s_d", nl, 0
000025A8: 30 5D 20 73 ; 
000025AC: 74 65 70 4D ; 
000025B0: 6F 64 65 5F ; 
000025B4: 64 20 20 20 ; 
000025B8: 20 20 2D 20 ; 
000025BC: 54 68 65 20 ; 
000025C0: 66 6F 6C 6C ; 
000025C4: 6F 77 69 6E ; 
000025C8: 67 20 34 20 ; 
000025CC: 73 65 74 74 ; 
000025D0: 69 6E 67 73 ; 
000025D4: 20 61 72 65 ; 
000025D8: 20 74 68 65 ; 
000025DC: 20 64 65 66 ; 
000025E0: 61 75 6C 74 ; 
000025E4: 20 76 61 6C ; 
000025E8: 75 65 73 20 ; 
000025EC: 66 6F 72 20 ; 
000025F0: 74 68 65 20 ; 
000025F4: 6F 70 74 69 ; 
000025F8: 6F 6E 73 0A ; 
000025FC: 7C 2D 5B 31 ; 
00002600: 5D 20 73 6C ; 
00002604: 6F 77 4D 6F ; 
00002608: 64 65 5F 64 ; 
0000260C: 0A 7C 2D 5B ; 
00002610: 32 5D 20 65 ; 
00002614: 72 61 73 65 ; 
00002618: 4D 6F 64 65 ; 
0000261C: 5F 64 0A 7C ; 
00002620: 2D 5B 33 5D ; 
00002624: 20 44 69 6D ; 
00002628: 73 5F 64 0A ; 
0000262C: 00          ; 
0000262D: 7C 2D 5B 34 ; s_m2            defb "|-[4] range          - The range of values that the dims can have (1-255 
00002631: 5D 20 72 61 ; && range_min < range_max)", nl, 0
00002635: 6E 67 65 20 ; 
00002639: 20 20 20 20 ; 
0000263D: 20 20 20 20 ; 
00002641: 20 2D 20 54 ; 
00002645: 68 65 20 72 ; 
00002649: 61 6E 67 65 ; 
0000264D: 20 6F 66 20 ; 
00002651: 76 61 6C 75 ; 
00002655: 65 73 20 74 ; 
00002659: 68 61 74 20 ; 
0000265D: 74 68 65 20 ; 
00002661: 64 69 6D 73 ; 
00002665: 20 63 61 6E ; 
00002669: 20 68 61 76 ; 
0000266D: 65 20 28 31 ; 
00002671: 2D 32 35 35 ; 
00002675: 20 26 26 20 ; 
00002679: 72 61 6E 67 ; 
0000267D: 65 5F 6D 69 ; 
00002681: 6E 20 3C 20 ; 
00002685: 72 61 6E 67 ; 
00002689: 65 5F 6D 61 ; 
0000268D: 78 29 0A 00 ; 
00002691: 7C 2D 5B 35 ; s_m3            defb "|-[5] Icons          - The characters printed for an alive/dead/ptr cell"
00002695: 5D 20 49 63 ; ,nl, "`-[6] itters         - The number of itterations in the non-step version before it will w
00002699: 6F 6E 73 20 ; ait for input", nl, 0
0000269D: 20 20 20 20 ; 
000026A1: 20 20 20 20 ; 
000026A5: 20 2D 20 54 ; 
000026A9: 68 65 20 63 ; 
000026AD: 68 61 72 61 ; 
000026B1: 63 74 65 72 ; 
000026B5: 73 20 70 72 ; 
000026B9: 69 6E 74 65 ; 
000026BD: 64 20 66 6F ; 
000026C1: 72 20 61 6E ; 
000026C5: 20 61 6C 69 ; 
000026C9: 76 65 2F 64 ; 
000026CD: 65 61 64 2F ; 
000026D1: 70 74 72 20 ; 
000026D5: 63 65 6C 6C ; 
000026D9: 0A 60 2D 5B ; 
000026DD: 36 5D 20 69 ; 
000026E1: 74 74 65 72 ; 
000026E5: 73 20 20 20 ; 
000026E9: 20 20 20 20 ; 
000026ED: 20 20 2D 20 ; 
000026F1: 54 68 65 20 ; 
000026F5: 6E 75 6D 62 ; 
000026F9: 65 72 20 6F ; 
000026FD: 66 20 69 74 ; 
00002701: 74 65 72 61 ; 
00002705: 74 69 6F 6E ; 
00002709: 73 20 69 6E ; 
0000270D: 20 74 68 65 ; 
00002711: 20 6E 6F 6E ; 
00002715: 2D 73 74 65 ; 
00002719: 70 20 76 65 ; 
0000271D: 72 73 69 6F ; 
00002721: 6E 20 62 65 ; 
00002725: 66 6F 72 65 ; 
00002729: 20 69 74 20 ; 
0000272D: 77 69 6C 6C ; 
00002731: 20 77 61 69 ; 
00002735: 74 20 66 6F ; 
00002739: 72 20 69 6E ; 
0000273D: 70 75 74 0A ; 
00002741: 00          ; 
00002742: 7C 2D 5B 37 ; s_m4            defb "|-[7] Drawing erase  - Bool for if when drawing the grid it should erase 
00002746: 5D 20 44 72 ; the previous one", nl, 0
0000274A: 61 77 69 6E ; 
0000274E: 67 20 65 72 ; 
00002752: 61 73 65 20 ; 
00002756: 20 2D 20 42 ; 
0000275A: 6F 6F 6C 20 ; 
0000275E: 66 6F 72 20 ; 
00002762: 69 66 20 77 ; 
00002766: 68 65 6E 20 ; 
0000276A: 64 72 61 77 ; 
0000276E: 69 6E 67 20 ; 
00002772: 74 68 65 20 ; 
00002776: 67 72 69 64 ; 
0000277A: 20 69 74 20 ; 
0000277E: 73 68 6F 75 ; 
00002782: 6C 64 20 65 ; 
00002786: 72 61 73 65 ; 
0000278A: 20 74 68 65 ; 
0000278E: 20 70 72 65 ; 
00002792: 76 69 6F 75 ; 
00002796: 73 20 6F 6E ; 
0000279A: 65 0A 00    ; 
0000279D: 45 6E 74 65 ; s_m             defb "Enter the index of the setting to edit or -1 to return to the menu (press
000027A1: 72 20 74 68 ;  enter to input): ", 0
000027A5: 65 20 69 6E ; 
000027A9: 64 65 78 20 ; 
000027AD: 6F 66 20 74 ; 
000027B1: 68 65 20 73 ; 
000027B5: 65 74 74 69 ; 
000027B9: 6E 67 20 74 ; 
000027BD: 6F 20 65 64 ; 
000027C1: 69 74 20 6F ; 
000027C5: 72 20 2D 31 ; 
000027C9: 20 74 6F 20 ; 
000027CD: 72 65 74 75 ; 
000027D1: 72 6E 20 74 ; 
000027D5: 6F 20 74 68 ; 
000027D9: 65 20 6D 65 ; 
000027DD: 6E 75 20 28 ; 
000027E1: 70 72 65 73 ; 
000027E5: 73 20 65 6E ; 
000027E9: 74 65 72 20 ; 
000027ED: 74 6F 20 69 ; 
000027F1: 6E 70 75 74 ; 
000027F5: 29 3A 20 00 ; 
000027F9: 45 72 72 6F ; s_m_err         defb "Error invalid index. Re-enter: ", 0
000027FD: 72 20 69 6E ; 
00002801: 76 61 6C 69 ; 
00002805: 64 20 69 6E ; 
00002809: 64 65 78 2E ; 
0000280D: 20 52 65 2D ; 
00002811: 65 6E 74 65 ; 
00002815: 72 3A 20 00 ; 
00002819:             ; 
00002819: 53 6C 6F 77 ; currentslow     defb "Slow_d: ", 0
0000281D: 5F 64 3A 20 ; 
00002821: 00          ; 
00002822: 45 72 61 73 ; currenterase    defb "Erase_d: ", 0
00002826: 65 5F 64 3A ; 
0000282A: 20 00       ; 
0000282C: 53 74 65 70 ; currentstep     defb "Step_d: ", 0
00002830: 5F 64 3A 20 ; 
00002834: 00          ; 
00002835: 44 69 6D 73 ; currentDims     defb "Dims: ", 0
00002839: 3A 20 00    ; 
0000283C: 52 61 6E 67 ; currentRange    defb "Range: ", 0
00002840: 65 3A 20 00 ; 
00002844: 49 74 74 65 ; currentItters   defb "Itters: ", 0
00002848: 72 73 3A 20 ; 
0000284C: 00          ; 
0000284D: 45 72 61 73 ; currentdraweras defb "Erase when drawing: ", 0
00002851: 65 20 77 68 ; 
00002855: 65 6E 20 64 ; 
00002859: 72 61 77 69 ; 
0000285D: 6E 67 3A 20 ; 
00002861: 00          ; 
00002862: 28 00       ; bracket_open    defb "(", 0
00002864: 2C 20 00    ; comma_space     defb ", ", 0
00002867: 29 00       ; bracket_close   defb ")", 0
00002869: 41 6C 69 76 ; currenticons_1  defb "Alive: ", 0
0000286D: 65 3A 20 00 ; 
00002871: 44 65 61 64 ; currenticons_2  defb "Dead: ", 0
00002875: 3A 20 00    ; 
00002878: 50 74 72 3A ; currenticons_3  defb "Ptr: ", 0
0000287C: 20 00       ; 
0000287E: 45 6E 74 65 ; currenticons_a  defb "Enter 3 character (not seperated) for the values of the alive/dead/ptr ch
00002882: 72 20 33 20 ; aracters: ", 0
00002886: 63 68 61 72 ; 
0000288A: 61 63 74 65 ; 
0000288E: 72 20 28 6E ; 
00002892: 6F 74 20 73 ; 
00002896: 65 70 65 72 ; 
0000289A: 61 74 65 64 ; 
0000289E: 29 20 66 6F ; 
000028A2: 72 20 74 68 ; 
000028A6: 65 20 76 61 ; 
000028AA: 6C 75 65 73 ; 
000028AE: 20 6F 66 20 ; 
000028B2: 74 68 65 20 ; 
000028B6: 61 6C 69 76 ; 
000028BA: 65 2F 64 65 ; 
000028BE: 61 64 2F 70 ; 
000028C2: 74 72 20 63 ; 
000028C6: 68 61 72 61 ; 
000028CA: 63 74 65 72 ; 
000028CE: 73 3A 20 00 ; 
000028D2: 45 72 72 6F ; mallocerr_m     defb "Error getting memory from malloc", nl, 0
000028D6: 72 20 67 65 ; 
000028DA: 74 74 69 6E ; 
000028DE: 67 20 6D 65 ; 
000028E2: 6D 6F 72 79 ; 
000028E6: 20 66 72 6F ; 
000028EA: 6D 20 6D 61 ; 
000028EE: 6C 6C 6F 63 ; 
000028F2: 0A 00       ; 
000028F4: 45 72 72 6F ; getstringerr_m  defb "Error getting string, could be malloc error", nl, 0
000028F8: 72 20 67 65 ; 
000028FC: 74 74 69 6E ; 
00002900: 67 20 73 74 ; 
00002904: 72 69 6E 67 ; 
00002908: 2C 20 63 6F ; 
0000290C: 75 6C 64 20 ; 
00002910: 62 65 20 6D ; 
00002914: 61 6C 6C 6F ; 
00002918: 63 20 65 72 ; 
0000291C: 72 6F 72 0A ; 
00002920: 00          ; 
00002921: 49 74 74 65 ; currentitter    defb "Itters: ", 0
00002925: 72 73 3A 20 ; 
00002929: 00          ; 
0000292A: 45 6E 74 65 ; currentaskx     defb "Enter value for x: ", 0
0000292E: 72 20 76 61 ; 
00002932: 6C 75 65 20 ; 
00002936: 66 6F 72 20 ; 
0000293A: 78 3A 20 00 ; 
0000293E: 45 6E 74 65 ; currentasky     defb "Enter value for y: ", 0
00002942: 72 20 76 61 ; 
00002946: 6C 75 65 20 ; 
0000294A: 66 6F 72 20 ; 
0000294E: 79 3A 20 00 ; 
00002952: 45 6E 74 65 ; currentasknew   defb "Enter new value: ", 0
00002956: 72 20 6E 65 ; 
0000295A: 77 20 76 61 ; 
0000295E: 6C 75 65 3A ; 
00002962: 20 00       ; 
00002964: 45 6E 74 65 ; currentasknew_B defb "Enter new value (0 or 1): ", 0
00002968: 72 20 6E 65 ; 
0000296C: 77 20 76 61 ; 
00002970: 6C 75 65 20 ; 
00002974: 28 30 20 6F ; 
00002978: 72 20 31 29 ; 
0000297C: 3A 20 00    ; 
0000297F: 45 72 72 6F ; currentasknew_E defb "Error invalid re-enter: ", 0
00002983: 72 20 69 6E ; 
00002987: 76 61 6C 69 ; 
0000298B: 64 20 72 65 ; 
0000298F: 2D 65 6E 74 ; 
00002993: 65 72 3A 20 ; 
00002997: 00          ; 
00002998: 49 6E 76 61 ; currentarrerr   defb "Invalid value entered re-enter: ", 0
0000299C: 6C 69 64 20 ; 
000029A0: 76 61 6C 75 ; 
000029A4: 65 20 65 6E ; 
000029A8: 74 65 72 65 ; 
000029AC: 64 20 72 65 ; 
000029B0: 2D 65 6E 74 ; 
000029B4: 65 72 3A 20 ; 
000029B8: 00          ; 
000029B9: 49 6E 76 61 ; changearrsizmsg defb "Invalid, x >= y.", nl, 0
000029BD: 6C 69 64 2C ; 
000029C1: 20 78 20 3E ; 
000029C5: 3D 20 79 2E ; 
000029C9: 0A 00       ; 
000029CB: 49 6E 76 61 ; changeittere_m  defb "Invalid itter value. Re-enter: ", nl, 0
000029CF: 6C 69 64 20 ; 
000029D3: 69 74 74 65 ; 
000029D7: 72 20 76 61 ; 
000029DB: 6C 75 65 2E ; 
000029DF: 20 52 65 2D ; 
000029E3: 65 6E 74 65 ; 
000029E7: 72 3A 20 0A ; 
000029EB: 00          ; 
000029EC: 45 6E 74 65 ; getitters_m     defb "Enter the max itterations (1-255): ", 0
000029F0: 72 20 74 68 ; 
000029F4: 65 20 6D 61 ; 
000029F8: 78 20 69 74 ; 
000029FC: 74 65 72 61 ; 
00002A00: 74 69 6F 6E ; 
00002A04: 73 20 28 31 ; 
00002A08: 2D 32 35 35 ; 
00002A0C: 29 3A 20 00 ; 
00002A10:             ; 
00002A10: 43 75 72 72 ; currentset_m    defb "Current settings: (", 0
00002A14: 65 6E 74 20 ; 
00002A18: 73 65 74 74 ; 
00002A1C: 69 6E 67 73 ; 
00002A20: 3A 20 28 00 ; 
00002A24:             ; ;;Current settings (stepMode_d: On/Off  slowMode_d: On/Off  eraseMode_d: On/Off  Dims_d:(x,y)
00002A24:             ; ;;                  Range:(x,y)  Alive_c:X  Dead_c:Y  Ptr_c:Z  Itters:xx  EwD:On/Off)
00002A24:             ; 
00002A24:             ; ;;debug for heap
00002A24: 50 72 69 6E ; printFree_m     defb "Printing free list", nl
00002A28: 74 69 6E 67 ; 
00002A2C: 20 66 72 65 ; 
00002A30: 65 20 6C 69 ; 
00002A34: 73 74 0A    ; 
00002A37: 46 6F 75 6E ; printfree_f_m   defb "Found a new free item", nl, 0
00002A3B: 64 20 61 20 ; 
00002A3F: 6E 65 77 20 ; 
00002A43: 66 72 65 65 ; 
00002A47: 20 69 74 65 ; 
00002A4B: 6D 0A 00    ; 
00002A4E: 41 64 64 72 ; printfree_f_mad defb "Address: ", 0
00002A52: 65 73 73 3A ; 
00002A56: 20 00       ; 
00002A58: 4E 65 78 74 ; printfree_f_mnx defb "Next   : ", 0
00002A5C: 20 20 20 3A ; 
00002A60: 20 00       ; 
00002A62: 50 72 65 76 ; printfree_f_mpr defb "Prev   : ", 0
00002A66: 20 20 20 3A ; 
00002A6A: 20 00       ; 
00002A6C: 53 69 7A 65 ; printfree_f_msz defb "Size   : ", 0
00002A70: 20 20 20 3A ; 
00002A74: 20 00       ; 
00002A76: 5B 5B 21 21 ; printFree_m_e   defb "[[!!]] Error circular Crate found. Ending printFree [[!!]]", nl, 0
00002A7A: 5D 5D 20 45 ; 
00002A7E: 72 72 6F 72 ; 
00002A82: 20 63 69 72 ; 
00002A86: 63 75 6C 61 ; 
00002A8A: 72 20 43 72 ; 
00002A8E: 61 74 65 20 ; 
00002A92: 66 6F 75 6E ; 
00002A96: 64 2E 20 45 ; 
00002A9A: 6E 64 69 6E ; 
00002A9E: 67 20 70 72 ; 
00002AA2: 69 6E 74 46 ; 
00002AA6: 72 65 65 20 ; 
00002AAA: 5B 5B 21 21 ; 
00002AAE: 5D 5D 0A 00 ; 
00002AB2:             ; 
00002AB2: 50 72 69 6E ; printAll_m      defb "Printing all elements in the heap", nl, 0
00002AB6: 74 69 6E 67 ; 
00002ABA: 20 61 6C 6C ; 
00002ABE: 20 65 6C 65 ; 
00002AC2: 6D 65 6E 74 ; 
00002AC6: 73 20 69 6E ; 
00002ACA: 20 74 68 65 ; 
00002ACE: 20 68 65 61 ; 
00002AD2: 70 0A 00    ; 
00002AD5: 54 68 69 73 ; printAll_m_f    defb "This is a Free block", nl, 0
00002AD9: 20 69 73 20 ; 
00002ADD: 61 20 46 72 ; 
00002AE1: 65 65 20 62 ; 
00002AE5: 6C 6F 63 6B ; 
00002AE9: 0A 00       ; 
00002AEB: 54 68 69 73 ; printAll_m_t    defb "This is a Taken block", nl, 0
00002AEF: 20 69 73 20 ; 
00002AF3: 61 20 54 61 ; 
00002AF7: 6B 65 6E 20 ; 
00002AFB: 62 6C 6F 63 ; 
00002AFF: 6B 0A 00    ; 
00002B02: 5B 5B 21 21 ; printAll_m_e    defb "[[!!]] Error circular crate found, NO LONGER PRINTING FREE CLASSIFIERS [[
00002B06: 5D 5D 20 45 ; !!]]", nl, 0
00002B0A: 72 72 6F 72 ; 
00002B0E: 20 63 69 72 ; 
00002B12: 63 75 6C 61 ; 
00002B16: 72 20 63 72 ; 
00002B1A: 61 74 65 20 ; 
00002B1E: 66 6F 75 6E ; 
00002B22: 64 2C 20 4E ; 
00002B26: 4F 20 4C 4F ; 
00002B2A: 4E 47 45 52 ; 
00002B2E: 20 50 52 49 ; 
00002B32: 4E 54 49 4E ; 
00002B36: 47 20 46 52 ; 
00002B3A: 45 45 20 43 ; 
00002B3E: 4C 41 53 53 ; 
00002B42: 49 46 49 45 ; 
00002B46: 52 53 20 5B ; 
00002B4A: 5B 21 21 5D ; 
00002B4E: 5D 0A 00    ; 
00002B51:             ; 
00002B51: 48 65 72 65 ; printHeap_end_m defb "Here's the heap at the end of the program!", nl, 0
00002B55: 27 73 20 74 ; 
00002B59: 68 65 20 68 ; 
00002B5D: 65 61 70 20 ; 
00002B61: 61 74 20 74 ; 
00002B65: 68 65 20 65 ; 
00002B69: 6E 64 20 6F ; 
00002B6D: 66 20 74 68 ; 
00002B71: 65 20 70 72 ; 
00002B75: 6F 67 72 61 ; 
00002B79: 6D 21 0A 00 ; 
00002B7D:             ; 
00002B7D: 4D 61 6C 6C ; malloc_panic    defb "Malloc failed, cannot recover. Please consider reporting this to your nea
00002B81: 6F 63 20 66 ; rest duck", nl, 0
00002B85: 61 69 6C 65 ; 
00002B89: 64 2C 20 63 ; 
00002B8D: 61 6E 6E 6F ; 
00002B91: 74 20 72 65 ; 
00002B95: 63 6F 76 65 ; 
00002B99: 72 2E 20 50 ; 
00002B9D: 6C 65 61 73 ; 
00002BA1: 65 20 63 6F ; 
00002BA5: 6E 73 69 64 ; 
00002BA9: 65 72 20 72 ; 
00002BAD: 65 70 6F 72 ; 
00002BB1: 74 69 6E 67 ; 
00002BB5: 20 74 68 69 ; 
00002BB9: 73 20 74 6F ; 
00002BBD: 20 79 6F 75 ; 
00002BC1: 72 20 6E 65 ; 
00002BC5: 61 72 65 73 ; 
00002BC9: 74 20 64 75 ; 
00002BCD: 63 6B 0A 00 ; 
00002BD1: 48 65 61 70 ; heapNotEmpty_m  defb "Heap is not empty i.e. freelist[0].next != 0 || freelist[0].size + freeli
00002BD5: 20 69 73 20 ; st[0].addr + 12 != HEAPEND\nIf you are not James please regard this as an intended feature. If 
00002BD9: 6E 6F 74 20 ; you are James please fix :)", nl, 0
00002BDD: 65 6D 70 74 ; 
00002BE1: 79 20 69 2E ; 
00002BE5: 65 2E 20 66 ; 
00002BE9: 72 65 65 6C ; 
00002BED: 69 73 74 5B ; 
00002BF1: 30 5D 2E 6E ; 
00002BF5: 65 78 74 20 ; 
00002BF9: 21 3D 20 30 ; 
00002BFD: 20 7C 7C 20 ; 
00002C01: 66 72 65 65 ; 
00002C05: 6C 69 73 74 ; 
00002C09: 5B 30 5D 2E ; 
00002C0D: 73 69 7A 65 ; 
00002C11: 20 2B 20 66 ; 
00002C15: 72 65 65 6C ; 
00002C19: 69 73 74 5B ; 
00002C1D: 30 5D 2E 61 ; 
00002C21: 64 64 72 20 ; 
00002C25: 2B 20 31 32 ; 
00002C29: 20 21 3D 20 ; 
00002C2D: 48 45 41 50 ; 
00002C31: 45 4E 44 0A ; 
00002C35: 49 66 20 79 ; 
00002C39: 6F 75 20 61 ; 
00002C3D: 72 65 20 6E ; 
00002C41: 6F 74 20 4A ; 
00002C45: 61 6D 65 73 ; 
00002C49: 20 70 6C 65 ; 
00002C4D: 61 73 65 20 ; 
00002C51: 72 65 67 61 ; 
00002C55: 72 64 20 74 ; 
00002C59: 68 69 73 20 ; 
00002C5D: 61 73 20 61 ; 
00002C61: 6E 20 69 6E ; 
00002C65: 74 65 6E 64 ; 
00002C69: 65 64 20 66 ; 
00002C6D: 65 61 74 75 ; 
00002C71: 72 65 2E 20 ; 
00002C75: 49 66 20 79 ; 
00002C79: 6F 75 20 61 ; 
00002C7D: 72 65 20 4A ; 
00002C81: 61 6D 65 73 ; 
00002C85: 20 70 6C 65 ; 
00002C89: 61 73 65 20 ; 
00002C8D: 66 69 78 20 ; 
00002C91: 3A 29 0A 00 ; 
00002C95: 48 65 61 70 ; heapEmpty_m     defb "Heap is empty! SUCCESS!", nl, 0
00002C99: 20 69 73 20 ; 
00002C9D: 65 6D 70 74 ; 
00002CA1: 79 21 20 53 ; 
00002CA5: 55 43 43 45 ; 
00002CA9: 53 53 21 0A ; 
00002CAD: 00          ; 
00002CAE: 41 74 74 65 ; free_m_addr     defb "Attempting to free address: ", 0
00002CB2: 6D 70 74 69 ; 
00002CB6: 6E 67 20 74 ; 
00002CBA: 6F 20 66 72 ; 
00002CBE: 65 65 20 61 ; 
00002CC2: 64 64 72 65 ; 
00002CC6: 73 73 3A 20 ; 
00002CCA: 00          ; 
00002CCB: 5B 5B 21 21 ; free_m_zero     defb "[[!!]] Info: Free was given a null ptr", nl, 0
00002CCF: 5D 5D 20 49 ; 
00002CD3: 6E 66 6F 3A ; 
00002CD7: 20 46 72 65 ; 
00002CDB: 65 20 77 61 ; 
00002CDF: 73 20 67 69 ; 
00002CE3: 76 65 6E 20 ; 
00002CE7: 61 20 6E 75 ; 
00002CEB: 6C 6C 20 70 ; 
00002CEF: 74 72 0A 00 ; 
00002CF3:             ; 
00002CF3: 46 61 69 6C ; updatergrid_m_f defb "Failed to update grids, one or more are null", nl, 0
00002CF7: 65 64 20 74 ; 
00002CFB: 6F 20 75 70 ; 
00002CFF: 64 61 74 65 ; 
00002D03: 20 67 72 69 ; 
00002D07: 64 73 2C 20 ; 
00002D0B: 6F 6E 65 20 ; 
00002D0F: 6F 72 20 6D ; 
00002D13: 6F 72 65 20 ; 
00002D17: 61 72 65 20 ; 
00002D1B: 6E 75 6C 6C ; 
00002D1F: 0A 00       ; 
00002D21:             ; 
00002D21: 4F 4E 00    ; on_msg          defb "ON", 0
00002D24: 4F 46 46 00 ; off_msg         defb "OFF", 0
00002D28: 2C 00       ; comma           defb ",", 0
00002D2A:             ; 
00002D2C:             ; align
00002D2C: 00000000    ; heapstart       defw 0 ;;points to the end of the data this is where the heap can then begin
00002D30:             ; Remaining literals

Symbol Table: Labels
: max_addr                          00100000  Value
: stack_size                        00010000  Value
: nl                                0000000A  Value
: backspace                         00000008  Value
: minBuffSize                       00000008  Value
: enter                             0000000A  Value
: minSaveSize                       00000008  Value
: sizeofSaveI                       0000000C  Value
: heaphead                          00000004  Local -- ARM
: offsets                           00000008  Local -- ARM
: gridA                             00000048  Local -- ARM
: gridB                             0000004C  Local -- ARM
: erase_b                           00000050  Local -- ARM
: slow_b                            00000051  Local -- ARM
: step_b                            00000052  Local -- ARM
: width                             00000053  Local -- ARM
: height                            00000054  Local -- ARM
: range_min                         00000055  Local -- ARM
: range_max                         00000056  Local -- ARM
: maxitters                         00000057  Local -- ARM
: drawerase_b                       00000058  Local -- ARM
: alive_c                           00000059  Local -- ARM
: dead_c                            0000005A  Local -- ARM
: ptr_c                             0000005B  Local -- ARM
: erase_b_d                         0000005C  Local -- ARM
: slow_b_d                          0000005D  Local -- ARM
: step_b_d                          0000005E  Local -- ARM
: width_d                           0000005F  Local -- ARM
: height_d                          00000060  Local -- ARM
: _start                            00000064  Local -- ARM
: main                              00000094  Local -- ARM
: mainmenu                          000000C8  Local -- ARM
: mainchoice                        000000E0  Local -- ARM
: showHeap                          00000128  Local -- ARM
: mainloopstart                     00000130  Local -- ARM
: mainloop                          00000164  Local -- ARM
: mainloopcont                      00000188  Local -- ARM
: mainloopdostep                    000001A4  Local -- ARM
: mainloopskipstep                  000001DC  Local -- ARM
: gridFail                          00000200  Local -- ARM
: mainMallocFail                    0000020C  Local -- ARM
: mainEnd                           0000021C  Local -- ARM
: assertheapempty                   00000240  Local -- ARM
: assertionfail                     00000280  Local -- ARM
: assertionsuccess                  00000290  Local -- ARM
: mainEndEnd                        0000029C  Local -- ARM
: mainfree                          000002A8  Local -- ARM
: mainfreeloop                      000002C0  Local -- ARM
: mainfreelend                      000002F8  Local -- ARM
: mainfreeend                       00000308  Local -- ARM
: printcurrentsettinglist           00000310  Local -- ARM
: printcurrentsettings              0000034C  Local -- ARM
: settingsmenu                      00000510  Local -- ARM
: changesetting                     00000540  Local -- ARM
: changesettingget                  00000550  Local -- ARM
: changesettingserr                 00000594  Local -- ARM
: changesettingsmallocfail          000005A4  Local -- ARM
: changesettingscont                000005B4  Local -- ARM
: jumps                             000005C0  Local -- ARM
: getjump                           000005E0  Local -- ARM
: changearr                         00000634  Local -- ARM
: changearrget                      00000648  Local -- ARM
: changearrsizeerr                  00000694  Local -- ARM
: changearrset                      000006A4  Local -- ARM
: changearrmallocerr                000006BC  Local -- ARM
: changearrend                      000006C4  Local -- ARM
: changearrendend                   000006C8  Local -- ARM
: changearrgetvalidint              000006D0  Local -- ARM
: changearrgetvalidintget           000006D4  Local -- ARM
: changearrgetvalidinterr           0000070C  Local -- ARM
: changearrgetvalidintcont          00000720  Local -- ARM
: changearrgvmallocerr              00000734  Local -- ARM
: changearrgetvalidintend           0000073C  Local -- ARM
: changearrgvendend                 00000744  Local -- ARM
: printdims                         0000074C  Local -- ARM
: changestep                        000007A0  Local -- ARM
: changeslow                        000007B8  Local -- ARM
: changeerase                       000007D0  Local -- ARM
: changebool                        000007E8  Local -- ARM
: changebool_cont                   00000824  Local -- ARM
: changebool_set                    00000850  Local -- ARM
: changeboolend                     00000880  Local -- ARM
: changedims                        00000888  Local -- ARM
: changedimscont                    000008B8  Local -- ARM
: changerange                       000008BC  Local -- ARM
: changerangecont                   000008EC  Local -- ARM
: changeicons                       000008F0  Local -- ARM
: changeiconsmallerr                0000093C  Local -- ARM
: printicons                        0000094C  Local -- ARM
: printiconsend                     000009A0  Local -- ARM
: changeitter                       000009A4  Local -- ARM
: changeitterget                    000009C8  Local -- ARM
: changeittergetcont                000009F0  Local -- ARM
: changeittererr                    00000A28  Local -- ARM
: changeitterend                    00000A3C  Local -- ARM
: changedrawerase                   00000A54  Local -- ARM
: changedraweraseend                00000A6C  Local -- ARM
: newboard                          00000A70  Local -- ARM
: newboardcont                      00000A98  Local -- ARM
: loadboard                         00000AC0  Local -- ARM
: loadboardaskindex                 00000AD4  Local -- ARM
: loadboardaskindexcont             00000B08  Local -- ARM
: loadboardindex                    00000B50  Local -- ARM
: loadboardmain                     00000B6C  Local -- ARM
: loadboardmallocB                  00000BB8  Local -- ARM
: loadboardskipB                    00000BD4  Local -- ARM
: loadboardmallocfail               00000BF4  Local -- ARM
: loadboardret                      00000C04  Local -- ARM
: loadboardempty                    00000C10  Local -- ARM
: loadboarderr                      00000C10  Local -- ARM
: loadboardsucc                     00000C14  Local -- ARM
: newline                           00000C18  Local -- ARM
: step                              00000C24  Local -- ARM
: stepcont                          00000C78  Local -- ARM
: stependfail                       00000CB4  Local -- ARM
: stependsucc                       00000CBC  Local -- ARM
: stepend                           00000CC0  Local -- ARM
: listGrids                         00000CC8  Local -- ARM
: listGridsLoop                     00000CFC  Local -- ARM
: listGridsEmpty                    00000D90  Local -- ARM
: listGridsLend                     00000D9C  Local -- ARM
: listGridsEnd                      00000D9C  Local -- ARM
: saveGrid                          00000DA4  Local -- ARM
: saveGridResize                    00000DC8  Local -- ARM
: saveGridAdd                       00000E00  Local -- ARM
: saveGridFailMalloc                00000E68  Local -- ARM
: saveGridSucc                      00000E70  Local -- ARM
: saveGridEnd                       00000E74  Local -- ARM
: erase                             00000E7C  Local -- ARM
: eraseloop                         00000E80  Local -- ARM
: eraseend                          00000E98  Local -- ARM
: slow                              00000E9C  Local -- ARM
: slowloop                          00000EA4  Local -- ARM
: slowend                           00000EC4  Local -- ARM
: heapclean                         00000EC8  Local -- ARM
: heapcleanloop                     00000EE4  Local -- ARM
: heapcleanend                      00000EF8  Local -- ARM
: strlen                            00000EFC  Local -- ARM
: strlenloop                        00000F08  Local -- ARM
: strlenend                         00000F1C  Local -- ARM
: strtoi                            00000F24  Local -- ARM
: strtoiloop                        00000F64  Local -- ARM
: strtoilend                        00000F98  Local -- ARM
: strtoifailminus                   00000FA0  Local -- ARM
: strtoifailoutrange                00000FA8  Local -- ARM
: strtoifailnonnum                  00000FB0  Local -- ARM
: strtoiendfail                     00000FB4  Local -- ARM
: strtoiendsucc                     00000FBC  Local -- ARM
: strtoiend                         00000FC0  Local -- ARM
: memcpy                            00000FC8  Local -- ARM
: memcpywordsloop                   00000FF0  Local -- ARM
: memcpywordslend                   00001008  Local -- ARM
: memcpyallbytes                    00001018  Local -- ARM
: memcpybytes                       00001024  Local -- ARM
: memcpybytesloop                   00001028  Local -- ARM
: memcpybyteslend                   00001040  Local -- ARM
: memcpyend                         00001044  Local -- ARM
: getstring                         0000104C  Local -- ARM
: getstringloop                     00001080  Local -- ARM
: getstringloopskipsize             00001090  Local -- ARM
: skipMax                           000010A4  Local -- ARM
: getstringlcont                    000010B0  Local -- ARM
: getstringresize                   000010C8  Local -- ARM
: getstringlend                     00001100  Local -- ARM
: getstringResizeEnd                0000110C  Local -- ARM
: getstringErr                      00001144  Local -- ARM
: getstringEnd                      0000114C  Local -- ARM
: getstringEndEnd                   00001158  Local -- ARM
: tolower                           00001160  Local -- ARM
: setupGrid                         00001168  Local -- ARM
: setupGridAsk                      000011D0  Local -- ARM
: setupdrawing                      00001200  Local -- ARM
: setuprandom                       00001214  Local -- ARM
: setupstart                        00001248  Local -- ARM
: setuprowloop                      0000124C  Local -- ARM
: setupcolloop                      00001258  Local -- ARM
: dorandom                          0000126C  Local -- ARM
: dodrawstart                       00001280  Local -- ARM
: dodraw                            00001298  Local -- ARM
: dodrawfail                        000012F4  Local -- ARM
: dodrawsucc                        00001304  Local -- ARM
: dodrawsuccskiperase               00001330  Local -- ARM
: setupcollcont                     00001338  Local -- ARM
: setupcollend                      00001348  Local -- ARM
: setuprowlend                      00001350  Local -- ARM
: setupGridFail                     00001358  Local -- ARM
: setupGridEnd                      00001368  Local -- ARM
: drawgrid                          00001370  Local -- ARM
: drawgridrowloop                   00001394  Local -- ARM
: drawgridcolloop                   000013A0  Local -- ARM
: drawgridprintcurrent              000013DC  Local -- ARM
: drawgridcollcont                  000013EC  Local -- ARM
: drawgridcollend                   000013FC  Local -- ARM
: drawgridrowlend                   00001410  Local -- ARM
: drawgridend                       00001418  Local -- ARM
: printoptions                      00001420  Local -- ARM
: setupOptions                      000014F0  Local -- ARM
: setupOptionsDEnd                  0000159C  Local -- ARM
: setupCustom                       000015A8  Local -- ARM
: setupCustomskipslow               0000166C  Local -- ARM
: printrange                        00001680  Local -- ARM
: setupCustomDimsCheck              000016C8  Local -- ARM
: getwid                            000016E0  Local -- ARM
: getwidFail                        0000174C  Local -- ARM
: getheisetup                       00001760  Local -- ARM
: gethei                            00001770  Local -- ARM
: getheiFail                        000017D8  Local -- ARM
: customfail                        000017F0  Local -- ARM
: customend                         00001800  Local -- ARM
: customret                         00001804  Local -- ARM
: updategrid                        0000180C  Local -- ARM
: updategridrowloop                 00001844  Local -- ARM
: updategridcolloop                 00001850  Local -- ARM
: updatealive                       00001878  Local -- ARM
: updatedead                        00001894  Local -- ARM
: updatelcont                       000018A4  Local -- ARM
: updategridccollend                000018AC  Local -- ARM
: updategridfail                    000018B8  Local -- ARM
: updategridrowlend                 000018C4  Local -- ARM
: updategridend                     000018C4  Local -- ARM
: countneighbours                   000018CC  Local -- ARM
: countneighboursloop               000018F8  Local -- ARM
: countneighboursskipadd            0000193C  Local -- ARM
: countneighbourslend               00001940  Local -- ARM
: countneighboursend                00001940  Local -- ARM
: isinrange                         0000194C  Local -- ARM
: isinrangefail                     00001990  Local -- ARM
: isinrangeend                      00001994  Local -- ARM
: setupHeap                         00001998  Local -- ARM
: malloc                            000019CC  Local -- ARM
: mallignend                        000019E8  Local -- ARM
: checkcrate                        000019FC  Local -- ARM
: nextcrate                         00001A18  Local -- ARM
: cratelend                         00001A2C  Local -- ARM
: nocrates                          00001A3C  Local -- ARM
: foundcrate                        00001A44  Local -- ARM
: splitcrate                        00001A54  Local -- ARM
: usecrate                          00001A88  Local -- ARM
: mallocEnd                         00001AAC  Local -- ARM
: printHeap                         00001AB4  Local -- ARM
: printHeapend                      00001AC0  Local -- ARM
: printAll                          00001AC8  Local -- ARM
: printAllLoop                      00001AE8  Local -- ARM
: printAllLoopSkipWarning           00001B0C  Local -- ARM
: printAllLoopCont                  00001B2C  Local -- ARM
: printAllLend                      00001B4C  Local -- ARM
: printAllEnd                       00001B4C  Local -- ARM
: printFree                         00001B54  Local -- ARM
: printFreeloop                     00001B6C  Local -- ARM
: printFreelend                     00001BA4  Local -- ARM
: printFreeErr                      00001BA8  Local -- ARM
: printFreeEnd                      00001BB4  Local -- ARM
: printblock                        00001BBC  Local -- ARM
: free                              00001C50  Local -- ARM
: freeloop                          00001C6C  Local -- ARM
: freelend                          00001C88  Local -- ARM
: freelendEnd                       00001CA8  Local -- ARM
: freeMergeCheck                    00001CB0  Local -- ARM
: verifyLeft                        00001CC0  Local -- ARM
: verifyRight                       00001CD4  Local -- ARM
: merge                             00001CE8  Local -- ARM
: mergeNew                          00001D1C  Local -- ARM
: freeEndZero                       00001D20  Local -- ARM
: freeEnd                           00001D2C  Local -- ARM
: welcomemsg                        00001D34  Local -- ARM
: welcome2msg                       00001D68  Local -- ARM
: mainchoicefail                    00001DAD  Local -- ARM
: mainendmsg                        00001E44  Local -- ARM
: askdefaults                       00001E6B  Local -- ARM
: askerase                          00001E9D  Local -- ARM
: askslow                           00001EB6  Local -- ARM
: askstep                           00001ECE  Local -- ARM
: stepslowwarning                   00001EE6  Local -- ARM
: savedchoice                       00001F33  Local -- ARM
: askname                           00001F5E  Local -- ARM
: warneraseslow                     00001F81  Local -- ARM
: askwid                            00001FBF  Local -- ARM
: dash                              00001FD6  Local -- ARM
: b_close_colon                     00001FD8  Local -- ARM
: askhei                            00001FDC  Local -- ARM
: getwidfailmsg                     00001FF3  Local -- ARM
: getheifailmsg                     0000201F  Local -- ARM
: stepmode_m                        0000204C  Local -- ARM
: optionsp_1                        000020DD  Local -- ARM
: optionsp_2                        000020F5  Local -- ARM
: optionsp_3                        000020F8  Local -- ARM
: optionsp_4                        00002104  Local -- ARM
: optionsp_5                        00002110  Local -- ARM
: mainloopittsmsg                   0000211B  Local -- ARM
: askgenoption                      000021BB  Local -- ARM
: setupGrdFailmsg                   000021F4  Local -- ARM
: askseed                           00002255  Local -- ARM
: drawinfomsg                       00002281  Local -- ARM
: drawfailmsg                       000022D7  Local -- ARM
: gridfailmsg                       00002314  Local -- ARM
: gridsavefail                      0000234E  Local -- ARM
: gridloadempty                     00002386  Local -- ARM
: gridloadpindex                    000023E1  Local -- ARM
: gridloadpname                     000023EA  Local -- ARM
: gridloadpwidth                    000023F2  Local -- ARM
: gridloadpheight                   000023FB  Local -- ARM
: loadboardaski                     00002405  Local -- ARM
: loadboardretmsg                   00002477  Local -- ARM
: loadboardifail                    0000248F  Local -- ARM
: loadboardirerr                    000024B2  Local -- ARM
: loadboardmlcerr                   000024CF  Local -- ARM
: loadboardsucmsg                   0000250F  Local -- ARM
: listgridmsg                       0000252D  Local -- ARM
: cutoff                            00002550  Local -- ARM
: changearrverr_m                   00002563  Local -- ARM
: s_m1                              0000259C  Local -- ARM
: s_m2                              0000262D  Local -- ARM
: s_m3                              00002691  Local -- ARM
: s_m4                              00002742  Local -- ARM
: s_m                               0000279D  Local -- ARM
: s_m_err                           000027F9  Local -- ARM
: currentslow                       00002819  Local -- ARM
: currenterase                      00002822  Local -- ARM
: currentstep                       0000282C  Local -- ARM
: currentDims                       00002835  Local -- ARM
: currentRange                      0000283C  Local -- ARM
: currentItters                     00002844  Local -- ARM
: currentdraweras                   0000284D  Local -- ARM
: bracket_open                      00002862  Local -- ARM
: comma_space                       00002864  Local -- ARM
: bracket_close                     00002867  Local -- ARM
: currenticons_1                    00002869  Local -- ARM
: currenticons_2                    00002871  Local -- ARM
: currenticons_3                    00002878  Local -- ARM
: currenticons_a                    0000287E  Local -- ARM
: mallocerr_m                       000028D2  Local -- ARM
: getstringerr_m                    000028F4  Local -- ARM
: currentitter                      00002921  Local -- ARM
: currentaskx                       0000292A  Local -- ARM
: currentasky                       0000293E  Local -- ARM
: currentasknew                     00002952  Local -- ARM
: currentasknew_B                   00002964  Local -- ARM
: currentasknew_E                   0000297F  Local -- ARM
: currentarrerr                     00002998  Local -- ARM
: changearrsizmsg                   000029B9  Local -- ARM
: changeittere_m                    000029CB  Local -- ARM
: getitters_m                       000029EC  Local -- ARM
: currentset_m                      00002A10  Local -- ARM
: printFree_m                       00002A24  Local -- ARM
: printfree_f_m                     00002A37  Local -- ARM
: printfree_f_mad                   00002A4E  Local -- ARM
: printfree_f_mnx                   00002A58  Local -- ARM
: printfree_f_mpr                   00002A62  Local -- ARM
: printfree_f_msz                   00002A6C  Local -- ARM
: printFree_m_e                     00002A76  Local -- ARM
: printAll_m                        00002AB2  Local -- ARM
: printAll_m_f                      00002AD5  Local -- ARM
: printAll_m_t                      00002AEB  Local -- ARM
: printAll_m_e                      00002B02  Local -- ARM
: printHeap_end_m                   00002B51  Local -- ARM
: malloc_panic                      00002B7D  Local -- ARM
: heapNotEmpty_m                    00002BD1  Local -- ARM
: heapEmpty_m                       00002C95  Local -- ARM
: free_m_addr                       00002CAE  Local -- ARM
: free_m_zero                       00002CCB  Local -- ARM
: updatergrid_m_f                   00002CF3  Local -- ARM
: on_msg                            00002D21  Local -- ARM
: off_msg                           00002D24  Local -- ARM
: comma                             00002D28  Local -- ARM
: heapstart                         00002D2C  Local -- ARM
